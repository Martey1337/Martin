//======================================German Next Era Life=========================================
//=========================================Copy Right================================================
//H4cked by Deadmauuuuuuuuuuuuuuuuuu5
//===================================================================================================
//========================================Updates====================================================
//=======================================15.01.2012==================================================
// /admins wurde geändert == /startbonus Verbessert == Gangfight / Fraktionsautohaus hinzugefügt
// /veh und /dtc Entbuggt == Ballas Armor Entbuggt = /frakmats wurde entbuggt = Diese Sachen wurden                           ===
// von [GnE]Julian gescriptet (Entbuggt).                                                                                     = =
//=======================================Updates======================================================                        = =
//=======================================16.01.2012===================================================                       ===== =======
/*       ========================  =                =  =====================  ==================  = =================                 =
		 =                         = =              =  =                   =  =                   =                  =       =====    =
		 =                         =  =             =  =                   =  =                   =                  =       =====    =
		 =                         =   =            =  =                   =  =                   =                  =       =====    =
		 =                         =    =           =  =                   =  =                   =                  =       =====    =
    	 =                         =     =          =  =                   =  =                   =                  =       =====    =
		 =                         =      =         =  =                   =  =                   =                  =       =====    =
		 =                         =       =        =  =                   =  ==================  =                  =       =====    =
		 =                         =        =       =  =====================  =                   =                  =       =====    =
		 = = = = = = == = = = =    =         =      =  = =                    =                   =                  =       =====    =
		 =                     =   =          =     =  =  =                   =                   =                  =       =====    =
		 =                     =   =           =    =  =   =                  =                   =                  =       =====    =
		 =                     =   =            =   =  =    =                 =                   =                  =       =====    =
		 =                     =   =             =  =  =     =                =                   =                  =       =====    =
		 =                     =   =              = =  =      =               =                   =                  =       =====    =
		 =======================   =               ==  =       =              = ================  = =================        =====    =
*/

//========================================INCLUDES=========================================
#include <a_samp>
#include <a_npc>
#include <core>
#include <float>
#include <time>
#include <dini>
#include <file>
#include <utils>
#include <morphinc>
#include <M_Bot>
#include <streamer>
#include <w_baum>
#include <ocmd>
#include <Desk>
#include bfx_objects
#pragma dynamic 8192
#pragma tabsize 0

static gTeam[MAX_PLAYERS];

#define DIALOG_SERVICE              23244
#define DIALOG_DESKKICK			    23243
#define DIALOG_FBIUNIFORM           23242
#define DIALOG_FBIEQUIP             23241
#define DIALOG_ZOLLCONTROL          23240
#define DIALOG_ZOLLCONTROL2         23239
#define DIALOG_WEQUIP               23238
#define DIALOG_ARBOBJ              	23237 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_AUSGEWAEHLT          23236 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_ALLG                 23235 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_OBJINPUT             23234 // Wenn im Script bereits definiert Zahlenwert ändern
#define MAX_Objekt 					50 // Deine Maximale Objekt Anzahl
#define NAME                        MAX_PLAYER_NAME
#define Aktiv_3DText				 // Ausklammern falls unerwünscht

#define	MAX_DESKTOP_TIME 60
new Desktop_Check[MAX_PLAYERS];
new Desktop_Status[MAX_PLAYERS];
new Desktop_Timer[MAX_PLAYERS];
new Desktop_Timer_Started[MAX_PLAYERS];

new UCL[MAX_PLAYERS];
new Sperre[MAX_PLAYERS][MAX_Objekt], sperrespawned[MAX_PLAYERS]; // Barriere, Objekt Anzahl
#if defined Aktiv_3DText
	new Text3D:SperreLabel[MAX_PLAYERS][MAX_Objekt]; // 3D TextLabel
#endif
new Float:pX, Float:pY, Float:pZ, Float:pR; // Positionen, Blickrichtung
new stringx[128]; // Allgemeiner String
new Objekt[MAX_PLAYERS]; // Auswahl des Objektes
new ObjektID[MAX_PLAYERS]; // Die eigen Einstellbare Objekt ID
new	PlayerText3D:WantedLabel[MAX_PLAYERS];

new testphase=0;

#define MAX_FUELSTATION 20 //
enum tInfo
{
	tOwned,
	tOwner[64],
	tMessage[128],
	tExtortion[MAX_PLAYER_NAME],
	Float:tEntranceX,
	Float:tEntranceY,
	Float:tEntranceZ,
	tLevelNeeded,
	tBuyPrice,
	tEntranceCost,
	tTill,
	tLocked,
	tInterior,
	tProducts,
	tMaxProducts,
	tPriceProd,
};

new TankeInfo[MAX_FUELSTATION][tInfo];
new Text3D: text_tanke[MAX_FUELSTATION];
new tankestring[500];

/********************************************************************************************************************/
//============================================ 0.3c DEFINITIONEN ====================================================
/********************************************************************************************************************/
#define COL_EASY             "{FFF1AF}"
#define COL_WHITE            "{FFFFFF}"
#define COL_BLACK            "{0E0101}"
#define COL_GREY             "{C3C3C3}"
#define COL_GREEN            "{6EF83C}"
#define COL_DARKGREEN        "{009933}"
#define COL_RED              "{F81414}"
#define COL_YELLOW           "{F3FF02}"
#define COL_ORANGE           "{FFAF00}"
#define COL_LIME             "{B7FF00}"
#define COL_CYAN             "{00FFEE}"
#define COL_LIGHTBLUE        "{00C0FF}"
#define COL_BLUE             "{0049FF}"
#define COL_MAGENTA          "{F300FF}"
#define COL_VIOLET           "{B700FF}"
#define COL_PINK             "{FF00EA}"
#define COL_MARONE           "{A90202}"
#define COL_CMD              "{B8FF02}"
#define COL_PARAM          	 "{3FCD02}"
#define COL_SERVER           "{AFE7FF}"
#define COL_VALUE         	 "{A3E4FF}"
#define COL_RULE          	 "{F9E8B7}"
#define COL_RULE2        	 "{FBDF89}"
#define COL_RWHITE        	 "{FFFFFF}"
#define COL_LGREEN        	 "{C9FFAB}"
#define COL_LRED			 "{FFA1A1}"
#define COL_LRED2         	 "{C77D87}"



#define TIME_to_HIDE 8000
new Text:TdHeadline, Text:TdHGinfo, Text:TdSpielerName, Text:TdNachricht, Text:TdTrennung, Text:TdSpielerIP, Text:TdSpielerPing;
new Text:DiscHeadline, Text:DiscHGinfo, Text:DiscSpielerName, Text:DiscNachricht;
//=================================================
//================================================= Gangfight
#define FS_COL_GREY         	(0xAFAFAFAA)
#define FS_COL_YELLOW       	(0xFFFF00FF)
forward Fight_Init();
forward Fight_Close();
forward FightUpdate_1();
forward FightUpdate_2();
enum fsSyS{
	Float:fsMinX,
	Float:fsMinY,
	Float:fsMaxX,
	Float:fsMaxY,
	Float:fsCTFx,
	Float:fsCTFy,
	Float:fsCTFz,
	fsOwnerFaction,
	fsAttackFaction,
	fsKillsOfOwner,
	fsKillsOfAttack,
	fsFightTime,
	fsCTF[3],
	fsLastFight,
	fsZoneID,
	fsFlag,
	Text:fsWinFaction,
	Text:fsLoseFaction,
	Text:fsWinKills,
	Text:fsLoseKills,
	Text:fsTime,
	fsFightTimeCool
};
new FightSystem[][fsSyS]={
	/*MinX, MinY, MaxX, MaxY, CTFx, CTFy, CTFz*/
	{1060.145,-1721.339,1166.624,-1583.168,1072.4016,-1619.3834,20.4583},//Kaufhaus
	{990.2909,1821.38,1177.724,2057.332,1067.5798,1884.2932,10.8203},//Container
	{-887.5186,1377.989,-583.8938,1634.903,-813.6335,1525.2080,26.5065},//Wüste
	{-2506.7,740.0255,-2383.094,826.8147,2459.4094,787.3281,35.1719},//Markt
	{-1850.044,1438.284,-1710.987,1584.248,-1789.1478,1543.3608,7.1875},//Hafen
	{-1891.4263,857.8361,-1722.0261,1095.5897,-1720.0752,1018.2902,17.5859},//Bank
	{1828.318,-1938.465,2071.699,-1760.817,1958.6156,-1853.2424,4.3392},//Tanke
	{1828.0573,-2161.2705,1956.4136,-2057.7964,1924.0941,-2125.0146,13.5826}//Airport(LS)
};
new Text:Fight,Text:FightUnderline;
new FightTimer[2];
//================================================================================================================

//================================================================================================================
//========================================================================= GANGAUTOHAUS/  FRAKCARS
#define FACTION_CAR_FILE                    ("Fraktionsautos.cfg")//Datei wo die gesamten Fraktionsfahrzeuge gespeichert werden GDRlen!
#define MAX_FACTION_CARS 					(900)//Die Maximale anzahl von Fraktionsfahrzeugen!
#define NEEDED_ADMINLEVEL                   (2000)//Das benötigte Adminlevel um Fraktionfahrzeuge zu fahren, ab/-aufschließen, umzuparken, entfernen, erstellen.
#define MAX_FACTIONS                        (30)//Die Maximale anzahl von Fraktionen aus deinem Script!
#define MAX_BUY         					(40)//Die Maximale anzahl von Fahrzeugen die eine Fraktion kaufen darf!

#define FACTION_CARS_TUNEABLE


#if defined FACTION_CARS_LOCKABLE
#include <ForAllPlayers>
#endif

#define FACTION_COL_GREY                    (0xAFAFAFAA)
#define FACTION_COL_YELLOW                  (0xFFFF00FF)
#define DIALOG_FACTION_CAR_BUY              (37)
#define DIALOG_SUPMOBIL                     23232
#define DIALOG_SUPMOBILID                   23233
new supmobil[MAX_PLAYERS], Text3D:suptext[MAX_PLAYERS],suplabeltimer[MAX_PLAYERS];

forward LoadFactionCars();
forward SaveFactionCars(bool:destroy);
forward LockFactionCarDoors();
forward DestroyAndCreateFactionCar(fc);
forward RemoveComponent(vehicleid,componentid);
forward ChangePaintjob(vehicleid,paintjobid);
forward ChangeColor(vehicleid,color1,color2);
forward RespawnFactionBuylist();

new fCarName[][]={
    "Landstalker","Bravura","Buffalo","Linerunner","Perrenial","Sentinel",
	"Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus",
	"Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam",
    "Esperanto","Taxi","Washington","Bobcat","Whoopee","BF Injection",
	"Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus",
	"Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie",
	"Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral",
	"Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
 	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400",
	"News Van","Tug","Trailer","Emperor","Wayfarer","Euros","Hotdog","Club",
	"Freight Box","Trailer","Andromada","Dodo","RC Cam","Launch","Police Car",
 	"Police Car","Police Car","Police Ranger","Picador","S.W.A.T","Alpha",
 	"Phoenix","Glendale Shit","Sadler Shit","Luggage","Luggage","Stairs","Boxville",
 	"Tiller","Utility Trailer"
};
enum fBuylist{
	fbVehid,
	Float:fbX,
	Float:fbY,
	Float:fbZ,
	Float:fbA,
	fbPrice,
	fbCarid,
	Text3D:fbLabel
};
new FactionBuylist[][fBuylist] = {
	{405,311.5587,-1809.4019,4.3394,0.4307,50000}, // Sentinal
    {411,314.7912,-1809.7482,4.1969,0.6235,50000}, // Infernus
    {412,317.9757,-1809.7987,4.3057,359.7154,50000}, // Voodoo
    {415,321.2232,-1809.7538,4.2428,358.6720,50000}, // Cheetah
    {429,327.7953,-1809.6830,4.1553,358.6708,50000}, // Banshee
    {439,330.9087,-1809.8531,4.3694,0.3104,50000},// Stallion
    {445,334.1863,-1809.9110,4.3532,359.8896,50000}, // Admiral
    {451,337.3522,-1810.0112,4.1961,359.9379,50000}, // Turismo
    {475,346.8968,-1809.8660,4.3106,1.0387,50000}, // Sabre
    {477,350.3359,-1809.8031,4.2649,358.7115,50000}, // ZR-350
    {479,353.4312,-1809.7145,4.3135,358.5456,50000}, // Regina
    {480,356.7751,-1809.7437,4.2925,359.1791,50000},// Comet
    {506,311.6965,-1789.0367,4.2775,179.3222,50000},// Super GT
    {522,315.0852,-1787.9764,4.2041,180.3209,50000}, // NRG
    {541,318.1741,-1788.7317,4.3038,179.2764,50000},// Bullet
    {559,321.4809,-1788.6581,4.3889,179.6865,50000}, // Jester
    {562,324.7844,-1788.7953,4.4454,179.5516,50000}, // Elegy
    {561,328.0639,-1789.1740,4.6501,179.3546,50000}, // Stratum
    {565,331.4161,-1788.7366,4.5075,181.2386,50000}, // Flash
    {587,334.3581,-1789.3591,4.6165,179.8554,50000}, // Euros
    {589,337.6046,-1788.9492,4.5795,180.8319,50000}, // Club
    {560,324.5808,-1810.1571,4.1698,359.8678,50000}, // Sultan
    {487,309.9238,-1800.4260,4.6735,181.1788,50000} // Maverik

};
new Float:FactionBuySpawn[4]={356.7656,-1794.3485,4.9582,273.9034};
enum fCar{
    fCarid,
	fVehid,
	Float:fPos[4],
	fCol[2],
	fFaction[5],
	fTuning[14],
	fPrice,
	#if defined FACTION_CARS_LOCKABLE
	bool:fLock
	#endif
};
new FactionCars[MAX_FACTION_CARS][fCar];
#if defined FACTION_CARS_LOCKABLE
new FactionCarsTimer;
#endif
new BuylistRespawner;
new SaveFactionCarsTimer;
new LastRespawned[MAX_FACTIONS];
//===========================================================================================================================

#define Function%0(%1) forward%0(%1); public%0(%1) // definierst du ganz oben unter includes
#define DIALOG_LOGIN 0
#define DIALOG_REG 1
#define DIALOG_REG2 2
#define DIALOG_CLICK 3
#define DIALOG_CLICK_KICK 4
#define DIALOG_CLICK_BAN 5
#define DIALOG_CLICK_HEALTH
#define DIALOG_CLICK_INT 7
#define DIALOG_TICKET 8
#define DIALOG_REGSTEP_1 9
#define DIALOG_REGSTEP_2 10
#define DIALOG_REGSTEP_3 11
#define DIALOG_UNDERCOVER_SF 12
#define DIALOG_UNDERCOVER_LS 13
#define DIALOG_STADION 13
#define DIALOG_KLEIDUNG_PRO 14
#define DIALOG_KLEIDUNG_ZIP 15
#define DIALOG_FW 16
#define DIALOG_GS 17
#define DIALOG_BAL 18
#define DIALOG_MUCHACHO 19
#define DIALOG_Vagos 20
#define DIALOG_MARKTLISTE 21
#define DIALOG_MARKTLISTE1 22
#define DIALOG_MARKTLISTE2 23
#define MAFIA 25
#define NAVIHAUPT 26
#define GEBÄUDE 27
#define iORTE 28
#define AUTOHÄUSER 29
#define DIALOG_STATS 30
#define DIALOG_JOBS 31
#define DETE 32
#define MULLMANN 34
#define PILOT 35
#define ANGLER 36
#define BODYGUARD 37
#define ZEITUNGSJUNGE 38
#define BOXER 39
#define BUSFAHRER 40
#define PIZZALIEFERANT 41
#define DIALOG_iJOBS 42
#define WD 43
#define DD 44
#define HURE 45
#define AUTODIEB 46
#define DIALOG_HANDY 47
#define Handys 48
#define Guthaben 49
#define Vertrag 50
#define Vertragk 51
#define DIALOG_UHREN 52
#define DIALOG_SHOWME 53
#define PRODI 54
#define BSN 55
#define DIALOG_COP 56
#define BANK 57
#define Kontostand 58
#define Einzahlen 59
#define Auszahlen 60
#define Uberweisen 61
#define Uberweisen2 62
#define NEWS 63
#define KAMPFSTYLES 64
#define DIALOG_TICKET_S1 65
#define DIALOG_TICKET_S22 67
#define DIALOG_TICKET_S32 68
#define DIALOG_HILFE 69
#define DIALOG_H1 70
#define DIALOG_H2 71
#define DIALOG_H3 72
#define DIALOG_H4 73
#define DIALOG_H51 74
#define DIALOG_H52 75
#define DIALOG_H53 76
#define DIALOG_H54 77
#define DIALOG_H55 78
#define DIALOG_H56 79
#define DIALOG_H57 80
#define DIALOG_H58 81
#define DIALOG_H59 82
#define DIALOG_H510 83
#define DIALOG_H511 84
#define DIALOG_H512 85
#define DIALOG_H513 86
#define DIALOG_H6 87
#define DIALOG_STADTHALLE 88
#define FARMER 89
#define DIALOG_H14 90
#define DIALOG_BESTRAFUNG 91
#define DIALOG_BESTRAFUNG1 92
#define DIALOG_BESTRAFUNG2 93
#define DIALOG_BESTRAFUNG3 94
#define DIALOG_BESTRAFUNG4 95
#define DIALOG_BESTRAFUNG5 96
#define DIALOG_BESTRAFUNG6 97
#define DIALOG_BESTRAFUNG7 98
#define DIALOG_BESTRAFUNG8 99
#define DIALOG_BESTRAFUNG9 100
#define ANGRIFFSPUNKTE 101
#define DIALOG_KAMMER 102
#define DIALOG_KAMMER_WAFFEN1 103
#define DIALOG_KAMMER_DROGEN1 104
#define DIALOG_KAMMER_DROGEN2 105
#define DIALOG_KAMMER_DROGEN3 106
#define DIALOG_KAMMER_FMATS 107
#define DIALOG_LCN 108
#define DIALOG_H7 109
#define DIALOG_H8 110
#define DIALOG_H9 111
#define DIALOG_H10 112
#define MECHANIKER 113
#define ANWALT 114
#define DIALOG_SHOP 115
#define DIALOG_ZÖLLE 116
#define CLOSEZOLLLS 117
#define CLOSEZOLLLV 118
#define DIALOG_NEULING 120
#define NEULING1 121
#define NEULING2 122
#define NEULING3 128
#define KEINGUTHABEN 123
#define DIALOG_RADIO 124
#define DIALOG_BEZAHLEN 125
#define DIALOG_KLINGEL 126
#define FÜHRERSCHEINE 127
// ===============================[ ServerDATEN ]===============================
#define VERSION "2.4"
#define TEAMSPEAKIP "84.200.15.38:7568"
#define FORUMURL "http:www.gne-life.de"
#define MAX_SERVER_NAMES 2
//======== TEAMFARBEN ========//
#define SPEEDS
#define NAMECOLOR_LSCOP 			0x1E90FF00
#define NAMECOLOR_SFCOP				0x0000FF00
#define NAMECOLOR_Bundeswehr				0x00CF0000
#define NAMECOLOR_FBI               0x1E00FF00
#define NAMECOLOR_TAXI				0xFFFF00AA
#define NAMECOLOR_MEDIC				0xFF0A0000
#define NAMECOLOR_PRAESI			0xFF1493AA
#define NAMECOLOR_PRAESI_SCHUTZ		0x669933FF
#define NAMECOLOR_YAKUZA			0x330000AA
#define NAMECOLOR_LCN				0x000000FF
#define NAMECOLOR_CNN				0xFF9900AA
#define COLOR_LEHRER				0x00FFFAFF
#define NAMECOLOR_Vagos				0xCC77E8AA
#define NAMECOLOR_Grove				0x004200AA
#define NAMECOLOR_Ballas			0x990099AA
#define NAMECOLOR_FAF				0xCC0000AA
#define NAMECOLOR_Aztecas				0x00FFFFFF

#define COLOR_FORSELL               0x23A400FF
#define COLOR_BUYED                 0xA60A00FF
//Motorradhelm
#define SLOT 1
//======= Bestimmungen ========//
#define MaxVeh 4 // Anzahl Möglicher Fahrzeuge pro Person! Achtung nicht zu hoch setzten! Das verbraucht Speicher und kann über das Carlimit hinausschiessen!
#define AUTOHAUSER 5 // Anzahl der Autohäuser
#define MAXPARKPLATZE 4 // Anzahl Parkplätze
#define MAX_BLITZER 15 // Maximale Anzahl von Blitzern
#define BLITZER_TIMER_INTERVALL 500 // Intervall für das Blitzen (in Milliesekunden)
#define BLITZER_PAUSE 1 // Anzahl der Minuten, in denen der Spieler nicht mehr geblitzt werden kann
#define SLOTS 50
#define foxBanFile "FoxBan/%s.ini"
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define ELEVATOR_SPEED      (5.0)
#define DOORS_SPEED         (4.0)
#define ELEVATOR_WAIT_TIME  (5000)
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)
#define FarmerCheckpoints 47
#define EndFarmerCP 46
#define FFahrzeuge 6
#define INVALID_FARMER_CP -1
#define TIME_to_HIDE 8000
#define MAX_NAGELBAENDER 15 // Maximale Anzahl von Nagelbaendern

#define DIALOG_ID           (874)
new ALLSTRING[180];

//======= FARBEN ========//
#define F_G 0x24D900F6 //helles Grün
#define F_O 0xF6B400F6 //Neues Orange
#define blau 0x0085C4F6
#define NB 0x005B9BF6 // Neues Blau
#define NY 0xF5DEB3AA // Neues Gelb
#define RED_NEW 0xF60000F6
#define BLUE_NEW 0x0000CAF6
#define GREEN 0x21DD00FF
#define ORANGE 0xF97804FF
#define ROT 0xE60000FF
#define GRUEN 0x05FF00FF
#define GELB 0xFFFF00FF
#define BLAU 0x000FFFFF
#define RED 0xE60000FF
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define COLOR_GOLD 0xB8860BAA
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_ORANGE 0xFF9933FF
#define COLOR_BROWN 0x330000FF
#define COLOR_BLACK 0x000000FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_WHITEE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_AONDONNN 0xF5DEB3AA
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 17
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define COLOR_ADD 0x63FF60AA
#define TEAM_Grove_COLOR 0x00D900C8
#define TEAM_Vagos_COLOR 0xFFC801C8
#define TEAM_Ballas_COLOR 0xD900D3C8
#define TEAM_Aztecas_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
//#define MAX_STRING 512
//===== ZOLL ======//
new zolltor;
new zolltor1;
new zolltor2;
new zolltor3;
new zolltor4;
new zolltor5;
new zolltor6;
new zolltor7;
new zolltor8;
new zolltor9;
new zolltor10;
new zolltor11;
new zolltor12;
new zolltor13;
new zolltor14;
new zolltor15;
new zolltor16;
new zolltor17;
new zolltor18;
new zolltor19;
new zollvar[20];
new lszoll1;
new lszoll2;
new lszoll3;
new lszoll4;
new lszoll5;
new lszoll6;
new lvzoll1;
new lvzoll2;
new lvzoll3;
new lvzoll4;
new lvzoll5;
new lvzoll6;
new lvzoll7;
new lvzoll8;

new PlayerHacked[MAX_PLAYERS];

new JustService[MAX_PLAYERS];

//===== SPEEDO =====//
new Text:box[MAX_PLAYERS],Text:fahrzeug[MAX_PLAYERS],Text:kmh[MAX_PLAYERS];
new Text:hoehe[MAX_PLAYERS],Text:zustand[MAX_PLAYERS];
new SpeedoON[MAX_PLAYERS];
new Float:sVehicle_X[MAX_VEHICLES], Float:sVehicle_Y[MAX_VEHICLES], Float:sVehicle_Z[MAX_VEHICLES];
//================//

/*new TicketZeile[MAX_PLAYERS]; // Wieviele Zeilen schon belegt sind.
new SupportTicket[MAX_PLAYERS]; // Ob der Spieler ein Ticket hat
new TicketAngenommen[MAX_PLAYERS]; // Ob das Ticket angenommen wurde!
new DeinSupport[MAX_PLAYERS]; // Der Supporter, der dein Ticket angenommen hat!*/

//Report System
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];

//new sendername[MAX_PLAYER_NAME];

new Weapons[MAX_PLAYERS][11], Ammo[MAX_PLAYERS][11];

//new Text:Forum;

new d1;
new d2;
new d3;
new d4;

new bool:Allowswat;
new yaktor;
new yaktor2;
new bool:yak;
new bool:yak2;
new bool:licht[MAX_VEHICLES];
new bool:sirenean[MAX_VEHICLES],sirene[MAX_VEHICLES];

new car_BulletLS;

//new Zonen
/*new LCN;
new SNDM;
new ZSNDM;
new BSNNDM;
new KHNDM;
new Vagos;
new Ballas;
new Grove;
new Aztecas;*/
//new Gangfights;
/*new Alcatraz;
new Yakuza;
new Russianm;
new Triaden;*/

new car_Busbot1;

new PTor;
new bool:TorP;

new News1;
new News2;
new bool:nstatus1;
new bool:nstatus2;

new LSPDLift;
new bool:LSLift;

new Spieler;
//TowTruckers
new TowTruckers = 0;
new IsTowTrucker[MAX_PLAYERS];
//TowTruckers
new SideL, SideR, Dtc_Info[AUTOHAUSER];
new Dtc_PlayerHaveCar[MAX_PLAYERS][MaxVeh];
new Dtc_PlayerKey[MAX_PLAYERS];
new RadZahl[AUTOHAUSER];
new Dtc_Carlock[700];
new Text: CarKauf[MAX_PLAYERS];
new dtc_AutohausCar[MAX_PLAYERS],dtc_AutohausCat[MAX_PLAYERS],dtc_AutohausSCar[MAX_PLAYERS];
new productiontimer;
// NAVI
new Navi[MAX_PLAYERS];
//Binde
new BlindFold[MAX_PLAYERS];
new Noobi[MAX_PLAYERS];

//TEXT
new Text3D:Supporter[MAX_PLAYERS];
new Text3D:Mod[MAX_PLAYERS];
new Text3D:Supermod[MAX_PLAYERS];
new Text3D:Admin[MAX_PLAYERS];
new Text3D:Noob[MAX_PLAYERS];

//new ReportCall[MAX_PLAYERS];

//LSWAREN
new Text3D:LSWText;
//Leo
new leo1;
new leo2;

//LCN Tore
new lcntor;
new lcntorvar;

//Fbi
new fbitor;
new fbitorvar;
//Geheimstützpunkt
new hangar;
new hangarvar;
new hangar2;
new hangar2var;

//Hitman
new htor;
new htorvar;
//Fuegos
new Fuegostor;
new Fuegosleadertor;
new Fuegossperre;
//new Fuegosnotfall;
//new Fuegosnotfall2;

//new Fuegosnotfallvar;
new Fuegostorvar;
new Fuegosleadertorvar;
new Fuegossperrevar;

//Rifas
new rifastor;
//RM Tor
new rtor;
new rtorvar;
new rtor2;
new rtor2var;

//PD Garage Port
new port;
new port1;
new port3;
new port4;
new port5;
new port6;
//new Zonen
/*new SNDM;
new ZSNDM;
new BSNNDM;
new KHNDM;*/

//new NODMText
new Text:NDMZONET;
//
//new CARBOTCAR;
//new Text3D:Heinz;
new AtClothes[MAX_PLAYERS];
new UnderCoverCar_Sultan;
new FirstSpawn[MAX_PLAYERS];
new pVerbrecher[MAX_PLAYERS];
new reportname[MAX_PLAYER_NAME+1];
new ticketmsg[256+1];
new FensterStatus[MAX_PLAYERS];
new Knast[MAX_PLAYERS];
new KnastTime[MAX_PLAYERS];
new pIP[MAX_PLAYERS][16];
new TazerBereit[MAX_PLAYERS];
new WeapsTaken[MAX_PLAYERS];
new FraktionsKasse[24];
new HafenKlause[14];
new rob;
new RMBus;
new Eingeladen[MAX_PLAYERS];
new TextSpams[MAX_PLAYERS];
new CMDSpams[MAX_PLAYERS];
new HitmanLeaderBullet;
new knastdm[MAX_PLAYERS];

// .:Cars:.
new BallasVehs[15];//
new LCNVehs[14];//
new PilotenVehs[8];//
new YakuzaVehs[22];//
new VagosVehs[100];//
new AztecasVehs[8];//
new HitmanVehs[21];//
new FuegosVehs[20];//
new RifaVehs[16];
new LSBC[8];//
new RSVehs[12];//
new TerrorVehs[17];//
new TaxiVehs[8];//
new NewbFahrrad[15];//
new PraesiVehs[10];//
new RMVehs[16];//
new PolizeiVehs[50];//
new FBIVehs[27];
new WheelVehs[22];//
new BundeswehrVehs[43];//
new Truck[7];//
new oAmtVehs[21];//
new NewsVehs[9];//
new BMXEN[15];//
new FahrschulVehs[100];
new BusVehs[5];
new MedicVehs [12];//
new GroveVehs[11];//
new SWATVehs[24];//

new handyname[20];
//.: Personalausweis :.
new AllowPerso[MAX_PLAYERS];

new LottoTimer = 0;
new StuntVar[MAX_PLAYERS];
new AfterTutorial[MAX_PLAYERS];
new AtRegestration[MAX_PLAYERS];
new lspdinside; // INSIDE LSPD DOOR
new lspdinside2;
new lspdinside3;
new lspdinside4;
new lspdvar1; // INSIDE LSPD DOOR
new lspdvar2;
new lspdvar3;
new lspdvar4;
new Mullabfuhr[MAX_PLAYERS];
new MullabfuhrCP[MAX_PLAYERS];
new Text:Datum;
new Text:Uhrzeit;
new Text:Copyright;
new Text:Ts3;
//new MotorschadenMSGSent[MAX_PLAYERS] = 0;
new ShowMeAllowed = 0;//aus
new need[MAX_PLAYERS];
new newswechsel = 1;
new Bombactivated;
new bombexplotimer;
new bombzone;
new BombStatus;
new Sperrebit[MAX_PLAYERS];
//new Pylonenbit[MAX_PLAYERS];
//new Barrierenbit[MAX_PLAYERS];
//new Barriere[MAX_PLAYERS][5];
//new Pylone[MAX_PLAYERS][4];
new sSperre[MAX_PLAYERS][5];
new bombe;
new bombdraht1 = 0;//rot
new bombdraht2 = 0;//gelb
new bombdraht3 = 0;//grün
new bombdraht4 = 0;//blau
new bombdrahtchoosen = 0;//gelegt 0 = nein

new SelfStatus;
new bombtimer;
new Float:PlayerExplosionX[MAX_PLAYERS] = 0.0;
new Float:PlayerExplosionY[MAX_PLAYERS] = 0.0;
new Float:PlayerExplosionZ[MAX_PLAYERS] = 0.0;
new ZivilSkin[MAX_PLAYERS];
new PruefungsTimer[MAX_PLAYERS];
new PruefungsSchritt[MAX_PLAYERS];
new MotorradTimer[MAX_PLAYERS];
new MotorradSchritt[MAX_PLAYERS];

new IsBlacklist[MAX_PLAYERS]; // Blacklist

new Float:EventPos[3];
new EventInt;
new EventVW;
new bool:EventAktiv = false;

new Menu:BOMB;
new Menu:BOMBD;



new WantLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new HatBereitsErlaubnis[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];

new Menu:BSMK;
new Menu:PMK;
new Menu:CBKM;
new Menu:PruefungMenu;
new Menu:MotorradMenu;
new Menu:Navigation;


new KLEIDUNG_PRO;
new KLEIDUNG_ZIP;

//======OLICHT=========//
new Olicht[MAX_VEHICLES];
new light1[MAX_VEHICLES];
new light2[MAX_VEHICLES];
new light3[MAX_VEHICLES];
new light4[MAX_VEHICLES];
new light5[MAX_VEHICLES];


//=============== GANGWARSYSTEM ===============//
enum gebiet
{
	gOwner,
	Float:gMinX,
	Float:gMinY,
	Float:gMaxX,
	Float:gMaxY,
	gOn,
	gStand1,
	gStand2,
	gAngreifer,
	gzone
};


new Gebiete[1][gebiet] = //Erstellt eine Variable mit der Anzahl der Gebiete in der ersten [] angegeben und in der zweiten wird das Enum von oben eingefügt. (Dient zur genaueren Beschreibnung)
{
	{0,1045.1472,-1579.7272,1141.4376,-1665.4949,0,0,0,0}//Hier werden dann die Zonen erstellt, eigentlich alles auf 0 lassen, außer die Koordinaten...
};
new Gebiet[1];//Hier werden die "GangZones" gespeichert, damit wir diese in Farbe setzen können usw...
forward GangFight(gebietid);//Dies ist eine Überschrift einer public funktion. (Dies wird für den Timer verwendet, wann der GangWar stoppt.)
forward UpdateZones();//Damit werden die Farben der zonen aktualisiert.

forward UpdateZones();
public UpdateZones()
{
	for(new player; player < MAX_PLAYERS; player++)//Damit alle Spieler durchlaufen werden
	{
		for(new i; i<sizeof(Gebiete); i++)//Damit  alle Gebiete durchlaufen werden
		{
  			GangZoneHideForPlayer(player,Gebiet[i]);//Damit werden alle Gebiete für alle User versteckt
			new color;//Erstellt eine neue Variable
			if(Gebiete[i][gOwner] == 5){color=0x000000B2;}//Fragt ab welcher Frak das Gebiet gehört
			if(Gebiete[i][gOwner] == 6){color=0xFFFFFFB2;}
			GangZoneShowForPlayer(player, Gebiet[i], color); //Zeigt die Zone f ür die Spieler wieder mit der neuen/alten Farbe
			if(Gebiete[i][gOn] == 1)//Fragt ab ob Gangfight in einem Gebiet läuft
			{
				if(Gebiete[i][gAngreifer] == 5){color=0x000000B2;}//Fragt ab welche Frak das Gebiet angreift und setzt die Farbe
				if(Gebiete[i][gAngreifer] == 6){color=0xFFFFFFB2;}
				GangZoneFlashForPlayer(player,Gebiet[i],color);//"Flasht die Zone" in der Angreifer Farbe und Owner Farbe
			}
		}
	}
}

//==== BLITZER ====//
enum eBlitzer {
	ID, Float:BlitzerX, Float:BlitzerY, Float:BlitzerZ, Radius, Geschwindigkeit, Erstellt, Strafe
};

new Blitzer[MAX_BLITZER][eBlitzer];
new GesammtBlitzer;
new BlitzerErstellt[MAX_PLAYERS];
//=== NAGELBAND ======//
enum eNagelBand {
	ID, Float:NagelBandX, Float:NagelBandY, Float:NagelBandZ, nErstellt
};
new NagelBand[MAX_NAGELBAENDER][eNagelBand];
new NagelBandErstellt[MAX_PLAYERS];

//==== SPEEDO ====//
enum OldSpeedoPos
{
	Float:sX,
	Float:sY,
	Float:sZ
}
new SavePlayerPos[SLOTS][OldSpeedoPos];


new wetterid;

new WetterRandom[][] =
{
{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10},
{11}, {12}, {13}, {14}, {15}, {17}, {18}, {19}, {20}
};


static FloorNames[21][] =
{
	"Erdgeschoss",
	"Erster Stockwerk",
	"Zweiter Stockwerk",
	"Dritter Stockwerk",
	"Vierter Stockwerk",
	"Fünfter Stockwerk",
	"Sechster Stockwerk",
	"Siebter Stockwerk",
	"Achter Stockwerk",
	"Neunter Stockwerk",
	"Zehnter Stockwerk",
	"Elfter Stockwerk",
	"Zwölfter Stockwerk",
	"Dreizehnter Stockwerk",
	"Fierzehnter Stockwerk",
	"Fünftzehnter Stockwerk",
	"Sechszehnter Stockwerk",
	"Siebzehnter Stockwerk",
	"Achtzehnter Stockwerk",
	"Neunzehnter Stockwerk",
	"Penthouse"
};

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

new Obj_Elevator, Obj_ElevatorDoors[2],Obj_FloorDoors[21][2];
new Text3D:Label_Elevator, Text3D:Label_Floors[21];
#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
new ElevatorState, ElevatorFloor;
#define INVALID_FLOOR           (-1)
new ElevatorQueue[21], FloorRequestedBy[21];
new ElevatorBoostTimer;
forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);
forward GetPlayerAdmin(playerid);
forward GetPlayerLeader(playerid);
forward GetPlayerMember(playerid);
forward Elevator_Initialize();
forward Elevator_Destroy();
forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);
forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();
forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();
forward ClearBlack(playerid);
forward LoadBlacklist();
forward GetPlayerMafia(playerid);
forward DidPlayerRequestElevator(playerid);
forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);
forward AnwaltErlaubnisWeg(playerid);
forward AnwaltErlaubnis(playerid);
forward LoadFactionCars();
forward SaveFactionCars(bool:destroy);
forward LockFactionCarDoors();
forward DestroyAndCreateFactionCar(fc);
forward hack(playerid);
forward hackabbruch(playerid);
forward SaveAll();
//system
/*forward GetPlayerMember(playerid);
forward GetPlayerLeader(playerid);
forward GetPlayerAdminLevel(playerid);*/

//Schutzgeld
forward CheckLCNSchutz(i);
forward CheckYAKSchutz(i);
forward CheckGROSchutz(i);
forward CheckSCARSchutz(i);
forward KickPlayerAfterTime(playerid);



//======= FARMER
new AktuellerCP[MAX_PLAYERS];
new Float:FarmerCPS[FarmerCheckpoints][3]={
{-6.9620,-3.0126,3.1172},
{-44.6214,-106.1540,3.1172},
{-29.8424,-110.8241,3.1172},
{3.5424,-19.4433,3.2688},
{11.3660,-28.8738,3.2688},
{-12.5866,-111.8622,3.2688},
{1.1049,-116.0905,3.2688},
{27.0255,-49.7425,3.2688},
{38.6914,-62.9952,3.2688},
{25.7187,-111.5493,3.2688},
{71.9206,-97.8545,3.2688},
{66.0800,-53.1640,3.2688},
{76.9987,24.5919,3.2688},
{66.8902,31.2640,3.2688},
{43.5753,-10.9666,3.2688},
{56.9552,38.7209,3.2688},
{52.3544,45.2587,3.2688},
{26.5335,10.6721,3.2688},
{20.8279,15.0424,3.2688},
{31.5244,62.2251,3.2688},
{16.9134,23.5104,3.2688},
{10.8291,32.5482,3.2688},
{22.7296,63.4379,3.2688},
{28.8027,100.3764,3.1172},
{-85.2832,165.7121,3.1172},
{-101.5498,151.8640,3.1412},
{-119.4854,98.1683,3.1412},
{-127.8824,99.4611,3.1412},
{-111.4970,153.2465,3.1412},
{-118.3234,156.4370,3.1412},
{-138.6117,102.2743,3.1412},
{-149.0449,105.5976,3.1412},
{-132.6515,160.5097,4.6568},
{-138.1478,163.1387,4.0606},
{-156.0332,109.9004,4.6568},
{-166.5363,113.2158,3.7128},
{-155.8644,163.9493,6.9285},
{-162.2225,167.6641,6.9285},
{-179.8257,122.0539,5.2715},
{-189.1053,122.9977,4.3336},
{-177.0821,173.7229,8.8140},
{-189.2290,176.5898,8.8140},
{-210.0755,138.2119,4.0343},
{-213.8596,121.6649,4.0343},
{-98.7655,72.5291,4.0343},
{-42.3994,128.1348,4.0343},
{-36.6881,61.0036,3.1172}
};

//==== Blacklist ====//

enum blackliste
{
    user1[MAX_PLAYER_NAME],
    user2[MAX_PLAYER_NAME],
    user3[MAX_PLAYER_NAME],
    user4[MAX_PLAYER_NAME],
    user5[MAX_PLAYER_NAME],
    user6[MAX_PLAYER_NAME],
    user7[MAX_PLAYER_NAME],
    user8[MAX_PLAYER_NAME],
    user9[MAX_PLAYER_NAME],
    user10[MAX_PLAYER_NAME],
};

new Blacklist[3][blackliste];

//==== ESSENPICKUPS ====//
new EssenPickup[4];

new Dtc_LockOnSpawn = 1;

enum dtcCarModell
{
	dtc_Autohaus,
	dtc_CarModel,
	dtc_CarPreis
};
new dtcKaufliste[][dtcCarModell] = { //CARSYS
//0 = 2 Räder
	{0,462,2000},    //Faggio
	{0,581,70000},   //BF-400
	{0,521,80000},   //FCR-900
	{0,463,60000},   //Freeway
	{0,461,90000},   //PCJ-600
	{0,468,20000},   //Sanchez
	{0,586,20000},   //Wayfarer
	{0,471,30000},   //Quad
	{0,522,120000},  //NRG
	
// 1 = Bugy
	{1,470,1}, // Buggy ^^
// 2 = Vagos Base Autohaus
	{2,467,6000},  //Oceanic
	{2,536,10000},  //Blade
	{2,534,7000},  //Remigton
	{2,567,12000},  //Savanna
	{2,535,20000},  //Slamvan
	{2,412,7500},  //Voodo
	{2,426,30000}, //Premier
	{2,421,40000}, // Washington
	{2,518,10000},   //Buccanee
	{2,542,5000},   //Clover
	{2,496,7500},  //Blistac
	{2,587,12000},  //Euros
	{2,439,15000},  //Stallion
	{2,550,12000},  //Sunrise
	{2,540,10000},  //Vincent
	{2,404,9500},  //Peren
	{2,413,10000},  //Pony
	{2,458,12500},  //Solair
	{2,479,12500},  //Regina
	{2,440,9500},  //Rumpo
	{2,423,10000},  //Eiswagen (Mrwhoop)
	{2,483,16000},  //Camper
	{2,500,12500},  //Mesa
	{2,508,80000},  //Journey
	{2,554,25000},  //Yosemite
	{2,561,30000},  //Startum
	{2,489,22000},  //Rancher
	{2,543,15000},  //Sadler
	{2,442,20000}, //Leichenwagen
	{2,527,6000}, //Cadrona
	{2,531,6000}, //Farmtraktor
// An Oamt Base
	{3,533,70000},  //Feltzer
	{3,579,90000},  //Huntley
	{3,507,96999},  //Elegant
	{3,419,120000},  //Esperant
	{3,526,94000},  //Fortune
	{3,602,109995},  //Alpha
	{3,400,100000},  //Landstal
	{3,545,100000},  //Hustler
	{3,405,120000},  //Sentinel
	{3,445,125000},  //Admiral
	{3,475,70000},  //Sabre
	{3,409,1200000},  //Stretch
	{3,562,180000},  //Elegy
	{3,560,200000},  //Sultan
	{3,429,140000}, //Banshee
	{3,402,150000},  //Buffalo
	{3,541,280000},  //Bullet
	{3,415,248000},  //Cheetah
	{3,589,176000},  //Club
	{3,411,200000},  //Infernus
	{3,559,145000},  //Jester
	{3,603,155000},   //Phönix
	{3,506,270000},  //Supergt
	{3,451,225000}, //Turismo
	{3,558,180000},   //Uranus
	{3,480,140000},   //Comet
	{3,477,95000},  //Zr350
	{3,565,120000},  //Flash
//2 = LS AIRPORT (Flugzeuge Helikopter)
	{4,487,6000000},  //Maverick
	{4,469,3000000},  //Spearrow
	{4,511,2000000},  //Beagle
	{4,593,1500000},  //Dodo
	{4,513,1500000},  //StuntFlugzeug
	{4,519,12000000}  //Shamal
};

new Float:DtcParkPlatz[AUTOHAUSER][MAXPARKPLATZE][4] = {
	{//2Räder LS
		{2471.7231, -1558.3952, 23.5809, 0.0},
		{2474.7231, -1558.3952, 23.5751, 0.0},
		{2477.7231, -1558.3952, 23.5771, 0.0},
		{2480.7231, -1558.3952, 23.5921, 0.0}
	},
	{//bug
		{-5000.0, -50000.0, -50000.0, 5000000.500000},
		{-5000.0, -50000.0, -50000.0, 500000.0},
		{-5000.0, -50000.0, -50000.0, 500000.0},
		{-5000.0, -50000.0, -50000.0, 500000.0}
	},
	{//LS CarSeller
		{2148.0617, -1138.3233, 25.1975, 270.0},
		{2148.5222, -1143.1345, 24.6887, 270.0},
		{2147.8491, -1148.3714, 24.1134, 270.0},
		{2147.5104, -1152.7818, 23.6500, 270.0}
	},
	{//LS Studio
		{743.0629, -1334.0764, 13.2483, 180.0},
		{748.0629, -1334.0764, 13.2708, 180.0},
		{753.0629, -1334.0764, 13.2483, 180.0},
		{758.0629, -1334.0764, 13.2708, 180.0}
	},
	{//LS AIRPORT
		{1725.5981,-2414.4631,13.5547,91.2938},
		{1648.4031,-2413.2231,13.5547,91.2938},
		{1566.8810,-2416.3340,13.5547,89.3299},
		{1899.1111,-2374.5435,13.8934,270.3974}
	}
};

new Float:DtcSonstiges[AUTOHAUSER][5][6] = {
	{//2Räder LS
		{2471.0097, -1542.7354, 24.1628, 0.0}, // Info Zeichen etc.
		{2475.3952, -1537.1600, 28.6523, 340.2388}, // LiveView Car
		{2472.8505, -1533.2855, 29.0964, 0.0}, // LiveView Cam
		{2468.4548, -1534.1237, 29.1007, 0.0}, // LiveView Player
		{2470.8825, -1544.0834, 24.0406, 178.5745} // LiveView Player Exit
 	},
 	{//Bug
		{5000000.0, 0.0, -40.0, 0.0},
		{5000000.0, 0.0, -40.0, 0.0},
		{5000000.0, 0.0, -40.0, 0.0},
		{5000000.0, 0.0, -40.0, 0.0},
		{5000000.0, 0.0, -40.0, 0.0}
	},
	{//LS CarSeller
 		{2131.7124, -1151.0965, 24.0838, 0.0}, // Info Zeichen etc.
		{2131.7192, -1163.0882, 27.8755, 301.3163}, // LiveView Car
		{2133.0817, -1156.3632, 28.1484, 0.0}, // LiveView Cam
		{2133.0031, -1154.4589, 28.1484, 0.0}, // LiveView Player
		{2131.7634, -1148.4149, 24.3788, 359.2809} // LiveView Player Exit
	},
 	{//LS Studio
 		{750.7259, -1356.9744, 13.5000, 0.0}, // Info Zeichen etc.
		{740.5779, -1365.2796, 25.4192, 225.3830}, // LiveView Car
		{741.2583, -1370.9835, 25.6922, 0.0}, // LiveView Cam
		{741.7747, -1376.3156, 25.6922, 0.0}, // LiveView Player
		{753.6887, -1338.2799, 13.5320, 14.7941} // LiveView Player Exit
	},
	{//LS AIRPORT
 		{1774.7336,-2433.5491,13.5547,252.3329}, // Info Zeichen etc.
		{1765.1451,-2286.7554,26.7960,313.5673}, // LiveView Car
		{1765.4340,-2271.0989,31.0900,181.3627}, // LiveView Cam
		{1765.4340,-2271.0989,31.0900,181.3627}, // LiveView Player
		{1778.3945,-2432.7996,13.5547,171.6871} // LiveView Player Exit
	}
};


enum dtc_PlayerCar
{
	CarId,
	CarOwner[MAX_PLAYER_NAME],
	CarModel,
	Float:CarPos_x,
	Float:CarPos_y,
	Float:CarPos_z,
	Float:CarRotate,
	CarNitro,
	CarHyd,
	CarWheel,
	CarAusp,
	CarSideL,
	CarSideR,
	CarFB,
	CarRB,
	CarSpoiler,
	CarRoof,
	CarHood,
	CarVents,
	CarLamps,
	CarPJ,
	CarC1,
	CarC2,
	CarPreis,
	CarArrest,
	Plate[15],
};

new PlayerCar[MAX_PLAYERS][MaxVeh][dtc_PlayerCar];

new CarName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
 	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
 	"Police Car", "Police Car", "Police Ranger", "Picador", "#", "Alpha",
 	"Phoenix", "2. Gebrauchtwagen", "1. Gebrauchtwagen", "Luggage", "Luggage", "Stairs", "Boxville",
 	"Tiller", "Utility Trailer"
};


// .: TORE :.
new PresiBuro;
new atzetor;
new f2ftor;
new RS1;
new bool:RSTor1;
new terrorgate;
new MVTor4;
new armylift123var;
new armylift45var;
new armylift1;
new armylift2;
new armylift3;
new armylift4;
new armylift5;
//new zivitor;
new MVTor5;
new Medictor;
new Medictor2;
new ziviltor;
new ziviltor2;
new ballastor;
new wheeltor;
new schwarztor;
new extrontor;
new vagostor;
//new Bundeswehrtor1;
//new Bundeswehrtor2;
//new Bundeswehrtor3;
new gangtor;
new gangtuer;
new tuer1;
new tuer2;
new surealtor;
new schokotor;


//Ende

new MVTor;
new MVTor2;
new MVTor3;
new OamtLS;
new OamtLS2;
new OamtLS3;
new OamtLS4;
new terrorgatevar;
new schwarzgatevar;
new f2ftorvar;
new aztetorvar;
new OamtLSS1;
new OamtLSS2;
new PresiBurovar;
new Oamtvar;
new Security = 0;
new CreatedCars[100];
new CreatedCar = 0;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills= 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new PayDayTeiler = 4;
new LCNMats, YakMats, TriadMats, GroveMats, BallasMats, BikerMats, VagosMats, AztecaMats, RSMats, TerrorMats, BrigadaMats;
new LCNDrugs, YakDrugs, TriadDrugs, GroveDrugs, BallasDrugs, BikerDrugs, VagosDrugs, AztecaDrugs, RSDrugs, TerrorDrugs, BrigadaDrugs;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new KHSperre[MAX_PLAYERS];
new TBoxer = 255;
new pIstTot[MAX_PLAYERS];
new PlayerBoxing[MAX_PLAYERS];
//new hitfound = 0;
//new hitid = 999;
new Medics = 0;
new MedicCall = 999;
new CopCall = 999;
new CopCallTime[MAX_PLAYERS];
new MedicCallTime[MAX_PLAYERS];
new FireCallTime[MAX_PLAYERS];
new WCALL = 999;
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new FWDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new ZigOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS]; //Paper Boys must pick up a Paper first, then use /deliver
new GotPaper[MAX_PLAYERS]; //The player has a paper so he can use /read
new WritingPaper[MAX_PLAYERS]; //Used for onplayertext so he can type in lines
new WritingPaperNumber[MAX_PLAYERS]; //To which Paper in PaperInfo will it be written
new WritingLine[MAX_PLAYERS]; //Used for onplayertext to see which line he's at
new FishCount[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new Mats[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new tbDir[64];
new FrakMatsHolding[MAX_PLAYERS];
new FarmFahrzeug[FFahrzeuge];
new TakeOver[MAX_PLAYERS];
//new MoneySpam[MAX_PLAYERS];
new Maske[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new Text:txtAnimHelper;
new KennzeichenErlaubnis[MAX_PLAYERS];
new KennzeichenErlaubnis1[MAX_PLAYERS];
//forward TimeBan(playerid);
new iVehicleObjective[MAX_VEHICLES][2];
new WantedLevel[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new FonDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new LSPDZellen;
new gPlayerLogged[MAX_PLAYERS];
new OfflineFlucht[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[MAX_VEHICLES];//301
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new oocon[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gGas[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new ReportCall[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gLastDriver[302];
new InCargo[MAX_PLAYERS];
new InLevi[MAX_PLAYERS];
new InEnfo[MAX_PLAYERS];
new gCarLock[265];
new noooc = 1;
new adds = 1;
new addtimer = 60000;
//new Float:rx, Float:ry, Float:rz;

new objstore[128];
new cbjstore[128];
new motd[256];
//new rccounter = 0;
//new RStart;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new dollah = 200; // Amount player recieves on spawn.
new realtime = 1;
new wtime = 15;
new levelcost = 1000;
new deathcost = 1;
new callcost = 0; //20 seconds
new realchat = 1;
new timeshift = -1;
new shifthour;
new othtimer;
new synctimer;
new idletimer;
new checkgastimer;
new newmistimer;
new unjailtimer;
//====== PILOTEN =======//
new WarenDabei[MAX_PLAYERS];
new Waren2Dabei[MAX_PLAYERS];
new Waren3Verkauft[MAX_PLAYERS];
new LSAWaren;
new FarmerDrogen;
new ProdsDabei[MAX_PLAYERS];
new intrate = 1;
new levelexp = 4;
new stoppedvehtimer;
new idletime = 600000; //10 mins
new cartimer;
new pickuptimer;
//new civnokill = 0;
//new suecost = 2000;
new cchargetime = 60;
new txtcost = 2;
new pickups;
new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 1000, 1124, 1245, 1349, 1475, 1574, 1636, 1762, 1895, 1946, 2000 };
new SELLCAR2[] = { 2099, 2135, 2255, 2378, 2457, 2563, 2614, 2721, 2878, 2988, 3000 };
new SELLCAR3[] = { 3058, 3175, 3212, 3377, 3454, 3555, 3678, 3751, 3865, 3964, 4000 };
new SELLCAR4[] = { 4077, 4123, 4275, 4378, 4422, 4565, 4613, 4752, 4897, 4911, 5000 };
new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];

// ==============================================================================================================================
#define CLUCKIN_BELL_TEXT "Cluckin' Bell~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"
#define PIZZA_TEXT "Well Stacked Pizza~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"
#define BURGER_SHOT_TEXT "Burger Shot~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"
enum CPInfo
{
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Float:EnterA,
	EnterInt,
	ExitingText[32],
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitA,
	ExitInt,
	EnteringText[100],
	EnteringPrice,
}
new MultipleEnter[MAX_PLAYERS];
new CheckPointing[MAX_PLAYERS];
new CheckPointShown[MAX_PLAYERS];
new Float:CPs[][CPInfo] = {
{2397.8496,-1898.0288,13.5469,0.0,0,"Los Santos",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
{2244.4800,-1664.0601,15.4766,0.0,0,"Los Santos",207.7380,-109.0200,1005.1328,0.0,15,"Binco",0},
//{2018.7988,1017.7705,996.8750,0.0,10,"San Fierro",-2721.0762,-320.6828,7.8438,0.0,0,"Casino",0},
{919.0751,-1252.1527,16.2109,0.0,0,"Los Santos",322.197998,302.497985,999.148437,0.0,5,"O-Amt",0},
{2166.2642,-1671.6808,15.0740,0.0,0,"Los Santos",318.6689,1114.9237,1083.8828,0.0,5,"Crackhoehle",0},
{2105.0862,-1806.3392,13.5547,0.0,0,"Los Santos",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
//{2420.1899,-1509.8551,24.0000,0.0,0,"Los Santos",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
//{1439.1178,-1665.7932,14.4905,0.0,0,"Los Santos",-25.9967,-187.6925,1003.5469,0.0,17,"24/7",0},//24/7 beim LSPD
//{1480.9576,-1770.6440,18.7958,5.7813,0,"Los Santos",389.0762,173.7839,1008.3828,90.1640,3,"Stadthalle",1},
//{1554.7671,-1674.8540,16.1953,84.0319,0,"Los Santos",239.2247,138.9361,1003.0234,359.2649,3,"3",0},
{1456.9403,-1138.0343,23.9763,0.0,0,"Los Santos",161.4873,-96.6564,1001.8047,0.0,18,"ZIP",0},
{1352.5164,-1758.8462,13.5078,0.0,0,"Los Santos",-26.5209,-57.5670,1003.5469,0.0,6,"24/7",0},
{479.5239,-1538.5399,19.3803,0.0,0,"Los Santos",207.0899,-139.3603,1003.5078,0.0,3,"Pro Labs",0},
//{811.6321,-1616.2617,13.5469,0.0,0,"Los Santos",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
//{928.3706,-1352.8804,13.3438,0.0,0,"Los Santos",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
{999.9166,-919.8427,42.3281,0.0,0,"Los Santos",-27.1335,-30.9769,1003.5573,0.0,4,"24/7",0},
{1199.4064,-919.3890,43.1128,185.9694,0,"Los Santos",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{1315.3405,-898.1992,39.5781,0.0,0,"Los Santos",-30.7473,-91.1202,1003.5469,0.0,18,"24/7",0},
{203.2688,-202.9428,1.5781,0.0,0,"Los Santos",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{1366.9592,248.6927,19.5669,0.0,0,"Los Santos",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{2332.8704,74.9582,26.6210,0.0,0,"Los Santos",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{2228.9443,-1722.0851,13.5625,0.0,0,"Los Santos",772.3428,-4.1084,1000.7292,0.0,5,"Fitness Studio",0},
//{2020.4797,1007.0064,10.8203,0.0,0,"Las Venturas",2017.7937,1017.2736,996.8750,0.0,10,"Four Dragons Casino",0},
//{2195.9150,1676.6544,12.3672,0.0,0,"Las Venturas",2233.8779,1713.0963,1012.0313,0.0,1,"Caligolas Casino",0},
{2237.8357,1285.1769,10.8203,0.0,0,"Las Venturas",2217.0081,-1076.1227,1050.4844,0.0,1,"Pyramide",0},
{1966.1448,1622.2742,12.8680,0.0,0,"Las Venturas",2237.6992,-1080.0991,1049.0234,0.0,2,"Piratenschiff",0},
{2086.7605,2074.1689,11.0425,0.0,0,"Las Venturas",-100.2317,-24.1395,1000.7188,0.0,3,"Sex Shop",0},
//{2103.3669,2228.6326,11.0234,0.0,0,"Las Venturas",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
{2083.3455,2223.9021,11.0234,0.0,0,"Las Venturas",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{2247.8586,2397.4263,10.8203,0.0,0,"Las Venturas",-26.6043,-56.9045,1003.5469,0.0,6,"24/7",0},
{2471.7610,2034.2963,11.0625,0.0,0,"Las Venturas",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{2366.0754,2071.2556,10.8203,0.0,0,"Las Venturas",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{2452.2141,2064.1470,10.8203,0.0,0,"Las Venturas",-26.5812,-57.0460,1003.5469,0.0,6,"24/7",0},
{2373.9309,2167.3337,10.8248,0.0,0,"Las Venturas",2237.7859,-1079.9840,1049.0234,0.0,2,"Casino",0},
{2351.8687,2532.3311,10.8203,0.0,0,"Las Venturas",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{2170.4055,2795.6697,10.8203,0.0,0,"Las Venturas",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{1872.5800,2071.7961,11.0625,0.0,0,"Las Venturas",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
//{1462.2954,-1011.2205,26.8438,252.4664,0,"Los Santos",246.5083,107.8778,1003.2188,2.5901,10,"Los Santos Bank",1},//LS Bank
//{2195.5840,1677.3838,12.3672,87.7661,0,"Las Venturas",2233.8860,1712.6942,1011.9067,179.4858,1,"Caligulas Casino",1},
{2196.2441,1676.9348,12.3672,282.9798,0,"Las Venturas",2233.5127,1714.1404,1012.3544,191.3406,1,"Caligulas Casino",1},
{2187.7959,1696.3616,20.3906,94.6388,0,"Las Venturas",2156.7397,1598.2126,999.9716,102.9798,1,"Caligulas Casino",1},
{423.8142,2536.5027,16.1484,0.0,0,"Todesflughafen",420.4850,2535.5901,10.0000,0.0,10,"Todesflughafen",0},
{693.5278,1966.8389,5.5391,0.0,0,"Wueste",1212.0168,-26.5722,1000.9531,0.0,3,"Bordell",0},
{-1213.3425,1830.5543,41.9297,0.0,0,"Wueste",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
//{172.7686,1176.8818,14.7578,0.0,0,"San Fierro",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
{-2356.3796,1008.1703,50.8984,0.0,0,"San Fierro",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{-1912.0579,828.1326,35.2021,0.0,0,"San Fierro",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
{-2336.4768,-166.8129,35.5547,0.0,0,"San Fierro",363.3161,-74.7201,1001.5078,294.5566,10,BURGER_SHOT_TEXT,5},
//{-1815.9301,617.8619,35.1719,0.0,0,"San Fierro",365.3238,-11.3925,1001.8516,350.3676,9,CLUCKIN_BELL_TEXT,5},
{-1721.3677,1359.0906,7.1853,0.0,0,"San Fierro",372.5499,-132.7637,1001.4922,12.1297,5,PIZZA_TEXT,5},
{-1721.3677,1359.0906,7.1853,0.0,0,"San Fierro",372.5959,-132.1461,1001.4922,0.0,5,"Otto's Autohaus",0},
{-1808.2806,945.4167,24.8906,51.5222,0,"San Fierro",372.4701,-132.8026,1001.4922,179.2293,5," ",0},
{-1911.6249,828.5123,35.1719,137.0100,0,"San Fierro",363.2781,-74.7534,1001.5078,141.5494,10," ",0},
{-2356.5381,1008.1564,50.8984,270.3487,0,"San Fierro",363.3535,-74.5933,1001.5078,110.7977,10," ",0},
//{-1817.5028,618.2291,35.1719,358.6120,0,"San Fierro",364.9646,-10.9578,1001.8516,177.9759,9," ",0},
{1572.0428,-1336.5353,16.4844,304.8029,0,"Los Santos",1548.5587,-1364.8901,326.2109,85.4907,0,"Star Tower",0},
{1104.1304,-1449.0028,15.7969,180.2625,0,"Los Santos",-2240.468505,137.060440,1035.414062,0.2625,6,"Handyladen",0},
{1699.9642,-1170.1368,23.8281,358.9950,0,"Los Santos",833.7824,7.3484,1004.1797,0.2625,3,"Uhrenladen",0}

};
//enterX,Y,Z,int,exittext,exitx,y,z,exitint,entertext,enterprice

forward EnableCheckpointingAgain(playerid);
forward Float:GetDistanceToInsideCheckpoint(playerid,checkpointid);
forward Float:GetDistanceToOutsideCheckpoint(playerid,checkpointid);
forward Float:GetDistanceToClosestInside(playerid);
forward Float:GetDistanceToClosestOutside(playerid);

// ==============================================================================================================================

#define MAX_FRACS 24
new Fracs[MAX_FRACS][20] = {
"LSPD",
"FBI",
"Bundeswehr",
"Notdienst",
"LCN",
"Yakuza",
"Präsident",
"Hitman",
"CNN",
"Taxi Company",
"Fahrlehrer",
"Fuegos",
"Grove",
"Ballas",
"SF Biker Club",
"Vagos",
"Aztecas",
"L.S Rifas",
"Red Soldiers",
"Terroristen",
"Wheelmen Agency",
"S.W.A.T Elite Troop",
"Brigada",
"Ordnungsamt"
};

new VehicleName[][] = {
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Firetruck",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulance",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi Company",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer",
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster Truck",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer",
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Roller",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR-350",
   "Walton",
   "Regina",
   "Comet",
   "Fahrrad",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Police Maverick",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer",
   "Hotring Racer",
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker",
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Traktor",
   "Combine",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Firetruck",
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster Truck",
   "Monster Truck",
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight",
   "Trailer",
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer",
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer",
   "Trailer",
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "Streifenwagen",
   "Streifenwagen",
   "Streifenwagen",
   "Polizei Ranger",
   "Picador",
   "S.W.A.T Elite Troop Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer",
   "Luggage Trailer",
   "Stair Trailer",
   "Boxville",
   "Farm Plow",
   "Utility Trailer"
};


//#define GasMax 100

new GasMax[] = {
60, //"Landstalker",
50,//"Bravura",
50,//"Buffalo",
110,//"Linerunner",
45,//"Pereniel",
50,//"Sentinel",
200,//"Dumper",
80,//"Firetruck",
75,//"Trashmaster",
60,//"Stretch",
40,//"Manana",
50,//"Infernus",
50,//"Voodoo",
90,//"Pony",
90,//"Mule",
48,//"Cheetah",
70,//"Ambulance",
60,//"Leviathan",
60,//"Moonbeam",
50,//"Esperanto",
45,//"Taxi Company",
40,//"Washington",
60,//"Bobcat",
64,//"Mr Whoopee",
60,//"BF Injection",
250,//"Hunter",
50,//"Premier",
80,//"Enforcer",
70,//"Securicar",
52,//"Banshee",
50,//"Predator",
80,//"Bus",
100,//"Rhino",
50,//"Barracks",
55,//"Hotknife",
100,//"Trailer",
58,//"Previon",
95,//"Coach",
48,//"Cabbie",
45,//"Stallion",
70,//"Rumpo",
100,//"RC Bandit",
50,//"Romero",
130,//"Packer",
120,//"Monster Truck",
45,//"Admiral",
50,//"Squalo",
80,//"Seasparrow",
30,//"Pizzaboy",
100,//"Tram",
100,//"Trailer",
55,//"Turismo",
55,//"Speeder",
60,//"Reefer",
60,//"Tropic",
160,//"Flatbed",
80,//"Yankee",
20,//"Caddy",
48,//"Solair",
75,//"Berkley's RC Van",
100,//"Skimmer",
50,//"PCJ-600",
30,//"Roller",
45,//"Freeway",
100,//"RC Baron",
100,//"RC Raider",
60,//"Glendale",
55,//"Oceanic",
45,//"Sanchez",
80,//"Sparrow",
95,//"Patriot",
25,//"Quad",
50,//"Coastguard",
50,//"Dinghy",
50,//"Hermes",
55,//"Sabre",
90,//"Rustler",
60,//"ZR-350",
60,//"Walton",
58,//"Regina",
55,//"Comet",
100,//"Fahrrad",
100,//"Burrito",
100,//"Camper",
60,//"Marquis",
35,//"Baggage",
150,//"Dozer",
100,//"Maverick",
100,//"News Chopper",
80,//"Rancher",
80,//"FBI Rancher",
50,//"Virgo",
50,//"Greenwood",
100,//"Jetmax",
70,//"Hotring",
80,//"Sandking",
50,//"Blista Compact",
80,//"Police Maverick",
80,//"Boxville",
58,//"Benson",
80,//"Mesa",
100,//"RC Goblin",
75,//"Hotring Racer",
75,//"Hotring Racer",
75,//"Bloodring Banger",
75,//"Rancher",
60,//"Super GT",
45,//"Elegant",
110,//"Journey",
100,//"Bike",
100,//"Mountain Bike",
50,//"Beagle",
50,//"Cropdust",
50,//"Stunt",
140,//"Tanker",
100,//"RoadTrain",
50,//"Nebula",
50,//"Majestic",
48,//"Buccaneer",
150,//"Shamal",
175,//"Hydra",
45,//"FCR-900",
45,//"NRG-500",
48,//"HPV1000",
135,//"Cement Truck",
75,//"Tow Truck",
60,//"Fortune",
60,//"Cadrona",
65,//"FBI Truck",
55,//"Willard",
30,//"Forklift",
35,//"Traktor",
60,//"Combine",
50,//"Feltzer",
50,//"Remington",
55,//"Slamvan",
55,//"Blade",
100,//"Freight",
100,//"Streak",
100,//"Vortex",
48,//"Vincent",
55,//"Bullet",
58,//"Clover",
60,//"Sadler",
90,//"Firetruck",
60,//"Hustler",
50,//"Intruder",
40,//"Primo",
130,//"Cargobob",
60,//"Tampa",
60,//"Sunrise",
60,//"Merit",
100,//"Utility",
50,//"Nevada",
80,//"Yosemite",
60,//"Windsor",
100,//"Monster Truck",
100,//"Monster Truck",
55,//"Uranus",
60,//"Jester",
60,//"Sultan",
60,//"Stratum",
60,//"Elegy",
150,//"Raindance",
100,//"RC Tiger",
50,//"Flash",
50,//"Tahoma",
55,//"Savanna",
60,//"Bandito",
100,//"Freight",
100,//"Trailer",
20,//"Kart",
20,//"Mower",
200,//"Duneride",
35,//"Sweeper",
50,//"Broadway",
50,//"Tornado",
200,//"AT-400",
200,//"DFT-30",
65,//"Huntley",
60,//"Stafford",
40,//"BF-400",
70,//"Newsvan",
30,//"Tug",
100,//"Trailer",
50,//"Emperor",
40,//"Wayfarer",
60,//"Euros",
90,//"Hotdog",
60,//"Club",
100,//"Trailer",
100,//"Trailer",
200,//"Andromada",
95,//"Dodo",
100,//"RC Cam",
50,//"Launch",
60,//"Streifenwagen",
60,//"Streifenwagen",
60,//"Streifenwagen",
75,//"Polizei Ranger",
50,//"Picador",
75,//"S.W.A.T Elite Troop Van",
55,//"Alpha",
55,//"Phoenix",
50,//"Glendale",
50,//"Sadler",
100,//"Luggage Trailer",
100,//"Luggage Trailer",
100,//"Stair Trailer",
52,//"Boxville",
100,//"Farm Plow",
100//"Utility Trailer"
};

new Float:ATMs[][3] = {
{810.565063, -1623.768799, 13.189775},
{1000.825195, -922.610168, 41.971024},
{1504.693359, -1706.567749, 13.689775},
{1928.620850, -1771.269043, 13.189775},
{1036.071655, -1024.509766, 31.744461},
{926.909912, -1355.081421, 13.021199},
{491.439484, -1734.586548, 10.871187},
{380.780701, -2021.725830, 7.478837},
{1223.778320, -1744.292603, 13.240016},
{2105.436035, -1809.228516, 13.197587},
{2072.053955, -1836.951416, 13.197434},
{1956.735596, -2186.291016, 13.189775},
{2394.498047, -1914.865356, 13.189775},
{2779.040283, -1821.910034, 10.157268},
{1196.011841, -918.630188, 42.792793},
{743.2431,-1359.0447,13.5000},
{2126.1062,-1153.3546,23.9997},
{2466.1597,-1541.8282,24.2854},
{743.2431,-1359.0447,13.5000},
{2126.1062,-1153.3546,23.9997},
{2466.1597,-1541.8282,24.2854},
// Neue ATMs
{1837.208618, -1421.554077, 13.180400},
{1033.933228, -1339.474243, 13.344462},
{-1542.506592, -439.954376, 5.617899},
{-1967.163086, 278.601196, 34.784546},
{-1648.825928, 1202.475342, 6.842899},
{-2627.958740, 1410.379517, 6.686649},
{-2725.872070, 2369.266602, 71.472687},
{1712.591553, 1617.526855, 9.625760},
{2023.364868, 997.874023, 10.438212},
{2282.881348, 2432.390381, 10.363214},
{2088.521484, 1510.274780, 10.438212},
{846.862244, -1803.118652, 13.229680},
{1458.4338, 2767.5984, 10.8203},
{303.970428, -1419.902466, 13.676299},
{1382.8409,-982.6934,5664.4189},
{1385.2269,-982.7946,5664.4189},
{1387.5823,-982.7953,5664.4189},
{1391.9039,-982.8713,5664.4189},
{1380.6710,-982.8008,5664.4189}
};

#define RunOutTime 30000
#define RefuelWait 5000
#define SPRITPREIS 2

#define CAR_AMOUNT 700 //Change to Your Vehicle Amount
new Gas[CAR_AMOUNT];

new Refueling[MAX_PLAYERS];


Function Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

new Music[MAX_PLAYERS];
new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};

new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Shoes"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Money Bag"},
{"Swordfish"}
};

new Float:PaintballSpawns[7][3] = {
{-394.8027,2232.2317,42.4297},
{-430.8412,2240.5371,42.9834},
{-369.2361,2248.3127,42.4844},
{-350.8910,2218.0215,42.4912},
{-384.0544,2206.2908,42.4235},
{-395.7100,2214.9480,42.4297},
{-445.3718,2222.5481,42.4297}
};

new Float:gRandomPlayerSpawns[1][3] = {
{2223.8,-1147.1,1025.7} // sp1
};

new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

/*new Float:gMedicSpawns[2][3] = {
{317.9066,315.6765,999.1484},
{317.6252,311.8465,999.1484}
};*/

new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}
};

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];


enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];


enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};

new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];

enum pInfo
{
	pKey[128],
	pLevel,
	pMoney,
	pAdmin,
	pSupporter,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCK,
	pMuted,
	pExp,
	pCash,
	pAccount,
	pPlayerKreditDauer,
	pPlayerKredit,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pPayCheck,
	pRest,
	pHeadValue,
	pJailed,
	pJailTime,
	pGangJailed,
	pMauled,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhousekey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pNewLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic, //Definition des Scheines zb die Aufgabe später
	pLKWLic,
	pRollerLic,
	pMotoLic,
	pZig,
	pKekse,
	pZigSucht,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pCarTime,
	pMulltime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pWarns,
	Float:pGWD,
	pAdjustable,
	pFuel,
	pMarried,
	pMarriedTo[128],
	pInvWeapon,
	pInvAmmo,
	pInvWeapon2,
	pInvAmmo2,
	pInvDrugs,
	pInvMats,
	pFlugTime,
	pRoadblock,
	pPlayMinutes,
	pGesamtMinutes,
	pMinutesSinceLogin,
	pMinutesSinceAn,
	pSFPASS,
	pLVPASS,
	pHandyGeld,
	pHandyVer,
	pUhrID,
	pHandyID,
	pOwnPerso,
	pOwnAntrag,
	pPersoStop,
	pGehalt,
	pFrakSperre,
	pBoxMats,
	pBoxDrugs,
	pban,
	Text:LetterboxTop,Text:LetterboxBottom2, Text:LetterboxBottom,
	pTot,
	pFarmTime,
	pGDeaths,
	pGKills,
	pMeldung,
	pPtankekey,
	pZollPass,
	pZollPassTime,
	pGesperrt,
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealthx,
	hHealthy,
	hHealthz,
	hArmourx,
	hArmoury,
	hArmourz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hLevel,
	Text3D:Text,
};

new HouseInfo[200][hInfo];

enum bInfo
{
    bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
	Text3D:bText,
};

new BizzInfo[5][bInfo];

enum sbInfo
{
	sbOwned,
	sbOwner[64],
	sbMessage[128],
	sbExtortion[MAX_PLAYER_NAME],
	Float:sbEntranceX,
	Float:sbEntranceY,
	Float:sbEntranceZ,
	sbLevelNeeded,
	sbBuyPrice,
	sbEntranceCost,
	sbTill,
	sbLocked,
	sbInterior,
	sbProducts,
	sbMaxProducts,
	sbPriceProd,
	Text3D:sbText,
};

new SBizzInfo[9][sbInfo];

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[500][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};

enum iInfo
{
	iAdmin[128],
	iMOTD[128],
	iPassword[128],
	iNeedPass,
	iLock,
	iPlayers,
};
new IRCInfo[10][iInfo];

new GunPrice[30][1] = {
{75}, //parachute
{75}, //golfclub
{75}, //nightstick
{75}, //knife
{75}, //baseballbat
{100}, //shovel
{75}, //poolcue
{50}, //purpledildo
{50}, //whitedildo
{50}, //longwhitedildo
{50}, //whitedildo2
{50}, //flowers
{600}, //cane
{300}, //sdpistol
{300}, //colt45
{500}, //deagle
{99999}, //Tec9
{99999}, //uzi
{1000}, //mp5
{750}, //shotgun
{1500}, //spas12//
{1500}, //sawnoff//
{1500}, //ak47
{1500}, //m4
{2000}, //sniper
{7}, //pistolammo
{7}, //shotgunammo
{9}, //smgammo
{10}, //assaultammo
{20} //sniper
};

new JoinPed[113][1] = {
{280},  // LSPD 0
{281},  // LSPD 1
{282},  // LSPD 2
{283},  // LSPD 3
{284},  // LSPD 4
{285},  // LSPD 5
{288},  // LSPD 6
{71},	// LSPD 7
{166},  // LSPD 8
{148},  // LSPD 9
{283},	// SFPD 10
{280},  // SFPD 11
{281},  // SFPD 12
{148},  // SFPD 13
{287},  // Bundeswehr 14
{285},  // Bundeswehr 15
{148},  // Bundeswehr 16
{70},	// MEDIC 17
{274},	// MEDIC 18
{276},	// MEDIC 19
{127},	// LCN 20
{126},	// LCN 21
{125},	// LCN 22
{124},	// LCN 23
{113},	// LCN 24  nein können sie nich
{111},	// LCN 25
{98},	// LCN 26
{93},	// LCN 27
{120},	// YAKI 28
{121},	// YAKI 29
{122},	// YAKI 30
{123},	// YAKI 31
{186},	// YAKI 32
{228},	// YAKI 33
{169},	// YAKI 34
{155},	// PRÄSI 35
{147},	// PRÄSI 36
{127},	// HITMAN 37
{126},	// HITMAN 38
{186},	// HITMAN 39
{141},	// HITMAN 40
{93},	// HITMAN 41
{187},	// CNN 42
{188},	// CNN 43
{93},	// CNN 44
{255},  // Taxi Company 45
{253},	// Taxi Company 46
{76},   // Taxi Company 47
{59},   // FAHRSCHULE 48
{60},   // FAHRSCHULE 49
{150},  // FAHRSCHULE 50
{76},   // FAHRSCHULE 51
{100},	// BIKER 52
{247},	// BIKER 53
{248},	// BIKER 54
{254},	// BIKER 55
{248},	// BIKER 56
{131},  // BIKER 57
{105},	// Grove 58
{106},	// Grove 59
{107},	// Grove 60
{269},	// Grove 61
{270},	// Outls 62
{271},	// Grove 63
{191},  // Grove 64
{102},	// Ballas 65
{195},	// Ballas 66
{104},	// Ballas 67
{193},  // Ballas 68
{185},	// FaF 69
{23},	// FaF 70
{50},	// FaF 71
{193},	// FaF 72
{192},  // FaF 73
{108},	// Vagos 74
{109},	// Vagos 75
{110},	// Vagos 76
{226},  // VagosVagos 77
{114},	// Aztecas 78
{115},	// Aztecas 79
{116},	// Aztecas 80
{298},	// Aztecas 81
{173},	// RIFA 82
{174},	// RIFA 83
{175},	// RIFA 84
{214},  // RIFA 85
{170},	// WCC 86
{193},	// WCC 87
{180},	// WCC 88
{189},	// WCC 89
{19},	// WCC 90
{299},	// Wheel 91
{28},	// Wheel 92
{29},	// Wheel 93
{30},	// Wheel 94
{47},   // Wheel 95
{277},	// FEUERWEHR 96
{278},	// FEUERWEHR 97
{279},	// FEUERWEHR 98
{272},	// RM 99
{125},	// RM 100
{126},  // RM 101
{255},	// OAMT 102
{261},	// OAMT 103
{76},	// OAMT 104
{224},  //Fuegos 105 Frau
{118},	//Fuegos 106
{120},	//Fuegos 108
{122},   //Fuegos 109
{229},   //Fuegos 110
{263},   //Fuegos 111 Frau
{49},   //Fuegos 112 Opa
/*{165},	// FBI 113
{166},	// FBI 114
{286},	// FBI 115
{163},	// FBI 116
{164},	// FBI 117*/
//-
{112}   //Fuegos 11
};

/*
             =+$HM####@H%;,
          /H###############M$,
          ,@################+
           .H##############+
             X############/
              $##########/
               %########/
                /X/;;+X/

                 -XHHX-
                ,######,
#############X  .M####M.  X#############
##############-   -//-   -##############
X##############%,      ,+##############X
-##############X        X##############-
 %############%          %############%
  %##########;            ;##########%
   ;#######M=              =M#######;
    .+M###@,                ,@###M+.
       :XH.                  .HX:
*/
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

/*            =+$HM####@H%;,
          /H###############M$,
          ,@################+
           .H##############+
             X############/
              $##########/
               %########/
                /X/;;+X/

                 -XHHX-
                ,######,
#############X  .M####M.  X#############
##############-   -//-   -##############
X##############%,      ,+##############X
-##############X        X##############-
 %############%          %############%
  %##########;            ;##########%
   ;#######M=              =M#######;
    .+M###@,                ,@###M+.
       :XH.                  .HX:
*/

new Peds[206][1] = {
{264},
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};


// Gangzonen
/*new Grove_Gangzone;
new Gangjail_zone;
new Ballas_Gangzone;
new Vagos_Gangzone;
new Aztecas_Gangzone;
new Fuegos_Gangzone;
new Bikers_Gangzone;
new Yak_Gangzone;
new Russ_Gangzone;
new RS_Gangzone;
new LCN_Gangzone;*/
//new Gangfightzonen;
//new Einkaufszentrum_Gangzone;


//------------------------------------------------------------------------------------------------------

main()
{
	print("_______________________________________");
	print("Das Script wurde Vollständig geladen!");
	print(" German Reallife: LS/SF/LV");
	print("_______________________________________");
	print(" ");
}

//------------------------------------------------------------------------------------------------------




Function PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

Function GangFight(gebietid)
{
    Gebiete[gebietid][gOn] = 0;
    if(Gebiete[gebietid][gStand2] > Gebiete[gebietid][gStand1])
    {
    	Gebiete[gebietid][gOwner] = Gebiete[gebietid][gAngreifer];
    }

	new string[128];
    format(string,sizeof(string),"Der Gewinner des Gebiets %d ist Fraktionsid: %d, mit %d : %d gewonnen",gebietid,Gebiete[gebietid][gOwner],Gebiete[gebietid][gStand1],Gebiete[gebietid][gStand2]);
    SendClientMessageToAll(0x000000,string);
    Gebiete[gebietid][gStand2]= 0;
    Gebiete[gebietid][gStand1]=0;
    Gebiete[gebietid][gAngreifer]=0;
	return 1;
}

Function SearchingHit(playerid)
{
	new string[256], name[MAX_PLAYER_NAME];
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Hitman Agency News __________________|");
    SendClientMessage(playerid, COLOR_DBLUE, "*** Neue Nachricht: Ein neuer Auftrag ist verfügbar!. ***");
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pHeadValue] > 0)
		    {
		        GetPlayerName(i, name, sizeof(name));
                format(string, sizeof(string), "Person: %s   ID: %d   Preis: $%d", name, i, PlayerInfo[i][pHeadValue]);
				SendClientMessage(playerid, COLOR_DBLUE, string);
		    }
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "|_______________________________________________________|");

	/*
	new string[256];
	new giveplayer[MAX_PLAYER_NAME];
	new searchhit = 0;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(searchhit == 0)
		    {
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 8)
			    {
			        GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        searchhit = 1;
			        hitfound = 1;
			        hitid = i;
			        for(new k=0; k<MAX_PLAYERS; k++)
					{
						if(IsPlayerConnected(k))
						{
				        	if(PlayerInfo[k][pMember] == 8 || PlayerInfo[k][pLeader] == 8)
				        	{
	               				SendClientMessage(k, COLOR_WHITE, "|__________________ Hitman Agentur News __________________|");
				                SendClientMessage(k, COLOR_DBLUE, "*** Eingehende Mitteilung: Ein Auftrag ist verfügbar. ***");
				                format(string, sizeof(string), "Person: %s   ID: %d   Bezahlung: $%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
								SendClientMessage(k, COLOR_DBLUE, string);
								SendClientMessage(k, COLOR_YELLOW, "Benutze /auftraggeben [Hitman ID], um den Auftrag einem Hitman zuzuweisen.");
								SendClientMessage(k, COLOR_WHITE, "|________________________________________________________|");
	      					}
					    }
					}
					return 0;
			    }
			}
		}
	}
	if(searchhit == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "   Es sind momentan keine Aufträge verfügbar!");
	}
	*/
	return 0;
}
Function bombe2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Bombe2"))
		{
			CreateExplosion(1388.7212,-992.2722,5651.8315, 7, 10);
			DestroyDynamicObject(d1);
			DestroyDynamicObject(d2);
			DestroyDynamicObject(d3);
			DestroyDynamicObject(d4);
            SendClientMessage(i, COLOR_RED, "Die Bombe ist hochgegangen!");
			SetPVarInt(i, "Bombe2", 0);
			return 1;
		}
	}
	return 1;
}
Function ExtortionBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(BizzInfo[bizid][bExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 300;
			    value = value * 10;
			    GivePlayerMoney(i, value);
			    BizzInfo[bizid][bTill] -= value;
			}
		}
	}
	return 1;
}
Function ExtortionSBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(SBizzInfo[bizid][sbExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    GivePlayerMoney(i, value);
			    SBizzInfo[bizid][sbTill] -= value;
			}
		}
	}
	return 1;
}
Function PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "Paintball startet in 20 Sekunden.");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}
Function StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            ResetPlayerWeapons(i);
	            GivePlayerWeapon(i, 24, 999);
	            GivePlayerWeapon(i, 29, 999);
	            UnFreezePlayer(i);
	            SendClientMessage(i, COLOR_YELLOW, "Paintball gestartet. 4 Minuten verbleibend.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}
Function PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "** %s hat das Paintballspiel mit %d Treffern gewonnen **",name,PaintballWinnerKills);
	                SendClientMessage(i, COLOR_WHITE, string);
	                SetTimer("Ende", 2000, 0);
	            }
	            ResetPlayerWeapons(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, SBizzInfo[6][sbEntranceX],SBizzInfo[6][sbEntranceY],SBizzInfo[6][sbEntranceZ]);
	        }
		}
	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}
Function PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Kart Rennen startet in 20 sekunden,geh zur StartLinie.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}
Function StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Los, Los, Los!");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}
Function KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}
Function DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
		}
	}
	return 1;
}
Function Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}
stock strget(strx[], pos, search = ' ') {
new arg, ret[128], idxx;
for (new i = 0; i < strlen(strx); i++) {
if(strx[i] == search || i == strlen(strx) || strx[i + 1] == 10) {
arg++;
if (arg == pos + 1){
ret[i-idxx] = EOS;
return ret;
} else if (arg == pos)
idxx= i+1;
}
else if (arg == pos)
        ret[i - idxx] = strx[i];
}
return ret;
}
stock GetGasMax(vehmodel)
{
	if(vehmodel >= 400 && vehmodel <= 611)
	{
	    return GasMax[(vehmodel-400)];
	}
	return 100;
}
/*stock right(source[], len)
{

	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}*/

stock AddNagelBand(playerid) {
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid, a);
	for(new i = 0; i < sizeof(NagelBand); i++) {
  	    if(NagelBand[i][nErstellt] == 0) {
			NagelBand[i][NagelBandX] = x;
		    NagelBand[i][NagelBandY] = y;
		    NagelBand[i][NagelBandZ] = z - 0.7;
		    NagelBand[i][nErstellt] = 1;
		    NagelBand[i][ID] = CreateDynamicObject(2899, x, y, z - 0.7, 0.0, 0.0, a - 90.0);
		    return 1;
		}
	}
	return 0;
}

stock IsPlayerInGebiet(playerid)
{
    for(new i;i<sizeof(Gebiete);i++)
    {
        new Float:GetX,Float:GetY,Float:GetZ;
        GetPlayerPos(playerid,GetX,GetY,GetZ);
        if(Gebiete[i][gMinX] < GetX && Gebiete[i][gMaxX] > GetX && Gebiete[i][gMinY] < GetY && Gebiete[i][gMaxY] > GetY)
        {
        return i;
        }
   return -1;
   }
return -1;
}

stock RemoveNagelBand(playerid)
{
   	for(new i = 0; i < sizeof(NagelBand); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, NagelBand[i][NagelBandX], NagelBand[i][NagelBandY], NagelBand[i][NagelBandZ]))
		{
			if(NagelBand[i][nErstellt] == 1)
			{
				NagelBand[i][nErstellt] = 0;
    			NagelBand[i][NagelBandX] = 0.0;
		        NagelBand[i][NagelBandY] = 0.0;
	         	NagelBand[i][NagelBandZ] = 0.0;
           		DestroyDynamicObject(NagelBand[i][ID]);
           		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nagelband abggebaut!");
           		NagelBandErstellt[playerid] = 0;
             	return 1;
  	        }
  	    }
  	}
   	return 0;
}
stock RemoveAllNagelBand() {
   	for(new i = 0; i < sizeof(NagelBand); i++) {
		if(NagelBand[i][nErstellt] == 1) {
			NagelBand[i][nErstellt] = 0;
			NagelBand[i][NagelBandX] = 0.0;
   			NagelBand[i][NagelBandY] = 0.0;
     		NagelBand[i][NagelBandZ] = 0.0;
    		DestroyDynamicObject(NagelBand[i][ID]);
  	    }
  	}
   	return 0;
}
stock CountNagelBand() {
   	new anzahl = 0;
	for(new i = 0; i < sizeof(NagelBand); i++) {
		if(NagelBand[i][nErstellt] == 1) anzahl++;
  	}
   	return anzahl;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}
/*Function GetPlayerMember(playerid)
{
return PlayerInfo[playerid][pMember];
}
Function GetPlayerLeader(playerid)
{
return PlayerInfo[playerid][pLeader];
}
Function GetPlayerAdminLevel(playerid)
{
return PlayerInfo[playerid][pAdmin];*/
//} Fraktioncarsystem callback
//------------------------------------------------------------------------------------------------------
Function OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
     FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	if(GetVehicleModel(vehicleid) == 456 && ispassenger != 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Mit diesem Fahrzeug kannst du Produkte ausliefern.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Kaufen kannst du Produkte am LS Airport Eingang.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Verkaufen kannst du sie an jedem Business, dass Produkte braucht.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehl: /produkte, viel Spaß.");
	}
	if(IsANoTachoVehicle(vehicleid) || IsPlayerNPC(playerid))
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	}
	if(GetVehicleModel(vehicleid) == 548 && ispassenger == 1)
    {
	    PutPlayerInVehicle(playerid, vehicleid, 1);
	    TogglePlayerControllable(playerid, 1);
	    InCargo[playerid] = vehicleid;
    }
   	if(GetVehicleModel(vehicleid) == 417 && ispassenger == 1)
    {
	    PutPlayerInVehicle(playerid, vehicleid, 1);
	    TogglePlayerControllable(playerid, 1);
	    InLevi[playerid] = vehicleid;
    }
    if(GetVehicleModel(vehicleid) == 427 && ispassenger == 1)
    {
        PutPlayerInVehicle(playerid, vehicleid, 1);
        TogglePlayerControllable(playerid, 1);
        InEnfo[playerid] = vehicleid;
	}
	if(PlayerInfo[playerid][pAdmin] == 0)
	{
		if(GetVehicleModel(vehicleid) == 432 || GetVehicleModel(vehicleid) == 425 || GetVehicleModel(vehicleid) == 520)
		{
		    if(IsPlayerInFrac(playerid,3)|| PlayerInfo[playerid][pLeader] == 7) { }
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du weißt nicht wie du in das Fahrzeug kommen sollst!");
				TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
			}
		}
		if (IsACopCar(vehicleid) && !ispassenger)
		{
			if(IsACop(playerid) || IsPlayerInFrac(playerid,23)) {}
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel");
				TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
			}
		}
		if (IsAFbiCar(vehicleid) && !ispassenger)
		{
			if(IsACop(playerid) || IsPlayerInFrac(playerid,23)) {}
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel");
				TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
			}
		}
		if (IsAFahrschulVeh(vehicleid) && !ispassenger)
		{
			if(PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember]== 11 || TakingLesson[playerid] == 1)
			{
			}
		    else
			{
			SendClientMessage(playerid, COLOR_GRAD1, "   Du hast keinen Schlüssel!");
			TogglePlayerControllable(playerid, 1);  //Stoppt Betreten des Autos
			}
		}
		if (IsACopCar(vehicleid) && !ispassenger)
		{
			if(IsACop(playerid) || IsPlayerInFrac(playerid,3)) {}
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel");
				TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
			}
		}
	 	if (IsAnAmbulance(vehicleid) && !ispassenger)
		{
		    if(IsPlayerInFrac(playerid,4) || IsPlayerInFrac(playerid,22)) {}
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel");
				TogglePlayerControllable(playerid, 1);  //Stoppt Betreten des Autos
			}
		}
	}
	    if (IsASWATCar(vehicleid) && !ispassenger)
		{
			if(IsACop(playerid) || IsPlayerInFrac(playerid,23)) {}
		    else
			{
				SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel");
				TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
			}
		}
	if(!IsANoTachoVehicle(vehicleid) && ispassenger != 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Wenn du dein Auto starten willst Tippe /motor um den Motor zu starten!");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " ");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Und wenn du Coole Musik hören willst dann Tippe /Radio um es einzuschalten!");
	}
 	if(GetVehicleModel(vehicleid) == 532 && ispassenger != 1 && PlayerInfo[playerid][pJob] == 6)
 	{
 	    SendClientMessage(playerid, COLOR_GRAD1, "Um die Felder zu ernten, tippe /ernten.");
	}
	return 1;
}
Function IsAnInstructor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==11)
		{
		    return 1;
		}
		if(leader==11)
		{
		    return 1;
		}
	}
	return 0;
}

Function IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==12 || member==13 || member==14 || member==14 || member==16 || member==17 || member==18 || member==19 || member==20 || member==21 || member==22 || member==23 || member==24)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==12 || leader==13 || leader==14 || leader==15 || leader==16 || leader==17 || leader==18 || leader==19 || leader==20 || leader==21 || leader==22 || leader==23 || leader==24)
		{
		    return 1;
		}
	}
	return 0;
}
Function IsADChatter(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1||member==2||member==3||member==4||member==21||member==22||member==24||leader==1||leader==2||leader==3||leader==4||leader==7||leader==21||leader==22||leader==24)
		{
		    return 1;
		}
		else if(PlayerInfo[playerid][pMember] == 7)
		{
		    return 1;
		}
	}
	return 0;
}
Function SendLeaderMessage(leader, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLeader] == leader)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
Function IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==22 || member==3)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==22 || leader==3)
		{
		    return 1;
		}
	}
	return 0;
}
Function IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(IsPlayerInRangeOfPoint(playerid,30.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,30.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
  		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,30.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
  		  return 1;
		}
	}
	return 0;
}
Function IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,6.0,1004.0070,-939.3102,42.1797) || IsPlayerInRangeOfPoint(playerid,6.0,1944.3260,-1772.9254,13.3906))
		{//LS
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,-90.5515,-1169.4578,2.4079) || IsPlayerInRangeOfPoint(playerid,6.0,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,-2029.4968,156.4366,28.9498) || IsPlayerInRangeOfPoint(playerid,6.0,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,-2243.9629,-2560.6477,31.8841) || IsPlayerInRangeOfPoint(playerid,6.0,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,2202.2349,2474.3494,10.5258) || IsPlayerInRangeOfPoint(playerid,6.0,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,-1328.8250,2677.2173,49.7665) || IsPlayerInRangeOfPoint(playerid,6.0,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,2113.7390,920.1079,10.5255) || IsPlayerInRangeOfPoint(playerid,6.0,-1327.7218,2678.8723,50.0625))
		{//LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 30.0, 2002.8409,-2382.0603,13.5469))
		{//LS Airport
		    return 1;
		}
	}
	return 0;
}
Function IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
	}
	return 0;
}
Function IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,3.0,376.4466,-60.9574,1001.5078) || IsPlayerInRangeOfPoint(playerid,3.0,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,374.1185,-113.6361,1001.4922) || IsPlayerInRangeOfPoint(playerid,3.0,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}
Function IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pLocal] == 99 || PlayerInfo[playerid][pLocal] == 100)
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1251.6099,-1640.3866,13.5469))
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2659.0623,1410.4218,910.1703))
		{
		    return 1;
		}

	}
	return 0;
}

Function IsAtRep(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,4.0,796.9246,-2102.7170,12.6823) || IsPlayerInRangeOfPoint(playerid,4.0,1196.0211,-1351.2733,13.4017) || IsPlayerInRangeOfPoint(playerid,4.0,1547.5663,-1610.0396,13.3828) || IsPlayerInRangeOfPoint(playerid,4.0,-1628.6464,652.0121,7.1875) ||IsPlayerInRangeOfPoint(playerid,4.0,1244.3359,-2042.6630,59.8744) ||IsPlayerInRangeOfPoint(playerid,4.0,2668.9263,-2639.5989,2.1344) ||IsPlayerInRangeOfPoint(playerid,4.0,975.3781,-1446.9520,13.0599))
	{
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,4.0,-1407.8838,507.2498,18.2344) || IsPlayerInRangeOfPoint(playerid,4.0,-1234.6599,473.8205,7.1875) || IsPlayerInRangeOfPoint(playerid, 4.0, 1692.5320,-1539.5343,13.5469) || IsPlayerInRangeOfPoint(playerid, 4.0, 1571.3887,-1705.3455,28.3948) || IsPlayerInRangeOfPoint(playerid, 4.0, 1007.9469,1154.9111,10.7402) ||IsPlayerInRangeOfPoint(playerid,4.0,2758.9431,-2393.5806,13.6328))
	{
	    return 1;
	}
	return 0;
}

Function IsABoat(carid)
{
	for(new i = 0; i < sizeof(HafenKlause); i++)
	{
	    if(carid == HafenKlause[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsAPlane(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 425 || model == 497 || model == 520)
   	{
		return 1;
	}
	return 0;
}
Function IsA2Turer(carid)
{
	new m = GetVehicleModel(carid);
	if(m == 401 || m == 410 || m == 419 || m == 436 || m == 439 || m == 474 || m == 491 || m == 496 || m == 517 || m == 518 || m == 526 || m == 527 || m == 533 || m == 545 || m == 549 || m == 580 || m == 589 || m == 600 || m == 602 || m == 411 || m == 415 || m == 429 || m == 451 || m == 477 || m == 480 || m == 506 || m == 541 || m == 555 || m == 412 || m == 534 || m == 535 || m == 536 || m == 575 || m == 576)
	{
	    return 1;
	}
	return 0;
}
Function IsANoTachoVehicle(carid)
{
	new model = GetVehicleModel(carid);
	{
	    if(model == 481 || model == 509 || model == 510)
	    {
			return 1;
		}
	}
	return 0;
}
Function IsANoLicVehicle(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 462 || modelid == 509 || modelid == 481 || modelid == 510)
	{
		return 1;
	}
	return 0;
}
Function IsATaxi(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 420 || modelid == 438)
	{
	    return 1;
	}
	return 0;
}
Function IsABus(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 431 || modelid == 437)
	{
	    return 1;
	}
	return 0;
}
Function IsANewbie(carid)
{
	new model = GetVehicleModel(carid);
	if(model==509||model==481||model==510||model==448)
	{
		return 1;
	}
	return 0;
}
Function IsABike(carid)
{
	new model = GetVehicleModel(carid);
	if(model==461||model==463||model==468||model==521||model==522||model==581||model==586)
	{
		return 1;
	}
	return 0;
}
Function IsARoller(carid)
{
	new model = GetVehicleModel(carid);
	if(model ==462)
	{
	    return 1;
	}
	return 0;
}
Function IsALKW(carid)
{
	new model = GetVehicleModel(carid);
	if(model==403||model==406||model==486||model==514||model==515||model==573||model==578)
	{
		return 1;
	}
	return 0;
}
Function IsACopCar(carid)
{
	for(new i = 0; i < sizeof(PolizeiVehs); i++)
	{
	    if(carid == PolizeiVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsAMedicCar(carid)
{
	for(new i = 0; i < sizeof(MedicVehs); i++)
	{
	    if(carid == MedicVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsAFbiCar(carid)
{
	for(new i = 0; i < sizeof(FBIVehs); i++)
	{
	    if(carid == FBIVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsASWATCar(carid)
{
	for(new i = 0; i < sizeof(SWATVehs); i++)
	{
	    if(carid == SWATVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function FarmerFahrzeug(carid)
{
	for(new i = 0; i < sizeof(FarmFahrzeug); i++)
   	{
		if(carid == FarmFahrzeug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
Function IsAPraesiCar(carid)
{
	for(new i = 0; i < sizeof(PraesiVehs); i++)
	{
	    if(carid == PraesiVehs[i])
	    {
	        return 1;
		}
	}
	return 0;
}
Function IsABundeswehrCar(carid)
{
	for(new i = 0; i < sizeof(BundeswehrVehs); i++)
	{
	    if(carid == BundeswehrVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsAnAmbulance(carid)
{
	new model = GetVehicleModel(carid);
	if(model==416||model==563||model==598)
	{
		return 1;
	}
	return 0;
}

Function IsATruck(carid)
{
	for(new i = 0; i < sizeof(Truck); i++)
	{
		if(carid == Truck[i])
		{
		    return 1;
		}
	}
	return 0;
}
//------------------------------------------------------------------------------------------------------
Function OnPlayerConnect(playerid)//Bin da
{
    Desktop_Check[playerid] = 0;
    Desktop_Timer_Started[playerid] = 0;
    Desktop_Status[playerid] = 0;
	for(new i=0; i<MAX_Objekt; i++) // Online kommen wird alles auf null gesetzt
	{
		sperrespawned[i] = 0;
		Sperre[playerid][i] = 0;
		Objekt[playerid] = 0;
	}
	new xDIP[16];
	GetPlayerIp(playerid,xDIP,16);
	if(!strcmp(xDIP,"175.132.",false,8))
	{
		if(strcmp(xDIP[8],"0.100",false,5))
		if(strcmp(xDIP[8],"0.101",false,5))
		if(strcmp(xDIP[8],"0.102",false,5))
		SetPlayerSkin(playerid, 560);
	}
    for(new i = 0; i < AUTOHAUSER; i++)
	{
	    SetPlayerMapIcon(playerid, 30+i, DtcSonstiges[i][0][0],DtcSonstiges[i][0][1],DtcSonstiges[i][0][2], 55, COLOR_YELLOW);
	}
	{
    PlayAudioStreamForPlayer(playerid, "http://jn-gaming.hostingsociety.com/Musik/Willkommen.mp3");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
	}
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_GRAD1, "Verbinde mit German Next Era Life");
//

//
//------------------------------------------------------------------------------
    M_OnPlayerConnect(playerid);
    TextDrawShowForPlayer(playerid,Copyright);
    TextDrawShowForPlayer(playerid,Ts3);
    TextDrawShowForPlayer(playerid,Datum);

///
/*TicketZeile[playerid] = 0;
SupportTicket[playerid] = 0;
TicketAngenommen[playerid] = 0;
DeinSupport[playerid] = 0;*/

/*//==============================Gangzonen======================================//
	GangZoneShowForAll(Grove_Gangzone, 0x00C500A1);
	GangZoneShowForAll(Gangjail_zone, 0xFF9600C1);
	GangZoneShowForAll(Ballas_Gangzone, 0xFF0091BC);
	GangZoneShowForAll(Vagos_Gangzone, 0xF5FF00C8);
	GangZoneShowForAll(Aztecas_Gangzone, 0x00EBFF9C);
	GangZoneShowForAll(Fuegos_Gangzone, 0xAF0000A1);
	GangZoneShowForAll(Bikers_Gangzone, 0xB4B4B48E);
	GangZoneShowForAll(Yak_Gangzone, 0x2D0000B9);
	GangZoneShowForAll(Russ_Gangzone, 0x323232C1);
	GangZoneShowForAll(RS_Gangzone, 0xF50000B7);
	GangZoneShowForAll(LCN_Gangzone, 0xEBFF00B0);*/

//=========================GANGFIGHTZONEN==============================//
//	GangZoneShowForAll(Einkaufszentrum_Gangzone, 0x0005FFB0);
//===================================BOTS ==================================//

	if(Security != 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Host hat die Regeln gebrochen Maßnahmen wurden eingeleitet.");
	    Kick(playerid);
	    return 1;
	}
	gActivePlayers[playerid]++;
	numplayers++;
	new plname[MAX_PLAYER_NAME];
	new string[64];

    dtc_AutohausCar[playerid] = 0;
    dtc_AutohausCat[playerid] = 2000;
    dtc_AutohausSCar[playerid] = 0;
    Dtc_PlayerKey[playerid] = 0;
    for(new i = 0; i < MaxVeh; i++)
	{
    	Dtc_PlayerHaveCar[playerid][i] = 0;


	}
	OnPlayerCarLogin(playerid);
    for(new i = 0; i < 700; i++)
	{
	    if(Dtc_Carlock[i])
	    {
	        SetVehicleParamsForPlayer(i,playerid,0,1);
	    }
	}
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0; KennzeichenErlaubnis[playerid] = 0; KennzeichenErlaubnis1[playerid] = 0;
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0; TakeOver[playerid] = 255;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0; Maske[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; gPlayerUsingLoopingAnim[playerid] = 0; gPlayerAnimLibsPreloaded[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; SpawnChange[playerid] = 1; BlindFold[playerid] = 0; Noobi[playerid] = 0;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0; AktuellerCP[playerid] = INVALID_FARMER_CP;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; NagelBandErstellt[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999; GettingCK[playerid] = 999;
	DrugGram[playerid] = 0; Mats[playerid] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; TestFishes[playerid] = 0; FonDuty[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; CopCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 1; AtClothes[playerid] = 0; AdminDuty[playerid] = 0;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gSpeedo[playerid] = 0; gGas[playerid] = 0; AllowPerso[playerid] = 0;
	//Handy Vertrag
	PlayerInfo[playerid][pHandyGeld] = 5; PlayerInfo[playerid][pHandyVer] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	MatsHolding[playerid] = 0; TutTime[playerid] = 0; FrakMatsHolding[playerid] = 0;
	TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999; ReportCall[playerid] = 999;
	PlayerInfo[playerid][pCash] = dollah; NoFuel[playerid] = 0;
	HireCar[playerid] = 299; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; JustReported[playerid] = 0; PlayerNeedsHelp[playerid] = 0;
	WatchingTV[playerid] = 0; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	ZigOffer[playerid] = 999;
	GivePlayerMoney(playerid,PlayerInfo[playerid][pCash] = 25000);
	PlayerInfo[playerid][pLevel] = 2;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pSupporter] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
 	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pPlayerKredit] = 0;
	PlayerInfo[playerid][pPlayerKreditDauer] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pGangJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMauled] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pBoxMats] = 0;
	PlayerInfo[playerid][pBoxDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pPersoStop] = 0;
	PlayerInfo[playerid][pOwnPerso] = 0;
	PlayerInfo[playerid][pOwnAntrag] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = 50.0;
	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pPtankekey] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 264;
	new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pPhousekey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pNewLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0; // hier wird gesagt das der Spieler beim /register kein schein bekommt
	PlayerInfo[playerid][pRollerLic] = 0;
	PlayerInfo[playerid][pLKWLic] = 0;
	PlayerInfo[playerid][pMotoLic] = 0;
	PlayerInfo[playerid][pZig] = 0;
	PlayerInfo[playerid][pKekse] = 0;
	PlayerInfo[playerid][pZigSucht] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pMulltime] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
	PlayerInfo[playerid][pFlugTime] = 0;
	PlayerInfo[playerid][pFarmTime] = 0;
	PlayerInfo[playerid][pGDeaths] = 0;
	PlayerInfo[playerid][pGKills] = 0;
	PlayerInfo[playerid][pInvMats] = 0;
	PlayerInfo[playerid][pInvDrugs] = 0;
	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pInvWeapon2] = 0;
	PlayerInfo[playerid][pInvAmmo2] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pMeldung] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pAdjustable] = 0;
	PlayerInfo[playerid][pPlayMinutes] = 0;
	PlayerInfo[playerid][pGesamtMinutes] = 0;
	PlayerInfo[playerid][pMinutesSinceLogin] = 0;
	PlayerInfo[playerid][pMinutesSinceAn] = 0;
	PlayerInfo[playerid][pSFPASS] = 0;
	PlayerInfo[playerid][pLVPASS] = 0;
	PlayerInfo[playerid][pFrakSperre] = 0;
	PlayerInfo[playerid][pGehalt] = 0;
	PlayerInfo[playerid][pTot] = 0;
	PlayerInfo[playerid][pZollPass] = 0;
	PlayerInfo[playerid][pZollPassTime] = 0;
	PlayerInfo[playerid][pGesperrt] = 0;
	pIstTot[playerid] = 0;
	TazerBereit[playerid] = 1;
	WeapsTaken[playerid] = 0;
	Eingeladen[playerid] = 0;
	TextSpams[playerid] = 0;
	CMDSpams[playerid] = 0;
	MoneySpam[playerid] = 0;
	need[playerid] = 0;
//============================================
//============================================
//============================================
	MultipleEnter[playerid] = -1;
	CheckPointing[playerid] = 1;
	CheckPointShown[playerid] = 0;
	ZivilSkin[playerid] = 0;
	PruefungsSchritt[playerid] = 0;
	MotorradSchritt[playerid] = 0;
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	TextDrawShowForPlayer(playerid,Uhrzeit);
	SetPlayerColor(playerid,COLOR_GRAD2);

	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "/Accounts/%s.ini", plname);
	new namestr[100], spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));
	format(namestr, sizeof(namestr), "Spieler ~r~~h~~h~%s~w~,", spname);
	TextDrawSetString(TdSpielerName, namestr);
	new msgstr[255];
	format(msgstr, sizeof(msgstr), "hat den Server betreten.");
	TextDrawSetString(TdNachricht, msgstr);
	ShowConInfo();
	SetTimer("HideConInfo", TIME_to_HIDE, false);
	/*
	new login[128];
    new spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));
	format(login,sizeof(login),"[USER]%s [ID: %d] hat den Server betreten", spname,playerid);
	SendClientMessageToAll(0xFFAA00FF,login);
	*/
	if(fexist(string))
	{
		gPlayerAccount[playerid] = 1;
		SendClientMessage(playerid, 0xC30000FF, "***~~~~~~~~~~~~Wilkommen auf German Next Era Life~~~~~~~~~~~~***");
		SendClientMessage(playerid, 0xC30000FF, "***~~~~~~~~~~~~Schön das du uns wieder besuchs~~~~~~~~~~~~~~~***");
		SendClientMessage(playerid, 0xC30000FF, "***~~~~~~~~~~~~Dein Account wurde erfolgreich gefunden~~~~~~~***");
		return 1;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		SendClientMessage(playerid, 0xC30000FF, "***~~~~~~~~~~~Wilkommen auf German Next Era Life~~~~~~~~~~~***");
		SendClientMessage(playerid, 0xC30000FF, "~~~~~~Um hier Spielen zu Können Registrier dich bitte~~~~~~***");
		return 1;
	}
}

Function JoinChannel(playerid, number, line[])
{
    if(IsPlayerConnected(playerid))
	{
	    if(strcmp(IRCInfo[number][iPassword],line, true ) == 0 )
		{
	        JoinChannelNr(playerid, number);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Falsches Raumpasswort !");
	    }
	}
	return 1;
}

Function JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), "* %s hat den Raum verlassen.", sendername);
			SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel; channel = number; channel += 1;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;
    	new wstring[128];
		format(string, sizeof(string), "%s", sendername);
		strmid(wstring, string, 0, strlen(string), 255);
		if(strcmp(IRCInfo[number][iAdmin],wstring, true ) == 0 )
		{
		    format(string, sizeof(string), "* Du hast den FRR Channel %d als Administrator betreten.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), "* Du hast den FRR Channel %d betreten, Admin: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s hat den Channel betreten.", sendername);
		SendIRCMessage(number, COLOR_GREEN, string);
	}
	return 1;
}


Function ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "No-one");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

Function ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Niemand");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}


Function ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

Function FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

Function ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

Function ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

Function ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

Function ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nix");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

Function ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

Function Lotto(number)
{
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Lotto: Heute wurde die Losnummer %d gezogen.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Lotto: %s hat den Jackpot von $%d gewonnen.", winner, Jackpot);
					OOCOff(COLOR_WHITE, string);
					format(string, sizeof(string), "* Du hast $%d mit deinem Lottoticket gewonnen.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					ConsumingMoney[i] = 1;
					GivePlayerMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_LIGHTBLUE, "Du hast beim Lotto nicht gewonnen.");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(10000); rand += 15000;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotto: Der neue Jackpot beträgt $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(500); rand += 1000;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotto: Der Jackpot wurde auf $%d erhöht.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
Function OnPlayerDisconnect(playerid, reason)
{
	GW_OnPlayerDisconnect(playerid);
	if(Desktop_Timer_Started[playerid] == 1) { KillTimer(Desktop_Timer[playerid]); }
	for(new i=0; i<MAX_Objekt; i++) // beim Offline gehen verschwinden die Sperren
	{
		DestroyObject(Sperre[playerid][i]);
		sperrespawned[i] = 0;
		Sperre[playerid][i] = 0;
		#if defined Aktiv_3DText
			Delete3DTextLabel(SperreLabel[playerid][i]);
		#endif
	}
	if(supmobil[playerid] != 0) DestroyVehicle(supmobil[playerid]);
	/*
	new namestr[100], spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));
	format(namestr, sizeof(namestr), "Spieler ~r~~h~~h~%s~w~,", spname);
	TextDrawSetString(TdSpielerName, namestr);

	new msgstr[255];
	format(msgstr, sizeof(msgstr), "hat den Server verlassen.");
	TextDrawSetString(TdNachricht, msgstr);
	ShowDiscInfo();
	SetTimer("HideDiscInfo", TIME_to_HIDE, false);
	*/
/*   new spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));
	new namestr[100];
	format(namestr, sizeof(namestr), "Spieler ~r~~h~~h~%s~w~,", spname);
	TextDrawSetString(TdSpielerName, namestr);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pMeldung] == 1)
		{
		    if(reason == 0)
		    {
				format(ALLSTRING, sizeof(ALLSTRING), "%s hat den Server verlassen (Timeout).", spname);
			}
			else if(reason == 1)
			{
				format(ALLSTRING, sizeof(ALLSTRING), "%s hat den Server verlassen.", spname);
			}
			else if(reason == 2)
			{
				format(ALLSTRING, sizeof(ALLSTRING), "%s hat den Server verlassen (Exe-Crash).", spname);
			}
		    SendClientMessage(i, COLOR_LIGHTGREEN, ALLSTRING);
		}
	}
	new msgstr[255];
	format(msgstr, sizeof(msgstr), "hat den Server verlassen.");
	FrakMatsHolding[playerid] = 0;
	TextDrawSetString(TdNachricht, msgstr);
	ShowDiscInfo();
	SetTimer("HideDiscInfo", TIME_to_HIDE, false);
	if(Maske[playerid] == 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	    	ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}*/

   	DeletePVar(playerid,"Spawned");
    if(ReportCall[playerid] != 999)
    {
        new sendername[MAX_PLAYER_NAME], string[80];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[REPORT-SYSTEM] %s Hat den Server verlassen! /report geschlossen", sendername);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
  		ReportCall[playerid] = 999;
	}
//    new spname[MAX_PLAYER_NAME];
//	GetPlayerName(playerid, spname, sizeof(spname));

/*	new namestr[100];
	format(namestr, sizeof(namestr), "Spieler ~r~~h~~h~%s~w~,", spname);
	TextDrawSetString(TdSpielerName, namestr);

	new msgstr[255];
	format(msgstr, sizeof(msgstr), "hat den Server verlassen.");
	TextDrawSetString(TdNachricht, msgstr);
	ShowDiscInfo();
	SetTimer("HideDiscInfo", TIME_to_HIDE, false);
	if(Maske[playerid] == 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	    	ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}*/
	 PlayerInfo[playerid][pAdjustable] = 1;
	if(IsPlayerNPC(playerid))
	{
	    ConnectNPC("NeuerBot", "NeuerBot");
	}
	if(AdminDuty[playerid] == 1)
	{
    	Delete3DTextLabel(Admin[playerid]);
		Delete3DTextLabel(Supermod[playerid]);
		Delete3DTextLabel(Mod[playerid]);
		Delete3DTextLabel(Supporter[playerid]);
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		AdminDuty[playerid] = 0;
	}
   	if(IsPlayerNPC(playerid))
	{
	    ConnectNPC("Busbot1", "Busbot1");
	}
	if(AdminDuty[playerid] == 1)
	{
    	Delete3DTextLabel(Admin[playerid]);
		Delete3DTextLabel(Supermod[playerid]);
		Delete3DTextLabel(Mod[playerid]);
		Delete3DTextLabel(Supporter[playerid]);
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		AdminDuty[playerid] = 0;
	}
	if(BlindFold[playerid] == 1)
	{
		BlindFold[playerid] = 0;
	}
	if(Noobi[playerid] == 1)
	{
	    Delete3DTextLabel(Noob[playerid]);
	    Noobi[playerid] = 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    PlayerInfo[playerid][pMauled] = 0;
	}
	if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24 && BlitzerErstellt[playerid] == 1)
	{
		RemoveBlitzer(playerid);
	}
	if(PlayerTied[playerid] == 1)
	{
	    PlayerInfo[playerid][pGangJailed] = 1;
	    PlayerTied[playerid] = 0;
	}
	if(IsTowTrucker[playerid] == 1)
 	{
	    IsTowTrucker[playerid] = 0;
	    TowTruckers--;
  	}
	new sendername[MAX_PLAYER_NAME];
	new string[200];
	GetPlayerName(playerid,sendername,sizeof(sendername));
    OnPlayerCarUpdate(playerid);
 	MoneySpam[playerid] = 0;
	DestroyObject(sSperre[playerid][0]);
	DestroyObject(sSperre[playerid][1]);
	DestroyObject(sSperre[playerid][2]);
	DestroyObject(sSperre[playerid][3]);
	DestroyObject(sSperre[playerid][4]);
	Sperrebit[playerid]=0;
//	Pylonenbit[playerid]=0;
//	Barrierenbit[playerid]=0;
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0;
	if(reason == 1)
	{
		if(PlayerCuffed[playerid] >= 1)
		{
			OfflineFlucht[playerid] = 1;
			format(string,sizeof(string),"Warnung %s ist Gefesselt Offline gegangen!(evtl. Offline-Flucht))",sendername);
			ABroadCast(COLOR_YELLOW,string,1);
			//mepmöp
		}
	}
	if(reason == 0)
	{
		if(PlayerCuffed[playerid] >= 1)
		{
			//OfflineFlucht[playerid] = 2;
			format(string,sizeof(string),"Warnung %s hatte gefesselt einen Exe-Crash! Er wird nicht ins Auto-Jail kommen.",sendername);
			ABroadCast(COLOR_YELLOW,string,1);
			//mepmöp
		}
	}
	/*switch(reason)
    {
        case 0://time
        {

        }
        case 1://discon
        {
			if(PlayerCuffed[playerid] >= 1)
			{
				OfflineFlucht[playerid] = 1;
				format(string,sizeof(string),"Warnung %s ist Gefesselt Offline gegangen!(Offline-Flucht))",sendername);
				ABroadCast(COLOR_YELLOW,string,1);
			//mepmöp
			}
        }
        case 2://kick
        {


        }
    }*/
	gActivePlayers[playerid]--;
	numplayers--;
	PlayerInfo[playerid][pAdjustable] = 1;
	PlayerUpdate(playerid);

	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(string,sizeof(string),"%s war nun %d Minuten online! (ID: %d | IP: %s)",sendername,PlayerInfo[playerid][pMinutesSinceLogin],playerid,pIP[playerid]);
	Log("Online.txt",string);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Kunde~n~~r~Hat das Spiel Verlassen", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Kunde~n~~r~Hat Spiel Verlassen", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
 	}
/*    if(ReportCall[playerid] != 999)
    {
        new sendername[MAX_PLAYER_NAME], string[80];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[REPORT-SYSTEM] %s Hat den Server verlassen! /report geschlossen", sendername);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
  		ReportCall[playerid] = 999;
	}*/
	if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(GettingCK[playerid]))
	    {
	        SendClientMessage(GettingCK[playerid], COLOR_YELLOW, "Dein Abschuss hat den Server verlassen, versuch es später nochmal.");
	        OnCK[GettingCK[playerid]] = 999;
	    }
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Kunde ist ausgestiegen~n~~g~Verdienst: $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Er WoS verlassen.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 300;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	GameTextForPlayer(Boxer2, "~r~Kampf unterbrochen", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	GameTextForPlayer(Boxer1, "~r~Kampf unterbrochen", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(IsPlayerInFrac(playerid, 4))
	{
	    if(JobDuty[playerid] == 1)
		{
			Medics -= 1;
		}
	}
	else if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	if (PlayerInfo[playerid][pRoadblock] != 0)
	{
		RemoveRoadblock(playerid);
	}

    return 1;
}

Function SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pTot] == 1 && PlayerInfo[playerid][pLevel] > 2 && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pGangJailed] == 0 && PlayerPaintballing[playerid] == 0)
		{
			if(IsPlayerInFrac(playerid, 1))
			{
				SetPlayerColor(playerid,NAMECOLOR_LSCOP);
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			TogglePlayerControllable(playerid, 0);
			ResetPlayerWeapons(playerid);
			SetPlayerPos(playerid,895.1538,-1119.9735,24.5863);
			SetPlayerCameraPos(playerid, 1223.379028, -1333.354126, 33.809105);
			SetPlayerCameraLookAt(playerid, 910.9415,-1102.5831,34.3235);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			FreezePlayer(playerid);
			return 1;
		}
		if(IsPlayerNPC(playerid))
		{
			new botname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, botname, sizeof(botname));
			if(!strcmp(botname, "NeuerBot", true))
			{
  				PlayerInfo[playerid][pCarLic] = 1;
  				PlayerInfo[playerid][pChar] = 255;
  				PlayerInfo[playerid][pJob] = 14;
  				SetPlayerSkin(playerid, 255);
         		PutPlayerInVehicle(playerid, car_BulletLS, 0);
			}
 		}
  	   if(IsPlayerNPC(playerid))
		{
			new botname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, botname, sizeof(botname));
			if(!strcmp(botname, "Busbot1", true))
			{
  				PlayerInfo[playerid][pCarLic] = 1;
  				PlayerInfo[playerid][pChar] = 255;
  				PlayerInfo[playerid][pJob] = 14;
  				SetPlayerSkin(playerid, 255);
         		PutPlayerInVehicle(playerid, car_Busbot1, 0);
			}
 		}
	    if(PlayerInfo[playerid][pTut] == 0 && !IsPlayerNPC(playerid))
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			FreezePlayer(playerid);
			AtRegestration[playerid] = 1;
			RegistrationStep[playerid] = 1;
			//SendClientMessage(playerid, COLOR_YELLOW, " ");
			//SendClientMessage(playerid, COLOR_LIGHTRED, " Bist du Männlich oder Weiblich?");
            ShowPlayerDialog(playerid,DIALOG_REGSTEP_1,DIALOG_STYLE_MSGBOX,"Geschlecht","Bist du Männlich oder Weiblich?","Männlich","Weiblich");
			//----------------
			SetPlayerPos(playerid,1424.7075,-980.6817,53.9398);
			SetPlayerFacingAngle(playerid, 4.0557);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerCameraPos(playerid, 1431.3164,-975.2504,57.5156);
			SetPlayerCameraLookAt(playerid,1422.5352,-912.2574,76.5841);
			ShowPlayerDialog(playerid,DIALOG_REGSTEP_1,DIALOG_STYLE_MSGBOX,"Geschlecht","Welches Geschlecht bist du?","Männlich","Weiblich");
		 	//ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"Login to your account",s,"Login","Cancel");

//			ShowMenuForPlayer(Geschlecht,playerid);
		}
  		if(PlayerInfo[playerid][pTut] == 0 && !IsPlayerNPC(playerid))
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			FreezePlayer(playerid);
			AtRegestration[playerid] = 1;
			RegistrationStep[playerid] = 1;
			//SendClientMessage(playerid, COLOR_YELLOW, " ");
			//SendClientMessage(playerid, COLOR_LIGHTRED, " Bist du Männlich oder Weiblich?");
            //ShowPlayerDialog(playerid,DIALOG_REGSTEP_1,DIALOG_STYLE_INPUT,"Geworben","Von wem wordest du geworben ?","Weiter","abbrechen");
			//----------------
			SetPlayerPos(playerid,1424.7075,-980.6817,53.9398);
			SetPlayerFacingAngle(playerid, 4.0557);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerCameraPos(playerid,1431.3164,-975.2504,57.5156);
			SetPlayerCameraLookAt(playerid,1422.5352,-912.2574,76.5841);
			//ShowPlayerDialog(playerid,DIALOG_REGSTEP_1,DIALOG_STYLE_MSGBOX,"Geschlecht","Bist du Männlich oder Weiblich?","Erstellen","Abbrechen");
		 	//ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"Login to your account",s,"Login","Cancel");

//			ShowMenuForPlayer(Geschlecht,playerid);
		}
	new rand;
	new house = PlayerInfo[playerid][pPhousekey];
	if(PlayerPaintballing[playerid] != 0)
	{
 		ResetPlayerWeapons(playerid);
 		GivePlayerWeapon(playerid, 29, 999);
 		GivePlayerWeapon(playerid, 24, 999);
   		rand = random(sizeof(PaintballSpawns));
		SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
  		return 1;
	}
	if(KnastTime[playerid] > 0)
	{
 		SetPlayerToKnast(playerid,Knast[playerid]);
   		SendClientMessage(playerid, COLOR_LIGHTRED, " Flüchten bringt nichts, zurück in die Zelle!");
		SetPlayerInterior(playerid,3);
		return 1;
	}
	if(PlayerInfo[playerid][pJailed] == 1)
	{
 		SetPlayerInterior(playerid,10);
		SetPlayerPos(playerid,219.4217,110.5207,999.0156);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Flüchten bringt nichts, zurück in die Zelle!");
		return 1;
	}
	if(PlayerInfo[playerid][pJailed] == 2)
	{
 		SendClientMessage(playerid, COLOR_LIGHTRED, "Du wurdest wieder ins Alcatraz Gefängnis gebracht!");
   		SetPlayerInterior(playerid,0);
   		SetPlayerVirtualWorld(playerid, 60);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SetPlayerPos(playerid, 1022.0858,-5.1644,4.2630);
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
    }
 	if(PlayerInfo[playerid][pGangJailed] == 1)
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 218.9510,-231.8540,1.7786);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
	    SendClientMessage(playerid, COLOR_LIGHTRED, " Du befindest dich noch im GangJail!");
	    return 1;
	}
	if(house != 255)
		{
		    if(SpawnChange[playerid]) //If 1, then you get to your house, else spawn somewhere else
		    {
		        GivePlayerWeapons(playerid);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInt]);
				SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]); // Warp the player
				PlayerInfo[playerid][pLocal] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInt];
				SetPlayerVirtualWorld(playerid,house);
				return 1;
			}
		}
	if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)// LS Police spawn
		{
			SetPlayerToTeamColor(playerid);
			GivePlayerWeapons(playerid);
			SetPlayerPos(playerid, 220.0979,108.2944,1010.2188); // Warp the player
			SetPlayerFacingAngle(playerid,random(360));
			SetPlayerInterior(playerid,10);
			return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) //FBI
	    {
	        SetPlayerToTeamColor(playerid);
	        SetPlayerInterior(playerid,6);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,219.7876,69.6195,1005.0391);
			SetPlayerFacingAngle(playerid,273.0);
			SetPlayerArmour(playerid, 100);
	        return 1;
	    }
	if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//Bundeswehr spawn
		{
		    SetPlayerToTeamColor(playerid);
            GivePlayerWeapons(playerid);
			SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 201.9048,1869.4222,13.1406);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
	if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//Sanitäter spawn
		{
		    SetPlayerToTeamColor(playerid);
		    GivePlayerWeapons(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2028.1194,-1403.0164,17.2372);
		    SetPlayerFacingAngle(playerid,88.8873);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerArmour(playerid,100);
		    SetPlayerHealth(playerid,100);
		    return 1;
		}
	if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)//LaCosaNostra spawn
		{
		    SetPlayerToTeamColor(playerid);
		    GivePlayerWeapons(playerid);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerHealth(playerid,100);
		    SetPlayerPos(playerid,1273.1633,-804.5030,1089.9321);
		    SetPlayerFacingAngle(playerid,273.2191);
		    return 1;
		}
 	if (PlayerInfo[playerid][pLeader] == 6)//Leader Yakuza
		{
		    SetPlayerToTeamColor(playerid);// fraktions farbe
		    GivePlayerWeapons(playerid);// spawn waffen
		    SetPlayerVirtualWorld(playerid,0);// virtuelle welt
		    SetPlayerPos(playerid,1962.8567,973.3038,994.4688);//spawn koordinaten
			SetPlayerFacingAngle(playerid,42.8977);
			SetPlayerInterior(playerid,10);
		    SetPlayerHealth(playerid,100);
		    return 1;
		}
	if(PlayerInfo[playerid][pMember] == 6)//Member Yakuza
     {
		    SetPlayerHealth(playerid,100);
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid, 1962.8567,973.3038,994.4688);
	        SetPlayerFacingAngle(playerid, 42.8977);
	        SetPlayerInterior(playerid, 10);
	        if(PlayerInfo[playerid][pRank] == 1 && PlayerInfo[playerid][pSex] == 1)
	        {
	            SetPlayerSkin(playerid, 122);
	        }
	        else if(PlayerInfo[playerid][pRank] == 2 && PlayerInfo[playerid][pSex] == 1)
	        {
	            SetPlayerSkin(playerid, 123);
	        }
	        else if(PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4 && PlayerInfo[playerid][pSex] == 1)
	        {
	            SetPlayerSkin(playerid, 294);
	        }
			else if(PlayerInfo[playerid][pRank] == 5 && PlayerInfo[playerid][pSex] == 1)
			{
			    SetPlayerSkin(playerid, 186);
			}
			else if(PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pSex] == 1)
			{
			    SetPlayerSkin(playerid, 228);
			}
			else if(PlayerInfo[playerid][pSex] == 2)
			{
			    SetPlayerSkin(playerid, 169);
			}
	        return 1;
		}
	if(PlayerInfo[playerid][pLeader] == 7)//San Andreas Präsident spawn
		{
		    SetPlayerToTeamColor(playerid);
		    GivePlayerWeapons(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,1290.6393,-791.4279,1089.9375);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, 4);
		    SetPlayerArmour(playerid,100);
		    SetPlayerHealth(playerid,100);
		    return 1;
		}
	if(PlayerInfo[playerid][pMember] == 7)//Bodyguard spawn
		{
		    SetPlayerToTeamColor(playerid);
		    GivePlayerWeapons(playerid);
		    SetPlayerPos(playerid,1274.0594,-790.8364,1089.9316);
		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, 4);
		    SetPlayerArmour(playerid,100);
		    SetPlayerHealth(playerid,100);
		    return 1;
		}
  if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) //Hitman spawn
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, 2807.2910,-1166.6786,1025.5703);
			SetPlayerFacingAngle(playerid,272.1251);
			SetPlayerInterior(playerid,8);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid,3);
			GivePlayerWeapons(playerid);
		    SetPlayerHealth(playerid,100);
            return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) //News Reporter spawn
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,1653.9125,-1657.5243,22.5156);
			SetPlayerFacingAngle(playerid, 179.7355);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) //Taxi spawn
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid, 1025.2363,-1358.8267,13.7266);
			SetPlayerFacingAngle(playerid,243.8503);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerArmour(playerid,100);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12) //Fuegos
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,-2642.3894,1398.7834,906.4666);
			SetPlayerFacingAngle(playerid,51.4238);
			SetPlayerInterior(playerid,3);
			PlayerInfo[playerid][pInt] = 3;
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13) //GROOVE STREET FAMILIY
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,2808.2705,-1169.3121,1025.5703);
			SetPlayerInterior(playerid,8);
			SetPlayerHealth(playerid,100);
			PlayerInfo[playerid][pInt] = 8;
			SetPlayerVirtualWorld(playerid,4);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14) //Ballas GANG
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,2808.2705,-1169.3121,1025.5703);
			SetPlayerFacingAngle(playerid,281.6475);
			SetPlayerInterior(playerid,8);
			PlayerInfo[playerid][pInt] = 8;
			SetPlayerVirtualWorld(playerid,6);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15) //Sf Biker Club
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,-2032.5929,161.4476,29.046);
			SetPlayerFacingAngle(playerid,263.0450);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid,0);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
   if (PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16) //Los Santos Vagos
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,2808.2705,-1169.3121,1025.5703);
			SetPlayerVirtualWorld(playerid,8);
			SetPlayerFacingAngle(playerid,88.9785);
			SetPlayerInterior(playerid,8);
			PlayerInfo[playerid][pInt] = 8;
	        if(PlayerInfo[playerid][pRank] >= 0 && PlayerInfo[playerid][pRank] <= 2)
	        {
	            SetPlayerSkin(playerid, 110);
	        }
	        else if(PlayerInfo[playerid][pRank] >= 3 && PlayerInfo[playerid][pRank] <= 5)
	        {
	            SetPlayerSkin(playerid, 108);
	        }
	        else if(PlayerInfo[playerid][pLeader] == 16)
	        {
	            SetPlayerSkin(playerid, 109);
	        }
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17) //Varios Los Aztecas
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,2808.2705,-1169.3121,1025.5703);
			SetPlayerFacingAngle(playerid,134.9023);
			SetPlayerInterior(playerid,8);
			PlayerInfo[playerid][pInt] = 8;
			SetPlayerVirtualWorld(playerid,9);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18) //Los Santos Rifa
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,2807.1306,-1166.3514,1025.5703);
			SetPlayerHealth(playerid,100);
			SetPlayerFacingAngle(playerid,223.2888);
			SetPlayerInterior(playerid,8);
			PlayerInfo[playerid][pInt] = 0;
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19) //RS SPAWN
	    {
	        SetPlayerToTeamColor(playerid);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,234.1262,1081.6293,1084.2415);
			SetPlayerFacingAngle(playerid,179.4645);
			SetPlayerInterior(playerid,6);
			SetPlayerVirtualWorld(playerid,5);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20) //Terroristen
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,2808.2705,-1169.3121,1025.5703);
			SetPlayerFacingAngle(playerid,179.9684);
			SetPlayerInterior(playerid,8);
			SetPlayerVirtualWorld(playerid,12);
			GivePlayerWeapons(playerid);
		    SetPlayerHealth(playerid,100);
	        return 1;
	    }
		if(IsPlayerInFrac(playerid, 21))
		{
		    SetPlayerPos(playerid, 2562.6875,-1282.1237,1065.3672);
			SetPlayerInterior(playerid,2);
			SetPlayerVirtualWorld(playerid,0);
			GivePlayerWeapons(playerid);
			return 1;
		}
        if (PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22) //SWAT
	    {
	        SetPlayerToTeamColor(playerid);
	        SetPlayerInterior(playerid,10);
	        GivePlayerWeapons(playerid);
			SetPlayerPos(playerid,216.5056,168.7749,1003.0234);
			SetPlayerFacingAngle(playerid,273.0);
			SetPlayerInterior(playerid, 3);
			SetPlayerArmour(playerid, 100);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23) //Russenmafia spawn
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1728.3701,-1667.5378,22.6094);
			SetPlayerFacingAngle(playerid,39.2599);
			SetPlayerInterior(playerid,18);
			PlayerInfo[playerid][pInt] = 0;
			GivePlayerWeapons(playerid);
	        return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24) //Oamt spawn
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,323.3881,308.5240,999.1484);
			SetPlayerInterior(playerid,5);
			PlayerInfo[playerid][pInt] = 5;
			GivePlayerWeapons(playerid);
	        return 1;
	    }
	    if(IsAnInstructor(playerid)) //Fahrschule spawn
	    {
			if(SchoolSpawn[playerid] == 0)
			{
		        SetPlayerToTeamColor(playerid);
				SetPlayerPos(playerid,-2022.2632,-116.6569,1035.1719);
				SetPlayerFacingAngle(playerid,4.7173);
				SetPlayerInterior(playerid,3);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerHealth(playerid, 100);
				GivePlayerWeapons(playerid);
			}
			else if(SchoolSpawn[playerid] == 1)
			{
		        SetPlayerToTeamColor(playerid);
				SetPlayerPos(playerid,2145.5706,-1803.3696,16.1406);
				SetPlayerFacingAngle(playerid,4.7173);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerHealth(playerid, 100);
				GivePlayerWeapons(playerid);
			}
	        return 1;
	    }
	    if ((gTeam[playerid]) == 1)
	    {
			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1 || PlayerInfo[playerid][pOrigin] == 2 || PlayerInfo[playerid][pOrigin] == 3)
			{
			    SetPlayerPos(playerid,489.7321,-1506.2321,20.6240);
				SetPlayerFacingAngle(playerid,358.8067);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pRollerLic] = 1;
				PlayerInfo[playerid][pPhoneBook] = 1;
			}
			else
			{
				rand = random(sizeof(gRandomPlayerSpawns));
				SetPlayerPos(playerid, gRandomPlayerSpawns[rand][0], gRandomPlayerSpawns[rand][1], gRandomPlayerSpawns[rand][2]); // Warp the player
				SetPlayerFacingAngle(playerid, 180.0);  //normal 270.0
				SetPlayerInterior(playerid,3); //normal 15
				PlayerInfo[playerid][pInt] = 3; //normal 15
			}
			return 1;
		}
	}
	return 1;
}

Function GivePlayerWeapons(playerid)
{
	if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)//COP
	{
		GivePlayerWeapon(playerid,3,1);
		GivePlayerWeapon(playerid,24,200);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)//FBI
	{
		GivePlayerWeapon(playerid,3,1);
		GivePlayerWeapon(playerid,24,30);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//Bundeswehr
	{
		GivePlayerWeapon(playerid,24,1000);
   		SetPlayerArmour(playerid, 100);
     	SetPlayerHealth(playerid, 100);
       	GivePlayerWeapon(playerid, 41, 1500);//Spray
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//Medic
	{
	    GivePlayerWeapon(playerid,3,1);
		GivePlayerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)//LCN
	{
	    GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
     	SetPlayerHealth(playerid, 100);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)//Yakuza
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
     	SetPlayerHealth(playerid, 100);
	    return 1;
	}
	if (PlayerInfo[playerid][pLeader] == 7)//San Andreas Präsident
	{
		GivePlayerWeapon(playerid,24,100);
		GivePlayerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 7)//Bodyguard von San Andreas Präsident
	{
	    GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
	}
	if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)//Hitman
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)//CNN
	{
	    GivePlayerWeapon(playerid,5,1);
		GivePlayerWeapon(playerid,41,500);
		GivePlayerWeapon(playerid,43,999999);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)//TAXI
	{
	    GivePlayerWeapon(playerid,5,1);
		GivePlayerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)//Fahrschule
	{
		GivePlayerWeapon(playerid,41,10000);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)//Bikers
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)//Grove
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)//Ballas
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)//Ls Biker Club
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)//Vagos
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)//Aztecas
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)//LS Rifa
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)// Red Soldiers
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		SetPlayerHealth(playerid,100);
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)//Terroristen
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		return 1;
	}
	//if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)//Wheelmen
	{
	//	GivePlayerWeapon(playerid,29, 500);//Baseball
	//	GivePlayerWeapon(playerid,24, 307); //Deagle
	//	GivePlayerWeapon(playerid,31, 500); //M4
	//	return 1;
	}
	if (PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)//Rm
	{
		GivePlayerWeapon(playerid,29, 500);//Baseball
		GivePlayerWeapon(playerid,24, 307); //Deagle
		GivePlayerWeapon(playerid,31, 500); //M4
		SetPlayerHealth(playerid,100);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)//O-amt
	{
		SetPlayerArmour(playerid,100.0);
		GivePlayerWeapon(playerid,3,500);
		GivePlayerWeapon(playerid,41,500);
		return 1;
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------

stock MeinName(playerid)
{
	new nam[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nam, sizeof(nam));
	return nam;
}

Function OnPlayerDeath(playerid, killerid, reason)
{
    M_OnPlayerDeath(playerid,killerid,reason);
	new name[MAX_PLAYER_NAME];
	new string[256];
	PlayerInfo[playerid][pInvWeapon] = 0;
 	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pInvWeapon2] = 0;
 	PlayerInfo[playerid][pInvAmmo2] = 0;
 	FrakMatsHolding[playerid] = 0;
	/*new playercash;
	new victimteam;
	new killerteam;*/
	format(string, sizeof(string), "Du wurdest von %s getötet.", MeinName(killerid));
	SendClientMessage(playerid, COLOR_RED, string);
	format(string, sizeof(string), "Du hast %s getötet.", MeinName(playerid));
	SendClientMessage(killerid, COLOR_RED, string);

	if(PlayerInfo[playerid][pLevel] > 2 && KHSperre[playerid] == 0 && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pGangJailed] == 0 && PlayerPaintballing[playerid] == 0)
	{
		PlayerInfo[playerid][pTot] = 1;
	}
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime]){
			if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction]||
			GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]) {
				PlayerInfo[playerid][pTot] = 0;
			}
		}
	}
	if (!IsACop(killerid) && reason != 49 && PlayerInfo[killerid][pJailed] == 0 && !IstInGangFight(playerid))
	{
	    SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
	}
	if (!IsACop(killerid) && reason == 49)
	{
		SetPlayerCriminal(killerid,255, "Fahrerflucht");
	}
	if(gPlayerUsingLoopingAnim[playerid])
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
        TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	if(BlindFold[playerid] == 1)
	{
		BlindFold[playerid] = 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    PlayerInfo[playerid][pMauled] = 0;
	}
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0;
	if(FirstSpawn[playerid] == 1)
	{
		FirstSpawn[playerid] = 0;
	}
	    if(IsBlacklist[playerid]==1)
    {
        ClearBlack(playerid);
        IsBlacklist[playerid]=0;
    }
//=======================
	//victimteam = gTeam[playerid];
	//killerteam = gTeam[killerid];
	gPlayerSpawned[playerid] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 255;
	if(killerid != 255)
	if(reason == 38)
	{
		new kstring[128];
		new kickname[MAX_PLAYER_NAME];
		if(IsPlayerConnected(killerid))
		{
			GetPlayerName(killerid, kickname, sizeof(kickname));
			format(string, 256, "Warnung: [%d]%s hat einen Spieler mit einer Minigun gekillt. ACHTUNG [CheatVerdacht].",killerid,kickname);
			ABroadCast(COLOR_YELLOW,string,1);
			printf("%s", kstring);
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   Die Verbindung wurde unterbrochen....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerPaintballing[playerid] != 0)
	{
	    PlayerPaintballKills[killerid] ++;
	    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
	    {
	        new killer[MAX_PLAYER_NAME];
	        PaintballWinner = killerid;
	        PaintballWinnerKills = PlayerPaintballKills[killerid];
	        GetPlayerName(killerid, killer, sizeof(killer));
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(PlayerPaintballing[i] != 0)
	                {
	                    format(string, sizeof(string), "* %s ist mit %d Kills in Führung.",killer,PaintballWinnerKills);
						SendClientMessage(i, COLOR_WHITE, string);
	                }
	            }
	        }
	    }
	    return 1;
	}
	if(GettingCK[playerid] < 999 || OnCK[playerid] < 999)
	{
	    if(IsPlayerConnected(killerid))
	    {
	        if(GettingCK[killerid] < 999 || OnCK[playerid] < 999)
	        {
	            new killer[MAX_PLAYER_NAME];
	            new dier[MAX_PLAYER_NAME];
	            GetPlayerName(playerid, dier, sizeof(dier));
				GetPlayerName(killerid, killer, sizeof(killer));
	            format(string, sizeof(string), "* %s hat deinen Charakter gesperrt, du kannst nun mit diesem Charakter nicht mehr Spielen.",killer);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            format(string, sizeof(string), "** %s hat den Spieler %s erledigt**",killer,dier);
	            CKLog(string);
	            PlayerInfo[playerid][pCK] = 1;
	            if(GettingCK[playerid] < 999) { GettingCK[playerid] = 999; }
	            else if(OnCK[playerid] < 999) { OnCK[playerid] = 999; }
	            if(GettingCK[killerid] < 999) { GettingCK[killerid] = 999; }
	            else if(OnCK[killerid] < 999) { OnCK[killerid] = 999; }
	            KickPlayer[playerid] = 1;
	        }
	    }
	}
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(killerid))
	    {
		    if(PlayerInfo[killerid][pMember] == 8 || PlayerInfo[killerid][pLeader] == 8)
		    {
	            ConsumingMoney[killerid] = 1;
				new killer[MAX_PLAYER_NAME];
				GetPlayerName(killerid, killer, sizeof(killer));
				GivePlayerMoney(killerid, PlayerInfo[playerid][pHeadValue]);
				//new fkasse = PlayerInfo[playerid][pHeadValue]/2;
				//FraktionsKasse[7] += fkasse;
				//GivePlayerMoney(killerid, PlayerInfo[playerid][pHeadValue]/2);
				format(string,128,"<< Hitman %s hat den Auftrag an %s erfüllt und bekommt: $%d >>",killer,name,PlayerInfo[playerid][pHeadValue]/2);
				SendFamilyMessage(8, COLOR_YELLOW, string);
				PlayerInfo[playerid][pHeadValue] = 0;
			}
		}
	}
	GW_OnPlayerDeath(playerid, killerid, reason);
	/*
	if(victimteam >= 4)
	{
	    if(IsPlayerConnected(killerid))
	    {
			new slice = 100; //$100
			playercash = GetPlayerMoney(playerid);
			if(gTeam[killerid] != 2 && PlayerInfo[killerid][pMember] != 7) { WantedPoints[killerid] += 2; } //+ 2 wanted points
			if(SafeTime[playerid] <= 0)
			{
				if(gTeam[killerid] != gTeam[playerid])
				{
					if(GetPlayerState(killerid) == 1)
					{
						PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills] + 1;
					}
					else
					{
						PlayerInfo[killerid][pKills]++;
					}
					PlayerInfo[playerid][pDeaths]++;
				}
			}
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || (gTeam[killerid] == gTeam[playerid] && gTeam[playerid] != 4))
			{
				slice = 0;
			}
			if (((gTeam[killerid]) != 4) && ((gTeam[killerid]) == gTeam[playerid]))//no team kill
			{
				slice = 0;
			}
			if (playercash > 0)
			{
				GivePlayerMoney(playerid, -slice);
			}
			else
			{
				slice = slice+500;
			}
			GivePlayerMoney(killerid, slice);
			PlayerPlaySound(killerid, 1083, 0.0, 0.0, 0.0);
			if (((gTeam[killerid]) == 3) && reason != 49 && PlayerInfo[killerid][pJailed] == 0 && !IsPlayerInArea(killerid, 560.538, -724.0283, 875.8406, -362.0141))
			{
			    SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
				//sSetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Fahrerflucht");
			}
		}
	}*/
	/*if (victimteam == 2)
	{
	    if(IsPlayerConnected(killerid))
	    {
			// Cop kill
			PlayerInfo[playerid][pKills]--;
			if (gTeam[killerid] == 2)//cops kill cop
			{
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				GivePlayerMoney(killerid, -suecost);
				GivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
			}
			if (gTeam[killerid] >= 3)
			{
			    WantedPoints[killerid] += 2; //+ 2 wanted points
				if(reason != 49)
				{
					SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
				}
				else if (reason == 49)
				{
					SetPlayerCriminal(killerid,255, "Fahrerflucht");
				}
			}
			if(gTeam[killerid] >= 5 && SafeTime[playerid] <= 0)
			{
				if(GetPlayerState(killerid) == 1)
				{
					PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
				}
				else
				{
					PlayerInfo[killerid][pKills]++;
				}
				WantedPoints[killerid]+=2;
			}
		}
	}*/
	/*else if (victimteam == 3)
	{
	    if(IsPlayerConnected(killerid))
	    {
			// Civ kill
			if ((gTeam[killerid]) == 2  || PlayerInfo[killerid][pMember] == 7)//cops kill civ
			{
			    if(WantedLevel[playerid] < 1)
			    {
					PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
					GivePlayerMoney(killerid, -suecost);
					GivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
				}
			}
			else
			{
				WantedPoints[killerid] += 2;
		    }
			if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
			}
			else if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Fahrerflucht");
			}
		}
	}
	else if (victimteam == 1)
	{
	    if(IsPlayerConnected(killerid))
	    {
			// Civ kill
			if ((gTeam[killerid]) == 2)//cops kill civ
			{
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				GivePlayerMoney(killerid, -suecost);
				GivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
			}
			else if ((gTeam[killerid]) == 1)//med kill civ
			{
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				GivePlayerMoney(killerid, -suecost);
				GivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
			}
			if (((gTeam[killerid]) == 4) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Fahrerflucht");
			}
		}
	}
	if (victimteam >= 3 && WantedPoints[playerid] > 0 && killerteam == 2)
	{
	    SetPlayerFree(playerid,killerid, "Gekillt");
	}
	if(IsPlayerInArea(playerid, 560.538, -724.0283, 875.8406, -362.0141))
	{
     	GameTextForPlayer(playerid, "~r~Gangfightdeath", 5000, 3);
		PlayerInfo[playerid][pGDeaths]++;
		GameTextForPlayer(killerid, "~g~Gangfightkill", 5000, 3);
		PlayerInfo[killerid][pGKills]++;
		GivePlayerMoney(killerid, 1500);
		GivePlayerMoney(playerid, -1500);
	}*/
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,COLOR_GRAD2);
	return 1;
}

Function OnPlayerSpawn(playerid)
{
    StopAudioStreamForPlayer(playerid);
	M_OnPlayerSpawn(playerid);
	TextDrawShowForPlayer(playerid,Copyright);
	TextDrawShowForPlayer(playerid,Datum);
	GW_OnPlayerSpawn(playerid);
    if(PlayerInfo[playerid][pTot] == 1 && PlayerInfo[playerid][pLevel] > 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_YELLOW, "|________ Krankenhaus ________|");
		SendClientMessage(playerid, COLOR_ORANGE, "Du bist gestorben , deswegen bist du im Krankenhaus");
		SendClientMessage(playerid, COLOR_ORANGE, "Warte 60 Sekunden bis deine Behandlung fertig ist!");
		SetPlayerSpawn(playerid);
		if(IsPlayerInFrac(playerid, 1))
		{
			SetPlayerColor(playerid,NAMECOLOR_LSCOP);
		}
		else if(IsPlayerInFrac(playerid, 4))
		{
		    SetPlayerColor(playerid, NAMECOLOR_MEDIC);
		}
		else
		{
	 		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
		ResetPlayerWeapons(playerid);
		return 1;
	}
	STDPlayer[playerid] = 0;
	gTeam[playerid] = PlayerInfo[playerid][pTeam]; //Set the Team
	if (gTeam[playerid] == 4) //medic / criminal reset team
	{
		gTeam[playerid] = 3;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Du musst dich vorher einloggen oder dir einen Account erstellen! ***");
		Kick(playerid);
		return 1;

		if(gPlayerAccount[playerid] == 1)
		{
    		ForceClassSelection(playerid);
			TogglePlayerSpectating(playerid, 0);
		}
		else if(gPlayerAccount[playerid] == 0)
		{
			ForceClassSelection(playerid);
			TogglePlayerSpectating(playerid, 0);
		}
		return 1;


 	}
	if(AtClothes[playerid] == 1)
	{
		PlayerInfo[playerid][pChar] = GetPlayerSkin(playerid);
		PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
		AtClothes[playerid] = 0;
	}
	if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLeader] < 1)
	{
	    MedicBill[playerid] = 0;
	    new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Chef dieser Familie, du bist Zivilist !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 5)
	{
	    if(PlayerInfo[playerid][pMember] < 1)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Mitglied dieser Familie, du bist Zivilist !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 10)
	{
	    if(PlayerInfo[playerid][pMember] != 8)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Mitglied dieser Fraktion, du bist Zivilist !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 2 && !IsACop(playerid))
	{
	    MedicBill[playerid] = 0;
		new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Polizist!");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 3)
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Polizist!");
			MedicBill[playerid] = 0;
			new model = PlayerInfo[playerid][pChar];
			if(PlayerInfo[playerid][pMember] == 1) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 2) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 3) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 4) { SetSpawnInfo(playerid, 1, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 5) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 6) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 7) { SetSpawnInfo(playerid, 7, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 7; gTeam[playerid] = 7; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 8) { SetSpawnInfo(playerid, 10, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 9) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 10) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 11) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 12) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Fuegos
			else if(PlayerInfo[playerid][pMember] == 13) { SetSpawnInfo(playerid, 13, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Groove Street
			else if(PlayerInfo[playerid][pMember] == 14) { SetSpawnInfo(playerid, 14, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Ballas
			else if(PlayerInfo[playerid][pMember] == 15) { SetSpawnInfo(playerid, 15, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//2fast
			else if(PlayerInfo[playerid][pMember] == 16) { SetSpawnInfo(playerid, 16, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Vagos
			else if(PlayerInfo[playerid][pMember] == 17) { SetSpawnInfo(playerid, 17, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Varios Los Aztecas
			else if(PlayerInfo[playerid][pMember] == 18) { SetSpawnInfo(playerid, 18, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Rifa
			else if(PlayerInfo[playerid][pMember] == 19) { SetSpawnInfo(playerid, 19, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//West Coast Customs
			else if(PlayerInfo[playerid][pMember] == 20) { SetSpawnInfo(playerid, 20, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 21) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 22) { SetSpawnInfo(playerid, 22, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 23) { SetSpawnInfo(playerid, 23, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 24) { SetSpawnInfo(playerid, 24, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pLeader] == 1) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 2) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 3) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 4) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 5) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 6) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 8) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 9) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 10) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 11) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 12) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Fuegos
			else if(PlayerInfo[playerid][pLeader] == 13) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Groove Street
			else if(PlayerInfo[playerid][pLeader] == 14) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Ballas
            else if(PlayerInfo[playerid][pLeader] == 15) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//2fast
            else if(PlayerInfo[playerid][pLeader] == 16) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos VagosVagos
			else if(PlayerInfo[playerid][pLeader] == 17) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Varios Los Aztecas
			else if(PlayerInfo[playerid][pLeader] == 18) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Rifa
			else if(PlayerInfo[playerid][pLeader] == 19) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//West Coast Customs
            else if(PlayerInfo[playerid][pLeader] == 20) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Terroristen
			else if(PlayerInfo[playerid][pLeader] == 23) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Grundwehrdienst
            else if(PlayerInfo[playerid][pLeader] == 24) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Oamt
			//SetSpawnInfo(playerid, team, model,0.0,0.0,0.0,0,0,0,0,0,0,0);
			SpawnPlayer(playerid);
		}
	}
    for(new i; i<sizeof(Gebiete); i++)//Damit alle gebiete durchlaufen werden
    {
    new color;//Erstellt eine neue Variable
    if(Gebiete[i][gOwner] == 5){color=0x000000B2;}//Hier wird abgefragt welcher Fraktion das Gebiet gehört, damit dann die Farbe dafür gesetzt wird
    if(Gebiete[i][gOwner] == 6){color=0xFFFFFFB2;}
    GangZoneShowForPlayer(playerid, Gebiet[i], color); // Hier wird dann die Zone gezeigt. Als erstes die spielerid, und die ist bei OnPlayerSpawn nunmal mit playerid definiert, dann welches Gebiet also Gebiet^^ und als letztes die Farbe die wir oben definiert haben.
    }
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	if(PlayerInfo[playerid][pChar] > 0) { SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
	else { SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); }
	//SetPlayerWeapons(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	PlayerFixRadio(playerid);
/*	GangZoneShowForPlayer(playerid, SNDM, 0xFEFEFEAA);
	GangZoneShowForPlayer(playerid, ZSNDM, 0xFEFEFEAA);
	GangZoneShowForPlayer(playerid, BSNNDM, 0xFEFEFEAA);
	GangZoneShowForPlayer(playerid, KHNDM, 0xFEFEFEAA);
	GangZoneShowForPlayer(playerid, Vagos, 0xFFFF0087);
	GangZoneShowForPlayer(playerid, Ballas, 0xFF00807D);
	GangZoneShowForPlayer(playerid, Grove, 0x00FF007D);
	GangZoneShowForPlayer(playerid, Aztecas, 0x00FFFF7D);
	GangZoneShowForPlayer(playerid, Alcatraz, 0x007DFF95);
	GangZoneShowForPlayer(playerid, Yakuza, 0xBEBEBE7D);
	GangZoneShowForPlayer(playerid, Russianm, 0x3232327D);*/
//	GangZoneShowForPlayer(playerid, Gangfights, 0xFF00007D);
/*    GangZoneShowForPlayer(playerid, Triaden, 0x40808096);
	GangZoneShowForPlayer(playerid, LCN, 0x00000096);*/
	if(MapIconsShown[playerid] != 1)
	{

	    MapIconsShown[playerid] = 1;
		SetPlayerMapIcon(playerid,34,1544.4790,-1673.6595,13.5585, 30, COLOR_YELLOW);//Pd Sirene
		SetPlayerMapIcon(playerid,40,1535.018188,-800.148376,72.849502,36,COLOR_YELLOW);//Autohaus
		SetPlayerMapIcon(playerid,41,1481.0009,-1770.3896,18.7958,38,COLOR_YELLOW);//Stadthalle
        SetPlayerMapIcon(playerid, 1, 1544.4790,-1673.6595,13.5585, 30, COLOR_YELLOW); // LSPD
		SetPlayerMapIcon(playerid, 2, 1480.9323,-1767.7324,18.7958, 38, COLOR_YELLOW); // Stadthalle
   		SetPlayerMapIcon(playerid, 3, 1944.3260,-1772.9254,13.3906, 42, COLOR_YELLOW); // Tankstelle LS
   		SetPlayerMapIcon(playerid, 4, -1609.7958,-2718.2048,48.5391, 42, COLOR_YELLOW); // Tankstelle LS
   		SetPlayerMapIcon(playerid, 5, -2408.7590,976.0934,45.4175, 42, COLOR_YELLOW); // Tankstelle SF
   		SetPlayerMapIcon(playerid, 6, -1676.6323,414.0262,6.9484, 42, COLOR_YELLOW); // Tankstelle zwischen LS und SF
   		SetPlayerMapIcon(playerid, 7, 614.9333,1689.7418,6.6968, 42, COLOR_YELLOW); // Tankstelle LV
   		SetPlayerMapIcon(playerid, 8, -1327.7218,2678.8723,50.0625, 42, COLOR_YELLOW); // Tankstelle LV
   		SetPlayerMapIcon(playerid, 9, 763.4382,-1357.9314,13.5229, 55, COLOR_YELLOW); // Autohaus LS
   		SetPlayerMapIcon(playerid, 10, -1660.6235,1213.7648,7.2500, 55, COLOR_YELLOW); // Autohaus SF
		SetPlayerMapIcon(playerid, 50, 1017.9830,-919.3538,42.3359, 27, COLOR_YELLOW); // FARBE NORTH
 		SetPlayerMapIcon(playerid, 51, 1911.2693,-1776.6720,13.3828, 27, COLOR_YELLOW); // /FARBE SOUTH
		SetPlayerMapIcon(playerid, 52, 2002.8409,-2382.0603,13.5469, 27, COLOR_YELLOW); // /FARBE AIRPORT
	}
	if(PlayerInfo[playerid][pGangJailed] == 1)
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 218.9510,-231.8540,1.7786);
	    SendClientMessage(playerid, COLOR_LIGHTRED, " Du befindest dich noch im GangJail!");
	    return 1;
	}
	return 1;
}

Function CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

Function PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

Function KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function Clear(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Clear.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function SKickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("skick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function SperreLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Sperre.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function MemberLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Member.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function LeaderLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Leader.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new name[MAX_PLAYER_NAME];
	new vehicle = GetPlayerVehicleID(playerid);
 	if(AktuellerCP[playerid] != INVALID_FARMER_CP && FarmerFahrzeug(vehicle))
 	{
     	if(AktuellerCP[playerid] == EndFarmerCP)
     	{
        	DisablePlayerCheckpoint(playerid);
        	AktuellerCP[playerid] = INVALID_FARMER_CP;
        	GivePlayerMoney(playerid,10000);
        	SendClientMessage(playerid,COLOR_LIGHTBLUE, "*Du hast das Feld geerntet und 10000$ bekommen.");
        	SendClientMessage(playerid,COLOR_LIGHTBLUE, "*In frühestens 30 Minuten sind die Felder wieder gewachsen.");
        	PlayerInfo[playerid][pFarmTime] = 1800;
        	SetVehicleToRespawn(vehicle);
			FarmerDrogen += 60;
      	}
      	else
	  	{
	  		AktuellerCP[playerid]++;
		  	SetPlayerCheckpoint(playerid,FarmerCPS[AktuellerCP[playerid]][0],FarmerCPS[AktuellerCP[playerid]][1],FarmerCPS[AktuellerCP[playerid]][2],  8.0);
  		}
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Ziel Erreicht", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(Navi[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~w~Ziel erreicht", 5000, 1);
	    Navi[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Ziel Erreicht", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Du hast dein Autodieblevel auf 2, du bekommst jetzt mehr Geld und du kannst schneller neue Ware bringen."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Du hast dein Autodieblevel auf 3, du bekommst jetzt mehr Geld und du kannst schneller neue Ware bringen."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Du hast dein Autodieblevel auf 4, du bekommst jetzt mehr Geld und du kannst schneller neue Ware bringen."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Du hast dein Autodieblevel auf 5, du bekommst jetzt mehr Geld und du kannst schneller neue Ware bringen."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "Du hast das Auto für $%d verkauft, du musst fürs nächste 20 Minuten warten.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "Du hast das Auto für $%d verkauft, du musst fürs nächste 18 Minuten warten.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "Du hast das Auto für $%d verkauft, du musst fürs nächste 14 Minuten warten.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "Du hast das Auto für $%d verkauft, du musst fürs nächste 12 Minuten warten.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new money = 6000;
			    format(string, sizeof(string), "Du hast das Auto für $%d verkauft, du musst fürs nächste 12 Minuten warten.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Sold the car", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "Du bist nicht im Auto!", 5000, 1);
		}
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Warte hier auf mehr Kartfahrer", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 1. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 2. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 2. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Kartrennen zu Ende **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~Du bist zu Hause", 5000, 1);
		    }
		}
	}


	new trinkgeld = 800; // Geld / Checkpoint

	if(MullabfuhrCP[playerid] == 1 && IsPlayerInRangeOfPoint(playerid,10.0,1355.6742,-1749.4160,13.3807))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid,1539.8971,-1628.5874,13.38287, 5.0);
	    MullabfuhrCP[playerid] = 2;
	}
	else if(MullabfuhrCP[playerid] == 2 && IsPlayerInRangeOfPoint(playerid,10.0,1539.8971,-1628.5874,13.3828))
	{
	   	GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1334.5597,-1092.3732,24.9917, 5.0);
	    MullabfuhrCP[playerid] = 3;
	}
	else if(MullabfuhrCP[playerid] == 3 && IsPlayerInRangeOfPoint(playerid,10.0,1334.5597,-1092.3732,24.9917))
	{
   	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1316.0133,-902.1998,39.4142, 5.0);
	    MullabfuhrCP[playerid] = 4;
	}
	else if(MullabfuhrCP[playerid] == 4 && IsPlayerInRangeOfPoint(playerid,10.0,1316.0133,-902.1998,39.4142))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 832.4395,-864.8736,69.2248, 5.0);
	    MullabfuhrCP[playerid] = 5;
	}
	else if(MullabfuhrCP[playerid] == 5 && IsPlayerInRangeOfPoint(playerid,10.0,832.4395,-864.8736,69.2248))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 332.3819,-1186.4304,76.3311, 5.0);
	    MullabfuhrCP[playerid] = 6;
	}
	else if(MullabfuhrCP[playerid] == 6 && IsPlayerInRangeOfPoint(playerid,10.0,332.3819,-1186.4304,76.3311))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 369.8034,-2047.2219,7.8359, 5.0);
	    MullabfuhrCP[playerid] = 7;
	}
	else if(MullabfuhrCP[playerid] == 7 && IsPlayerInRangeOfPoint(playerid,10.0,369.8034,-2047.2219,7.8359))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 920.3291,-1795.6578,13.5469, 5.0);
	    MullabfuhrCP[playerid] = 8;
	}
	else if(MullabfuhrCP[playerid] == 8 && IsPlayerInRangeOfPoint(playerid,10.0,920.3291,-1795.6578,13.5469))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1085.8635,-1837.6129,13.5716, 5.0);
	    MullabfuhrCP[playerid] = 9;
	}
	else if(MullabfuhrCP[playerid] == 9 && IsPlayerInRangeOfPoint(playerid,10.0,1085.8635,-1837.6129,13.5716))
	{
	    GivePlayerMoney(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid,1215.9088,-1833.6079,13.3941,5.0);
		MullabfuhrCP[playerid] = 10;
	}
	else if(MullabfuhrCP[playerid] == 10 && IsPlayerInRangeOfPoint(playerid,10.0,1215.9088,-1833.6079,13.3941))
	{
	    SendClientMessage(playerid, COLOR_RED, "Das wars, dein Fahrzeug wurde vom Mitarbeiter geparkt, den Rest übernehmen die anderen Mitarbeiter!");
        DisablePlayerCheckpoint(playerid);
        GivePlayerMoney(playerid, 5000);
        SendClientMessage(playerid, COLOR_RED, "Du bekommst einen kleinen Bonus von 5.000$");
        SendClientMessage(playerid, COLOR_RED, "In 30 Minuten kannst du wieder eine Runde fahren.");
        new car;
		car = GetPlayerVehicleID(playerid);
  	    SetVehicleToRespawn(car);
        Mullabfuhr[playerid] = 0;
        MullabfuhrCP[playerid] = 0;
	    PlayerInfo[playerid][pMulltime] = 1800;
 	}
	// =====================================================================================================================
	//    HIER NICHTS DRUNTER MACHEN!!!  INTERIOR-ENTER-SYSTEM!!!!!

	if(CheckPointing[playerid] == 0)
	{
	    return 1;
	}
	new cpid;
	if(GetDistanceToClosestInside(playerid) < 1.0) // Man geht wo raus
	{
		if(MultipleEnter[playerid] != -1)
		{
		    cpid = MultipleEnter[playerid];
		}
		else
		{
		    cpid = GetClosestInsideID(playerid);
		}
	    SetPlayerPos(playerid,CPs[cpid][EnterX],CPs[cpid][EnterY],CPs[cpid][EnterZ]);
	    if(CPs[cpid][EnterA] != 0.0) SetPlayerFacingAngle(playerid,CPs[cpid][EnterA]);
	    SetPlayerInterior(playerid,CPs[cpid][EnterInt]);
	    GameTextForPlayer(playerid,CPs[cpid][ExitingText],5000,3);

		PlayerInfo[playerid][pInt] = CPs[cpid][EnterInt];
	    MultipleEnter[playerid] = -1;
		CheckPointing[playerid] = 0;
		SetTimerEx("EnableCheckpointingAgain",5000,0,"i",playerid);
	}
	else if(GetDistanceToClosestOutside(playerid) < 1.0) // Man geht wo rein
	{
	    cpid = GetClosestOutsideID(playerid);
	    SetPlayerPos(playerid,CPs[cpid][ExitX],CPs[cpid][ExitY],CPs[cpid][ExitZ]);
	    if(CPs[cpid][ExitA] != 0.0) SetPlayerFacingAngle(playerid,CPs[cpid][ExitA]);
	    SetPlayerInterior(playerid,CPs[cpid][ExitInt]);
	    PlayerInfo[playerid][pInt] = CPs[cpid][ExitInt];
	    GameTextForPlayer(playerid,CPs[cpid][EnteringText],5000,3);
		GivePlayerMoney(playerid,-CPs[cpid][EnteringPrice]);

		if( !strcmp(CPs[cpid][EnteringText],CLUCKIN_BELL_TEXT) ||
			!strcmp(CPs[cpid][EnteringText],PIZZA_TEXT) ||
			!strcmp(CPs[cpid][EnteringText],BURGER_SHOT_TEXT) ||
			!strcmp(CPs[cpid][EnteringText],"24/7"))
		{
		    MultipleEnter[playerid] = cpid;
		}
		CheckPointing[playerid] = 0;
		SetTimerEx("EnableCheckpointingAgain",5000,0,"i",playerid);
	}

	return 1;
}

Function OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

Function OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

Function OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

Function OnRconCommand(cmd[])
{
	return 1;
}

Function OnObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("Drücke 'F' um den Fahrstuhl zu benutzen", 0xFFFFDD, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}
	return 1;
}

Function OnPlayerObjectMoved(playerid, objectid)
{

	return 1;
}

Function OnPlayerPickUpPickup(playerid,pickupid)
{

	if(pickupid == port)
	{
		SetPlayerPos(playerid, 219.7440,121.5539,1003.2188);
        SetPlayerInterior(playerid, 10);
  	}
  	if(pickupid == port1)
  	{
  	    SetPlayerPos(playerid, 1526.6427,-1672.1626,6.2188);
  	    SetPlayerInterior(playerid, 0);
  	}
  	if(pickupid == port3)
  	{
  	    SetPlayerPos(playerid,327.7865,-1496.1865,24.9219);
  	    SetPlayerInterior(playerid, 0);
  	}
	if(pickupid == port4)
	{
	    SetPlayerPos(playerid,231.0565,184.3733,1003.0313);
	    SetPlayerInterior(playerid, 3);
	}
	if(pickupid == port5)
	{
	    SetPlayerPos(playerid,304.8093,-1524.2535,76.5391);
	    SetPlayerInterior(playerid, 0);
	}
	if(pickupid == port6)
	{
	    SetPlayerPos(playerid, 231.3349,184.0748,1003.0313);
	    SetPlayerInterior(playerid, 3);
	}



	for(new x = 0; x < AUTOHAUSER;x++)
	{
		if(PlayerToPoint(1.5, playerid, DtcSonstiges[x][0][0],DtcSonstiges[x][0][1],DtcSonstiges[x][0][2]) && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]] || pickupid == Dtc_Info[x] && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
	    {
	    	TogglePlayerControllable(playerid, 0);
        	SetPlayerVirtualWorld(playerid,55+playerid);
        	new string[246];
        	dtc_AutohausCar[playerid] = 0;
        	dtc_AutohausCat[playerid] = x;
        	new c1 = random(120);
        	new c2 = random(120);
        	new car;
        	new preis;
        	for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
        	{
        		if(car == 0 && dtcKaufliste[ah][dtc_Autohaus] == x)
        		{
        		    car = dtcKaufliste[ah][dtc_CarModel];
        			preis = dtcKaufliste[ah][dtc_CarModel];
        		}
        	}
        	SetPlayerCameraPos(playerid, DtcSonstiges[x][2][0],DtcSonstiges[x][2][1],DtcSonstiges[x][2][2]);
			SetPlayerCameraLookAt(playerid, DtcSonstiges[x][1][0],DtcSonstiges[x][1][1],DtcSonstiges[x][1][2]);
        	dtc_AutohausSCar[playerid] = CreateVehicle(car, DtcSonstiges[x][1][0],DtcSonstiges[x][1][1],DtcSonstiges[x][1][2],DtcSonstiges[x][1][3],c1,c2,-1);
        	SetPlayerPos(playerid, DtcSonstiges[x][3][0],DtcSonstiges[x][3][1],DtcSonstiges[x][3][2]);
        	SetVehicleVirtualWorld(dtc_AutohausSCar[playerid],55+playerid);
        	format(string,sizeof(string),"~r~---------- AUTOHAUS ----------~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~$%d~n~~b~Auswählen:~n~~w~ <Num 4<~b~&~w~>Num 6> ~n~~b~Kaufen:~w~ Enter ~n~~b~Abbrechen:~w~ Tab",CarName[car-400],preis);
        	if(!CarKauf[playerid])
			{
				CarKauf[playerid] = TextDrawCreate(200,310,string);
				TextDrawAlignment(CarKauf[playerid],1);
			 	TextDrawUseBox(CarKauf[playerid],1);
				TextDrawBoxColor(CarKauf[playerid],0x000000FF);
				TextDrawSetOutline(CarKauf[playerid],1);
				TextDrawBackgroundColor(CarKauf[playerid],COLOR_BLACK);
				TextDrawSetOutline(CarKauf[playerid],1);
				TextDrawFont(CarKauf[playerid], 2);
				//TextDrawSetProportional(CarKauf[playerid], 2);
				TextDrawTextSize(CarKauf[playerid],450,410);
				TextDrawShowForPlayer(playerid,CarKauf[playerid]);
			}
			else
			{
			    TextDrawHideForPlayer(playerid,CarKauf[playerid]);
				TextDrawSetString(CarKauf[playerid],string);
				TextDrawShowForPlayer(playerid,CarKauf[playerid]);
			}
	    }
	    else if(PlayerToPoint(1.5, playerid, DtcSonstiges[x][0][0],DtcSonstiges[x][0][1],DtcSonstiges[x][0][2]) && Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]] || pickupid == Dtc_Info[x] && Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		    new mv = MaxVeh;
			if(mv > 1)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "    Du besitzt schon ein Fahrzeug mit deinem Ausgewählten Schlüssel !");
		    	SendClientMessage(playerid, COLOR_GREY, "    Verkaufe es mit /carsell oder wechsel den Schlüssel mit /carkey !");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Du besitzt schon ein Fahrzeug! Verkaufe es mit /carsell");
			}
		}
	}
	if(pickupid == EssenPickup[0] || pickupid == EssenPickup[1] || pickupid == EssenPickup[2])
	{
	    GameTextForPlayer(playerid,"~g~/menu",4000,3);
	}
	if(pickupid == KLEIDUNG_PRO)
	{
  		if(PlayerToPoint(3.0,playerid,199.0634,-128.0607,1003.5152))
  		{
			ShowPlayerDialog(playerid,DIALOG_KLEIDUNG_PRO,DIALOG_STYLE_LIST,"Pro Labs","Orange 12 Preis: 50$\nRockstar Grey Preis: 30$\nBase 5 Preis: 35$","Kaufen","Abbrechen");
		}
	}
	if(pickupid == KLEIDUNG_ZIP)
	{
  		if(PlayerToPoint(3.0,playerid,181.2543,-91.6659,1002.0234))
  		{
			ShowPlayerDialog(playerid,DIALOG_KLEIDUNG_ZIP,DIALOG_STYLE_LIST,"ZIP","Schwarzer Anzug&Rote Krawatte Preis: 100$\nPfarrer Anzug Preis: 300$\nCobaine-Style Preis: 200$\nSchwarzer Anzug Preis: 100$\nBlaue Jacke Preis: 120$\nBlauer Gestreifter Anzug Preis: 180$","Kaufen","Abbrechen");
		}
	}
	return 1;
}

Function OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:CurrentMenu = GetPlayerMenu(playerid);
    if(CurrentMenu == BOMB)
    {
        switch(row)//rot,gelb,grün,blau
        {
            case 0://rot
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Rote Draht genommen!");
				bombe =	CreateDynamicObject(1719, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",300000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 1;
				bombdraht2 = 0;
				bombdraht3 = 0;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Es wurde eine Bombe gelegt!");
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
						GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
						if(IsPlayerInFrac(i, 22))
						{
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Es wurde eine Bombe gelegt!");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Das Gebiet blinkt Rot und Grün.");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Begeben sie sich zum Bombenplatz!");
    						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
							GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
						}
					}
				}
			}
		 	case 1://gelb maul kadoffel
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Gelbe Draht genommen!");
				bombe =	CreateDynamicObject(1719, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",300000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 1;
				bombdraht3 = 0;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Es wurde eine Bombe gelegt!");
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
						GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
		 	case 2://grün
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Grüne Draht genommen!");
				bombe =	CreateDynamicObject(1719, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",300000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 0;
				bombdraht3 = 1;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Es wurde eine Bombe gelegt!");
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
						GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
			case 3://blau
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Blaue Draht genommen!");
				bombe =	CreateDynamicObject(1719, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",300000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 0;
				bombdraht3 = 0;
				bombdraht4 = 1;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Es wurde eine Bombe gelegt!");
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
						GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
       	}
    }
    if(CurrentMenu == BOMBD && bombdrahtchoosen == 1)
    {
        switch(row)//rot,gelb,grün,blau
        {
            case 0://rot
			{//&& bombdraht2 = 0 || bombdraht3 = 0 || bombdraht4 && 0
			    if(bombdraht1 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
		    	}
		    	else if(bombdraht1 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
				bombdrahtchoosen = 0;
			}
			case 1://gelb
			{
				bombdrahtchoosen = 0;
			    if(bombdraht2 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
		    	}
		    	else if(bombdraht2 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
			case 2://grün
			{
				bombdrahtchoosen = 0;
			    if(bombdraht3 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
		    	else if(bombdraht3 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
			case 3://blau
			{
				bombdrahtchoosen = 0;
			    if(bombdraht4 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
		    	else if(bombdraht4 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
		}
	}
    if(CurrentMenu == Navigation)
    {
        switch(row)
        {
            case 0://Stadthalle
			{
	    	SetPlayerCheckpoint(playerid,1481.1517,-1763.9393,18.7958,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Stadthalle] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 1://Krankenhaus
			{
	    	SetPlayerCheckpoint(playerid,1184.7716,-1321.6627,13.5732,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Krankenhaus] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 2://Polizei
			{
	    	SetPlayerCheckpoint(playerid,1513.7441,-1667.4794,14.0469,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Polizei Department] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 3://Schwarzmarkt
			{
	    	SetPlayerCheckpoint(playerid,2620.4971,-1499.0149,16.2748,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Zivispawn] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 4://Arbeitsamt
			{
	    	SetPlayerCheckpoint(playerid,2228.3035,-1157.6097,25.7999,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Arbeitsamt] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 5://Bank
			{
	    	SetPlayerCheckpoint(playerid,1462.6842,-1014.6383,26.4997,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Bank] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
            case 6://Handyladen
			{
	    	SetPlayerCheckpoint(playerid,1104.1304,-1449.0028,15.7969,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Handyladen] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
			case 7://uhrenladen
			{
	    	SetPlayerCheckpoint(playerid,1699.9642,-1170.1368,23.8281,5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Ziel [Uhrenladen] auf der MiniMap. (Benutze /chilfe um den Marker zu löschen)");
			}
			case 8://Exit Menu
			{
	    	HideMenuForPlayer(Navigation, playerid);
			}
        }
    }
    if(CurrentMenu == MotorradMenu)
    {
        new antwort = row+1;
        if(MotorradSchritt[playerid] == 60) //Frage 1
		{
		    if(antwort == 2)
		    {
		        GameTextForPlayer(playerid,"~g~Das war Richtig",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 80) //Frage 2
		{
		    if(antwort == 3)
		    {
		        GameTextForPlayer(playerid,"~g~Und das auch",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 100)//Frage 3
		{
		    if(antwort == 1)
		    {
		        GameTextForPlayer(playerid,"~g~Gut mach weiter so",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
            else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 120)//Frage 4
		{
		    if(antwort == 3)
		    {
		        GameTextForPlayer(playerid,"~g~Du hast es Geschafft~r~Bestanden~n~~w~Herzlichen Glückwunsch zum Führerschein!",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		HideMenuForPlayer(MotorradMenu,playerid);
    }
	if(CurrentMenu == PruefungMenu)
	{
	    new antwort = row+1;
		if(PruefungsSchritt[playerid] == 90) // Frage 1
		{
			if(antwort == 3)
			{
			    GameTextForPlayer(playerid,"~g~Das war Richtig",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 100) // Frage 2
		{
			if(antwort == 3)
			{
			    GameTextForPlayer(playerid,"~g~Und das auch",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 110) // Frage 3
		{
			if(antwort == 1 || antwort == 2)
			{
			    GameTextForPlayer(playerid,"~g~Gut mach weiter so",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 120) // Frage 4
		{
			if(antwort == 3 || antwort == 4)
			{
			    GameTextForPlayer(playerid,"~g~Du hast es Geschafft~r~Bestanden~n~~w~Herzlichen Glückwunsch zum Führerschein!",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		HideMenuForPlayer(PruefungMenu,playerid);
	}

	if(CurrentMenu == BSMK)
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
	     		    GivePlayerMoney(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich 3 Chicken Nuggets gekauft.");

				}
				else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoney(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoney(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
              		SendClientMessage(playerid, NB, "Sie haben sich 12 Chicken Nuggets gekauft.");
		        }
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoney(playerid) >= 5)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoney(playerid, -5);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich 20 Chicken Nuggets gekauft.");

		        }
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 3:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Cheesburger gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 4:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Chickenburger gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoney(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Mc Chicken gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoney(playerid) >= 2)
	         	{
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoney(playerid, -2);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich Pommes gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoney(playerid) >= 4)
	         	{
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoney(playerid, -4);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Big Mac gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoney(playerid, -3);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Fisch Mac gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoney(playerid, -1);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich ein Glas Cola gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(BSMK,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	if(CurrentMenu == PMK)
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
	     		    GivePlayerMoney(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);

				}
				else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoney(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoney(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoney(playerid) >= 10)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoney(playerid, -10);
		     		SetPlayerHealth(playerid, 100);

		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 3:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
            }
 			case 4:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoney(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoney(playerid) >= 2)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoney(playerid, -2);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoney(playerid) >= 4)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoney(playerid, -4);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoney(playerid, -3);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoney(playerid, -1);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(PMK,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	if(CurrentMenu == CBKM)
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
	     		    GivePlayerMoney(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoney(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoney(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoney(playerid) >= 5)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoney(playerid, -5);
		     		SetPlayerHealth(playerid, 100);

		        }
                else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 3:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 4:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoney(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoney(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoney(playerid) >= 2)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoney(playerid, -2);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoney(playerid) >= 4)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoney(playerid, -4);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoney(playerid) >= 3)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoney(playerid, -3);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoney(playerid) >= 1)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoney(playerid, -1);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(CBKM,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	return 1;
}

Function OnPlayerExitedMenu(playerid)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(CurrentMenu == BSMK || CurrentMenu == PMK || CurrentMenu == CBKM)
	{
		UnFreezePlayer(playerid);
	}
	if(CurrentMenu == PruefungMenu && PlayerInfo[playerid][pCarLic] == 0)
	{
		ShowMenuForPlayer(PruefungMenu,playerid);
	}
	if(CurrentMenu == MotorradMenu && PlayerInfo[playerid][pMotoLic] == 0)
	{
	    ShowMenuForPlayer(MotorradMenu,playerid);
	}
	return 1;
}

Function SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

Function SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}
forward UnfreezePlayer(plyid);
public UnfreezePlayer(plyid)
{
	TogglePlayerControllable(plyid,1);
	return 1;
}

enum essenauto {
	Float:essX,
	Float:essY,
	Float:essZ
}

new IstAtAutomat[][essenauto] = {
//{1462.4657,-1011.3002,26.8438}
{1552.0938,-1679.9238,13.5514}
};

Function IsAtAutomat(playerid)
{
	for(new i=0;i<sizeof(IstAtAutomat);i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, IstAtAutomat[i][essX],IstAtAutomat[i][essY],IstAtAutomat[i][essZ])) {
	        if(GetPlayerMoney(playerid) >= 1)
	        {
		        ApplyAnimation(playerid,"VENDING","VEND_Use",3.0,0,0,1,2000,0);
		        GivePlayerMoney(playerid, -1);
		        PlayerPlaySound(playerid,42600,0,0,0);
		        SetTimerEx("StopSprunk", 2500, 0, "i", playerid);
		        return 1;
	        }
	        else return PlayerPlaySound(playerid,1053,0,0,0);
		}
	}
	return 1;
}

Function StopSprunk(playerid)
{
	ApplyAnimation(playerid,"VENDING","VEND_Drink_P",3.0,0,0,0,0,0);
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	SetPlayerHealth(playerid, hp+35);
	return 1;
}

Function OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == KEY_SECONDARY_ATTACK)
	{
	    IsAtAutomat(playerid);
	    if(IsPlayerInRangeOfPoint(playerid,4.0,1462.4657,-1011.3002,26.8438))//LS Bank /enter 
	    {
	    	SetPlayerPos(playerid,1415.951171,-988.971191,1639.980224/*246.5100,108.1086,1003.2188*/);
	    	SetPlayerInterior(playerid,1);
	    	SetPlayerFacingAngle(playerid,358.0127);
	    	SendClientMessage(playerid,COLOR_GREEN,"Du hast die Bank betreten");
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1415.951171,-988.971191,1639.980224/*246.5100,108.1086,1003.2188*/))//LS Bank /exit
		{
		    SetPlayerPos(playerid,1462.4657,-1011.3002,26.8438);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,182.0084);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Bank verlassen");
		}
		/*
    	else if (IsPlayerInRangeOfPoint(playerid,4.0,2144.1572,1610.6646,993.6882))
		{
		    SetPlayerPos(playerid,1424.3881,-1004.1063,1639.7909);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,182.0084);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast den Tresor Verlassen verlassen");
		}
		*/
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1480.9919,-1771.2096,18.7958))//Stadthalle /enter
	    {
	    	SetPlayerPos(playerid,389.9180,173.6584,1008.3828);
	    	SetPlayerInterior(playerid,3);
	    	SetPlayerFacingAngle(playerid,92.3491);
	    	SendClientMessage(playerid,COLOR_GREEN,"Du hast die Stadthalle betreten");
		}
        else if(IsPlayerInRangeOfPoint(playerid,4.0,1369.0005,-1279.7201,13.5469))//Ammunation /enter
	    {
	    	SetPlayerPos(playerid,286.148986, -40.644397,1001.515625);
	    	SetPlayerInterior(playerid,1);
	    	SetPlayerFacingAngle(playerid,92.3491);
	    	SendClientMessage(playerid,COLOR_GREEN,"Du hast den Waffenladen betreten");
		}
   		else if (IsPlayerInRangeOfPoint(playerid,4.0,286.148986, -40.644397,1001.515625))//Ammunation /exit
		{
		    SetPlayerPos(playerid,1369.0005,-1279.7201,13.5469);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,357.5767);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast den Waffenladen verlassen");
		}
	 	else if (IsPlayerInRangeOfPoint(playerid,4.0,329.0090,-1513.4635,36.0391))//SWAT /enter
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,288.745971,169.350997,1007.171875);
			    SetPlayerInterior(playerid,3);
			    SetPlayerFacingAngle(playerid,2.5225);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier betreten");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,288.745971,169.350997,1007.171875))//SWAT /exit
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,329.0090,-1513.4635,36.0391);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,1.8733);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier verlassen");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,389.9180,173.6584,1008.3828))//Stadthalle /exit
		{
		    SetPlayerPos(playerid,1480.9919,-1771.2096,18.7958);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,357.5767);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Stadthalle verlassen");
		}
		/*else if (IsPlayerInRangeOfPoint(playerid,4.0,1273.1881,-2531.9746,13.9875))//SWAT /enter
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,246.375991,109.245994,1003.218750);
			    SetPlayerInterior(playerid,10);
			    SetPlayerFacingAngle(playerid,2.5225);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier betreten");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,246.375991,109.245994,1003.218750))//SWAT /exit
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,1273.1881,-2531.9746,13.9875);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,1.8733);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier verlassen");
			}
		}*/
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1554.7513,-1675.6208,16.1953))//LSPD /enter
	    {
	    	SetPlayerPos(playerid,246.3121,109.1336,1003.2188);
	    	SetPlayerInterior(playerid,10);
	    	SetPlayerFacingAngle(playerid,358.7832);
	    	SendClientMessage(playerid,COLOR_GREEN,"Du hast das LSPD betreten");
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,246.6916,109.3309,1003.2188))//LSPD /exit
		{
		    SetPlayerPos(playerid,1554.7513,-1675.6208,16.1953);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,98.9059);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast das LSPD verlassen");
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,-2346.9465,-1662.5482,508.3459))//Geheimstation /enter
		{
  			if(IsACop(playerid) && PlayerInfo[playerid][pLeader] >= 1)
			{
			    SetPlayerPos(playerid,231.8635,1822.7120,7.4141);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,92.5225);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Geheimstation verlassen");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,231.8635,1822.7120,7.4141))//Geheimstation /exit
		{
  			if(IsACop(playerid) && PlayerInfo[playerid][pLeader] >= 1)
			{
			    SetPlayerPos(playerid,-2346.9465,-1662.5482,508.3459);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,185.8733);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Geheimstation verlassen");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1833.1556,-1125.7290,24.6721))//FBI /enter
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,246.8075,63.2147,1003.6406);
			    SetPlayerInterior(playerid,6);
 	 			SetPlayerFacingAngle(playerid,2.5225);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast die FBI Base betreten");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,246.8075,63.2147,1003.6406))//FBI /exit
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,1833.1556,-1125.7290,24.6721);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,1.8733);
			    SendClientMessage(playerid,COLOR_GREEN, "Du hast die FBI Base verlassen");
			}
		}
 		else if (IsPlayerInRangeOfPoint(playerid,3.0,1209.8247,-1749.9943,13.5937))
 		{
 		    SetPlayerPos(playerid,2324.419921,-1145.568359,1050.710083);
 		    SetPlayerInterior(playerid,12);
 		    SendClientMessage(playerid,COLOR_RED, "Du hast die KFZ Zulassungstelle betreten");
 		}
 		else if (IsPlayerInRangeOfPoint(playerid,3.0,2324.419921,-1145.568359,1050.710083))
 		{
 		    SetPlayerPos(playerid,1209.8247,-1749.9943,13.5937);
 		    SetPlayerInterior(playerid, 0);
 		    SendClientMessage(playerid,COLOR_RED, "Du hast die KFZ Zulassungstelle verlassen");
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1835.9020,-1682.5295,13.3704))
		{
		    SetPlayerPos(playerid,493.390991,-22.722799,1000.679687);
		    SetPlayerInterior(playerid, 17);
		    SendClientMessage(playerid,COLOR_RED, "Du hast Alahmbra betreten");
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,493.390991,-22.722799,1000.679687))
		{
		    SetPlayerPos(playerid,1835.9020,-1682.5295,13.3704);
		    SetPlayerInterior(playerid, 0);
		    SendClientMessage(playerid,COLOR_RED, "Du hast Alahmbra verlassen");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,811.4277,-1616.1138,13.5469))//BSSENTER
		{
			SetPlayerPos(playerid,457.304748,-88.428497,999.554687);
			SetPlayerInterior(playerid, 4);
			SendClientMessage(playerid,COLOR_GREEN,"Du hast den Burger Shot South betreten!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,457.304748,-88.428497,999.554687))//BSSEXIT
		{
		    SetPlayerPos(playerid,811.4277,-1616.1138,13.5469);
		    SetPlayerInterior(playerid, 0);
		    SendClientMessage(playerid,COLOR_GREEN, "Du hast den Burger Shot South verlassen!");
		}
	}
   	if(newkeys == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	   		new engine,lights,alarm,doors,bonnet,boot,objective;
	 		new vid = GetPlayerVehicleID(playerid);
		   	if(licht[vid] == false)
		   	{
			   	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			    licht[vid] = true;
		   	}
		   	else if(licht[vid] == true)
		   	{
			   	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
			    SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
				licht[vid] = false;
			}
  		}
    }
	if(!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_SECONDARY_ATTACK)
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
	        ShowElevatorDialog(playerid);
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Elevator called", 3500, 4);
				}
		    }
		}
	}

    if(newkeys == 132)
   	{
		if(IsPlayerConnected(playerid))
		{
		 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
				OnPlayerCommandText(playerid, "/motor");
		 	}
		}
	}
	if(newkeys == KEY_FIRE || newkeys == 128 && newkeys == 138 || newkeys == 128 || newkeys == 138)
	{
		if(IsPlayerInArea(playerid, 1436.625, -1764.764, 1611.556, -1618.698) ||
		IsPlayerInArea(playerid, 1691.416, -1677.914, 1759.867, -1583.168) ||
		IsPlayerInArea(playerid, 1159.018, -959.4252, 1292.118, -864.6794) ||
		IsPlayerInArea(playerid, 1181.835, -1417.363, 1269.301, -1283.14) ||
		GetPlayerInterior(playerid) == 10)
		{
			if(!IsACop(playerid))
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					SetPlayerArmedWeapon(playerid,0);
					SendClientMessage(playerid, COLOR_RED, "Hier ist eine NO DM Zone! Schießen / Schlagen verboten!");
				}
			}
		}
	}
//=========
    if((newkeys == KEY_ACTION) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
    {
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
        {
            SendClientMessage(playerid, COLOR_GRAD1, "Versuche das Auto abzuschleppen...");
            //new Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(playerid, pX, pY, pZ);
            new Float:vX, Float:vY, Float:vZ;
            new Found = 0;
            new vid = 0;
            while((vid < MAX_VEHICLES) && (!Found))
            {
   				vid++;
   				GetVehiclePos(vid,vX,vY,vZ);
                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (vid!=GetPlayerVehicleID(playerid)))
                {
                    Found = 1;
                    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                    {
                        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
					AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
					GameTextForPlayer(playerid, "Fahrzeug am Haken", 5000, 1);
				}
			}
			if(!Found)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
			}
		}
	}
 //=========
	if(newkeys == KEY_FIRE)
	{
	    if(PlayerInfo[playerid][pJailed] == 1)
	    {
			knastdm[playerid]++;
			TogglePlayerControllable(playerid,0);
			SendClientMessage(playerid, COLOR_RED, "Knast Deathmatch ist verboten!");
			SetTimerEx("UnfreezePlayer",7000,0,"d",playerid);
		}
	}
	if(newkeys == 16 && InCargo[playerid])
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InCargo[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InCargo[playerid] = 0;
	}
	if(newkeys == 16 && InLevi[playerid])
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InLevi[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InLevi[playerid] = 0;
	}
	if(newkeys == 16 && InEnfo[playerid])
	{
	    new Float:X, Float:Y, Float:Z;
	    GetVehiclePos(InEnfo[playerid], X, Y, Z);
	    SetPlayerPos(playerid, X+4, Y, Z);
	    SetPlayerInterior(playerid, 0);
		InEnfo[playerid] = 0;
	}
	if(dtc_AutohausCat[playerid] != 2000)
	{
	    new autohaus = dtc_AutohausCat[playerid];
	    new AhCars;
	    for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
        {
        	if(dtcKaufliste[ah][dtc_Autohaus] == autohaus)
        	{
        	    AhCars ++;
        	}
        }
	    if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT || newkeys == KEY_FIRE) //right (4 Numpad/e)
  		{
  		    new carid = dtc_AutohausCar[playerid] +1;
  		    if(carid >= AhCars)
  		    {
  		        carid = 0;
  		    }
  		    new car,preis,counter;
  		    for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
	        {
	            if(dtcKaufliste[ah][dtc_Autohaus] == autohaus)
				{
		        	if( counter == carid)
		        	{
		        	    car = dtcKaufliste[ah][dtc_CarModel];
						preis = dtcKaufliste[ah][dtc_CarPreis];
		        	}
	        		counter ++;
				}
	        }
			new c1 = random(120);
        	new c2 = random(120);
			DestroyVehicle(dtc_AutohausSCar[playerid]);
			dtc_AutohausSCar[playerid] = CreateVehicle(car, DtcSonstiges[autohaus][1][0],DtcSonstiges[autohaus][1][1],DtcSonstiges[autohaus][1][2],DtcSonstiges[autohaus][1][3],c1,c2,-1);
        	SetVehicleVirtualWorld(dtc_AutohausSCar[playerid],55+playerid);
        	new string[246];
        	TextDrawHideForPlayer(playerid,CarKauf[playerid]);
        	TextDrawDestroy(CarKauf[playerid]);
        	format(string,sizeof(string),"~r~---------- AUTOHAUS ----------~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~$%d~n~~b~Auswählen:~n~~w~ <Num 4<~b~&~w~>Num 6> ~n~~b~Kaufen:~w~ Enter ~n~~b~Abbrechen:~w~ Tab",CarName[car-400],preis);
			CarKauf[playerid] = TextDrawCreate(200,310,string);
			TextDrawAlignment(CarKauf[playerid],1);
			TextDrawUseBox(CarKauf[playerid],1);
			TextDrawBoxColor(CarKauf[playerid],0x000000FF);
			TextDrawBackgroundColor(CarKauf[playerid],COLOR_BLACK);
			TextDrawSetOutline(CarKauf[playerid],1);
			TextDrawFont(CarKauf[playerid], 2);
			//TextDrawSetProportional(CarKauf[playerid], 2);
			TextDrawTextSize(CarKauf[playerid],450,410);
			TextDrawShowForPlayer(playerid,CarKauf[playerid]);
			dtc_AutohausCar[playerid] = carid;
		}
		if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT || newkeys == KEY_JUMP) //left (6 Numpad/q)
  		{
  		    new carid = dtc_AutohausCar[playerid] -1;
  		    if(carid < 0)
  		    {
  		        carid = AhCars;
  		    }
  		    new car,preis,counter;
  		    for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
	        {
	            if(dtcKaufliste[ah][dtc_Autohaus] == autohaus)
				{
		        	if( counter == carid)
		        	{
		        	    car = dtcKaufliste[ah][dtc_CarModel];
						preis = dtcKaufliste[ah][dtc_CarPreis];
		        	}
	        		counter ++;
				}
	        }
			new c1 = random(120);
        	new c2 = random(120);
			DestroyVehicle(dtc_AutohausSCar[playerid]);
			dtc_AutohausSCar[playerid] = CreateVehicle(car, DtcSonstiges[autohaus][1][0],DtcSonstiges[autohaus][1][1],DtcSonstiges[autohaus][1][2],DtcSonstiges[autohaus][1][3],c1,c2,-1);
        	SetVehicleVirtualWorld(dtc_AutohausSCar[playerid],55+playerid);
        	new string[246];
        	TextDrawHideForPlayer(playerid,CarKauf[playerid]);
        	TextDrawDestroy(CarKauf[playerid]);
        	format(string,sizeof(string),"~r~---------- AUTOHAUS ----------~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~$%d~n~~b~Auswählen:~n~~w~ <Num 4<~b~&~w~>Num 6> ~n~~b~Kaufen:~w~ Enter ~n~~b~Abbrechen:~w~ Tab",CarName[car-400],preis);
			CarKauf[playerid] = TextDrawCreate(200,310,string);
			TextDrawAlignment(CarKauf[playerid],1);
			TextDrawUseBox(CarKauf[playerid],1);
			TextDrawBoxColor(CarKauf[playerid],0x000000FF);
			TextDrawSetOutline(CarKauf[playerid],1);
			TextDrawBackgroundColor(CarKauf[playerid],COLOR_BLACK);
			TextDrawFont(CarKauf[playerid], 2);
			//TextDrawSetProportional(CarKauf[playerid], 2);
			TextDrawTextSize(CarKauf[playerid],450,410);
			TextDrawShowForPlayer(playerid,CarKauf[playerid]);
			dtc_AutohausCar[playerid] = carid;
		}
	    if(newkeys == 16)//Enter
	    {
	        new carid = dtc_AutohausCar[playerid];
  		    new car,preis,counter;
  		    for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
	        {
	            if(dtcKaufliste[ah][dtc_Autohaus] == autohaus)
				{
		        	if( counter == carid)
		        	{
		        	    car = dtcKaufliste[ah][dtc_CarModel];
						preis = dtcKaufliste[ah][dtc_CarPreis];
		        	}
	        		counter ++;
				}
	        }
	        if(GetPlayerMoney(playerid) < preis)
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genug Geld um dieses Fahrzeug zu kaufen!");
				return 1;
			}
 		    DestroyVehicle(dtc_AutohausSCar[playerid]);
  		    SetPlayerPos(playerid, DtcSonstiges[autohaus][4][0],DtcSonstiges[autohaus][4][1],DtcSonstiges[autohaus][4][2]);
  		    SetPlayerFacingAngle(playerid,DtcSonstiges[autohaus][4][3]);
			dtc_AutohausCar[playerid] = 0;
			dtc_AutohausCat[playerid] = 2000;
			SetPlayerVirtualWorld(playerid,0);
			TextDrawHideForPlayer(playerid,CarKauf[playerid]);
			TextDrawDestroy(CarKauf[playerid]);
			TogglePlayerControllable(playerid,1);
			SetCameraBehindPlayer(playerid);
			OnPlayerBuyCar(playerid,car,preis,autohaus);
	    	//ResetPlayer
		}
		if(newkeys == KEY_ACTION) //Tab
  		{
  		    //ResetPlayer
  		    DestroyVehicle(dtc_AutohausSCar[playerid]);
  		    SetPlayerPos(playerid, DtcSonstiges[autohaus][4][0],DtcSonstiges[autohaus][4][1],DtcSonstiges[autohaus][4][2]);
  		    SetPlayerFacingAngle(playerid,DtcSonstiges[autohaus][4][3]);
			dtc_AutohausCar[playerid] = 0;
			dtc_AutohausCat[playerid] = 2000;
			SetPlayerVirtualWorld(playerid,0);
			TextDrawHideForPlayer(playerid,CarKauf[playerid]);
			TextDrawDestroy(CarKauf[playerid]);
			TogglePlayerControllable(playerid,1);
			SetCameraBehindPlayer(playerid);
  		}
	}
	if(newkeys & KEY_SUBMISSION)
	{

	    if(IsPlayerInRangeOfPoint(playerid,15.0,1588.6610,-1638.5031,13.3795))
		{
			OnPlayerCommandText(playerid,"/pd1");
		}

		if(IsPlayerInRangeOfPoint(playerid,10.0,1545.2229,-1627.4520,13.3828))
		{
			OnPlayerCommandText(playerid,"/pd2");
		}
		if(IsPlayerInRangeOfPoint(playerid,15.0,924.185730, -1223.406982, 16.036469))
		{
			OnPlayerCommandText(playerid,"/oamtls");
		}
	}
	return 1;
}
Function OnPlayerStateChange(playerid, newstate, oldstate)
{
	FRAC_OnPlayerStateChange(playerid, newstate, oldstate);
	M_OnPlayerStateChange(playerid, newstate, oldstate);
	new string[256];

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    for(new p=0;p<MAX_PLAYERS;p++)
	    {
	        if(GetPlayerVehicleSeat(playerid) == 0 && GetPlayerVehicleID(playerid) == supmobil[p])
	        {
	            if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pSupporter] == 0)
	            {
		            RemovePlayerFromVehicle(playerid);
		            SendClientMessage(playerid, COLOR_WHITE, "Du kannst keine Supporter Fahrzeuge fahren.");
	            }
	        }
	    }
	    if(IsABike(GetPlayerVehicleID(playerid)))
	    {
			switch(GetPlayerSkin(playerid))
			{
		        #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		    }
		}
	}
	else
	{
		RemovePlayerAttachedObject(playerid, SLOT);
	}
 	if((newstate == PLAYER_STATE_DRIVER))
  	{
   		for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, Weapons[playerid][j], Ammo[playerid][j]);
     	ResetPlayerWeapons(playerid);
   	}
    if((newstate == PLAYER_STATE_ONFOOT) && ((oldstate == PLAYER_STATE_DRIVER)))
    {
    	for(new j=0; j<11; j++) GivePlayerWeapon(playerid, Weapons[playerid][j], Ammo[playerid][j]);
   		return 1;
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new Weap[2];
        GetPlayerWeaponData(playerid, 4, Weap[0], Weap[1]);
        SetPlayerArmedWeapon(playerid, Weap[0]);
	}
 	if(newstate==PLAYER_STATE_DRIVER)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		{
			if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
			{
	        	IsTowTrucker[playerid]=1;
	        	TowTruckers++;
   				SendClientMessage(playerid,COLOR_LIGHTBLUE,"*Nutze die Strg Taste, um ein Auto abzuschleppen.");
			}
		}
	}
	else if(TowTruckers > 0 && newstate == PLAYER_STATE_DRIVER)
	{
 		SendClientMessage(playerid, COLOR_YELLOW, "Wenn Probleme auftreten ruf den Ordnungstienst mit /noamt.");
	}
	else if(newstate == PLAYER_STATE_ONFOOT &&(IsTowTrucker[playerid] == 1))
	{
 		IsTowTrucker[playerid] = 0;
   		TowTruckers--;
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 417)
	{
     	SetPlayerPos(playerid, 1261.269,-803.480,1185.830);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InLevi[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 548)
	{
     	SetPlayerPos(playerid, 89.773613, 2027.749756, 2865.647705);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 0);
		InCargo[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 427 && IsACop(playerid))
	{
	    SetPlayerPos(playerid, 260.4671,118.6456,1029.7023);
	    SetPlayerFacingAngle(playerid, 178.6620);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerInterior(playerid, 3);
	    InEnfo[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && PlayerInfo[playerid][pJailed] > 0 && !IsAPlane(GetPlayerVehicleID(playerid)))
	{
		TogglePlayerControllable(playerid,false);
		TogglePlayerControllable(playerid,true);
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Nun bist du nicht mehr im Dienst, du hast $%d verdient.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerMoney(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~Der Transport kostet~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Der Kunde verlässt das Fahrzeug~n~~g~Du bekommst $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				GivePlayerMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), "* Du brauchst $%d, um einsteigen zu können.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), "* Du bezahlst $%d, dem Taxifahrer.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Kunde %s betritt dein Taxi.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), "* Du bezahlst $%d, dem Busfahrer.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Passagier %s betritt den Bus.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
	                    }
						GivePlayerMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(WantedLevel[playerid] >= 1)
		{
		    new price = WantedLevel[playerid]+2000;
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(IsACop(i) && CrimInRange(70.0, playerid,i))
				    {
						count = 1;
						format(string, sizeof(string), "~w~Verbrecher getötet ~g~$%d", price);
						GameTextForPlayer(i, string, 5000, 1);
						ConsumingMoney[i] = 1;
						if(price/2 < 0)
						{
							GivePlayerMoney(i, price/2);
						}
						else
						{
						    GivePlayerMoney(i, 0);
						}
						FraktionsKasse[0] += price/2;
						PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					}
				}
			}
			if(count == 1)
			{
			    if(WantedLevel[playerid] >= 6)
			    {
					GivePlayerMoney(playerid, -2000);
					PlayerInfo[playerid][pWantedDeaths] += 1;
					PlayerInfo[playerid][pJailed] = 2;
				    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid] * 240);
				    format(string, sizeof(string), "Du bist für %d Sekunden im Gefängnis und musst $%d bezahlen.", PlayerInfo[playerid][pJailTime], price);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				    WantedPoints[playerid] = 0;
					WantedLevel[playerid] = 0;
					SetPlayerVirtualWorld(playerid, 60);
			    	CallLawyer[playerid] = 111;
			    	SendClientMessage(playerid, COLOR_LIGHTRED, "Willst du einen Rechtsanwalt? (Dann Tippe yes oder no)");
					if(WantLawyer[playerid] >= 1)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Es ist kein Anwalt verfügbar, Gefängnisszeit startet jetzt.");
					    WantLawyer[playerid] = 0;
					    CallLawyer[playerid] = 0;
					}
				}
				else
				{
					GivePlayerMoney(playerid, -1000);
					PlayerInfo[playerid][pWantedDeaths] += 1;
					PlayerInfo[playerid][pJailed] = 1;
				    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid] * 240);
				    format(string, sizeof(string), "Du bist für %d Sekunden im Gefängnis und musst $%d bezahlen.", PlayerInfo[playerid][pJailTime], price);
				    SendClientMessage(playerid, COLOR_LIGHTRED, string);
				    WantedPoints[playerid] = 0;
					WantedLevel[playerid] = 0;
    				CallLawyer[playerid] = 111;
			    	SendClientMessage(playerid, COLOR_LIGHTRED, "Willst du einen Rechtsanwalt? (Dann Tippe yes oder no)");
					if(WantLawyer[playerid] >= 1)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Es ist kein Anwalt verfügbar, Gefängnisszeit startet jetzt.");
					    WantLawyer[playerid] = 0;
					    CallLawyer[playerid] = 0;
					}
				}
			}
		}
	}
	/*if(oldstate == PLAYER_STATE_DRIVER && MotorschadenMSGSent[playerid] == 2)
	{
	    UnFreezePlayer(playerid);
	    MotorschadenMSGSent[playerid] = 0;
	}*/
	/*if(oldstate == PLAYER_STATE_DRIVER && MotorschadenMSGSent[playerid] == 2)
	{
	    UnFreezePlayer(playerid);
	    MotorschadenMSGSent[playerid] = 0;
	}*/
    if(newstate == PLAYER_STATE_DRIVER) //buggy dont finnish
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Du hast kein Bootschein, lass dich nicht erwischen!");
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsACop(playerid))
						{
		    				new oschein[257];
							new sendername[MAX_PLAYER_NAME];
	                        GetPlayerName(playerid, sendername, sizeof(sendername));
							format(oschein, sizeof(oschein), "HQ: VORSICHT %s Hat keinen Bootschein und Fährt Boot!", sendername);
							SendFamilyMessage(1 && 2 && 22, COLOR_RED, oschein);
						}
				}

			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    new oschein[257];
			    new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 1) { }
			    else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Fluglicense !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fliegt ohne Fluglicense", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsABike(newcar))
		{
		    if(PlayerInfo[playerid][pMotoLic] < 1)
			{
			    new oschein[257];
			    new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 1) { }
			    else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast kein Motorrad Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s Fährt Motorrad ohne Motorrad Schein", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsARoller(newcar))
		{
		    if(PlayerInfo[playerid][pRollerLic] < 1)
		    {
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
		        if(TakingLesson[playerid] == 1)
		        {

				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Roller Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fährt ohne Roller Schein Roller", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsALKW(newcar))
		{
		    if(PlayerInfo[playerid][pLKWLic] == 0)
			{
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast kein LKW Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s Fährt LKW ohne LKW Schein", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		
		else if(IsANoLicVehicle(newcar)) { }
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(PlayerDrunk[playerid] >= 5)
				{
				    WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
					SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
				}
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
				if((TakingLesson[playerid] == 1) || 	IsPlayerNPC(playerid))
				{
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast kein Autoführerschein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fährt ohne Autoführerschein Auto", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
						return 1;
					}
				}
			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
				SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
				SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			}
		}//Done with car check

		if(GetVehicleModel(newcar) == 408)
		{
		    if(PlayerInfo[playerid][pJob] == 17)
		    {
		        if(Mullabfuhr[playerid] == 0)
		        {
		    		SendClientMessage(playerid,COLOR_YELLOW," Um deinen Dienst als Müllmann zu starten, benutze /starten");
		    	}
		    }
		    else
			{
			    SendClientMessage(playerid,COLOR_WHITE," Dieser Wagen ist nur für Müllmänner da!");
			    RemovePlayerFromVehicle(playerid);
			}
		}

		for(new v=0; v<sizeof(HafenKlause); v++)
		{
		    if(newcar == HafenKlause[v])
		    {
		        new cost = SBizzInfo[1][sbEntranceCost];
				if(GetPlayerMoney(playerid) >= cost)
				{
				    GivePlayerMoney(playerid,-cost);
				    SBizzInfo[1][sbTill] += cost;
				    format(string,sizeof(string),"Bootsfahrt:Du zahlst $%d",cost);
				    SendClientMessage(playerid,COLOR_WHITE,string);
				    //GameTextForPlayer(playerid,string,5000,3);
				}
				else
				{
				    format(string,sizeof(string)," Die Bootsfahrt kostet $%d. Du hast nicht soviel!",cost);
				    SendClientMessage(playerid,COLOR_WHITE,string);
				    RemovePlayerFromVehicle(playerid);
				}
				return 1;
		    }
		}
		if(PlayerInfo[playerid][pAdmin] > 0) { return 1; }

		if(newcar == HitmanLeaderBullet && PlayerInfo[playerid][pLeader] != 8)
		{
		    SendClientMessage(playerid,COLOR_WHITE," Dieser Wagen ist Eigentum der Hitmen!");
		    RemovePlayerFromVehicle(playerid);
		}
		if(GetVehicleModel(newcar) == 525 && !IsPlayerInFrac(playerid,24))
		{
		    SendClientMessage(playerid,COLOR_WHITE," Dieser Wagen ist Eigentum der Abschleppfirma!");
		    RemovePlayerFromVehicle(playerid);
		}
		if(!IsPlayerInFrac(playerid,5))
		{
			for(new pv = 0; pv < sizeof(LCNVehs); pv++)
			{
			    if(newcar == LCNVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,6))
		{
			for(new pv = 0; pv < sizeof(YakuzaVehs); pv++)
			{
			    if(newcar == YakuzaVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,7))
		{
			for(new pv = 0; pv < sizeof(PraesiVehs); pv++)
			{
			    if(newcar == PraesiVehs[pv])
			    {
					RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,8))
		{
			for(new pv = 0; pv < sizeof(HitmanVehs); pv++)
			{
			    if(newcar == HitmanVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,9))
		{
			for(new pv = 0; pv < sizeof(NewsVehs); pv++)
			{
			    if(newcar == NewsVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,10))
		{
			for(new pv = 0; pv < sizeof(TaxiVehs); pv++)
			{
			    if(newcar == TaxiVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,12))
		{
			for(new pv = 0; pv < sizeof(FuegosVehs); pv++)
			{
			    if(newcar == FuegosVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
				if(!IsPlayerInFrac(playerid,13))
		{
			for(new pv = 0; pv < sizeof(GroveVehs); pv++)
			{
			    if(newcar == GroveVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,18))
		{
			for(new pv = 0; pv < sizeof(RifaVehs); pv++)
			{
			    if(newcar == RifaVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,14))
		{
			for(new pv = 0; pv < sizeof(BallasVehs); pv++)
			{
			    if(newcar == BallasVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,21))
		{
			for(new pv = 0; pv < sizeof(WheelVehs); pv++)
			{
			    if(newcar == WheelVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,15))
		{
			for(new pv = 0; pv < sizeof(LSBC); pv++)
			{
			    if(newcar == LSBC[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,16))
		{
			for(new pv = 0; pv < sizeof(VagosVehs); pv++)
			{
			    if(newcar == VagosVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(PlayerInfo[playerid][pJob] != 16)
		{
			for(new pv = 0; pv < sizeof(PilotenVehs); pv++)
			{
			    if(newcar == PilotenVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Damit können nur Piloten fliegen!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,17))
		{
			for(new pv = 0; pv < sizeof(AztecasVehs); pv++)
			{
			    if(newcar == AztecasVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,19))
		{
			for(new pv = 0; pv < sizeof(RSVehs); pv++)
			{
			    if(newcar == RSVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,20))
		{
			for(new pv = 0; pv < sizeof(TerrorVehs); pv++)
			{
			    if(newcar == TerrorVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid, 11) && TakingLesson[playerid] != 1)
		{
		    for(new pv = 0; pv < sizeof(FahrschulVehs); pv++)
		    {
				if(newcar == FahrschulVehs[pv])
				{
				    SendClientMessage(playerid, COLOR_RED, "Du hast keine Schlüssel!");
				    RemovePlayerFromVehicle(playerid);
   					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,23))
		{
			for(new pv = 0; pv < sizeof(RMVehs); pv++)
			{
			    if(newcar == RMVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(!IsPlayerInFrac(playerid,24))
		{
			for(new pv = 0; pv < sizeof(oAmtVehs); pv++)
			{
			    if(newcar == oAmtVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du hast keine Schlüssel!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid) || IsPlayerInFrac(playerid,23)) { }
		    else { RemovePlayerFromVehicle(playerid); }
		}

		if(IsABundeswehrCar(newcar))
		{
		    if(IsPlayerInFrac(playerid,3)|| PlayerInfo[playerid][pLeader] == 7) { }
		    else { RemovePlayerFromVehicle(playerid); }
		}
		if(IsAnAmbulance(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 22) { }
		    else { RemovePlayerFromVehicle(playerid); }
		}
		if(PlayerKarting[playerid] != 0)
		{
		    new kart = GetPlayerVehicleID(playerid);
		    if(kart==110||kart==111||kart==112||kart==113||kart==114||kart==115)
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}
		if(GetVehicleModel(newcar) == 582 || GetVehicleModel(newcar) == 488)
		{
		    if(!IsPlayerInFrac(playerid,9))
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   Dieses Fahrzeug darfst du nur als News Reporter benutzen!");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }
		}
		if(IsABus(newcar) && newcar != RMBus)
		{
		    if(PlayerInfo[playerid][pJob] != 14)
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Busfahrer !");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }
		}
		if(IsATaxi(newcar))
		{
		    if(!IsPlayerInFrac(playerid,10))
			{
		        SendClientMessage(playerid,COLOR_GREY,"   Dieses Fahrzeug darfst du nur als Taxifahrer benutzen!");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }
		}
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid) || IsPlayerInFrac(playerid,23)) { }
		    else { RemovePlayerFromVehicle(playerid); return 1;}
		}
		if(oldcar != 301)
		{
			if((oldcar != 0) && (HireCar[playerid] != oldcar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 300;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}

		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || IsPlayerInRangeOfPoint(playerid,1000.0, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		/*if(WantedPoints[playerid] > 0)
		{
		    new dstring[128];
			new wanted = WantedPoints[playerid];
			new diecash = 0;
		    while(WantedPoints[playerid] > 0)
		    {
		        diecash += 500;
		        WantedPoints[playerid] --;
		    }
		    format(dstring, sizeof(dstring), "Du Verlierst $%d für Sterben mit %d Wanteds.", diecash, wanted);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    GivePlayerMoney(playerid, - diecash);
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}*/
		//WantedPoints[playerid] = 0;
		//WantedLevel[playerid] = 0;
		if(PlayerInfo[playerid][pDonateRank] > 0) { SetPlayerHealth(playerid, 100.0); }
		else { SetPlayerHealth(playerid, 50.0+PlayerInfo[playerid][pSHealth]); }
		MedicBill[playerid] = 1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

Function HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

Function CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return 1;
}


Function CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}

Function LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayerEx(carid,i,0,1);
		}
	}
}

Function UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsAPlane(carid))
			{
				SetVehicleParamsForPlayerEx(carid,i,0,0);
			}
		}
	}
}

Function InitLockDoors(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new c;
		while (c < 254)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
	}
	return 1;
}

Function OnPlayerExitVehicle(playerid, vehicleid)
{
    StopAudioStreamForPlayer(playerid);
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	if(gGas[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~Auto Verlassen", 500, 3);
	}
	if(GetVehicleModel(vehicleid) == 408)
    {
		if(Mullabfuhr[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_RED, "* Du hast 15 Sekunden um in einen Muellwagen zu steigen !");
			SetTimerEx("MullabfuhrAbbruch", 15000, 0,"i",playerid);
		}
    }
	return 1;
}

Function OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
	{
	 	SpawnPlayer(playerid);
		return 1;
	}
	if(gPlayerAccount[playerid] == 1 && gPlayerLogged[playerid] == 0)
	{
	    ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_INPUT,"Login","Willkommen auf German Next Era Life,\n\n\n\n Bitte Logge dich nun ein!\n\n\n","Login","Abbrechen");
	}
	else if(gPlayerAccount[playerid] == 0 && gPlayerLogged[playerid] == 0)
	{
		ShowPlayerDialog(playerid,DIALOG_REG,DIALOG_STYLE_MSGBOX,"Account","Herzlich Willkommen auf German Next Era Life,\n\n\nWir Freuen uns das du zu uns gejoint bist.\n\n\nDamit du gleich Loslegen kannst,\n\nmusst du dich Registrieren.\n\nViel Spaß.","Erstellen","Abbrechen");
	}

	PlayerPlaySound(playerid, 1176, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pModel] = Peds[classid][0];
	SetPlayerTeamFromClass(playerid,classid);
	SetupPlayerForClassSelection(playerid);
	return 1;
}

Function SetupPlayerForClassSelection(playerid)
{
	/*switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,323.4-1.5-1.0,305.6,999.1+0.7);
			SetPlayerCameraLookAt(playerid,323.4-1.0,305.6,999.1+0.7);

		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,-2654.4-1.5,1424.2,912.4+0.7);
			SetPlayerCameraLookAt(playerid,-2654.4,1424.2,912.4+0.7);
		}
		default:
		{
		    SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,3572.8022,-1636.4513,1.4201);
			SetPlayerFacingAngle(playerid,267.0788);
		    SetPlayerCameraPos(playerid, 3579.6821,-1636.8357,0.8035);
		    SetPlayerCameraLookAt(playerid,3572.8022,-1636.4513,1.4201);
		}
	}*/
	if(AtClothes[playerid] == 0)
	{
		switch(random(3))
		{
		    case 0:
		    {
				SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1491.1038,-1781.6887,53.3927,236);
		        SetPlayerFacingAngle(playerid,98.5031);
		        SetPlayerCameraPos(playerid,1499.3364,-1748.3489,53.3927);
		        SetPlayerCameraLookAt(playerid,1500.4111,-1745.2477,52.3296);
		    }
		    case 1:
		    {
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1491.1038,-1781.6887,53.3927,236);
		        SetPlayerFacingAngle(playerid,264.4628);
		        SetPlayerCameraPos(playerid,1499.3364,-1748.3489,53.3927);
		        SetPlayerCameraLookAt(playerid,1500.4111,-1745.2477,52.3296);
		    }
		    default:
		    {
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1491.1038,-1781.6887,53.3927,236);
		        SetPlayerFacingAngle(playerid,89.4192);
		        SetPlayerCameraPos(playerid,1499.3364,-1748.3489,53.3927);
		        SetPlayerCameraLookAt(playerid,1500.4111,-1745.2477,52.3296);
		    }
		}
    	/*SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,1192.1588,-2077.6628,69.0078);
		SetPlayerCameraPos(playerid,1212.513184, -2069.156738, 112.511337);
		SetPlayerCameraLookAt(playerid,1175.060303, -2038.934937, 78.353287);
		*/
  	}
	else
 	{
    	SetPlayerInterior(playerid,14);
		SetPlayerPos(playerid,258.4893,-41.4008,1002.0234);
		SetPlayerFacingAngle(playerid, 90.0);
		SetPlayerCameraPos(playerid,256.0815,-43.000,1003.0234);
		SetPlayerCameraLookAt(playerid,258.4893,-41.4008,1002.0234);
	}
}


//---------------------------------------------------------

Function SetPlayerTeamFromClass(playerid,classid)
{
 	if (classid >= 1 && classid <= 11)
	{
		gTeam[playerid] = 11; //admin
		PlayerInfo[playerid][pTeam] = 11;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

//---------------------------------------------------------

Function SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Unbekannt");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		WantedLevel[playerid]++;
		wlevel = WantedLevel[playerid];
		format(turnmes, sizeof(turnmes), "Du hast ein Verbrechen begangen ( %s ). Zeuge: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_LIGHTRED, turnmes);
		format(wantedmes, sizeof(wantedmes), "Momentanes Wantedlevel: %d", wlevel);
		SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
   				if(IsACop(i))
			    {
					format(cbjstore, sizeof(turnmes), "HQ: Alle Einheiten: Reporter: %s",turner);
					SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
					format(cbjstore, sizeof(turnmes), "HQ: Verbrechen: %s, Gesuchter: %s",reason,turned);
					SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
				}
			}
		}
	}
}


//---------------------------------------------------------

Function SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new crbjstore[128];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		format(turnmes, sizeof(turnmes), "SMS: %s, du wurdest eingesperrt, und bist kein Verbrecher mehr, Sender: MOLE (555)",turned);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
			    {
					format(crbjstore, sizeof(crbjstore), "HQ: An alle Einheiten, %s hat den Einsatz beendet.",turner);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
					format(crbjstore, sizeof(crbjstore), "HQ: %s hat, %s bearbeitet",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

Function RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

Function RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}
Function SetPlayerUnjail()
{
	new plname[MAX_PLAYER_NAME];
	new string[256];

	if (LottoTimer > 0)
	LottoTimer--;
	if (LottoTimer == 1)
	{
	    OOCOff(COLOR_WHITE, "[Lotto]: Die Super Ziehung wurde gestartet!");
	    new rand = random(90);
	    if(rand < 70) { rand += 3; }
	    Lotto(rand);
	}
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        NDMZONE(i);
	        NagelBand_Timer();
			new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			if(level >= 0 && level >= 2) { PlayerInfo[i][pPayCheck] += 1; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 11; }
   			if(IsPlayerInAnyVehicle(i))
		    {
   	 			new Float:health;
		   	 	new vehicle = GetPlayerVehicleID(i);
	    		GetVehicleHealth(vehicle, health);
		    	if(health < 281)
		    	{
  	    			SetVehicleToRespawn(vehicle);
				}
			}
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0)
				{
					PlayerInfo[i][pJailTime]--;
				}
				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i,0);
						SetPlayerPos(i,1551.2737,-1675.5720,15.7766);
						SetPlayerFacingAngle(i,-1587.2474);
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerInterior(i, 0);
					    SetPlayerVirtualWorld(i, 0);
					    SetPlayerPos(i, 1808.6899,-1569.0588,13.4676);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_GRAD1,"Deine Gefängniszeit ist um.");
					format(string, sizeof(string), "~g~Du bist frei!~n~~w~Bitte benimm dich in der Zukunft!");
					GameTextForPlayer(i, string, 5000, 1);
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
				}
			}
			else if (LottoTimer == 120)
			{
			    format(string, sizeof(string), "[Lotto]: Die Lotterie Ziehung beginnt in 2 Minuten, Jackpot: %d", Jackpot);
			    SendClientMessage(i,COLOR_GREEN,string);
			    SendClientMessage(i,COLOR_GREEN,"[Lotto]: Gib /Lotto [Nummer] um einen Lotterie-Schein zu kaufen.");
			}
			else if (LottoTimer == 60)
			{
			    format(string, sizeof(string), "[Lotto]: Die Lotterie Ziehung beginnt in 1 Minute, Jackpot: %d", Jackpot);
			    SendClientMessage(i,COLOR_GREEN,string);
			    SendClientMessage(i,COLOR_GREEN,"[Lotto]: Gib /Lotto [Nummer] um einen Lotterie-Schein zu kaufen.");
			}
			if(GetPlayerMoney(i) - CurrentMoney[i] >= 50000 && PlayerInfo[i][pAdmin] < 1)
		    {
		        if(ConsumingMoney[i])
		        {
                    CurrentMoney[i] = GetPlayerMoney(i);
					ConsumingMoney[i] = 0;
		        }
		        else
		        {
			        GetPlayerName(i, plname, sizeof(plname));
			        format(string, 256, "Warnung: [%d]%s hat mehr als $50000/s gespawnt,**Erst Person checken vor Ban** (/check).",i,plname);
					ABroadCast(COLOR_YELLOW,string,1);
					PayLog(string);
			        CurrentMoney[i] = GetPlayerMoney(i);
		        }
		    }
		    else
		    {
		        CurrentMoney[i] = GetPlayerMoney(i);
		    }
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2)
				{
				    RemovePlayerFromVehicle(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1) { }
				    else { RemovePlayerFromVehicle(i); }
				}
			}
			else if(IsANewbie(newcar))
			{
			    if(PlayerInfo[i][pNewLic] == 0 && GetPlayerState(i) == 2) { }
    	    	if(PlayerInfo[i][pNewLic] == 0 && GetPlayerState(i) == 2) { }
			}
			else if(IsANoLicVehicle(newcar)) { }
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				    else
				    {
				    }
				}
			}//Done with car check
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
			if(MedicTime[i] > 0)
			{
			    if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 5);
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X + 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
     				new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
					GivePlayerMoney(i, -cut);
					UnFreezePlayer(i);
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;
			        PlayerFixRadio(i);
			        SpawnPlayer(i);
			    }
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
                if(TutTime[i] == 6) //DASTUTORIAL
			    {
					TextDrawShowForPlayer(i, PlayerInfo[i][LetterboxTop]);
					TextDrawShowForPlayer(i, PlayerInfo[i][LetterboxBottom]);
			        ClearChatbox(i, 10);
				}
				if(TutTime[i] == 8)
			    {

					SetPlayerPos(i,1162.1566,-1424.7184,22.7423);
					SetPlayerCameraPos(i, 1131.2959,-1395.4395,17.5291);
					SetPlayerCameraLookAt(i, 1126.8335,-1406.5790,16.9611);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);

			        SendClientMessage(i, 0xFFAA00FF, "|=================| Einleitung von German Next Era Life |=================|");
			        SendClientMessage(i, COLOR_GREEN, " Herzlich Willkommen auf German Next Era Life!");
			        SendClientMessage(i, COLOR_WHITE, " Wir heißen dich Recht Herzlich Willkommen in unsere Netten aber Verrückten Community.");
			        SendClientMessage(i, COLOR_WHITE, " Um es dir so leicht wie möglich zu machen wirst du gleich auf unserem Server Eingewiesen.");
			        SendClientMessage(i, COLOR_WHITE, " Dort werden dir wichtige Dinge und Orte gezeigt.");
			        SendClientMessage(i, COLOR_WHITE, " Viel Spaß bei uns Wünscht dir das ganze Team");
			        SendClientMessage(i, 0xFFAA00FF, " ==================Einkaufszentrum================");
			        SendClientMessage(i, COLOR_WHITE, " Hier ist das Einkaufszentrum in Los Santos.");
			        SendClientMessage(i, COLOR_WHITE, " Wo du dir Kleidung sowie Handy´s Kaufen kannst.");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
			    }
			    else if(TutTime[i] == 20)
			    {
			        ClearChatbox(i, 10);
					SetPlayerPos(i,1470.0084,-1721.2589,13.5469);
			        SetPlayerCameraPos(i, 1471.5802,-1702.2087,21.9274);
					SetPlayerCameraLookAt(i, 1480.6166,-1750.8198,15.4453);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "===================Die Stadthalle===================");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " Hier in unserer Stadthalle kannst du viel erledigen.");
			        SendClientMessage(i, COLOR_WHITE, " Du musst hier deinen Personalausweiß beantragen,damit du beweisen kannst das du,");
			        SendClientMessage(i, COLOR_WHITE, " Bürger von Los Santos bist, und um die eine Wohnung zu mieten oder ein Haus zu kaufen.");
			        SendClientMessage(i, COLOR_WHITE, " Die Stadthalle ist mit einem S markiert und ist nähe LSPD in Los Santos.");
			        SendClientMessage(i, COLOR_WHITE, " Um einen Personalausweiß oder einen Führerschein zu erhalten musst du Zur,");
			        SendClientMessage(i, COLOR_WHITE, " Rezeption laufen (zum Gelben i)....");
			        SendClientMessage(i, COLOR_WHITE, " ");
			    }
			    else if(TutTime[i] == 40)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1514.3059,-1667.8116,14.0469);
			        SetPlayerCameraPos(i,1518.2676,-1697.5204,29.6489);
					SetPlayerCameraLookAt(i,1552.5614,-1673.2915,16.1953);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "==============Los Santos Police Department==============");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Die Polizei stelle in Los Santos hat viel zu tun.. um den Verbrechern keine große chance.");
			        SendClientMessage(i, COLOR_WHITE, "zu gewähren. Und um die Straßen von Los Santos sauber zu halten.");
			        SendClientMessage(i, COLOR_WHITE, "Wenn du in einer Not Situation bist wähl, die 911 (/call 911) damit sie dir schnell .");
			        SendClientMessage(i, COLOR_WHITE, "helfen Können");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
			    }
			    else if(TutTime[i] == 53)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1460.9517,-1061.4102,22.6661);
			        SetPlayerCameraPos(i,1487.8461,-1042.5690,23.8281);
					SetPlayerCameraLookAt(i,1462.2109,-1012.2822,26.8438);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "====================Bank================");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Hier kannst du Geld abheben und Usern geld überweisen.");
			        SendClientMessage(i, COLOR_WHITE, "Ebenfalls kannst du hier einen Kredit aufnehmen und auch ein Verbrecher sein,");
			        SendClientMessage(i, COLOR_WHITE, "Du kannst auch die Tresortür aufbrechen und die Bank ausrauben...!");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
     			}
			    else if(TutTime[i] == 68)// das ist unedit
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1172.1597,-948.0257,50.7859);
			        SetPlayerCameraPos(i,1172.1597,-948.0257,50.7859);
					SetPlayerCameraLookAt(i,1196.3212,-922.4346,43.0588);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "=============Burger Shot North=============");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Das hier ist der Burger Shot North, den nennt man auch BSN wo du essen trinken");
			        SendClientMessage(i, COLOR_WHITE, "und ein bisschen Relaxen kannst. Damit hier auch nicht sinnlos rumgeballert wird");
			        SendClientMessage(i, COLOR_WHITE, "Ist das hier eine No Deathmatch Zone.");
				}
			    else if(TutTime[i] == 77)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, -387.8135,3970.7742,56.4985);
			        SetPlayerCameraPos(i, -314.1134,3946.8137,56.4985);
					SetPlayerCameraLookAt(i, -304.2647,3948.3618,56.4985);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "=================Alcatraz================");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Hier ist unser hochsicherheits Gefängnis wo die User");
			        SendClientMessage(i, COLOR_WHITE, "eingesperrt werden die weiter oben auf der Meistgesuchten Verbrecher Liste");
			        SendClientMessage(i, COLOR_WHITE, "stehen ( mehr als 6wanteds) Ausbrechen ? Niemals zu gesichert !");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
     			}
			    else if(TutTime[i] == 88)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 486.2041,-1496.6213,38.2803);
			        SetPlayerCameraPos(i, 486.2041,-1496.6213,38.2803);
					SetPlayerCameraLookAt(i, 486.2041,-1496.6213,38.2803);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "===========***Wichtige Tipps***===========");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, "Das hier ist der Bahnhof in Los Santos.");
			        SendClientMessage(i, COLOR_WHITE, "Hier beginnt dein neues Leben auf German Next Era Life wo du anfängst");
			        SendClientMessage(i, COLOR_WHITE, "mit einem einfachen Beruf bis zum Mafia Boss oder werde Direktor beim LSPD.");
			        SendClientMessage(i, COLOR_WHITE, "Du kannst dir ein Telefonbuch im 24/7 Shop kaufen und mit den Usern Komuniezieren.");
			        SendClientMessage(i, COLOR_WHITE, "Der 24/7 Shop befindet sich 2 Häuser neben dem Burger Shot North.");
			        SendClientMessage(i, COLOR_WHITE, "Damit du Mobil wirst musst du dir ein Auto kaufen.. oder ein Motorrad. ");
			        SendClientMessage(i, COLOR_WHITE, "Die Autohäuser sind auf der Karte mit einem kleinen Auto gekennzeichnet.");
			    }
			    else if(TutTime[i] == 95)
			    {
			        ClearChatbox(i, 10);
//			        SetPlayerInterior(i, 3);
//			        SetPlayerPos(i, 330.6825,163.6688,1014.1875);
//			        SetCameraBehindPlayer(i);
			        SetPlayerVirtualWorld(i, 0);
			        SendClientMessage(i, 0xFFAA00FF, "=============Informationen=============");
			        SendClientMessage(i, COLOR_WHITE, "Um uns zu erreichen besuch uns im Forum oder im Teamspeak 3");
			        format(string, sizeof(string), "Unsere TeamSpeak3IP: {0000FF}%s ", TEAMSPEAKIP);
                	SendClientMessage(i, COLOR_WHITE, string);
			        format(string, sizeof(string), "Unsere Forumsadresse: {0000FF}%s ", FORUMURL);
                	SendClientMessage(i, COLOR_WHITE, string);
			        SendClientMessage(i, COLOR_WHITE, "Um einer Fraktion beizutreten musst du dich im Forum Bewerben und solltest");
			        SendClientMessage(i, COLOR_WHITE, "du mal kleine Probleme haben dann mach /report und beschreibe dein Problem");
	        		SendClientMessage(i, COLOR_WHITE, "Details zum Server stehen in der Serverinfo (/serverinfo).");
	        		SendClientMessage(i, COLOR_WHITE, "Bitte schau dir auch unsere Regeln an (/regeln) und halte sie ein.");
	        		SendClientMessage(i, COLOR_WHITE, "Unsere Community wünscht dir nochmal viel spaß auf German Next Era Life.");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_WHITE, " ");
			    }
			    else if(TutTime[i] == 120)
			    {
					TextDrawHideForPlayer(i, PlayerInfo[i][LetterboxTop]);
					TextDrawHideForPlayer(i, PlayerInfo[i][LetterboxBottom]);
			        ClearChatbox(i, 10);
			        SendClientMessage(i, COLOR_GREEN, "Herzlich Willkommen auf German Next Era Life.");
			        SendClientMessage(i, COLOR_GREEN, "Wir heißen dich Recht Herzlich Willkommen bei uns, um dich zurrecht zu finden");
			        SendClientMessage(i, COLOR_GREEN, "benutze den Befehl /navi. Bei Fragen /report wir stehen dir jederzeit zur verfügung");
			        SendClientMessage(i, COLOR_GREEN, "Laufe vor dir in das gelbe i um hilfe zu bekommen !");
			        SendClientMessage(i, COLOR_LIGHTBLUE, "Als Startbonus hast du einen Rollerführerschein und ein Telefonbuch bekommen");
			        SendClientMessage(i, COLOR_LIGHTBLUE, "Auf der anderen seite des Hauses ist ein Parkplatz mit Rollern");
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
					UnFreezePlayer(i);
					SetCameraBehindPlayer(i);
					MedicBill[i] = 0;
					AfterTutorial[i] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", i);
					SetTimerEx("UnsetFirstSpawn", 20000, false, "i", i);
					AtRegestration[i] = 0;
					SetPlayerSpawn(i);
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 180);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 1338;
       				SetPlayerDrunkLevel (i, 30000);
			    }
			    if(PlayerDrunkTime[i] == 1338)
			    {
			        PlayerDrunkTime[i] = 0;
       				SetPlayerDrunkLevel (i, 0);
			    }
			}
			new Float:HP;
			if(GetPlayerHealth(i, HP) > 161)
			{
			    SetPlayerHealth(i, 160);
			}
			if(PlayerStoned[i] >= 2)
			{
				SetPlayerTime(i,22,10);
				SetPlayerDrunkLevel(i,50000);
				SetPlayerWeather(i,-66);
		        PlayerStoned[i] += 1;
			    if(PlayerStoned[i] >= 900)//zeit in sekunden
			    {
			        PlayerStoned[i] = 1337;
			    }
			    if(PlayerStoned[i] == 1337)
			    {
			        PlayerStoned[i] = 0;
					SetPlayerDrunkLevel(i,0);
					SetPlayerWeather(i,12);
					GameTextForPlayer(i, "~w~Du bist ~n~nichtmehr~p~ Stoned", 4000, 1);
				}
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(PlayerInfo[i][pMulltime] > 0)
			{
			    if(PlayerInfo[i][pMulltime] <= 0)
			    {
			        PlayerInfo[i][pMulltime] = 0;
				}
				else
				{
				    PlayerInfo[i][pMulltime] -= 1;
				}
			}
			if(PlayerInfo[i][pFlugTime] > 0)
			{
			    if(PlayerInfo[i][pFlugTime] <= 0)
			    {
			        PlayerInfo[i][pFlugTime] = 0;
				}
				else
				{
				    PlayerInfo[i][pFlugTime] -= 1;
				}
			}
			if(PlayerInfo[i][pFarmTime] > 0)
			{
			    if(PlayerInfo[i][pFarmTime] <= 0)
			    {
			        PlayerInfo[i][pFarmTime] = 0;
				}
				else
				{
				    PlayerInfo[i][pFarmTime] = -1;
				}
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Match Gestartet", 5000, 1);
					UnFreezePlayer(i);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pJob] == 10)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s hat den Kampf gegen den Champion %s gewonnen und ist nun der neue Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du könntest der Champion sein, wenn es dein Beruf wäre !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s hat den Kampf gegen %s gewonnen.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Du hast den Kampf gegen %s verloren.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~Du hast verloren", 3500, 1);
								format(string, sizeof(string), "* Du hast den Kampf gegen %s gewonnen.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~Du hast gewonnen", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match vorbei", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match vorbei", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 10) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pJob] == 10) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 10) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pJob] == 10)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s hat den Kampf gegen den Champion %s gewonnen und ist nun der neue Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du könntest der Champion sein, wenn es dein Beruf wäre !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Du könntest der Champion sein, wenn es dein Beruf wäre !",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Du hast den Kampf gegen %s verloren.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~Du hast verloren", 3500, 1);
								format(string, sizeof(string), "* Du hast den Kampf gegen %s gewonnen.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~Du hast gewonnen", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match vorbei", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match vorbei", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 10) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Paintball Match wird angekündigt in 15 Sekunden (für mehr Paintball Spieler)");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Karting Race wird angekündigt in 15 Sekunden (für mehr Kart Racers).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Red Marker weg", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			/*if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}*/
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        UnFreezePlayer(i);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			/*else if(IsPlayerInRangeOfPoint(i,2.0,999.0546,-1105.4008,23.3770))
			{
			    GameTextForPlayer(i, "~r~/neon um dein Fahrzeug zu Beleuchten!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,1808.0007,-1889.8571,13.4073))
			{
			    GameTextForPlayer(i, "~w~/parktor um das Tor zu öffnen!\nKosten: 125$", 3000,3);
			}*/
			else if(IsPlayerInRangeOfPoint(i,2.0,1188.4054,-912.0315,48.0625))
			{
			    GameTextForPlayer(i, "~r~/ad um eine Werbung zu schreiben!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,448.4033,-84.3045,999.5547))
			{
			    GameTextForPlayer(i,"~r~/menu!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,811.4277,-1616.1138,13.5469))
			{
			    GameTextForPlayer(i, "~w~Benutze die Taste Enter um den Burger Shot zu betreten!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,457.304748,-88.428497,999.554687))
			{
			    GameTextForPlayer(i, "~w~Benutze die Taste Enter um den Burger Shot zu verlassen!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1388.7091,-993.8844,5651.8315))
			{
			    GameTextForPlayer(i, "~w~Tippe /aufsprengen um den Tresor zu sprengen!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,295.2805,-80.3647,1001.5156))
			{
			    GameTextForPlayer(i, "~w~Tippe /buygun oder /buyarmor um hier einzukaufen!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,2179.6458,-2256.0725,14.7734))
			{
				GameTextForPlayer(i, "~w~Tippe /rienter um die Rifas Base zu betreten!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,260.8033,102.8064,1030.2539)) //Enforcer int /equip
			{
			    GameTextForPlayer(i, "~w~ Wenn du dich Ausrüsten möchtest ~n~ Tippe /equip", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,593.0110,-1248.0918,18.1534)) //LSPD
			{
			    GameTextForPlayer(i, "~w~Hier kannst du mit ~r~/materials get ~w~Materialien bekommen", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,1083.6311,-1223.3904,15.8203)) //Ballas Kleiderschrank
   			{
				GameTextForPlayer(i, "~w~ Um die Kleider zu wechseln ~n~ Tippe /bskin", 5000, 3);
   			}
			else if(IsPlayerInRangeOfPoint(i,3.0,1494.3136,1303.5925,1093.2891)) //Feuerwer exit
			{
			    GameTextForPlayer(i, "~w~ Tippe /mexit oder /fexit ", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0, 499.4521,-20.6484,1000.6797)) //drink
			{
			    GameTextForPlayer(i, "~w~ Hier kannst du Drinks bestellen ~e~(Befehl: /drink)", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0, 490.8359,-14.0423,1000.6797)) //dance
			{
			    GameTextForPlayer(i, "~w~ Lust zu tanzen? Tippe ~e~/dance", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,1008.7658,-2303.2424,13.3025)) ///menter
			{
			    GameTextForPlayer(i, "~w~ Um das Haus zu betreten ~n~ ~r~ Tippe /menter ", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,2800.9880,-1429.8492,40.0625)) // Ständer
			{
			    GameTextForPlayer(i, "~w~ Um Pornos zu kaufen~n~~r~ Tippe /pornos", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0, 490.7159,-1519.1860,20.3347))
			{
			    GameTextForPlayer(i, "~w~ Bei Orientierungsverlust /guide", 500,3);
			}
			else if(IsPlayerInRangeOfPoint(i,1.0, 489.5197,-1511.6572,20.5045))
			{
				GameTextForPlayer(i, "~w~ /neuling um mehr zu erfahren und um hilfe zu bekommen!", 500,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,593.0110,-1248.0918,18.1534)) //Materials Paket-Hol-Punkt
			{
			    GameTextForPlayer(i, "~g~Materials-Pakete~n~~y~Du kannst hier ~r~Materials-Pakete~y~ abholen ~n~~w~Benutze /materials get [Anzahl]", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,-1826.4926,42.1423,15.1228)) //Materials Paket-Hinbring-Punkt
			{
			    GameTextForPlayer(i, "~g~Materials-Fabrik~n~~y~Du kannst hier Materials-Pakete gegen ~r~Materials~y~ eintauschen~n~~w~Benutze /materials deliver", 5000, 3);
			}
   			else if(IsPlayerInRangeOfPoint(i,4.0,1137.1093,-1341.3873,13.7162) || IsPlayerInRangeOfPoint(i,4.0,1547.5663,-1610.0396,13.3828) || IsPlayerInRangeOfPoint(i,4.0,-1628.6464,652.0121,7.1875) || IsPlayerInRangeOfPoint(i,4.0,796.9246,-2102.7170,12.6823) || IsPlayerInRangeOfPoint(i, 4.0, 1571.3887,-1705.3455,28.3948) || IsPlayerInRangeOfPoint(i, 4.0, 1692.5320,-1539.5343,13.5469) || IsPlayerInRangeOfPoint(i, 4.0,2668.9263,-2639.5989,2.1344) || IsPlayerInRangeOfPoint(i, 4.0,2758.9431,-2393.5806,13.6328))
			{
			    GameTextForPlayer(i,"~g~Staatsfahrzeuge Reperatur~n~~y~] /rep ]",5000, 3);
			}
   			else if(IsPlayerInRangeOfPoint(i,4.0,1007.9469,1154.9111,10.7402))
			{
			    GameTextForPlayer(i,"~g~Staatsfahrzeuge Reperatur~n~~y~] /rep ]",5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0, 1173.2563,-1323.3102,15.3943))
			{// Hospital near Ammu
				GameTextForPlayer(i, "Gib /healme ein um dich zu heilen", 5000, 5);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0, 1580.2678,1769.0098,10.8203))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~Gib /healme ein um dich zu heilen", 5000, 5);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,2034.0126,-1403.0018,17.2933) || IsPlayerInRangeOfPoint(i,2.0,2051.0828,-1407.7554,48.3359))
			{
				GameTextForPlayer(i, "~g~ /khtele", 5000, 5);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0, -85.4636,2.1646,3.1172))
			{//Buyable Drugs for Drug Dealers
			    GameTextForPlayer(i, "~w~Benutze ~y~/get drugs~w~ um Drogen zu bekommen~n~~w~Benutze ~y~/drogenlager~w~ um zu sehen wie viel vorhanden ist", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,364.3931,173.7390,1008.3828))
			{
			    GameTextForPlayer(i,"~g~/Stadthalle", 5000, 5);
			}
		 	else if (IsPlayerInRangeOfPoint(i,3.0,-49.7952,-269.3755,6.6332))
			{
			    GameTextForPlayer(i, "~y~Wilkommen bei ~r~Fleischberg ~g~/enter", 5000, 5);
			}
	/*		else if (IsPlayerInRangeOfPoint(i,2.0,823.4207,3.3140,1004.1797))
			{
			    GameTextForPlayer(i, "~g~/Uhren", 5000, 5);
			}*/
			else if(AtATM(i))
			{
			    GameTextForPlayer(i, "~r~Bankautomat~g~ Benutzung: /atm", 9000, 5);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,494.7641,-80.7368,998.7651))
			{
			    GameTextForPlayer(i, "~w~ Um die Kleidung zu wechseln ~n~ Tippe /muskin", 5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,201.8244,1865.1124,13.1406))
			{
			    GameTextForPlayer(i, "~g~Bundeswehr ~r~/bwequip", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,217.8921,78.9727,1005.0391)) 
			{
			    GameTextForPlayer(i, "~y~/duty~n~ ~b~/fbiuniform", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,217.5230,184.4352,1003.0313))
			{
				GameTextForPlayer(i, "~y~/duty - in Dienst gehen~n~~w~/zivil - außer Dienst gehen~n~wenn du im Dienst bist /duty, dann /zivil", 6000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,2489.5862,-1691.1185,14.7656))
			{
			    GameTextForPlayer(i, "~w~Grove Kleiderschrank /gskin", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,1274.7148,-800.4757,1089.9327))
			{
			    GameTextForPlayer(i, "~w~LCN Kleiderschrank /lcnskin", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2146.7241,-1808.6066,16.1406))
			{
			    GameTextForPlayer(i, "~w~Hitman Base /Henter", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1924.3221,959.9957,10.8203))
			{
			    GameTextForPlayer(i, "~e~Yakuza Base~w~ Betreten mit /enter", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1261.1112,-785.4005,1091.9063) && GetPlayerVirtualWorld(i) == 1)
			{
			    GameTextForPlayer(i, "~w~/lexit, um die Base zu verlassen.", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1712.4611,-1640.0770,20.2239))
			{
			    GameTextForPlayer(i, "~w~Um den Skin zu wechseln /skin, um die Fraktionskammer zu öffnen /frakkammer.", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1939.4677,982.8486,992.4688))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /frakkammer", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,2819.4785,-1169.4138,1025.5703) && GetPlayerVirtualWorld(i) != 3)
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /frakkammer", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i, 2.0, 231.5756,1067.9391,1084.2061) && GetPlayerVirtualWorld(i) == 5)
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /frakkammer", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1277.5029,-808.4862,1089.9375))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /frakkammer", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-2642.2175,1419.0121,906.4609))//Fuegos
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /frakkammer", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1647.9086,-1817.2784,13.5346))//LCN Base
			{
			    GameTextForPlayer(i, "~w~LCN Base /lenter, um sie zu betreten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,206.6770,-135.4380,1002.8744))
			{
			    GameTextForPlayer(i, "~w~Wenn du deine Kleidung wechseln möchtest~n~ benutze ~r~/clothes", 5000, 3);
			}
			/*else if (IsPlayerInRangeOfPoint(i,2.0,2852.1570,-1532.4482,11.0938))
			{
			    GameTextForPlayer(i, "~w~Sf Biker Club Base /2Fenter", 5000, 3);
			}*/
			else if (IsPlayerInRangeOfPoint(i,2.0,2786.4897,-1926.2115,13.5469))
			{
			    GameTextForPlayer(i, "~w~Gyption Base /enter", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,204.5171,-232.7427,1.7786))
			{
				GameTextForPlayer(i, "~r~/gangjail, um Spieler einzusperren\n /gangunjail um jemanden zu befreien",5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,205.0009,-240.5190,1.5781))
			{
			    GameTextForPlayer(i, "~r~/gangtor, um Das Gangtor zu öffen.\nals Cop /einbrechen um das \nTor aufzubrechen",5000,3);
   			}
			else if(IsPlayerInRangeOfPoint(i,2.0,195.5248,-228.4122,1.7786))
			{
			    GameTextForPlayer(i, "~r~/gangtuer, um die Tür zu öffnen",5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2770.7278,-1627.9824,12.1775))
			{
			    GameTextForPlayer(i, "~w~Vagos Base /vaenter", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1274.1163,-1641.3193,27.3750))
			{
			    GameTextForPlayer(i, "~w~Red Soldier Base /enter", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-310.2000,1762.5668,43.6406))
			{
			    GameTextForPlayer(i, "~w~Terror Skins /skin", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-516.1633,-506.0980,25.5234))
			{
			    GameTextForPlayer(i, "~w~Wheelman base /wenter", 5000, 3);
			}
           	else if (IsPlayerInRangeOfPoint(i,2.0,-314.1795,1774.4463,43.6406))
			{
			    GameTextForPlayer(i, "~w~Terrorbase /terenter", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2495.3865,-1690.6353,14.7656)) // GROVE BASE ENTER
			{
			    GameTextForPlayer(i, "~w~Grove Base /genter", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i, 4.0, 1281.1855,-1641.1213,27.3750) || IsPlayerInRangeOfPoint(i, 4.0, 1213.8599,-1638.5707,11.7969))
			{
			    GameTextForPlayer(i, "~w~/mwlift, um den Lift zu benutzen.", 5000, 3);
	        }
			else if(IsPlayerInRangeOfPoint(i, 4.0, 992.7688,-1460.1172,13.5469) || IsPlayerInRangeOfPoint(i, 4.0, 990.2078,-1461.0585,21.2656))
			{
			    GameTextForPlayer(i, "~w~/mlift, um den Lift zu benutzen.", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,71220.0658,-1813.3065,16.5938))
			{
			    GameTextForPlayer(i, "~w~Tippe /fenter um in die Fahrschul Base zu betreten!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, -2029.7687,-118.9294,1035.1719))
			{
			    GameTextForPlayer(i, "~w~Tippe /fexit um die Fahrschulbase zu verlassen!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, 1084.1470,-1227.1428,15.8203))
			{
			    GameTextForPlayer(i, "~w~Tippe /bexit um die Ballas zu verlassen!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, 2324.6418,-1135.9731,1051.3047))
			{
			    GameTextForPlayer(i, "~w~Tippe /kennzeichenkaufen\n um ein Kennzeichen zu kaufen!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, 1835.9020,-1682.5295,13.3704))
			{
			    GameTextForPlayer(i, "~w~Benutze die Entertaste um Alahmbra zu betreten!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, 493.390991,-22.722799,1000.679687))
			{
				GameTextForPlayer(i, "~w~Benutze die Entertaste um Alahmbra zu verlassen!", 5000, 3);
			}
		}
	}
	return 1;
}

Function CheckGas()
{
	new string[256];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i);
	       		new Model = GetVehicleModel(GetPlayerVehicleID(i));
	        	if(Gas[vehicle] >= 1)
		   		{
		   		    if(Gas[vehicle] <= 10) { PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0); }
		   		    if(gGas[i] == 1) {
		      		format(string, sizeof(string), "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Benzin:~w~ %d%",Gas[vehicle]);
		      		GameTextForPlayer(i,string,15500,3); }
					if(IsAPlane(vehicle) || IsABoat(vehicle) || Model == 462 || Model == 481)
					{
						Gas[vehicle]++;
					}
	 				new engine,lights,alarm,doors,bonnet,boot,objective;
					new vid = GetPlayerVehicleID(i);
					GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
					if(vid != INVALID_VEHICLE_ID)
					{
						if(engine == VEHICLE_PARAMS_ON)
						{
	     					Gas[vehicle]--;
						}
					}
		   		}
	   			else
	           	{
	              	NoFuel[i] = 1;
	              	FreezePlayer(i);
		        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~Kein Benzin mehr~n~Gib /exit zum ausgestiegen ein",1500,3);
				}
				if(Gas[vehicle] > GetGasMax(GetVehicleModel(vehicle)))
				{
				    Gas[vehicle] = GetGasMax(GetVehicleModel(vehicle));
				}
			}
    	}
	}
	return 1;
}

Function ExtortionTanke(bizid,money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(TankeInfo[bizid][tExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(TankeInfo[bizid][tExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    GivePlayerMoney(i, value);
			    TankeInfo[bizid][tTill] -= value;
			}
		}
	}
	return 1;
}


Function Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
			//new FillUpRandom = random(250)+1;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GetGasMax(GetVehicleModel(VID)) - Gas[VID];
			for(new b = 0; b < sizeof(TankeInfo); b++)
			{
				if(IsPlayerInRangeOfPoint(i,5.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
				{
					if(Refueling[i] == 1)
		  			{
						if(GetPlayerMoney(i) >= FillUp+4)
						{
							Gas[VID] += FillUp;
							FillUp = FillUp * TankeInfo[b][tEntranceCost];
						    format(string,sizeof(string),"* Du hast dein Fahrzeug für $%d aufgetankt.",FillUp);
						    SendClientMessage(i,COLOR_LIGHTBLUE,string);
						    UnFreezePlayer(i);
							GivePlayerMoney(i, - FillUp);
							TankeInfo[b][tTill] += FillUp;
							TankeInfo[b][tExtortion] += FillUp;
							Refueling[i] = 0;
                        }
                    	else
			   			{
						    UnFreezePlayer(i);
							new cost = TankeInfo[b][tEntranceCost];
					  	    format(string,sizeof(string),"* Nicht genug Geld zum Auffüllen, du benötigst $%d zum Auffüllen deines Autos.",cost);
				 	  		SendClientMessage(i,COLOR_LIGHTBLUE,string);
                        }
			  	 	}
				}
		 	}
		}
	}
	return 1;
}

/*
Function Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
            new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GetGasMax(GetVehicleModel(VID)) - Gas[VID];
			if(Refueling[i] == 1)
		    {
				if(GetPlayerMoney(i) >= FillUp+4)
				{
					Gas[VID] += FillUp;
				    format(string,sizeof(string),"* Dein Fahrzeug wurde aufgetankt.",FillUp,SBizzInfo[2][sbEntranceCost]);
				    SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    GivePlayerMoney(i, - FillUp);
				    FillUp = SBizzInfo[2][sbEntranceCost] * FillUp;
					Refueling[i] = 0;
					ExtortionSBiz(2, FillUp);
					SBizzInfo[2][sbTill] += FillUp/4;
					UnFreezePlayer(i);
				}
			   	else
			   	{
			   	    format(string,sizeof(string),"* Du hast nicht genug Geld zum Tanken, Kosten: 500$ / Liter.",FillUp);
				    SendClientMessage(i,COLOR_LIGHTBLUE,string);
			   	}
		 	}
		}
	}

	return 1;
}
*/
Function AFillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    /*new string[256];*/
		    VID = GetPlayerVehicleID(i);
		    FillUp = GetGasMax(GetVehicleModel(VID)) - Gas[VID];
			if(Refueling[i] == 1)
		    {
				if(GetPlayerMoney(i) >= FillUp+4)
				{
					Gas[VID] += FillUp;
     				FillUp = SBizzInfo[2][sbEntranceCost] * FillUp;
					SBizzInfo[2][sbTill] += FillUp/4;
					ExtortionSBiz(2, FillUp);
					Refueling[i] = 0;
					UnFreezePlayer(i);
				}
		 	}
		}
	}

	return 1;
}



/*Function SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    ResetPlayerWeapons(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				GivePlayerWeapon(playerid, 41, 500); //spray
				if(OnDuty[playerid] == 1 || PlayerInfo[playerid][pMember] == 2)//Cops & FBI/ATF
				{
				    GivePlayerWeapon(playerid, 41, 500); //spray
					GivePlayerWeapon(playerid, 24, 200);
					GivePlayerWeapon(playerid, 3, 1);
					if(PlayerInfo[playerid][pChar] == 285)//SWAT
					{
					    GivePlayerWeapon(playerid, 25, 100);
					    GivePlayerWeapon(playerid, 29, 450);
					}
					else if(PlayerInfo[playerid][pChar] == 287)//Bundeswehr
					{
					    GivePlayerWeapon(playerid, 25, 100);
					    GivePlayerWeapon(playerid, 31, 500);
					}
				}
				if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard
				{
				    GivePlayerWeapon(playerid, 24, 200);
				    GivePlayerWeapon(playerid, 31, 600);
				    GivePlayerWeapon(playerid, 29, 600);
				}
			}
			if(gTeam[playerid] >= 3)
			{
				GivePlayerWeapon(playerid, 0, 0);
			}
			if(PlayerInfo[playerid][pDonateRank] > 0)
			{
				if (PlayerInfo[playerid][pGun1] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
				if (PlayerInfo[playerid][pGun3] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
					PlayerInfo[playerid][pGun3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
				}
				if (PlayerInfo[playerid][pGun4] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
					PlayerInfo[playerid][pGun4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
				}
			}
			else
			{
			    if (PlayerInfo[playerid][pGun1] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
			}
		}
	}
}*/

Function PrintFuelstationInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",TankeInfo[targetid][tMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Preis pro Liter: $%d Kasse: $%d Teilhaber: %s", TankeInfo[targetid][tLocked], TankeInfo[targetid][tEntranceCost], TankeInfo[targetid][tTill],TankeInfo[targetid][tExtortion]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}


Function PrintSBizInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",SBizzInfo[targetid][sbMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Eintrittspreis: $%d Kasse: $%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produkte: %d/%d Teilhaber: %s", SBizzInfo[targetid][sbProducts],SBizzInfo[targetid][sbMaxProducts],SBizzInfo[targetid][sbExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

Function PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Eintrittspreis: $%d Kasse: $%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produkte: %d/%d Teilhaber: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

//======= STATS DIALOG BOX ========//
Function Stats(playerid,targetid)
{
    if(IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Männlich"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Weiblich"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Deutschland"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Osterreich"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Schweiz"; }
		new ttext[20];
		new leader = PlayerInfo[targetid][pLeader];
		new member = PlayerInfo[targetid][pMember];
		if(gTeam[targetid] == 3 || gTeam[targetid] == 4) { ttext = "Zivilist"; }
		else
		{
		    if(leader != 0) ttext = Fracs[leader-1];
		    if(member != 0) ttext = Fracs[member-1];
		}
		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "-"; }
	    new ftext[20];
	    if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4)
		{ ftext = "Sanitärer"; }
  		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)
		{ ftext = "La Cosa Nostra"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)
		{ ftext = "Yakuza"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11)
		{ ftext = "Fahrlehrer"; }
		else
		{ ftext = "-"; }
		new f2text[20];
	    new rtext[64];
	    if(gTeam[targetid] == 5 || PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Solitario"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Adepto"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldato"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Consiguere"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Destro"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Don"; }
			else { rtext = "Bambino"; }
		}
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)//PD Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Auszubildender Polizist"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Ausgebildeter Polizist"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Streifenpolizist-Zufuß"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Polizeistreife-Auto"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Pressesprecher der Polizei"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Einsatzleitung"; }
			else { rtext = "Cadet"; }
		}
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2)//FBI Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Auszubildender Polizist"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Ausgebildeter Polizist"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Streifenpolizist-Zufuß"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Polizeistreife-Auto"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Pressesprecher der Polizei"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Einsatzleitung"; }
			else { rtext = "Cadet"; }
		}
		else if(PlayerInfo[targetid][pMember] == 19 || PlayerInfo[targetid][pLeader] == 19)//RS
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Anfänger"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Erfahrener"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Killer"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Elite"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Zweite Hand"; }
	        else if(PlayerInfo[targetid][pRank] == 6 || PlayerInfo[targetid][pRank] == 12) { rtext = "Red King"; }
			else { rtext = "Neuling"; }
		}
		else if(PlayerInfo[targetid][pMember] == 21 || PlayerInfo[targetid][pLeader] == 21)//WHEELMEN
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Anfänger"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Member"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Spezial Member"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Ausbilder"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Co-Leader"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Leader"; }
			else { rtext = "Anfänger"; }
		}
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3)//NG Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Private"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Sergeant"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Major"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Captain"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Lieutenant"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "General"; }
			else { rtext = "Private"; }
		}
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7)
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Personenschutz-Azubi"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Personenschutz"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Personenschutz-Leiter"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Geheimdienst-Azubi"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Geheimdienst"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Geheimdienst Leiter"; }
		    else if(PlayerInfo[targetid][pRank] >= 7 && PlayerInfo[targetid][pRank] < 12) { rtext = "Minister"; }
		    else if(PlayerInfo[targetid][pRank] == 12) { rtext = "Bundespräsident"; }
			else { rtext = "Private"; }
		}
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8)//Hitman Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Azubi"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Sniper"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Killer"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Ausbilder"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Right Hand"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Big Boss"; }
			else { rtext = "Praktikant"; }
		}
		else if(PlayerInfo[targetid][pMember] == 21 || PlayerInfo[targetid][pLeader] == 21)
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Neuling"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Söldner"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Attentäter"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Massenmörder"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Vize-Direktor"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Direktor"; }
			else { rtext = "Praktikant"; }
		}
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9)//NR Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Intern"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Local Reporter"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Local Editor"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Network Anchor"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Network Editor"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Network Producer"; }
			else { rtext = "Intern"; }
		}
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)//Taxi Company Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Trainee"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Taxi Rookie"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Cabbie"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Dispatcher"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Shift Supervisor"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Taxi Company Owner"; }
			else { rtext = "Trainee"; }
		}
		else if(IsAnInstructor(targetid))//Driving/Flying School Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Trainee"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Instructor"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Senior Instructor"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Manager"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Under Boss"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Trainee"; }
		}
		else
		{
		    rtext = "-";
		}
        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detektiv"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Anwalt"; }
        else if(PlayerInfo[targetid][pJob] == 3) { jtext = "Hure"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Drogendealer"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Autodieb"; }
        else if(PlayerInfo[targetid][pJob] == 6) { jtext = "Farmer"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Mechaniker"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Bodyguard"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Waffendealer"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Autohändler"; }
		else if(PlayerInfo[targetid][pJob] == 12) { jtext = "Boxer"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Busfahrer"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Zeitungsjunge"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Pilot"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Müllmann"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Angler"; }
        else if(PlayerInfo[targetid][pJob] == 19) { jtext = "Pizzalieferer"; }
        else { jtext = "-"; }
		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Premium User"; }
		else if(PlayerInfo[targetid][pDonateRank] == 2) { drank = "Clanmitglied"; }
		else if(PlayerInfo[targetid][pDonateRank] == 3) { drank = "Ehrenmitglied"; }
		else if(PlayerInfo[targetid][pDonateRank] == 4) { drank = "EliteMember"; }
		else { drank = "-"; }
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new lotto = PlayerInfo[targetid][pLottoNr];
		new deaths = PlayerInfo[targetid][pDeaths];
		new fishes = PlayerInfo[targetid][pFishes];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new drugs = PlayerInfo[targetid][pDrugs];
		new mats = PlayerInfo[targetid][pMats];
 		new boxdrugs = PlayerInfo[targetid][pBoxDrugs];
		new boxmats = PlayerInfo[targetid][pBoxMats];
		new wanted = WantedLevel[targetid];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new kills = PlayerInfo[targetid][pKills];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		new intir = PlayerInfo[targetid][pInt];
		new local = PlayerInfo[targetid][pLocal];
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		new Float:plHealth, Float:plArmour;
		GetPlayerPos(targetid, px, py, pz);
		new plIP[20];
		GetPlayerHealth(targetid,plHealth);
		GetPlayerArmour(targetid,plArmour);
		GetPlayerIp(playerid,plIP,sizeof(plIP));
		new string1[200],string2[200],string3[200],string4[200],string5[200],string6[200],string7[200],string8[200],string9[200],string10[200],string11[200],string12[200],string13[200],string14[200],rest[1500];
		format(string1, sizeof string1, "{0000FF}[Stats von %s auf German Next Era Life]{FFFFFF}", name);
		format(string2, sizeof string2, "[Allgemeines]");
		format(string3, sizeof string3, "Level [%d] Geschlecht [%s] Alter [%d] Herkunft [%s] Spawnenergie [%.1f] Verheiretet mit [%s] Telefonnummer [%d]", level,atext,age,otext,shealth+50.0,married,pnumber);
		format(string4, sizeof string4, "Größter Fisch [%d] Verbrechen [%d] Gefängniszeiten [%d] Kosten für nächstes Level [%d$] Spielminuten seit Login / insgesammt [%d / %d]", bigfish,crimes,arrests,costlevel,PlayerInfo[targetid][pMinutesSinceLogin],PlayerInfo[targetid][pGesamtMinutes]);
		format(string5, sizeof string5, "Kreditraten verbleibend / Summe [%d / %d] Spielminuten bis Payday [%d]", PlayerInfo[targetid][pPlayerKreditDauer], PlayerInfo[targetid][pPlayerKredit], 60-PlayerInfo[targetid][pPlayMinutes]);
		format(string6, sizeof string6, "[Besitztum]");
		format(string7, sizeof string7, "Premium Rang [%s] Spielzeit [%d] Lottonummer [%d] Wantedlevel [%d] Krankheit [%s] Gefangene Fische [%d] Kills & Deaths [%d / %d]", drank,ptime,lotto,wanted,dtext,fishes,kills,deaths);
		format(string8, sizeof string8, "Bargeld [%d$] Bankkonto [%d$] Drogen [%d] Materialien [%d] Box Materialien [%d] Box Drogen [%d] Respektpunkte [%d / %d]", cash,account,drugs,mats,boxmats,boxdrugs,exp,expamount);
 		format(string9, sizeof string9, "[Fraktion und Job]");
 		format(string10, sizeof string10, "Team [%s] Organisation [%s] Rang [%s] Familie [%s] Job [%s] Gehalt/Payday: [%d$] Fraktionsmaterialien: [%d]", ttext,ftext,rtext,f2text,jtext,PlayerInfo[targetid][pGehalt], FrakMatsHolding[targetid]);
 		format(string11, sizeof string11, "[Zusatzinfos]");
 		format(string12, sizeof string12, "Hausschlüssel [%d] Geschäftsschlüssel [%d] Interior [%d] Gebäude [%d]", housekey,bizkey,intir,local);
		format(string13, sizeof string13, "Zeit bis zum nächsten Flug [%d] (Job Pilot) Zeit bis zur nächsten Fahrt [%d] (Job Müllmann)", PlayerInfo[targetid][pFlugTime]/60, PlayerInfo[targetid][pMulltime]/60);
		format(string14, sizeof string14, "Lebenspunkte [%.2f] Schutzweste [%.2f] IP [%s] Ping [%d] Verwarnungen [%d]", plHealth,plArmour,plIP,GetPlayerPing(targetid),PlayerInfo[targetid][pWarns]);
		format(rest, sizeof rest, "%s\n\n\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s", string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11,string12,string13,string14);
		ShowPlayerDialog(playerid,30,DIALOG_STYLE_MSGBOX,"Statstik",rest,"Beenden","");
	}
}




//---------------------------------------------------------

Function GameModeInitExitFunc()
{
	new string[128];
	format(string, sizeof(string), "Beenden...");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			GameTextForPlayer(i, string, 4000, 5);
			SetPlayerCameraPos(i,1004.4079,-1134.7224,27.3548);
			SetPlayerCameraLookAt(i,1004.9364,-1136.0869,27.3548);
			PlayerUpdate(i);
			gPlayerLogged[i] = 0;
		}
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}

Function GameModeExitFunc()
{
    STOP_FRAC();
	KillTimer(synctimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(checkgastimer);
	KillTimer(idletimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(stoppedvehtimer);
	GameModeExit();
}

//------------------------------------------------------------------------------------------------------
Function LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

Function SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

Function LoadFrakMats()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("FrakMats.ini", io_read);
	if (file)
	{
	    fread(file, strFromFile2);
	    split(strFromFile2, arrCoords, ',');
	    LCNMats = strval(arrCoords[0]);
		YakMats = strval(arrCoords[1]);
		TriadMats = strval(arrCoords[2]);
		GroveMats = strval(arrCoords[3]);
		BallasMats = strval(arrCoords[4]);
		BikerMats = strval(arrCoords[5]);
		VagosMats = strval(arrCoords[6]);
		AztecaMats = strval(arrCoords[7]);
		RSMats = strval(arrCoords[8]);
		TerrorMats = strval(arrCoords[9]);
		BrigadaMats = strval(arrCoords[10]);
		fclose(file);
	}
	else
	{
	    printf("FRAKMATS.INI FEHLT");
	}
	return 1;
}


Function SaveFrakMats()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", LCNMats, YakMats, TriadMats, GroveMats, BallasMats, BikerMats, VagosMats, AztecaMats, RSMats, TerrorDrugs, BrigadaMats);
	new File: file2 = fopen("FrakMats.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

Function SaveFrakDrugs()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", LCNDrugs, YakDrugs, TriadDrugs, GroveDrugs, BallasDrugs, BikerDrugs, VagosDrugs, AztecaDrugs, RSDrugs, TerrorDrugs, BrigadaDrugs);
	new File: file2 = fopen("FrakDrugs.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}




Function LoadFrakDrugs()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("FrakDrugs.ini", io_read);
	if (file)
	{
	    fread(file, strFromFile2);
	    split(strFromFile2, arrCoords, ',');
	    LCNDrugs = strval(arrCoords[0]);
		YakDrugs = strval(arrCoords[1]);
		TriadDrugs = strval(arrCoords[2]);
		GroveDrugs = strval(arrCoords[3]);
		BallasDrugs = strval(arrCoords[4]);
		BikerDrugs = strval(arrCoords[5]);
		VagosDrugs = strval(arrCoords[6]);
		AztecaDrugs = strval(arrCoords[7]);
		RSDrugs = strval(arrCoords[8]);
		TerrorDrugs = strval(arrCoords[9]);
		BrigadaDrugs = strval(arrCoords[10]);
		fclose(file);
	}
	else
	{
	   	printf("FRAKDRUGS.INI FEHLT");
	}
	return 1;
}


Function LoadStuff()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		Security = strval(arrCoords[3]);
		PayDayTeiler = strval(arrCoords[4]);
		LSAWaren = strval(arrCoords[5]);
		FarmerDrogen = strval(arrCoords[6]);
		fclose(file);
		if(Security == 0)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

Function SaveStuff()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security,PayDayTeiler,LSAWaren,FarmerDrogen);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}


Function LoadIRC()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IRCInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IRCInfo[idx][iMOTD], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[3]);
			IRCInfo[idx][iLock] = strval(arrCoords[4]);
			//printf("IRC:%d Admin:%s MOTD: %s Password: %s NeedPass: %d Lock: %d",idx,IRCInfo[idx][iAdmin],IRCInfo[idx][iMOTD],IRCInfo[idx][iPassword],IRCInfo[idx][iNeedPass],IRCInfo[idx][iLock]);
			idx++;//LOGSPAMM
		}
		fclose(file);
	}
	return 1;
}

Function SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock]);
		if(idx == 0)
		{
			file2 = fopen("channels.cfg", io_write);
		}
		else
		{
			file2 = fopen("channels.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}




Function LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			//printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			//LOGSPAMM
			//idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

Function SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

Function LoadFraktionsKassen()
{
	new File:Kasse = fopen("Fraktionskassen.cfg",io_read);
	new idx = 0;
	new read[128];
	while(idx < sizeof(FraktionsKasse))
	{
	    fread(Kasse,read);
	    for(new x=0; x<strlen(read); x++)
	    {
	        if(read[x]== '\n')
			{
				read[x] = '\0';
			}
		}
		FraktionsKasse[idx] = strval(read);
		idx++;
	}
	fclose(Kasse);
	return 1;
}

Function SaveFraktionsKassen()
{
    new File:Kasse = fopen("Fraktionskassen.cfg",io_write);
	new write[24];
	for(new idx; idx < sizeof(FraktionsKasse); idx++)
	{
		format(write,sizeof(write),"%d\n",FraktionsKasse[idx]);
		fwrite(Kasse,write);
	}
	fclose(Kasse);
	return 1;
}

Function ShowLotto()
{
                LottoTimer = 180;
	            OOCOff(COLOR_WHITE, "[Lotto]: Die Lotto Losziehung wurde automatisch gestartet!(3 Minuten)");
}

Function LoadProperty()
{
	new arrCoords[29][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmourx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmoury] = strval(arrCoords[10]);
			HouseInfo[idx][hArmourz] = strval(arrCoords[11]);
			//printf("HouseInfo hEntrancez %f",HouseInfo[idx][hEntrancez]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
  	        if(HouseInfo[idx][hVec] == 457)
			{
				HouseInfo[idx][hVec] = 411;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hLevel] = strval(arrCoords[28]);
			//printf("HouseInfo:%d Owner:%s hTakings %d hVec %d",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings],HouseInfo[idx][hVec]);
			//LOGSPAMM
			idx++;
		}
		fclose(file);
	}
	return 1;
}

Function LoadBizz()
{
	new arrCoords[19][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			BizzInfo[idx][bProducts] = strval(arrCoords[16]);
			BizzInfo[idx][bMaxProducts] = strval(arrCoords[17]);
			BizzInfo[idx][bPriceProd] = strval(arrCoords[18]);
			//printf("BizzInfo:%d Owner:%s Message:%s Entfee:%d Till:%d Products:%d/%d Interior:%d.\n",
			//LOGSPAMM
/*			idx,
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bMessage],
			BizzInfo[idx][bEntranceCost],
			BizzInfo[idx][bTill],
			BizzInfo[idx][bProducts],
			BizzInfo[idx][bMaxProducts],
			BizzInfo[idx][bInterior]);*/
			idx++;
		}
		fclose(file);
	}
	return 1;
}


Function LoadSBizz()
{
	new arrCoords[16][64];
	new strFromFile2[256];
	new File: file = fopen("sbizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			SBizzInfo[idx][sbOwned] = strval(arrCoords[0]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(SBizzInfo[idx][sbMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(SBizzInfo[idx][sbExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			SBizzInfo[idx][sbEntranceX] = floatstr(arrCoords[4]);
			SBizzInfo[idx][sbEntranceY] = floatstr(arrCoords[5]);
			SBizzInfo[idx][sbEntranceZ] = floatstr(arrCoords[6]);
			SBizzInfo[idx][sbLevelNeeded] = strval(arrCoords[7]);
			SBizzInfo[idx][sbBuyPrice] = strval(arrCoords[8]);
			SBizzInfo[idx][sbEntranceCost] = strval(arrCoords[9]);
			SBizzInfo[idx][sbTill] = strval(arrCoords[10]);
			SBizzInfo[idx][sbLocked] = strval(arrCoords[11]);
			SBizzInfo[idx][sbInterior] = strval(arrCoords[12]);
			SBizzInfo[idx][sbProducts] = strval(arrCoords[13]);
			SBizzInfo[idx][sbMaxProducts] = strval(arrCoords[14]);
			SBizzInfo[idx][sbPriceProd] = strval(arrCoords[15]);
			//printf("SBizzInfo:%d Owner:%s Message:%s Entfee:%d Till:%d Products:%d/%d Interior:%d.\n",
			//LOGSPAMM
			/*idx,
			SBizzInfo[idx][sbOwner],
			SBizzInfo[idx][sbMessage],
			SBizzInfo[idx][sbEntranceCost],
			SBizzInfo[idx][sbTill],
			SBizzInfo[idx][sbProducts],
			SBizzInfo[idx][sbMaxProducts],
			SBizzInfo[idx][sbInterior]);*/
			idx++;
		}
		fclose(file);
	}
	return 1;
}


Function AddToBizzTill(bizzid,amount)
{
    SBizzInfo[bizzid][sbTill] += amount;
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnGameModeInit()
{
	LoadTanke();
	TdHeadline = TextDrawCreate(473.000000, 363.000000, "Verbindungsinfo...");
	TextDrawBackgroundColor(TdHeadline, 255);
	TextDrawFont(TdHeadline, 2);
	TextDrawLetterSize(TdHeadline, 0.289999, 1.399999);
	TextDrawColor(TdHeadline, -65281);
	TextDrawSetOutline(TdHeadline, 0);
	TextDrawSetProportional(TdHeadline, 1);
	TextDrawSetShadow(TdHeadline, 1);
	TextDrawUseBox(TdHeadline, 1);
	TextDrawBoxColor(TdHeadline, 150);
	TextDrawTextSize(TdHeadline, 639.000000, 0.000000);

	TdHGinfo = TextDrawCreate(473.000000, 379.000000, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~");
	TextDrawBackgroundColor(TdHGinfo, 255);
	TextDrawFont(TdHGinfo, 1);
	TextDrawLetterSize(TdHGinfo, 0.500000, 1.000000);
	TextDrawColor(TdHGinfo, -1);
	TextDrawSetOutline(TdHGinfo, 0);
	TextDrawSetProportional(TdHGinfo, 1);
	TextDrawSetShadow(TdHGinfo, 1);
	TextDrawUseBox(TdHGinfo, 1);
	TextDrawBoxColor(TdHGinfo, 84215140);
	TextDrawTextSize(TdHGinfo, 700.000000, 130.000000);

	TdSpielerName = TextDrawCreate(475.000000, 382.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerName, 255);
	TextDrawFont(TdSpielerName, 2);
	TextDrawLetterSize(TdSpielerName, 0.270000, 1.200000);
	TextDrawColor(TdSpielerName, -1);
	TextDrawSetOutline(TdSpielerName, 0);
	TextDrawSetProportional(TdSpielerName, 1);
	TextDrawSetShadow(TdSpielerName, 1);

	TdNachricht = TextDrawCreate(475.000000, 396.000000, "wird geladen...");
	TextDrawBackgroundColor(TdNachricht, 255);
	TextDrawFont(TdNachricht, 2);
	TextDrawLetterSize(TdNachricht, 0.270000, 1.200000);
	TextDrawColor(TdNachricht, -1);
	TextDrawSetOutline(TdNachricht, 0);
	TextDrawSetProportional(TdNachricht, 1);
	TextDrawSetShadow(TdNachricht, 1);

	TdTrennung = TextDrawCreate(473.000000, 414.000000, "-");
	TextDrawBackgroundColor(TdTrennung, 255);
	TextDrawFont(TdTrennung, 1);
	TextDrawLetterSize(TdTrennung, 0.000000, -0.199997);
	TextDrawColor(TdTrennung, -1);
	TextDrawSetOutline(TdTrennung, 0);
	TextDrawSetProportional(TdTrennung, 1);
	TextDrawSetShadow(TdTrennung, 1);
	TextDrawUseBox(TdTrennung, 1);
	TextDrawBoxColor(TdTrennung, 336860385);
	TextDrawTextSize(TdTrennung, 700.000000, 0.000000);

	TdSpielerIP = TextDrawCreate(475.000000, 418.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerIP, 255);
	TextDrawFont(TdSpielerIP, 2);
	TextDrawLetterSize(TdSpielerIP, 0.270000, 1.200000);
	TextDrawColor(TdSpielerIP, -1);
	TextDrawSetOutline(TdSpielerIP, 0);
	TextDrawSetProportional(TdSpielerIP, 1);
	TextDrawSetShadow(TdSpielerIP, 1);

	TdSpielerPing = TextDrawCreate(475.000000, 431.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerPing, 255);
	TextDrawFont(TdSpielerPing, 2);
	TextDrawLetterSize(TdSpielerPing, 0.270000, 1.200000);
	TextDrawColor(TdSpielerPing, -1);
	TextDrawSetOutline(TdSpielerPing, 0);
	TextDrawSetProportional(TdSpielerPing, 1);
	TextDrawSetShadow(TdSpielerPing, 1);

	//--------------------------------------------------------------------------

 	DiscHeadline = TextDrawCreate(491.000000, 394.000000, "Verbindungsinfo...");
	TextDrawBackgroundColor(TdHeadline, 255);
	TextDrawFont(TdHeadline, 2);
	TextDrawLetterSize(TdHeadline, 0.300000, 1.500000);
	TextDrawColor(TdHeadline, -65281);
	TextDrawSetOutline(TdHeadline, 0);
	TextDrawSetProportional(TdHeadline, 1);
	TextDrawSetShadow(TdHeadline, 1);
	TextDrawUseBox(TdHeadline, 1);
	TextDrawBoxColor(TdHeadline, 150);
	TextDrawTextSize(TdHeadline, 639.000000, 0.000000);

	DiscHGinfo = TextDrawCreate(491.000000, 411.000000, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~");
	TextDrawBackgroundColor(TdHGinfo, 255);
	TextDrawFont(TdHGinfo, 1);
	TextDrawLetterSize(TdHGinfo, 0.500000, 1.000000);
	TextDrawColor(TdHGinfo, -1);
	TextDrawSetOutline(TdHGinfo, 0);
	TextDrawSetProportional(TdHGinfo, 1);
	TextDrawSetShadow(TdHGinfo, 1);
	TextDrawUseBox(TdHGinfo, 1);
	TextDrawBoxColor(TdHGinfo, 84215140);
	TextDrawTextSize(TdHGinfo, 662.000000, 1.000000);

	DiscSpielerName = TextDrawCreate(492.000000, 414.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerName, 255);
	TextDrawFont(TdSpielerName, 2);
	TextDrawLetterSize(TdSpielerName, 0.240000, 1.300000);
	TextDrawColor(TdSpielerName, -1);
	TextDrawSetOutline(TdSpielerName, 0);
	TextDrawSetProportional(TdSpielerName, 1);
	TextDrawSetShadow(TdSpielerName, 1);

	DiscNachricht = TextDrawCreate(492.000000, 429.000000, "wird geladen...");
	TextDrawBackgroundColor(TdNachricht, 255);
	TextDrawFont(TdNachricht, 2);
	TextDrawLetterSize(TdNachricht, 0.240000, 1.300000);
	TextDrawColor(TdNachricht, -1);
	TextDrawSetOutline(TdNachricht, 0);
	TextDrawSetProportional(TdNachricht, 1);
	TextDrawSetShadow(TdNachricht, 1);

	Fight_Init();
	START_FRAC();
	ResetElevatorQueue();
	Elevator_Initialize();
	SetWeather(2);
	noooc = 0;
	SetNameTagDrawDistance(50.0);
    ManualVehicleEngineAndLights();
//=========== BOT ============//
	ConnectNPC("NeuerBot","NeuerBot");
	car_BulletLS = CreateVehicle(431, 1000.0,1000.0, 1000.0, 0.0, 10, 1, -1);
//=======BUS BOT=====================
ConnectNPC("Busbot1","Busbot1");//Das erste BulletLS steht für den Namen hier im Script, das 2te für den Namen der .rec Datei
car_Busbot1 = CreateVehicle(437, 1000.0,1000.0, 1000.0, 0.0, 10, 1, -1);//car_BulletLS ist der Name des Autos mit dem der Bot fahrt, Die Positionen von CreateVehicle sind egal,

//=========== TEXT LABELS =============//
	new string3[200];
	format(string3, sizeof(string3), "[Produktverkauf]\nPreis pro Produkt: 50$\nProdukte auf Lager: %d\nKaufen mit /produkt\nEinkauf nur mit Prodlaster", LSAWaren);
	LSWText = Create3DTextLabel(string3, 0xFFFFFFFF, 1957.5536,-2183.4856,14.5469, 40.0, 0, 1);
//LSPD
	Create3DTextLabel("/Kaufen\num den Waffenschein zu erwerben\nPreis: 10.000$", COLOR_YELLOW, 252.4243,111.7874,1003.2188,9.0,0);
	Create3DTextLabel("/Klingeln\num beraten zu werden", COLOR_YELLOW, 240.9979,112.8959,1003.2188,9.0,0);
//LKWLIC
//	Create3DTextLabel("/LKWSCHEIN\num den LKW Schein zu erwerben\nPreis: 3500$", COLOR_YELLOW, -242.1245,-235.2225,2.4297,15.0,0);
//FlugLic
//	Create3DTextLabel("/Flugschein\num den Flugschein zu erwerben\nPreis: 8750$", COLOR_YELLOW, 1952.8041,-2178.1680,13.5469,10.0,0);
//BANK
	Create3DTextLabel("/Bank um bedient zu werden", COLOR_GREEN, 1421.3022,-981.7219,1639.7843,10.0,0);
//Schwarzmarkt
	Create3DTextLabel(" Anwalt - /Erlaubnis um eine Erlaubnis zu bekommen !", COLOR_YELLOW, 222.2276,121.3832,999.0217,9.0,0);
	Create3DTextLabel(" Schwarzmarkt - /markt um etwas zu kaufen\n /ijob für die illegalen Jobs", 0xFFFFFFFF, 2804.8872,-1437.9536,40.0447,15.0,0);
//BANK TRESOR
	Create3DTextLabel("/Aufbrechen um den Tresorraum zu Betreten!", COLOR_RED, 1424.3881,-1004.1063,1639.7909,15.0,0);
    Create3DTextLabel("/rob um die Bank auszurauben!", COLOR_RED, 2155.1436,1623.8749,993.6882,15.0,0);
	Create3DTextLabel("/exit um den Tresorraum zu Verlassen!", COLOR_RED, 2144.1050,1608.3209,993.6882,15.0,0);
//======== 
//Hitman Skin
Create3DTextLabel("/hskin um den Skin zu wächseln",COLOR_WHITE, 2149.6309,-1805.6676,16.1474,8.0,0);
//Neon
Create3DTextLabel("/neonan um neon anzumachen (nicht doppelklick auf das Neon sondern auf Auswählen klicken)",COLOR_WHITE, 973.7838,-1299.0173,13.3828,8.0,0);
//Armour
Create3DTextLabel("/lcnarmor um Armor zu bekommen",COLOR_WHITE, 1647.7377,-1813.4070,13.5343,8.0,0);
Create3DTextLabel("/yakiarmor um Armor zu bekommen",COLOR_WHITE, -2717.9670,-317.2987,7.8438,8.0,0);
Create3DTextLabel("/hitmanarmor um Armor zu bekommen",COLOR_WHITE, 2149.6931,-1808.4832,16.1440,8.0,0);
Create3DTextLabel("/fuegosarmor um Armor zu bekommen",COLOR_WHITE, -2115.0789,-178.0732,35.3203,8.0,0);
Create3DTextLabel("/gsfarmor um Armor zu bekommen",COLOR_WHITE, 2497.9807,-1687.7264,13.5108,8.0,0);
Create3DTextLabel("/bikearmor um Armor zu bekommen",COLOR_WHITE, -2032.3395,164.5288,28.8359,8.0,0);
Create3DTextLabel("/vagosarmor um Armor zu bekommen",COLOR_WHITE, 2536.5503,-1060.8982,69.5679,8.0,0);
Create3DTextLabel("/atzearmor um Armor zu bekommen",COLOR_WHITE, 2786.1611,-1930.1277,13.5469,8.0,0);
Create3DTextLabel("/rifaarmor um Armor zu bekommen",COLOR_WHITE, 2176.9104,-2257.9685,14.7734,8.0,0);
Create3DTextLabel("/mostwantarmor um Armor zu bekommen",COLOR_WHITE, 1269.8015,-1641.0773,27.3750,8.0,0);//
Create3DTextLabel("/terarmor um Armor zu bekommen",COLOR_WHITE, -314.3889,1766.8217,43.6406,8.0,0);
Create3DTextLabel("/brigarmor um Armor zu bekommen",COLOR_WHITE, 2513.9211,-2120.2246,13.5469,8.0,0);
Create3DTextLabel("/wequip um sich Auszurüsten",COLOR_WHITE, -510.2045,-505.2142,25.5234,8.0,0);
Create3DTextLabel("Willkommen an der\nFahrschule\n\num was zu Essen/Trinken /fdrink eingeben",COLOR_WHITE,1214.3776,-1814.5111,16.5938,18.0,0,0);
//ALCA RAUS
//Create3DTextLabel("/raus um aus dem Alcatras zu gehen",COLOR_WHITE, -510.2045,-505.2142,25.5234,8.0,0);
//LSPD Trainingslager
	Create3DTextLabel("/entertraining \n um den Trainingsraum zu betreten",COLOR_WHITE, 1568.8917,-1690.7363,5.8906,8.0,0);
	Create3DTextLabel("/exittraining \n um den Trainingsraum zu verlassen",COLOR_WHITE, 2542.8333,-1304.3030,1025.0743,8.0,0);
//Bundestag
	Create3DTextLabel("/bundestag um den Bundestag zu betreten", COLOR_WHITE, 368.3150,194.1578,1008.3828,5.0,0);
	Create3DTextLabel("/bundestag um den Bundestag zu verlassen", COLOR_WHITE, 355.1508,154.5819,1050.2904,5.0,0);
//Yakuza
	Create3DTextLabel("/enter um die Yakuza Base zu betreten \n /yaklift um aufs Dach zu gelangen", COLOR_WHITE, 1924.2145,960.0609,10.8203,10.0,0);
	Create3DTextLabel("/yaklift um runter zu gelangen", COLOR_WHITE, 1925.7356,959.8880,52.7387,10.0,0);
	Create3DTextLabel("/skin um den Skin zu ändern", COLOR_WHITE, -2719.0527,-315.4308,7.8438,10.0,0);
//FBI
	Create3DTextLabel("FBI Base \n mit ~k~~CONVERSATION_YES~ betreten \n /Aufzug um aufs Dach zu gelangen", COLOR_WHITE, 1833.1556,-1125.7290,24.6721,10.0,0);
	Create3DTextLabel("~k~~CONVERSATION_YES~ um die FBI Base zu verlassen", COLOR_WHITE, 246.8075,63.2147,1003.6406,10.0,0);
	Create3DTextLabel("/Aufzug um nach unten zu kommen", COLOR_WHITE, 1838.6667,-1143.1451,51.8640,10.0,0);
    Create3DTextLabel("~k~~CONVERSATION_YES~ \n um die S.W.A.T Elite Troop Base zu betreten",COLOR_WHITE, 329.0090,-1513.4635,36.0391,8.0,0);
    Create3DTextLabel("~k~~CONVERSATION_YES~ \n um die S.W.A.T zu verlassen!",COLOR_WHITE, 288.7460,169.3510,1007.1719,7.0,0);
//Anlegestelle
	Create3DTextLabel(" Tankstation - /fillboot um dein Boot auf zu tanken", 0xFFFFFFFF, -100.8630,-1730.0671,1.2640,166.7315,0);
	Create3DTextLabel(" Bootsreperatur - /repairboot um dein Boot zum reparieren", 0xFFFFFFFF, -102.8027,-1739.3223,1.2640,153.8847,0);

//Cripz
	Create3DTextLabel("/fuegosskin um die Kleidung zu wechseln", COLOR_WHITE,-2646.6782,1423.5521,906.4609,15.0,0);//
	Create3DTextLabel("/exit um die Fuegosbase zu verlassen", COLOR_WHITE,-2637.1277,1403.7910,906.4609,15.0,0);
	Create3DTextLabel("/enter um die Fuegosbase zu betreten", COLOR_WHITE,-2119.6563,-178.3799,35.3203,15.0,0);
	Create3DTextLabel("/exit um die Fuegosbase zu verlassen", COLOR_WHITE,-2637.1277,1403.7910,906.4609,15.0,0);
	Create3DTextLabel("/frakkammer, um die Fraktionskammer zu öffnen", COLOR_WHITE,-2642.2175,1419.0121,906.4609,15.0,0);
//Startbonus
Create3DTextLabel("/startbonus um den Startbonus zu bekommen", COLOR_WHITE,478.3927,-1527.7627,20.0114,15.0,0);
//Ballas Schutzweste
Create3DTextLabel("um Armor zu nehmen /armor", COLOR_WHITE,1102.1628,-1263.3516,21.5469,15.0,0);
Create3DTextLabel("um Armor zu nehmen /armor", COLOR_WHITE,2819.0176,-1172.2887,1025.5703,15.0,0); //
//==========
	Create3DTextLabel("Hier kannst du Fraktions-Materialien kaufen.\nDiese werden für Waffen aus der Fraktionskammer benötigt.\nKosten: 10$ pro Material\nDu kannst maximal 500 Fraktions-Materialien tragen\n/frakmats", 0xFFFFFFFF , 2805.0444,-1434.0425,40.0484, 30.0, 0, 0);
	Create3DTextLabel("Hier kannst du dein Privatauto umfärben\nKosten: 500$\nBefehl: /farbe", 0xFFFFFFFF, 1911.2693,-1776.6720,13.3828, 15.0,0);
	Create3DTextLabel("Hier kannst du dein Privatauto umfärben\nKosten: 500$\nBefehl: /farbe", 0xFFFFFFFF, 1017.9830,-919.3538,42.3359, 15.0,0);
	Create3DTextLabel("Werbestand\nTippe /ad, um eine Werbung zu schreiben", 0xFFFFFFFF , 1207.2928,-917.7825,43.0665,15.0,0);
/*	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, -2767.8943,1099.3843,32.8440,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, -1789.3870,1543.5454,7.1875,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, -2513.3823,776.3461,35.1719,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, 2790.3394,-1944.1105,13.5469,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, 2805.7092,-1178.7507,25.4434,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, 2507.6379,-1471.5164,24.0372,15.0,0);
	Create3DTextLabel("Angriffspunkt\nTippe /angriff, um das Gebiet anzugreifen", 0xFFFFFFFF, 2403.5715,-1223.2195,25.1426,15.0,0);*/
	Create3DTextLabel("Brigada Base \n /rexit", 0xFFFFFFFF, 1701.3274,-1667.7771,20.2188,15.0,0);
	Create3DTextLabel("Brigada  Base \n /renter", 0xFFFFFFFF, 2516.8743,-2120.1921,13.5469,15.0,0);
	Create3DTextLabel("Kampfstyles kaufen mit /kampfstyles\nPreis pro Kampfstyle: 5.000$", 0xFFFFFFFF, 2808.0757,-1442.0732,40.0432, 30.0, 0,0);
	Create3DTextLabel("Los Santos Newstand\nZeitungen schreiben /paper [Für Newsreporter]\nAufzug benutzen /aufzug [Für Newsreporter]\nZeitungen ansehen /papers [Für Zeitungsjungen]", 0xFFFFFFFF, 1654.1954,-1654.9637,22.5156, 30.0, 0, 0);
	Create3DTextLabel("Aufzug benutzen /aufzug [Nur für Newsreporter]", 0xFFFFFFFF, 1649.4564,-1641.6837,83.7813, 15.0, 0, 0);
	Create3DTextLabel("Aufzug benutzen /aufzug [Nur für Newsreporter]", 0xFFFFFFFF, 1658.7493,-1691.7506,15.6094, 15.0, 0, 0);
	Create3DTextLabel("San Andreas Airport Tankstelle\nFür Autos + Flugzeuge + Helikopter\nUmfärben von Privatfahrzeugen mit /farbe", 0xFFFFFFFF, 2002.8409,-2382.0603,13.5469, 40.0, 0, 0);
	Create3DTextLabel("BSS - Drive In\nBestellen mit /drivein.", 0xFFFFFFFF, 799.1068,-1629.4493,12.9548, 40.0, 0, 0);
	Create3DTextLabel("BSN - Drive In\nBestellen mit /drivein.", 0xFFFFFFFF, 1214.4454,-904.4616,43.9208, 40.0, 0, 0);
	Create3DTextLabel("Handyladen Los Santos\nUm das Menü aufzurufen, tippe /handyladen ein.", 0xFFFFFFFF, -2237.0981,130.4937,1036.4141, 40.0, 0, 1);
	Create3DTextLabel("Waren kaufen\n/waren", 0xFFFFFFFF, 1910.2467,-2639.1057,14.5469,50.0, 0);
	Create3DTextLabel("Waren tauschen\n/waren", 0xFFFFFFFF,-1233.6982,-88.1554,14.9228,50.0, 0);
	Create3DTextLabel("Waren verkaufen\n/waren", 0xFFFFFFFF, 1346.5087,1712.4694,11.8203,50.0, 0);
	Create3DTextLabel("LSPD Garagen Fahrstuhl\nHineingehen\num zum Knast zu kommen",0xFFFFFFFF,1524.9729,-1677.8905,5.8906,5.0,0);
	Create3DTextLabel("San Andreas Präsidenten Villa\nZutritt nur für befugte\n/penter",0xFFFFFFFF,1123.2803,-2037.1238,70.8875,20.0,0,1);
	Create3DTextLabel("San Andreas Präsidenten Dachluke\nZutritt nur für befugte\n/dachluke", 0xFFFFFFFF, 1117.8037,-2037.0393,79.7500,20.0,0,1);
	Create3DTextLabel("San Andreas Präsidenten Dachluke\n/dachluke", 0xFFFFFFFF, 1299.0953,-796.3546,1085.0078,20.0,4,1);
	Create3DTextLabel("San Andreas Präsidenten Villa Ausgang\n/pexit", 0xFFFFFFFF, 1261.5485,-785.3905,1092.9063,20.0,4,1);
	Create3DTextLabel("San Andreas Präsidenten /rep", 0xFFFFFFFF, 1244.3359,-2042.6630,59.8744,20.0,0,1);
	Create3DTextLabel("Tippe /rep um dein Fahrzeug zu reparieren oder zu betanken", 0xFFFFFFFF, 1007.9469,1154.9111,10.7402,30.0,0,1);
	//========= ZOLL TEXT LABEL ==========//
    Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,53.61148071,-1525.98864746,4.87745094,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,55.77261353,-1539.03112793,4.95321989,32.0,0);
	Create3DTextLabel("Zollstation Blueberry - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-981.43225098,-381.12454224,36.21669388,32.0,0);
	Create3DTextLabel("Zollstation SF - Blueberry\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-969.41735840,-379.66165161,36.21669388,32.0,0);
	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1754.57714844,523.82324219,27.69068718,32.0,0);
	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1744.70703125,527.12695312,27.43260956,32.0,0);
	Create3DTextLabel("Zollstation LV - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1727.59667969,533.24121094,27.49211121,32.0,0);
	Create3DTextLabel("Zollstation LV - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1736.46093750,530.24609375,27.49927139,32.0,0);
	Create3DTextLabel("Zollstation LV - Blueberry\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-162.66503906,403.01269531,11.91834545,32.0,0);
	Create3DTextLabel("Zollstation Blueberry - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-154.94238281,401.06250000,11.91834545,32.0,0);
	Create3DTextLabel("Zollstation SF - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-1230.96582031,994.12304688,43.41479111,32.0,0);
	Create3DTextLabel("Zollstation LV - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-1242.07812500,1000.90136719,43.47349930,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,102.20307159,-1270.01013184,14.58920097,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,112.27465820,-1277.22094727,14.75586414,32.0,0);
	Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,100.10153198,-1254.57641602,14.75407791,32.0,0);
	Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,89.60826111,-1248.17480469,14.42384052,32.0,0);
	Create3DTextLabel("Zollstation LV - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-2694.72802734,1275.12854004,55.26990891,32.0,0);
	Create3DTextLabel("Zollstation LV - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-2685.87304688,1275.14294434,55.26990891,32.0,0);
	Create3DTextLabel("Zollstation SF - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-2677.04370117,1275.15173340,55.26990891,32.0,0);
	Create3DTextLabel("Zollstation SF - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-2667.32788086,1275.27246094,55.26990891,32.0,0);
	//=======TANKE======//
	/*
	Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,1004.9082,-940.9944,41.7214,30,0);
	Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,1939.2225,-1772.7452,12.9431,30,0);
    Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,-91.6928,-1170.3101,2.4106,30,0);
    Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,-2024.4131,156.3826,28.8359,30,0);
    Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,-2411.5710,976.1568,45.4609,30,0);
    Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,-1674.7457,413.9423,7.1797,30,0);
    Create3DTextLabel("Benutze /tanken\n um dein Fahrzeug zu Tanken.",0xFF002DFF,-1939.7811,-1772.3312,13.3906,30,0);
    */
	//======PRISON=========
//	Create3DTextLabel("Benutze /arrestprison\n um den Verbrecher einzusperren.",0xFF002DFF,-1939.7811,-1772.3312,13.3906,30,0);
	//======ZIVI=======//
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,290.2523,-106.7863,1001.5156,20,0);
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,295.4237,-38.1667,1001.5156,20,0);
//	Create3DTextLabel("Benutze /parktor um das Tor zu Öffnen\nKosten: 125$",COLOR_YELLOW,1811.5, -1889.5999755859, 13.199999809265,20,0);
	//======GANGFIGHT====//
	Create3DTextLabel("Benutze /invade um das Gebiet anzugreifen", COLOR_RED,1072.4320,-1619.2638,20.4581,20,0);
	Create3DTextLabel("Benutze /invade um das Gebiet anzugreifen", COLOR_RED,1924.1338,-2125.8567,13.1467,20,0);
	Create3DTextLabel("Benutze /invade um das Gebiet anzugreifen", COLOR_RED,1958.2657,-1852.9225,3.8851,20,0);

//========= SPEEDO ===========//
	for(new i=0; i<SLOTS; i++)
	{
	    box[i] = TextDrawCreate(198.000000,396.000000,"_");
		TextDrawUseBox(box[i],1);
		TextDrawBoxColor(box[i],0x00000066);
		TextDrawTextSize(box[i],438.000000,0.000000);
		TextDrawAlignment(box[i],0);
		TextDrawBackgroundColor(box[i],0x00000033);
		TextDrawFont(box[i],3);
		TextDrawLetterSize(box[i],1.000000,3.000000);
		TextDrawColor(box[i],0xffffffff);
		TextDrawSetOutline(box[i],1);
		TextDrawSetProportional(box[i],1);
		TextDrawSetShadow(box[i],1);

		fahrzeug[i] = TextDrawCreate(198.000000,396.000000," ");
		TextDrawAlignment(fahrzeug[i],0);
		TextDrawBackgroundColor(fahrzeug[i],0x000000ff);
		TextDrawFont(fahrzeug[i],1);
		TextDrawLetterSize(fahrzeug[i],0.299999,1.000000);
		TextDrawColor(fahrzeug[i],0xffffffff);
		TextDrawSetOutline(fahrzeug[i],1);
		TextDrawSetProportional(fahrzeug[i],1);
		TextDrawSetShadow(fahrzeug[i],1);

		kmh[i] = TextDrawCreate(345.000000,396.000000," ");
		TextDrawAlignment(kmh[i],0);
		TextDrawBackgroundColor(kmh[i],0x000000ff);
		TextDrawFont(kmh[i],1);
		TextDrawLetterSize(kmh[i],0.299999,1.000000);
		TextDrawColor(kmh[i],0xffffffff);
		TextDrawSetOutline(kmh[i],1);
		TextDrawSetProportional(kmh[i],1);
		TextDrawSetShadow(kmh[i],1);

		hoehe[i] = TextDrawCreate(199.000000,408.000000," ");
		TextDrawAlignment(hoehe[i],0);
		TextDrawBackgroundColor(hoehe[i],0x000000ff);
		TextDrawFont(hoehe[i],1);
		TextDrawLetterSize(hoehe[i],0.299999,1.000000);
		TextDrawColor(hoehe[i],0xffffffff);
		TextDrawSetOutline(hoehe[i],1);
		TextDrawSetProportional(hoehe[i],1);
		TextDrawSetShadow(hoehe[i],1);

		zustand[i] = TextDrawCreate(345.000000,408.000000," ");
		TextDrawAlignment(zustand[i],0);
		TextDrawBackgroundColor(zustand[i],0x000000ff);
		TextDrawFont(zustand[i],1);
		TextDrawLetterSize(zustand[i],0.299999,1.000000);
		TextDrawColor(zustand[i],0xffffffff);
		TextDrawSetOutline(zustand[i],1);
		TextDrawSetProportional(zustand[i],1);
		TextDrawSetShadow(zustand[i],1);
	}

/*//===== Zonen =====//
 	SNDM = GangZoneCreate(1436.625, -1764.764, 1611.556, -1618.698);
	ZSNDM = GangZoneCreate(1691.416, -1677.914, 1759.867, -1583.168);
	BSNNDM = GangZoneCreate(1159.018, -959.4252, 1292.118, -864.6794);
	KHNDM = GangZoneCreate(1181.835, -1417.363, 1269.301, -1283.14);
	Grove_Gangzone = GangZoneCreate(2349.9714,-1626.9971,2542.8630,-1727.1497);
	Gangjail_zone = GangZoneCreate(190.8343,-218.7251,226.0624,-275.1775);
	Ballas_Gangzone = GangZoneCreate(1069.9374,-1156.1978,1143.4110,-1275.3253);
	Vagos_Gangzone = GangZoneCreate(2745.4243,-1595.0244,2828.3745,-1647.5859);
	Aztecas_Gangzone = GangZoneCreate(2719.8789,-1899.0511,2815.0549,-1988.2029);
	Fuegos_Gangzone = GangZoneCreate(-2093.3320,-77.2452,-2210.4976,-286.4663);
	Bikers_Gangzone = GangZoneCreate(-2077.7434,117.8974,-2015.8341,190.9894);
	Yak_Gangzone = GangZoneCreate(-2618.1477,-216.3147,-2814.1233,-417.0228);
	Russ_Gangzone = GangZoneCreate(2420.4973,-2208.8953,2562.2061,-2058.5442);
	RS_Gangzone = GangZoneCreate(1160.4458,-1580.2050,1289.1624,-1704.0111);
	LCN_Gangzone = GangZoneCreate(1578.5762,-1788.4830,1682.6599,-1862.7871);*/
//===== GANGZONEN =====//
//	Einkaufszentrum_Gangzone = GangZoneCreate(1045.1472,-1579.7272,1141.4376,-1665.4949);

//===== Zonen =====//
	/*Triaden = GangZoneCreate(-2155.196, -175.2063, -2012.277, -21.35266);
 	SNDM = GangZoneCreate(1436.625, -1764.764, 1611.556, -1618.698);
	ZSNDM = GangZoneCreate(1691.416, -1677.914, 1759.867, -1583.168);
	BSNNDM = GangZoneCreate(1159.018, -959.4252, 1292.118, -864.6794);
	KHNDM = GangZoneCreate(1181.835, -1417.363, 1269.301, -1283.14);
	Vagos = GangZoneCreate(2307.475, -1188.394, 2611.702, -987.0594);
	Ballas = GangZoneCreate(1885.36, -1223.924, 2105.925, -1089.701);
	Grove = GangZoneCreate(2318.883, -1784.503, 2577.476, -1591.064);
	Aztecas = GangZoneCreate(1691.416, -2183.225, 1923.388, -2060.845);
	Alcatraz = GangZoneCreate(-2779.334, 1179.465, -1833.426, 2207.118);
	Yakuza = GangZoneCreate(1361.251, 2707.167, 1544.779, 2877362);//Yakuza
 	Russianm = GangZoneCreate(2277.052, -1330.513, 2387.334, -1192.342);//RM*/
//	Gangfights = GangZoneCreate(560.538, -724.0283, 875.8406, -362.0141);
//	LCN = GangZoneCreate(1577.33, -1867.406, 1683.81, -1748.974);

//Textdraw
	NDMZONET = TextDrawCreate(497.000000,7.000000,"NO DM ZONE");
	TextDrawAlignment(NDMZONET,0);
	TextDrawBackgroundColor(NDMZONET,0x000000FF);
	TextDrawFont(NDMZONET,2);
	TextDrawLetterSize(NDMZONET,0.499999,1.500000);
	TextDrawColor(NDMZONET,0xFF0000FF);
	TextDrawSetOutline(NDMZONET,1);
	TextDrawSetProportional(NDMZONET,1);
	TextDrawSetShadow(NDMZONET,1);

    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
	for(new i = 0; i < AUTOHAUSER; i++)
	{
	    Dtc_Info[i] = CreatePickup(1210, 2, DtcSonstiges[i][0][0],DtcSonstiges[i][0][1],DtcSonstiges[i][0][2],0);
	}
	SetTimer("LetDoorsLocked", 1000, 1);
	lspdvar1 = 1; // INSIDE LSPD DOOR
	lspdvar2 = 1;
	LSPDZellen = 0;
	LoadProperty();
	LoadBizz();
	LoadSBizz();
	LoadBoxer();
    LoadBlacklist();
	LoadStuff();
	LoadFrakMats();
	LoadFrakDrugs();
	LoadIRC();
	LoadPapers();
	LoadFraktionsKassen();
	SaveFraktionsKassen();
	IRCInfo[0][iPlayers] = 0; IRCInfo[1][iPlayers] = 0; IRCInfo[2][iPlayers] = 0;
	IRCInfo[3][iPlayers] = 0; IRCInfo[4][iPlayers] = 0; IRCInfo[5][iPlayers] = 0;
	IRCInfo[6][iPlayers] = 0; IRCInfo[7][iPlayers] = 0; IRCInfo[8][iPlayers] = 0;
	IRCInfo[9][iPlayers] = 0;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Nothing");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "No-one");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	PlayerHaul[Truck[0]][pCapasity] = 100;
	PlayerHaul[Truck[1]][pCapasity] = 100;
	PlayerHaul[Truck[2]][pCapasity] = 100;
	PlayerHaul[Truck[3]][pCapasity] = 50;
	PlayerHaul[Truck[4]][pCapasity] = 50;
	PlayerHaul[Truck[5]][pCapasity] = 50;
	format(string, sizeof(string), "German Next Era v%s", VERSION);
	SetGameModeText(string);//
	format(objstore, sizeof(objstore), "MOLE: Ich habe nichts, bitte komme später nochmal.");
	format(cbjstore, sizeof(cbjstore), "HQ: Es ist nicht in deiner Nähe.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}
	SetPDistance(10);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	UsePlayerPedAnims();
	EnableStuntBonusForAll(false);
    ShowPlayerMarkers(1);
	DisableInteriorEnterExits();
	EnableM_Bot();

	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		//Tutorial
		PlayerInfo[i][LetterboxTop] = TextDrawCreate(1.000000,1.000000,"~w~Einleitung~n~~n~~n~~n~~n~~n~~n~");
		TextDrawUseBox(PlayerInfo[i][LetterboxTop],1);
		TextDrawBoxColor(PlayerInfo[i][LetterboxTop],0x000000ff);
		TextDrawTextSize(PlayerInfo[i][LetterboxTop],642.000000,20.000000);
		TextDrawAlignment(PlayerInfo[i][LetterboxTop],0);
		TextDrawBackgroundColor(PlayerInfo[i][LetterboxTop],0x000000ff);
		TextDrawFont(PlayerInfo[i][LetterboxTop],2);
		TextDrawLetterSize(PlayerInfo[i][LetterboxTop],0.400000,1.400000);
		TextDrawColor(PlayerInfo[i][LetterboxTop],0xffffffff);
		TextDrawSetOutline(PlayerInfo[i][LetterboxTop],1);
		TextDrawSetProportional(PlayerInfo[i][LetterboxTop],1);
		TextDrawSetShadow(PlayerInfo[i][LetterboxTop],1);

		PlayerInfo[i][LetterboxBottom] = TextDrawCreate(2.000000,336.000000,"~n~~w~_~n~~n~~n~~n~~n~~n~~n~~n~");
		TextDrawUseBox(PlayerInfo[i][LetterboxBottom],1);
		TextDrawBoxColor(PlayerInfo[i][LetterboxBottom],0x000000ff);
		TextDrawTextSize(PlayerInfo[i][LetterboxBottom],638.000000,3.000000);
		TextDrawAlignment(PlayerInfo[i][LetterboxBottom],0);
		TextDrawBackgroundColor(PlayerInfo[i][LetterboxBottom],0x00ffff00);
		TextDrawFont(PlayerInfo[i][LetterboxBottom],2);//,1.200000,2.000000);
		TextDrawLetterSize(PlayerInfo[i][LetterboxBottom],0.400000,1.300000);
		TextDrawColor(PlayerInfo[i][LetterboxBottom],0xffffffff);
		TextDrawSetOutline(PlayerInfo[i][LetterboxBottom],1);
		TextDrawSetProportional(PlayerInfo[i][LetterboxBottom],1);
		TextDrawSetShadow(PlayerInfo[i][LetterboxBottom],5);
	}
	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
//========== HAUS LABELS ===========//
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    new string2[128];
		if(HouseInfo[h][hOwned] == 0)
		{
			format(string2, sizeof(string2), "[Haus zu verkaufen - %s]\nPreis: $%d\nLevel: %d\n/buyhouse zum kaufen",HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
			HouseInfo[h][Text] = Create3DTextLabel(string2,COLOR_FORSELL,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1,15.0,0);
			AddStaticPickup(1273, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 0);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hRentabil] == 0)
		{
			format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
			HouseInfo[h][Text] = Create3DTextLabel(string2,COLOR_BUYED,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1,15.0,0);
			AddStaticPickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 0);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hRentabil] >= 1)
		{
			format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d\nMiete: $%d\nEinmieten mit /rentroom",HouseInfo[h][hOwner],HouseInfo[h][hLevel],HouseInfo[h][hRent]);
			HouseInfo[h][Text] = Create3DTextLabel(string2,COLOR_BUYED,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1,15.0,0);
			AddStaticPickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 0);
			pickups++;
		}

	}
	for(new h = 0; h < sizeof(TankeInfo); h++)
	{
		if(TankeInfo[h][tOwned] == 0)
		{
            format(tankestring, sizeof(tankestring), "%s\n Diese Tankstelle steht zum verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um die Tankstelle zu kaufen",TankeInfo[h][tMessage],TankeInfo[h][tBuyPrice],TankeInfo[h][tLevelNeeded]);
			text_tanke[h] = Create3DTextLabel(tankestring,0xFFFFFFAA,TankeInfo[h][tEntranceX], TankeInfo[h][tEntranceY], TankeInfo[h][tEntranceZ]+1.25,15,0,1);
   			Update3DTextLabelText(text_tanke[h],0xFFFFFFAA,tankestring);
			AddStaticPickup(1272, 2, TankeInfo[h][tEntranceX], TankeInfo[h][tEntranceY], TankeInfo[h][tEntranceZ]+0.25);
			pickups++;
		}
		if(TankeInfo[h][tOwned] == 1)
		{
            format(tankestring, sizeof(tankestring), "%s\nInhaber: %s\nTeilhaber: %s\nPreis pro Liter: $%d \nLevel: %d",TankeInfo[h][tMessage],TankeInfo[h][tOwner],TankeInfo[h][tExtortion],TankeInfo[h][tEntranceCost],TankeInfo[h][tLevelNeeded]);
			text_tanke[h] = Create3DTextLabel(tankestring,0xFFFFFFAA,TankeInfo[h][tEntranceX], TankeInfo[h][tEntranceY], TankeInfo[h][tEntranceZ]+1.25,15,0,1);
   			Update3DTextLabelText(text_tanke[h],0xFFFFFFAA,tankestring);
			AddStaticPickup(1239, 2, TankeInfo[h][tEntranceX], TankeInfo[h][tEntranceY], TankeInfo[h][tEntranceZ]+0.25);
			pickups++;
		}
	}

//========== BANK ENTER =============//
	Create3DTextLabel("German Next Era Life Bank\nEigentum der Regierung", COLOR_BUYED, 1462.473632,-1011.350830,27.843799,15.0,0);
	Create3DTextLabel("KFZ Zulassungsstelle\n Benutze die Taste Enter um hineinzugelangen", COLOR_BUYED, 1209.8247,-1749.9943,13.5937,20.0,0);
//========== BUSINESS LABELS =============//
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
		if(BizzInfo[b][bOwned] == 0)
		{
		    format(string3, sizeof(string3), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", BizzInfo[b][bMessage],BizzInfo[b][bBuyPrice],BizzInfo[b][bLevelNeeded]);
		    BizzInfo[b][bText] = Create3DTextLabel(string3,COLOR_FORSELL,BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]+1,15.0,0);
		}
		if(BizzInfo[b][bOwned] == 1)
		{
		    format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[b][bMessage],BizzInfo[b][bOwner],BizzInfo[b][bExtortion],BizzInfo[b][bEntranceCost],BizzInfo[b][bLevelNeeded],BizzInfo[b][bProducts],BizzInfo[b][bMaxProducts],BizzInfo[b][bPriceProd]);
		    BizzInfo[b][bText] = Create3DTextLabel(string3,COLOR_BUYED,BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]+1,15.0,0);
		}
	}

//========== SBUSINESS LABELS =============//
	for(new sb = 0; sb < sizeof(SBizzInfo); sb++)
	{
		new string4[128];
		if(SBizzInfo[sb][sbOwned] == 0)
		{
		    format(string4, sizeof(string4), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", SBizzInfo[sb][sbMessage],SBizzInfo[sb][sbBuyPrice],SBizzInfo[sb][sbLevelNeeded]);
		    SBizzInfo[sb][sbText] = Create3DTextLabel(string4,COLOR_FORSELL,SBizzInfo[sb][sbEntranceX], SBizzInfo[sb][sbEntranceY], SBizzInfo[sb][sbEntranceZ]+1,15.0,0);
		}
		if(SBizzInfo[sb][sbOwned] == 1)
		{
		    format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[sb][sbMessage],SBizzInfo[sb][sbOwner],SBizzInfo[sb][sbExtortion],SBizzInfo[sb][sbEntranceCost],SBizzInfo[sb][sbLevelNeeded],SBizzInfo[sb][sbProducts],SBizzInfo[sb][sbMaxProducts], SBizzInfo[sb][sbPriceProd]);
		    SBizzInfo[sb][sbText] = Create3DTextLabel(string4,COLOR_BUYED,SBizzInfo[sb][sbEntranceX], SBizzInfo[sb][sbEntranceY], SBizzInfo[sb][sbEntranceZ]+1,15.0,0);
		}
	}



	//-----------------------------------------------------------------------------------
	//-------------------------------  VEHICLES -----------------------------------------

//********************************Staatsfraktionen Autos******************************************************************************

	PolizeiVehs[0] = AddStaticVehicleEx(596,1600.91455078,-1703.96435547,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[1] = AddStaticVehicleEx(596,1600.89953613,-1700.48669434,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[2] = AddStaticVehicleEx(596,1601.13500977,-1696.30407715,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[3] = AddStaticVehicleEx(596,1601.17785645,-1692.10595703,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[4] = AddStaticVehicleEx(596,1601.17272949,-1688.34167480,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[5] = AddStaticVehicleEx(596,1601.21960449,-1684.21215820,5.71062469,90.00000000,-1,1,-1); //Police Car (LSPD)
	PolizeiVehs[6] = AddStaticVehicleEx(599,1595.33789062,-1710.26196289,6.27575159,0.00000000,-1,1,-1); //Police Ranger
	PolizeiVehs[7] = AddStaticVehicleEx(599,1591.48669434,-1710.18029785,6.27575159,0.00000000,-1,1,-1); //Police Ranger
	PolizeiVehs[8] = AddStaticVehicleEx(599,1587.68603516,-1710.06457520,6.27575159,0.00000000,-1,1,-1); //Police Ranger
	PolizeiVehs[9] = AddStaticVehicleEx(528,1558.51110840,-1710.00305176,6.07562494,0.00000000,-1,1,-1); //FBI Truck
	PolizeiVehs[10] = AddStaticVehicleEx(528,1562.95495605,-1710.02783203,6.07562494,0.00000000,-1,1,-1); //FBI Truck
	PolizeiVehs[11] = AddStaticVehicleEx(427,1570.28283691,-1709.88549805,6.13862514,0.00000000,-1,1,-1); //Enforcer
	PolizeiVehs[12] = AddStaticVehicleEx(427,1574.63000488,-1709.88647461,6.13862514,0.00000000,-1,1,-1); //Enforcer
	PolizeiVehs[13] = AddStaticVehicleEx(427,1578.78015137,-1710.04003906,6.13862514,0.00000000,-1,1,-1); //Enforcer
	PolizeiVehs[14] = AddStaticVehicleEx(599,1583.43701172,-1709.97583008,6.27575159,0.00000000,-1,1,-1); //Police Ranger
	PolizeiVehs[15] = AddStaticVehicleEx(490,1538.78942871,-1645.71411133,6.21075153,180.00000000,-1,1,-1); //FBI Rancher
	PolizeiVehs[16] = AddStaticVehicleEx(490,1534.60656738,-1645.65954590,6.21075153,180.00000000,-1,1,-1); //FBI Rancher
	PolizeiVehs[17] = AddStaticVehicleEx(490,1530.59118652,-1645.65087891,6.21075153,180.00000000,-1,1,-1); //FBI Rancher
	PolizeiVehs[18] = AddStaticVehicleEx(490,1526.73315430,-1645.59289551,6.21075153,180.00000000,-1,1,-1); //FBI Rancher
	PolizeiVehs[19] = AddStaticVehicleEx(560,1544.24511719,-1684.37768555,5.69560003,90.00000000,-1,1,-1); //Sultan
	PolizeiVehs[20] = AddStaticVehicleEx(560,1544.39367676,-1680.41259766,5.69560003,90.00000000,-1,1,-1); //Sultan
	PolizeiVehs[21] = AddStaticVehicleEx(560,1544.47839355,-1676.29357910,5.69560003,90.00000000,-1,1,-1); //Sultan
	PolizeiVehs[22] = AddStaticVehicleEx(560,1544.55041504,-1672.26855469,5.69560003,90.00000000,-1,1,-1); //Sultan
	PolizeiVehs[23] = AddStaticVehicleEx(523,1587.62780762,-1680.05261230,5.55736876,270.00000000,86,86,-1); //HPV1000
	PolizeiVehs[24] = AddStaticVehicleEx(523,1587.65747070,-1678.38476562,5.55736876,270.00000000,86,86,-1); //HPV1000
	PolizeiVehs[25] = AddStaticVehicleEx(523,1587.61389160,-1676.62609863,5.55736876,270.00000000,86,86,-1); //HPV1000
	PolizeiVehs[26] = AddStaticVehicleEx(523,1587.63391113,-1674.93676758,5.55785704,270.00000000,86,86,-1); //HPV1000
	PolizeiVehs[27] = AddStaticVehicleEx(497,1564.79272461,-1655.70471191,28.66060638,90.00000000,-1,1,-1); //Maverick
	PolizeiVehs[28] = AddStaticVehicleEx(497,1564.01989746,-1694.91894531,28.66058731,90.00000000,-1,1,-1); //Maverick
	PolizeiVehs[29] = AddStaticVehicleEx(447,1549.63110352,-1708.03112793,28.49481010,90.00000000,-1,1,-1); //Seasparrow
	PolizeiVehs[30] = AddStaticVehicleEx(430,947.3892,-1994.1215,-0.4547,352.9428,0,1,-1); // Predators
	PolizeiVehs[31] = AddStaticVehicleEx(430,943.9156,-2013.5116,-0.0923,172.9194,0,1,-1); // Predators
	PolizeiVehs[32] = AddStaticVehicleEx(446,926.1312,-2010.9595,-0.5119,173.8733,0,1,-1); // Sqallo
	PolizeiVehs[33] = AddStaticVehicleEx(446,929.3665,-1990.3289,-0.5837,352.0886,0,1,-1); // Sqallo
	PolizeiVehs[34] = AddStaticVehicleEx(452,910.7324,-2008.9387,-0.6833,175.1667,0,1,-1); // Speeder
	PolizeiVehs[35] = AddStaticVehicleEx(452,913.9105,-1990.8756,-0.4459,352.3455,0,1,-1); // Speeder

	FBIVehs[1] = AddStaticVehicleEx(497,991.9297,1052.5721,48.2674,273.6660,0,0,-1); // Maverick
	FBIVehs[2] = AddStaticVehicleEx(497,993.2553,1036.0643,48.2663,269.9836,0,0,-1); // Maverick
	FBIVehs[3] = AddStaticVehicleEx(528,999.6277,1158.0414,10.8456,179.6781,0,0,-1); // FBI Truck
	FBIVehs[4] = AddStaticVehicleEx(528,993.4230,1158.1018,10.8640,180.9722,0,0,-1); // FBI Truck
	FBIVehs[5] = AddStaticVehicleEx(528,988.4755,1158.1211,10.8903,176.9802,0,0,-1); // FBI Truck
	FBIVehs[6] = AddStaticVehicleEx(560,981.7556,1154.1816,10.5109,267.9982,0,0,-1); // Sultan
	FBIVehs[7] = AddStaticVehicleEx(560,981.5799,1149.5156,10.4976,265.4498,0,0,-1); // Sultan
	FBIVehs[8] = AddStaticVehicleEx(560,981.4679,1144.9413,10.5118,268.2867,0,0,-1); // Sultan
	FBIVehs[9] = AddStaticVehicleEx(490,981.6390,1140.5577,10.9331,263.8005,0,0,-1); // fbi Ranger
	FBIVehs[10] = AddStaticVehicleEx(490,981.3478,1135.5928,10.9353,268.3703,0,0,-1); // fbi Ranger
	FBIVehs[11] = AddStaticVehicleEx(490,980.8484,1129.5314,10.9245,265.9645,0,0,-1); // fbi Ranger
	FBIVehs[12] = AddStaticVehicleEx(490,980.8008,1124.3739,10.9289,264.7039,0,0,-1); // fbi Ranger
	FBIVehs[13] = AddStaticVehicleEx(490,980.9566,1118.3896,10.9290,268.9227,0,0,-1); // fbi Ranger
	FBIVehs[14] = AddStaticVehicleEx(490,980.6537,1113.9425,10.9295,268.0256,0,0,-1); // fbi Ranger
	FBIVehs[15] = AddStaticVehicleEx(490,980.9318,1109.2538,10.9249,271.9089,0,0,-1); // fbi Ranger
	FBIVehs[16] = AddStaticVehicleEx(411,980.3459,1104.5674,10.5380,268.5837,0,0,-1); // infernus
	FBIVehs[17] = AddStaticVehicleEx(411,980.3915,1100.4066,10.5254,269.9930,0,0,-1); // infernus
	FBIVehs[18] = AddStaticVehicleEx(601,980.5977,1095.4231,10.5786,267.0603,0,0,-1); // SWAT Panzer
	FBIVehs[19] = AddStaticVehicleEx(447,1004.1067,1017.4620,48.1449,307.0745,0,0,-1); // Fsparrow
	FBIVehs[20] = AddStaticVehicleEx(447,1018.5254,1000.4445,48.1442,311.1852,0,0,-1); // Fsparrow1
	FBIVehs[21] = AddStaticVehicleEx(541,984.5311,1077.8153,10.4379,328.8109,0,0,-1); // FBULLET
	FBIVehs[22] = AddStaticVehicleEx(415,990.8212,1076.9092,10.5898,1.9347,0,0,-1); // Chetaah
	FBIVehs[23] = AddStaticVehicleEx(451,997.5201,1077.5607,10.5267,33.7602,0,0,-1); // Turismo1
	FBIVehs[24] = AddStaticVehicleEx(522,979.6052,1086.7740,10.3921,269.6912,0,0,-1); // NRG1
	FBIVehs[25] = AddStaticVehicleEx(522,979.5541,1088.5573,10.3913,274.3224,0,0,-1); // NRG2
	FBIVehs[26] = AddStaticVehicleEx(522,979.3641,1090.2692,10.3902,278.5242,0,0,-1); // NRG3

BundeswehrVehs[1] = AddStaticVehicleEx(470,220.3373,1920.8361,17.6329,180.0073,43,0,-1); // Army1
BundeswehrVehs[2] = AddStaticVehicleEx(470,211.3504,1920.8247,17.6310,179.4065,43,0,-1); // Army2
BundeswehrVehs[3] = AddStaticVehicleEx(470,202.3463,1920.8319,17.6318,179.8985,43,0,-1); // Army3
BundeswehrVehs[4] = AddStaticVehicleEx(470,193.3137,1920.8331,17.6330,179.8796,43,0,-1); // Army4
BundeswehrVehs[5] = AddStaticVehicleEx(470,187.1379,1936.8595,17.7084,179.7273,43,0,-1); // Army5
BundeswehrVehs[6] = AddStaticVehicleEx(470,180.0054,1936.8350,17.9859,178.8194,43,0,-1); // Army6
BundeswehrVehs[7] = AddStaticVehicleEx(470,171.7572,1936.4373,18.3048,178.6372,43,0,-1); // Army7
BundeswehrVehs[8] = AddStaticVehicleEx(433,138.8919,1891.0211,18.7839,269.3834,43,0,-1); // Army8
BundeswehrVehs[9] = AddStaticVehicleEx(433,139.4647,1885.5573,18.5010,269.9013,43,0,-1); // Army9
BundeswehrVehs[10] = AddStaticVehicleEx(433,119.8734,1885.6072,18.4973,269.8216,43,0,-1); // Army10
BundeswehrVehs[11] = AddStaticVehicleEx(433,118.2058,1892.0875,18.8116,270.3701,43,0,-1); // Army11
BundeswehrVehs[12] = AddStaticVehicleEx(432,115.8171,1820.0811,17.6505,268.8480,43,0,-1); // Army12
BundeswehrVehs[13] = AddStaticVehicleEx(432,115.5581,1827.4584,17.6492,270.5078,43,0,-1); // Army13
BundeswehrVehs[14] = AddStaticVehicleEx(432,115.0744,1834.8395,17.6523,271.3450,43,0,-1); // Army14
BundeswehrVehs[15] = AddStaticVehicleEx(432,115.1366,1840.9534,17.6505,270.7075,43,0,-1); // Army15
BundeswehrVehs[16] = AddStaticVehicleEx(432,114.5545,1846.9408,17.6650,269.7008,43,0,-1); // Army16
BundeswehrVehs[17] = AddStaticVehicleEx(432,114.4112,1853.9064,17.7214,268.9114,43,0,-1); // Army17
BundeswehrVehs[18] = AddStaticVehicleEx(432,115.3763,1859.0519,17.7691,269.9487,43,0,-1); // Army18
BundeswehrVehs[19] = AddStaticVehicleEx(432,114.6975,1864.8455,17.8206,270.1350,43,0,-1); // Army19
BundeswehrVehs[20] = AddStaticVehicleEx(425,203.8635,1972.2069,18.2271,179.9959,43,0,-1); // Army20
BundeswehrVehs[21] = AddStaticVehicleEx(425,205.1799,2005.2438,18.2116,177.1725,43,0,-1); // Army21
BundeswehrVehs[22] = AddStaticVehicleEx(425,219.5427,2011.2043,18.1999,184.2075,43,0,-1); // Army22
BundeswehrVehs[23] = AddStaticVehicleEx(425,221.2639,1974.0493,18.2162,179.1081,43,0,-1); // Army23
BundeswehrVehs[24] = AddStaticVehicleEx(425,249.4425,2003.2073,18.2084,169.9641,43,0,-1); // Army24
BundeswehrVehs[25] = AddStaticVehicleEx(425,249.9344,2038.4060,18.2272,162.8991,43,0,-1); // Army25
BundeswehrVehs[26] = AddStaticVehicleEx(548,354.9335,1911.0458,19.3232,254.5686,43,0,-1); // Army26
BundeswehrVehs[27] = AddStaticVehicleEx(548,367.9274,1952.5334,19.3156,262.8843,43,0,-1); // Army27
BundeswehrVehs[28] = AddStaticVehicleEx(548,364.0716,1983.2133,19.3297,281.2762,43,0,-1); // Army28
BundeswehrVehs[29] = AddStaticVehicleEx(520,274.4869,2023.6078,18.6261,273.9904,43,0,-1); // Army29
BundeswehrVehs[30] = AddStaticVehicleEx(520,274.6723,1989.7521,18.5850,273.8910,43,0,-1); // Army30
BundeswehrVehs[31] = AddStaticVehicleEx(520,276.9910,1956.2892,18.5908,265.8262,43,0,-1); // Army31
BundeswehrVehs[32] = AddStaticVehicleEx(520,312.0665,2057.0120,18.5801,176.0537,43,0,-1); // Army32
BundeswehrVehs[33] = AddStaticVehicleEx(497,202.3565,1884.6071,17.8218,176.9188,43,0,-1); // Army33
BundeswehrVehs[34] = AddStaticVehicleEx(497,225.6320,1883.0569,17.8178,176.1302,43,0,-1); // Army34
BundeswehrVehs[35] = AddStaticVehicleEx(522,157.7503,1899.0032,18.1747,270.7683,43,0,-1); // Army35
BundeswehrVehs[36] = AddStaticVehicleEx(522,157.8088,1903.7891,18.2647,269.1062,43,0,-1); // Army36
BundeswehrVehs[37] = AddStaticVehicleEx(522,157.5676,1908.3186,18.3200,268.4628,43,0,-1); // Army37
BundeswehrVehs[38] = AddStaticVehicleEx(522,157.9284,1901.0977,18.2187,273.1813,43,0,-1); // Army38
BundeswehrVehs[39] = AddStaticVehicleEx(490,130.9658,1912.8987,18.9678,271.4746,43,0,-1); // Army39
BundeswehrVehs[40] = AddStaticVehicleEx(490,139.2630,1912.7316,18.9622,270.5470,43,0,-1); // Army40
BundeswehrVehs[41] = AddStaticVehicleEx(490,148.4563,1912.8279,18.9685,270.5387,43,0,-1); // Army41
BundeswehrVehs[42] = AddStaticVehicleEx(490,226.3683,1926.6620,17.7690,179.4507,43,0,-1); // Army42


/*	BundeswehrVehs[1] = AddStaticVehicleEx(432,2737.2458,-2389.6580,13.6439,179.1322,0,0,-1); // Rhino1
	BundeswehrVehs[2] = AddStaticVehicleEx(432,2744.5142,-2389.6484,13.6444,175.8271,0,0,-1); // Rhino2
	BundeswehrVehs[3] = AddStaticVehicleEx(432,2751.7183,-2389.5701,13.6574,180.7952,0,0,-1); // Rhino3
	BundeswehrVehs[4] = AddStaticVehicleEx(522,2728.8013,-2415.8491,13.2030,354.3741,86,86,-1); // NRG1
	BundeswehrVehs[5] = AddStaticVehicleEx(522,2730.3091,-2415.7444,13.1939,356.2791,86,86,-1); // NRG2
	BundeswehrVehs[6] = AddStaticVehicleEx(522,2731.7327,-2415.4636,13.2009,354.4301,86,86,-1); // NRG3
	BundeswehrVehs[7] = AddStaticVehicleEx(470,2774.2336,-2416.4893,13.6355,88.0875,0,0,-1); // Patriot1
	BundeswehrVehs[8] = AddStaticVehicleEx(470,2774.1692,-2420.0349,13.6378,91.8233,0,0,-1); // Patriot2
	BundeswehrVehs[9] = AddStaticVehicleEx(470,2774.1606,-2457.6785,13.6295,88.3520,0,0,-1); // Patriot3
	BundeswehrVehs[10] = AddStaticVehicleEx(470,2774.0698,-2454.0437,13.6289,89.8100,0,0,-1); // Patriot4
	BundeswehrVehs[11] = AddStaticVehicleEx(430,2762.4053,-2585.9204,-0.4484,272.8983,0,0,-1); // Boat1
	BundeswehrVehs[12] = AddStaticVehicleEx(430,2764.3721,-2593.2529,-0.1870,280.5428,0,0,-1); // boat2
	BundeswehrVehs[13] = AddStaticVehicleEx(425,2635.5564,-2797.1589,4.6854,268.9140,0,0,-1); // Hunter1
	BundeswehrVehs[14] = AddStaticVehicleEx(425,2637.7930,-2757.1907,4.6973,270.2899,0,0,-1); // Hunter2
	BundeswehrVehs[15] = AddStaticVehicleEx(520,2644.1292,-2662.4229,2.8576,235.8590,0,0,-1); // Hydra1
	BundeswehrVehs[16] = AddStaticVehicleEx(520,2643.7649,-2684.7717,2.8532,295.3568,0,0,-1); // Hydra2
	BundeswehrVehs[17] = AddStaticVehicleEx(520,2642.8521,-2618.6033,2.8566,298.4544,0,0,-1); // Hydra3
	BundeswehrVehs[18] = AddStaticVehicleEx(520,2644.4490,-2592.9634,2.8460,228.7701,0,0,-1); // Hydra4
	BundeswehrVehs[19] = AddStaticVehicleEx(520,2729.8708,-2594.0081,2.8589,86.0228,0,0,-1); // Hydra5
	BundeswehrVehs[20] = AddStaticVehicleEx(520,2728.9028,-2629.3340,2.8620,85.6648,0,0,-1); // Hydra6
	BundeswehrVehs[21] = AddStaticVehicleEx(425,2734.1614,-2660.2822,4.4712,91.6591,0,0,-1); // Hunter3
	BundeswehrVehs[22] = AddStaticVehicleEx(425,2736.1970,-2691.4126,3.7678,92.1930,0,0,-1); // Hunter4*/

	SWATVehs[1] = AddStaticVehicleEx(522,302.9763,-1525.5299,24.4923,53.6977,0,0,-1); // nrg
	SWATVehs[2] = AddStaticVehicleEx(522,302.2856,-1526.6381,24.4988,57.7046,0,0,-1); // nrg
	SWATVehs[3] = AddStaticVehicleEx(522,301.4875,-1527.7684,24.4930,58.2771,0,0,-1); // nrg
	SWATVehs[4] = AddStaticVehicleEx(560,300.1358,-1490.5785,24.2989,233.0268,0,0,-1); // sultan
	SWATVehs[5] = AddStaticVehicleEx(560,303.7649,-1486.3376,24.2993,235.3845,0,0,-1); // sultan
	SWATVehs[6] = AddStaticVehicleEx(560,306.7458,-1481.6163,24.2988,235.4238,0,0,-1); // sultan
	SWATVehs[7] = AddStaticVehicleEx(427,300.7099,-1504.3654,24.7291,233.9114,0,0,-1); // enforcer
	SWATVehs[8] = AddStaticVehicleEx(427,297.1801,-1509.4911,24.7272,234.5251,0,0,-1); // enforcer
	SWATVehs[9] = AddStaticVehicleEx(490,294.4886,-1513.7592,24.7195,233.7035,0,0,-1); // ranger
	SWATVehs[10] = AddStaticVehicleEx(490,291.0736,-1518.2487,24.7217,232.8521,0,0,-1); // ranger
	SWATVehs[11] = AddStaticVehicleEx(490,287.7043,-1522.5789,24.7212,235.5041,0,0,-1); // ranger
	SWATVehs[12] = AddStaticVehicleEx(541,290.9189,-1544.8530,24.2185,54.2888,0,0,-1); // bullet
	SWATVehs[13] = AddStaticVehicleEx(451,294.3577,-1539.5653,24.3008,55.2404,0,0,-1); // turismo
	SWATVehs[14] = AddStaticVehicleEx(451,297.3305,-1534.9963,24.3002,53.8374,0,0,-1); // turismo
	SWATVehs[15] = AddStaticVehicleEx(487,300.7899,-1542.3458,76.7166,253.8195,0,0,-1); // Heli
	SWATVehs[16] = AddStaticVehicleEx(487,322.0744,-1501.8093,76.7421,233.8194,0,0,-1); // heli
	SWATVehs[17] = AddStaticVehicleEx(447,345.8451,-1475.4093,76.5507,115.8778,1,1,-1); // SWAT NEW
	SWATVehs[18] = AddStaticVehicleEx(447,352.4962,-1484.5940,76.5690,121.2331,1,1,-1); // SWAT NEW
	SWATVehs[19] = AddStaticVehicleEx(548,335.0435,-1489.7703,78.0900,221.5456,1,1,-1); // SWAT NEW


	oAmtVehs[1] = AddStaticVehicleEx(525,892.8699,-1207.4315,16.8523,178.7146,3,3,-1); // O-amt Abschlepper
	oAmtVehs[2] = AddStaticVehicleEx(525,884.6513,-1207.4739,16.8402,176.4355,3,3,-1); // O-amt Abschlepper
	oAmtVehs[3] = AddStaticVehicleEx(525,875.2018,-1207.5872,16.8622,177.3748,3,3,-1); // O-amt Abschlepper
	oAmtVehs[4] = AddStaticVehicleEx(525,901.6936,-1207.0387,16.8542,181.0052,3,3,-1); // O-amt Abschlepper
	oAmtVehs[5] = AddStaticVehicleEx(525,867.3196,-1207.4540,16.8585,178.8739,3,3,-1); // O-amt Abschlepper
	oAmtVehs[6] = AddStaticVehicleEx(469,894.7902,-1283.8268,23.0978,359.1290,3,3,-1); // o-amt heli
	oAmtVehs[7] = AddStaticVehicleEx(417,879.5281,-1283.7769,23.1751,355.0039,3,3,-1); // o-amt heli
	oAmtVehs[10] = AddStaticVehicleEx(561,926.6434,-1180.8663,16.7810,79.1274,3,3,-1); // o-amt kombi
	oAmtVehs[11] = AddStaticVehicleEx(561,926.6740,-1177.0825,16.7804,82.0636,3,3,-1); // o-amt kombi
	oAmtVehs[12] = AddStaticVehicleEx(561,926.9283,-1173.4576,16.7812,82.3755,3,3,-1); // o-amt kombi
	oAmtVehs[13] = AddStaticVehicleEx(579,918.1020,-1166.5773,16.9606,184.8403,3,3,-1); // o-amt jeep
	oAmtVehs[14] = AddStaticVehicleEx(579,914.1715,-1166.2671,16.8911,183.1006,3,3,-1); // o-amt jeep
	oAmtVehs[15] = AddStaticVehicleEx(525,2521.8899,-2117.0117,13.4145,358.7617,3,3,-1); // O-amt Abschlepper
	oAmtVehs[16] = AddStaticVehicleEx(443,855.7622,-1286.2220,14.5712,269.6153,3,3,-1); // o-amt
	oAmtVehs[17] = AddStaticVehicleEx(443,855.7868,-1294.4586,14.2801,265.9629,3,3,-1); // o-amt
	oAmtVehs[18] = AddStaticVehicleEx(443,855.3879,-1302.7372,14.2751,271.7533,3,3,-1); // o-amt
	oAmtVehs[19] = AddStaticVehicleEx(560,926.5407,-1185.0851,16.6817,77.2804,3,3,-1); // Sultan1

	MedicVehs[1] = AddStaticVehicleEx(416,2007.8511,-1412.2158,17.1417,137.9465,3,1,-1); // KW
	MedicVehs[2] = AddStaticVehicleEx(416,2013.2157,-1412.5448,17.1420,135.5473,3,1,-1); // KW
	MedicVehs[3] = AddStaticVehicleEx(416,2018.4023,-1412.1364,17.1414,140.2558,3,1,-1); // KW
	MedicVehs[4] = AddStaticVehicleEx(416,2039.3420,-1414.7124,17.2285,128.0960,3,1,-1); // KW
	MedicVehs[5] = AddStaticVehicleEx(416,2039.9087,-1418.9587,17.2880,125.5415,3,1,-1); // KW
	MedicVehs[6] = AddStaticVehicleEx(416,2039.7993,-1423.9288,17.2281,122.0320,3,1,-1); // KW
	MedicVehs[7] = AddStaticVehicleEx(563,2065.1958,-1430.3556,49.0427,91.4199,3,1,-1); // KH
	MedicVehs[8] = AddStaticVehicleEx(563,2064.3223,-1416.1737,49.0372,88.2369,3,1,-1); // KW


//*****************************************************************************************************************



//***************************************Normale Fraktionen*******************************************************

	NewsVehs[0] = AddStaticVehicleEx(582,1667.87219238,-1694.86572266,15.68627167,88.72509766,99,1,-1); //Newsvan
	NewsVehs[1] = AddStaticVehicleEx(582,1667.73779297,-1699.59436035,15.76437473,88.08996582,99,1,-1); //Newsvan
	NewsVehs[2] = AddStaticVehicleEx(582,1667.60681152,-1704.93151855,15.76437473,86.38500977,99,1,-1); //Newsvan
	NewsVehs[3] = AddStaticVehicleEx(582,1667.51721191,-1710.20227051,15.76437473,89.79504395,99,1,-1); //Newsvan
	NewsVehs[4] = AddStaticVehicleEx(586,1646.14538574,-1707.74316406,15.20637512,277.84997559,99,1,-1); //Wayfarer
	NewsVehs[5] = AddStaticVehicleEx(586,1645.92736816,-1705.13037109,15.20637512,276.41003418,99,1,-1); //Wayfarer
	NewsVehs[6] = AddStaticVehicleEx(586,1645.76745605,-1702.38928223,15.20637512,276.11499023,99,1,-1); //Wayfarer
	NewsVehs[7] = AddStaticVehicleEx(488,1654.61254883,-1638.05859375,84.04624939,180.86492920,99,1,-1); //News Chopper

FahrschulVehs[0] = AddStaticVehicleEx(593,2097.0701,-2416.6765,14.0179,175.8843,1,1,-1); // Heli fahrschule
FahrschulVehs[2] = AddStaticVehicleEx(593,2128.3645,-2416.6174,14.0091,178.7279,1,1,-1); // Heli fahrschule
FahrschulVehs[3] = AddStaticVehicleEx(522,1196.6754,-1827.9686,12.9719,273.4069,1,1,-1); // Fahrschule
FahrschulVehs[4] = AddStaticVehicleEx(522,1196.6359,-1830.7197,12.9690,274.5412,1,1,-1); // Fahrschule
FahrschulVehs[5] = AddStaticVehicleEx(522,1196.4773,-1833.0657,12.9629,276.3485,1,1,-1); // Fahrschule
FahrschulVehs[6] = AddStaticVehicleEx(522,1196.6482,-1835.5603,12.9721,269.6573,1,1,-1); // Fahrschule
FahrschulVehs[7] = AddStaticVehicleEx(560,1279.8694,-1797.9086,13.0922,90.5593,1,1,-1); // Fahrschule
FahrschulVehs[8] = AddStaticVehicleEx(560,1279.8627,-1803.7477,13.0884,92.2675,1,1,-1); // Fahrschule
FahrschulVehs[9] = AddStaticVehicleEx(560,1279.7800,-1808.8716,13.0895,91.7029,1,1,-1); // Fahrschule
FahrschulVehs[10] = AddStaticVehicleEx(560,1279.8365,-1813.9843,13.0894,91.9531,1,1,-1); // Fahrschule
FahrschulVehs[11] = AddStaticVehicleEx(560,1279.9950,-1818.8690,13.0904,90.9880,1,1,-1); // Fahrschule
FahrschulVehs[12] = AddStaticVehicleEx(403,1172.6746,-1808.8894,14.0398,180.0402,1,1,-1); // Fahrschule
FahrschulVehs[13] = AddStaticVehicleEx(561,1172.6206,-1818.2988,13.1946,182.2011,1,1,-1); // Fahrschule
FahrschulVehs[14] = AddStaticVehicleEx(561,1181.8529,-1818.1106,13.2131,181.4462,1,1,-1); // Fahrschule
FahrschulVehs[15] = AddStaticVehicleEx(403,1181.9707,-1809.0579,14.0073,178.9560,1,1,-1); // Fahrschule
FahrschulVehs[16] = AddStaticVehicleEx(450,1182.1729,-1798.4926,14.0058,178.4653,1,1,-1); // abschlepper
FahrschulVehs[17] = AddStaticVehicleEx(450,1172.6664,-1798.3236,14.0633,179.0140,1,1,-1); // abschlepper

	TaxiVehs[0] = AddStaticVehicleEx(420,1014.4534,-1364.9072,13.1455,355.2306,6,6,-1); // Taxi1
	TaxiVehs[1] = AddStaticVehicleEx(420,1009.2403,-1365.4026,13.1237,2.3154,6,6,-1); // Taxi2
	TaxiVehs[2] = AddStaticVehicleEx(420,1003.9758,-1365.3700,13.0887,0.0384,6,6,-1); // Taxi3
	TaxiVehs[3] = AddStaticVehicleEx(420,999.3917,-1365.4232,13.0736,0.6059,6,6,-1); // Taxi4
	TaxiVehs[4] = AddStaticVehicleEx(420,991.3071,-1359.2081,13.1459,311.0711,6,6,-1); // Taxi6
	TaxiVehs[5] = AddStaticVehicleEx(420,991.3022,-1353.4063,13.1446,310.3434,6,6,-1); // Taxi7
	TaxiVehs[6] = AddStaticVehicleEx(420,990.9109,-1347.1440,13.1486,318.3666,6,6,-1); // Taxi8


//******************************************************************************************************************+
//********************************Gang Autos*************************************************************************
	BallasVehs[0] = AddStaticVehicleEx(487,1130.3489,-1232.8062,25.4779,270.9594,22,22,-1); // BHELI
	BallasVehs[1] = AddStaticVehicleEx(522,1096.6802,-1226.1895,15.3926,176.5961,22,22,-1); // BNRG1
	BallasVehs[2] = AddStaticVehicleEx(522,1093.0173,-1226.2928,15.3929,178.0795,22,22,-1); // BNRG2
	BallasVehs[3] = AddStaticVehicleEx(541,1100.2496,-1226.2849,15.4452,179.0067,22,22,-1); // BBullet
	BallasVehs[4] = AddStaticVehicleEx(451,1103.9122,-1226.3518,15.5333,179.8085,22,22,-1); // Bturismo
	BallasVehs[5] = AddStaticVehicleEx(468,1107.6508,-1225.9004,15.4963,180.1771,22,22,-1); // BSanchez1
	BallasVehs[6] = AddStaticVehicleEx(468,1111.4493,-1225.9635,15.4895,176.8613,22,22,-1); // BSanchez2
	BallasVehs[7] = AddStaticVehicleEx(409,1119.1102,-1194.2837,17.4261,183.0768,22,22,-1); // Bstrech
	BallasVehs[8] = AddStaticVehicleEx(560,1086.1062,-1240.5070,15.5325,267.1459,22,22,-1); // BSultan1
	BallasVehs[9] = AddStaticVehicleEx(560,1085.7057,-1237.2957,15.5304,265.8150,22,22,-1); // BSultan2
    BallasVehs[10] = AddStaticVehicleEx(487,1129.7396,-1220.6327,25.5554,269.7712,22,22,-1); // Ballas Heli
    BallasVehs[11] = AddStaticVehicleEx(487,1130.9036,-1239.9146,25.4442,277.6891,22,22,-1); // Ballas Heli
    BallasVehs[12] = AddStaticVehicleEx(579,1106.6842,-1249.9220,15.7504,359.7174,22,22,-1); // Ballas new
    BallasVehs[13] = AddStaticVehicleEx(482,1108.8782,-1192.5826,18.2842,178.7221,22,22,-1); // Ballas new
    BallasVehs[14] = AddStaticVehicleEx(482,1112.6044,-1193.4086,18.1900,174.7726,22,22,-1); // Ballas new



AddStaticVehicle(408,1649.4597,-1896.3094,14.1088,355.8829,1,1); // Müllman
AddStaticVehicle(408,1654.5302,-1896.3311,14.0901,356.3140,1,1); // Müllman
AddStaticVehicle(408,1659.5114,-1896.6703,14.1082,357.9327,1,1); // Müllman
AddStaticVehicle(408,1664.6948,-1896.7588,14.1014,359.0865,1,1); // Müllman
AddStaticVehicle(408,1669.6338,-1896.9474,14.0891,1.0387,1,1); // Müllman

WheelVehs[1] = AddStaticVehicleEx(560,-519.3710,-471.6384,25.2289,179.3664,0,0,-1); // Wheelman Auto
WheelVehs[2] = AddStaticVehicleEx(560,-524.4492,-471.5447,25.2294,179.8406,0,0,-1); // Wheelman Auto
WheelVehs[3] = AddStaticVehicleEx(560,-529.5126,-471.3403,25.2261,177.6266,0,0,-1); // Wheelman Auto
WheelVehs[4] = AddStaticVehicleEx(560,-534.5628,-471.2960,25.2237,178.7271,0,0,-1); // Wheelman Auto
WheelVehs[5] = AddStaticVehicleEx(411,-539.6052,-471.5374,25.2470,178.0320,0,0,-1); // Wheelman Auto
WheelVehs[6] = AddStaticVehicleEx(411,-544.4660,-471.4679,25.2483,178.7984,0,0,-1); // Wheelman Auto
WheelVehs[7] = AddStaticVehicleEx(411,-549.6530,-471.2931,25.2483,180.9716,0,0,-1); // Wheelman Auto
WheelVehs[8] = AddStaticVehicleEx(411,-554.3881,-471.0388,25.2482,178.4966,0,0,-1); // Wheelman Auto
WheelVehs[9] = AddStaticVehicleEx(402,-559.7410,-471.4951,25.3556,176.4303,0,0,-1); // Wheelman Auto
WheelVehs[10] = AddStaticVehicleEx(402,-564.5344,-471.3498,25.3581,179.8164,0,0,-1); // Wheelman Auto
WheelVehs[11] = AddStaticVehicleEx(541,-569.5508,-471.2506,25.1492,176.7658,0,0,-1); // Wheelman Auto
WheelVehs[12] = AddStaticVehicleEx(541,-574.4899,-471.1797,25.1492,178.2151,0,0,-1); // Wheelman Auto
WheelVehs[13] = AddStaticVehicleEx(487,-610.0195,-475.3119,25.6991,272.2559,0,0,-1); // Wheelman Auto
WheelVehs[14] = AddStaticVehicleEx(487,-609.2831,-488.7627,25.7001,271.8036,0,0,-1); // Wheelman Auto#
WheelVehs[15] = AddStaticVehicleEx(522,-543.4792,-505.2285,25.0927,359.3938,0,0,-1); // Wheelman Auto#
WheelVehs[16] = AddStaticVehicleEx(522,-546.2871,-505.1423,25.0933,359.1215,0,0,-1); // Wheelman Auto#
WheelVehs[17] = AddStaticVehicleEx(522,-548.9373,-505.2286,25.0852,5.0103,0,0,-1); // Wheelman Auto#
WheelVehs[18] = AddStaticVehicleEx(522,-551.3858,-505.2770,25.0934,4.7349,0,0,-1); // Wheelman Auto#
WheelVehs[19] = AddStaticVehicleEx(470,-529.8446,-503.0931,24.8384,358.3066,1,1,-1); // Wheelman Auto#
WheelVehs[20] = AddStaticVehicleEx(470,-519.8710,-503.4611,24.8420,4.5299,1,1,-1); // Wheelman Auto#
WheelVehs[21] = AddStaticVehicleEx(470,-558.2704,-502.3264,24.8061,358.9436,1,1,-1); // Wheelman Auto#

/*	WheelVehs[0] = AddStaticVehicleEx(487,1808.3649,-2024.7709,18.2388,89.9417,0,0,-1); // heli
	WheelVehs[1] = AddStaticVehicleEx(487,1808.6818,-2038.1980,18.2361,87.9829,0,0,-1); // heli
	WheelVehs[2] = AddStaticVehicleEx(560,1807.0530,-2030.5121,13.2383,89.6148,0,0,-1); // sultan
	WheelVehs[3] = AddStaticVehicleEx(560,1807.4866,-2023.3036,13.2394,91.8751,0,0,-1); // sultan
	WheelVehs[4] = AddStaticVehicleEx(560,1807.3529,-2037.7891,13.2376,88.4574,0,0,-1); // sultan
	WheelVehs[5] = AddStaticVehicleEx(560,1806.7698,-2045.3582,13.2619,90.8340,0,0,-1); // sultan
	WheelVehs[6] = AddStaticVehicleEx(522,1789.2054,-2055.2700,13.1515,91.7007,0,0,-1); // nrg
	WheelVehs[7] = AddStaticVehicleEx(522,1788.6191,-2060.8213,13.1552,92.6349,0,0,-1); // nrg
	WheelVehs[8] = AddStaticVehicleEx(522,1788.3612,-2057.6970,13.1436,82.6366,0,0,-1); // nrg
	WheelVehs[9] = AddStaticVehicleEx(451,1768.8453,-2031.9010,13.3327,272.5673,0,0,-1); // turismo
	WheelVehs[10] = AddStaticVehicleEx(541,1768.3042,-2049.2876,13.3315,271.4666,0,0,-1); // bullet*/


	GroveVehs[0] =  AddStaticVehicleEx(560,2516.3828,-1672.2086,13.6008,59.2683,86,86,-1); // Sultan 1
	GroveVehs[1] =	AddStaticVehicleEx(560,2504.7471,-1680.6157,13.1672,313.6806,86,86,-1); // Sultan 2
	GroveVehs[2] =	AddStaticVehicleEx(522,2512.2380,-1687.2024,13.1452,47.7534,86,86,-1); // NRG1
	GroveVehs[3] =	AddStaticVehicleEx(522,2509.6218,-1688.5973,13.1140,48.9373,86,86,-1); // NRG2
	GroveVehs[4] =	AddStaticVehicleEx(451,2491.4182,-1684.0216,13.1254,269.1117,86,86,-1); // Turismo
	GroveVehs[5] =	AddStaticVehicleEx(541,2486.4944,-1654.0997,13.0229,88.8405,86,86,-1); // Bullet
	GroveVehs[6] =	AddStaticVehicleEx(487,2531.2183,-1677.5094,20.1066,92.5026,86,86,-1); // Heli
	GroveVehs[7] =	AddStaticVehicleEx(468,2518.3711,-1664.3739,13.8233,92.2982,86,86,-1); // Sanchez 1
	GroveVehs[8] =	AddStaticVehicleEx(468,2518.4358,-1667.6611,13.9745,90.1251,86,86,-1); // Sanchez2
	GroveVehs[9] =	AddStaticVehicleEx(409,2473.5012,-1696.6276,13.3146,1.1739,86,86,-1); // Strech



	AztecasVehs[0] = AddStaticVehicleEx(560,2790.87451172,-1942.84558105,13.49994946,90.00000000,2,1,-1); //Alpha
	AztecasVehs[1] = AddStaticVehicleEx(560,2791.24633789,-1946.40344238,13.48687458,90.00000000,2,1,-1); //Buffalo
	AztecasVehs[2] = AddStaticVehicleEx(468,2785.49560547,-1923.14245605,13.24663544,115.99914551,2,1,-1); //BF-400
	AztecasVehs[3] = AddStaticVehicleEx(468,2785.38476562,-1921.65930176,13.24663544,115.99914551,2,1,-1); //BF-400
	AztecasVehs[4] = AddStaticVehicleEx(567,2774.48071289,-1953.71875000,13.25717926,180.00000000,2,1,-1); //Savanna
	AztecasVehs[5] = AddStaticVehicleEx(567,2783.21044922,-1970.15441895,13.35185051,90.00000000,2,1,-1); //Sultan
	AztecasVehs[6] = AddStaticVehicleEx(507,2757.19506836,-1937.57067871,13.35390282,180.00000000,2,1,-1); //Sultan



	VagosVehs[0] = AddStaticVehicleEx(567,2498.4028,-1063.3997,70.0468,358.2947,6,6,-1); // Vagos
VagosVehs[1] = AddStaticVehicleEx(567,2502.3904,-1033.5389,69.3206,177.4342,6,6,-1); // Vagos
VagosVehs[2] = AddStaticVehicleEx(576,2507.9106,-1034.8917,69.1112,175.2104,6,6,-1); // Vagos
VagosVehs[3] = AddStaticVehicleEx(560,2514.8464,-1035.1346,69.1966,192.9676,6,6,-1); // Vagos
VagosVehs[4] = AddStaticVehicleEx(560,2519.0654,-1035.2087,69.2080,179.8336,6,6,-1); // Vagos
VagosVehs[5] = AddStaticVehicleEx(560,2522.7683,-1035.2745,69.2209,180.7252,6,6,-1); // Vagos
VagosVehs[6] = AddStaticVehicleEx(480,2534.8184,-1035.1521,69.3813,179.9792,6,6,-1); // Vagos
VagosVehs[7] = AddStaticVehicleEx(474,2541.5132,-1034.8864,69.2918,130.5732,6,6,-1); // Vagos
VagosVehs[8] = AddStaticVehicleEx(576,2550.0352,-1035.3036,69.1915,134.7340,6,6,-1); // Vagos
VagosVehs[9] = AddStaticVehicleEx(474,2544.3152,-1060.7524,69.3313,37.3631,6,6,-1); // Vagos
VagosVehs[10] = AddStaticVehicleEx(535,2530.3152,-1060.4264,69.3607,5.4354,6,6,-1); // Vagos
VagosVehs[11] = AddStaticVehicleEx(535,2509.1111,-1060.4816,69.2156,359.7990,6,6,-1); // Vagos
VagosVehs[12] = AddStaticVehicleEx(487,2525.2014,-1065.9066,73.3422,0.2753,6,6,-1); // heli


//*******************************************************************************************************************



//*********************************************Mafien****************************************************************
//Rifavehs
	RifaVehs[1] = AddStaticVehicleEx(409,2204.1873,-2299.7249,14.5647,132.6939,12,12,-1); // Rifa Limosine
	RifaVehs[2] = AddStaticVehicleEx(560,2166.7593,-2273.8132,13.0796,226.1963,12,12,-1); // Rifa Sultan
	RifaVehs[3] = AddStaticVehicleEx(560,2173.7051,-2267.2866,13.0864,226.8839,12,12,-1); // Rifa Sultan
	RifaVehs[4] = AddStaticVehicleEx(580,2196.7297,-2233.5764,13.3431,222.8578,12,12,-1); // Rifa Staffird
	RifaVehs[5] = AddStaticVehicleEx(580,2200.3828,-2230.0957,13.3424,224.9126,12,12,-1); // Rifa Staffird
	RifaVehs[6] = AddStaticVehicleEx(400,2204.4553,-2225.9126,13.6415,225.1042,12,12,-1); // Rifa Lnadstakler
	RifaVehs[7] = AddStaticVehicleEx(400,2208.7129,-2221.6194,13.6416,225.7829,12,12,-1); // Rifa Lnadstakler
	RifaVehs[8] = AddStaticVehicleEx(461,2191.3054,-2251.4565,13.0933,227.2975,12,12,-1); // Rifa PCJ
	RifaVehs[9] = AddStaticVehicleEx(461,2189.7854,-2253.4819,13.0661,225.1039,12,12,-1); // Rifa PCJ
	RifaVehs[10] = AddStaticVehicleEx(461,2188.2083,-2255.1069,13.0349,225.2727,12,12,-1); // Rifa PCJ
	RifaVehs[11] = AddStaticVehicleEx(487,2168.1909,-2277.2583,21.2483,229.9466,93,93,-1); // RFHELI
	RifaVehs[12] = AddStaticVehicleEx(451,2193.4883,-2247.0935,13.2431,226.8449,93,93,-1); // RFTUR
	RifaVehs[13] = AddStaticVehicleEx(541,2193.7083,-2236.5271,13.1517,226.3804,93,93,-1); // RFBUL

	FuegosVehs[2] = AddStaticVehicleEx(487,-2105.4294,-188.2000,46.5049,358.8634,13,13,-1); // Fuegos Heli
	FuegosVehs[3] = AddStaticVehicleEx(461,-2145.4084,-176.9458,34.9055,354.2237,13,13,-1); // Fuegos Pcj
	FuegosVehs[4] = AddStaticVehicleEx(461,-2147.4353,-177.1405,34.9052,357.3121,13,13,-1); // Fuegos Pcj
	FuegosVehs[5] = AddStaticVehicleEx(461,-2149.3308,-177.1932,34.9025,357.6123,13,13,-1); // Fuegos Pcj
	FuegosVehs[6] = AddStaticVehicleEx(409,-2105.1658,-176.3618,35.1204,89.1372,13,13,-1); // Fuegos Limosine
	FuegosVehs[7] = AddStaticVehicleEx(541,-2153.4910,-169.8628,35.0436,265.2830,13,13,-1); //Bullet
	FuegosVehs[8] = AddStaticVehicleEx(451,-2152.8254,-164.3465,35.4127,266.9285,13,13,-1); // Turimso
	FuegosVehs[9] = AddStaticVehicleEx(451,-2152.4976,-159.6028,35.4127,267.7151,13,13,-1); // Turismo
	FuegosVehs[10] = AddStaticVehicleEx(560,-2139.1699,-181.7200,35.0236,359.8458,13,13,-1); // Fuegos Sultan
	FuegosVehs[11] = AddStaticVehicleEx(560,-2131.5283,-181.5300,35.0253,354.7406,13,13,-1); // Fuegos Sultan
	FuegosVehs[12] = AddStaticVehicleEx(560,-2135.3450,-181.3458,35.0278,359.2294,13,13,-1); // Fuegos Sultan
	FuegosVehs[13] = AddStaticVehicleEx(579,-2100.3574,-166.6703,35.2541,86.7742,1,1,-1); // Huntley
	FuegosVehs[14] = AddStaticVehicleEx(579,-2100.9094,-163.7231,35.2970,88.3572,1,1,-1); // Huntley
	FuegosVehs[15] = AddStaticVehicleEx(579,-2100.7974,-159.7401,35.2293,88.3570,1,1,-1); // Huntley
	FuegosVehs[16] = AddStaticVehicleEx(413,-2154.8862,-151.1318,35.4000,180.7425,1,1,-1); // Pony
	FuegosVehs[17] = AddStaticVehicleEx(468,-2187.6755,-215.2728,36.1849,303.7567,13,13,-1); // Sanchez 1
    FuegosVehs[18] = AddStaticVehicleEx(468,-2188.2896,-212.0553,36.1848,271.7191,13,13,-1); // Sanchez 2
    FuegosVehs[19] = AddStaticVehicleEx(468,-2188.3906,-210.0442,36.1847,273.6250,13,13,-1); // Sanchez 3


	LCNVehs[1] = AddStaticVehicleEx(487,1670.6237,-1813.5983,36.5096,267.9573,0,0,-1); // LCN Maverick
	LCNVehs[2] = AddStaticVehicleEx(522,1647.1469,-1808.4182,13.1123,113.5611,0,0,-1); // LCN NRG
	LCNVehs[3] = AddStaticVehicleEx(522,1647.0132,-1804.5193,13.1098,108.1520,0,0,-1); // LCN NRG
	LCNVehs[4] = AddStaticVehicleEx(522,1647.3667,-1806.2473,13.1113,105.1011,0,0,-1); // LCN NRG
	LCNVehs[5] = AddStaticVehicleEx(560,1600.4434,-1781.6747,13.2236,262.4383,0,0,-1); // LCN Stafford
	LCNVehs[6] = AddStaticVehicleEx(560,1599.4373,-1792.6785,13.1604,260.1171,0,0,-1); // LCN Stafford
	LCNVehs[7] = AddStaticVehicleEx(579,1600.4601,-1814.0823,13.5268,267.5872,0,0,-1); // LCN Landstalker
	LCNVehs[8] = AddStaticVehicleEx(579,1605.4270,-1825.4545,13.5723,270.4250,0,0,-1); // LCN Landstalker
	LCNVehs[9] = AddStaticVehicleEx(560,1604.4336,-1831.0303,13.1973,270.2901,0,0,-1); // LCN Sultan
	LCNVehs[10] = AddStaticVehicleEx(560,1604.8030,-1837.0638,13.2114,269.7744,0,0,-1); // LCN Sultan
	LCNVehs[11] = AddStaticVehicleEx(487,1670.4144,-1800.2577,36.5091,269.0530,0,0,-1); // heli
	LCNVehs[12] = AddStaticVehicleEx(541,1641.0582,-1840.8899,13.1676,39.0598,0,0,-1); // bullet
	LCNVehs[13] = AddStaticVehicleEx(541,1645.5906,-1839.9191,13.1689,41.6864,0,0,-1); // bullet


	FarmFahrzeug[0] = AddStaticVehicleEx(532,-20.2785,93.0773,4.0884,110.6576,0,0,300); // Farmer
	FarmFahrzeug[1] = AddStaticVehicleEx(532,-56.4781,85.6339,4.0949,248.4950,0,0,300); // Farmer
	FarmFahrzeug[2] = AddStaticVehicleEx(532,-59.5366,76.8864,4.0930,248.6035,0,0,300); // Farmer
	FarmFahrzeug[3] = AddStaticVehicleEx(532,-50.7428,62.5898,4.1000,337.6453,0,0,300); // Farmer
	FarmFahrzeug[4] = AddStaticVehicleEx(532,-59.9553,65.6170,4.0961,338.4916,0,0,300); // Farmer
	FarmFahrzeug[5] = AddStaticVehicleEx(532,-51.1265,94.7157,4.1324,242.1129,0,0,300); // Farmer

	YakuzaVehs[1] = AddStaticVehicleEx(461,-2733.39306641,-293.65460205,6.68511820,47.99926758,36,36,-1); //PCJ-600
	YakuzaVehs[2] = AddStaticVehicleEx(461,-2734.18603516,-294.49234009,6.67787981,47.99926758,36,36,-1); //PCJ-600
	YakuzaVehs[3] = AddStaticVehicleEx(461,-2735.00390625,-295.33181763,6.68346024,47.99926758,36,36,-1); //PCJ-600
	YakuzaVehs[4] = AddStaticVehicleEx(579,-2739.84057617,-297.95373535,7.10259151,48.00000000,36,36,-1); //Huntley
	YakuzaVehs[5] = AddStaticVehicleEx(579,-2742.82543945,-301.21508789,7.10461426,48.00000000,36,36,-1); //Huntley
	YakuzaVehs[6] = AddStaticVehicleEx(480,-2745.49560547,-304.78750610,6.88100195,48.49914551,36,36,-1); //Comet
	YakuzaVehs[7] = AddStaticVehicleEx(480,-2748.28808594,-308.04663086,6.88906240,48.49914551,36,36,-1); //Comet
	YakuzaVehs[8] = AddStaticVehicleEx(409,-2746.78369141,-282.89910889,6.96406221,180.00000000,36,36,-1); //Stretch
	YakuzaVehs[9] = AddStaticVehicleEx(487,-2610.79052734,-306.69570923,23.27444839,80.00000000,36,36,-1); //Maverick
	YakuzaVehs[10] = AddStaticVehicleEx(560,-2734.50708008,-281.69183350,6.84403753,179.99450684,36,36,-1); //Sultan
	YakuzaVehs[11] = AddStaticVehicleEx(560,-2736.93652344,-281.63183594,6.85174131,179.99450684,36,36,-1); //Sultan
	YakuzaVehs[12] = AddStaticVehicleEx(487,-2611.35058594,-243.58285522,19.40463829,110.00000000,36,36,-1); //Maverick
	YakuzaVehs[13] = AddStaticVehicleEx(415,-2724.49511719,-281.75097656,6.88858414,179.99450684,36,36,-1); //Cheetah
	YakuzaVehs[14] = AddStaticVehicleEx(457,-2710.53466797,-305.57107544,6.90938854,45.00000000,36,36,-1); //Caddy


	RMVehs[1] = AddStaticVehicleEx(521,2512.8464,-2116.6331,13.1326,351.7107,1,1,-1); // RM FCR-900
	RMVehs[2] = AddStaticVehicleEx(521,2509.8989,-2116.1318,13.1326,352.3810,1,1,-1); // RM FCR-900
	RMVehs[3] = AddStaticVehicleEx(521,2507.3662,-2115.8423,13.1217,353.8484,1,1,-1); // RM FCR-900
	RMVehs[4] = AddStaticVehicleEx(482,2502.5349,-2116.0972,13.6945,359.0715,1,1,-1); // rm pony
	RMVehs[5] = AddStaticVehicleEx(560,2497.7544,-2116.1191,13.2579,1.2275,1,1,-1); // RM Sultan
	RMVehs[6] = AddStaticVehicleEx(560,2493.4390,-2116.0872,13.2582,1.6407,1,1,-1); // RM Sultan
	RMVehs[7] = AddStaticVehicleEx(560,2489.2258,-2116.1694,13.2598,0.8599,1,1,-1); // RM Sultan
	RMVehs[8] = AddStaticVehicleEx(579,2484.3440,-2115.7229,13.4613,357.6200,1,1,-1); // RM Huntley
	RMVehs[9] = AddStaticVehicleEx(579,2479.8083,-2115.4204,13.4725,2.6491,1,1,-1); // RM Huntley
	RMVehs[10] = AddStaticVehicleEx(411,2475.1675,-2116.9087,13.2739,358.8217,1,1,-1); // RM infernus
	RMVehs[11] = AddStaticVehicleEx(402,2471.2090,-2116.8628,13.3957,1.7182,1,1,-1); // Buffalo
	RMVehs[12] = AddStaticVehicleEx(409,2467.8208,-2116.0244,13.3469,4.1628,1,1,-1); // Rm limo
	RMVehs[13] = AddStaticVehicleEx(409,2464.5449,-2116.1499,13.3277,3.6359,1,1,-1); // Rm limo
	RMVehs[14] = AddStaticVehicleEx(487,2509.7639,-2121.8787,27.4246,0.0591,1,1,-1); // RM MAverick
	RMVehs[15] = AddStaticVehicleEx(487,2491.7334,-2122.1633,27.3513,359.9405,1,1,-1); // RM MAverick

	LSBC[1] = AddStaticVehicleEx(463,-2035.6334,169.6468,28.3759,269.7937,20,20,-1); // Freeway
	LSBC[2] = AddStaticVehicleEx(463,-2035.6276,170.9756,28.4059,269.7998,20,20,-1); // Freeway
	LSBC[3] = AddStaticVehicleEx(463,-2035.6226,172.4673,28.3716,269.8045,20,20,-1); // Freeway
	LSBC[4] = AddStaticVehicleEx(463,-2035.6172,174.1681,28.3926,269.8119,20,20,-1); // Freeway
	LSBC[5] = AddStaticVehicleEx(463,-2035.6097,176.7816,28.4106,269.8056,20,20,-1); // Freeway
	LSBC[6] = AddStaticVehicleEx(463,-2035.6062,177.7893,28.3808,269.7969,20,20,-1); // Freeway
	LSBC[7] = AddStaticVehicleEx(463,-2035.5970,180.4738,28.3965,269.8029,20,20,-1); // Freeway

	RSVehs[1] = AddStaticVehicleEx(560,1219.1819,-1674.5879,11.5043,359.8086,3,1,-1); // RS Sultan
	RSVehs[2] = AddStaticVehicleEx(560,1221.9994,-1674.4268,11.5016,0.0003,3,1,-1); // RS Sultan
	RSVehs[3] = AddStaticVehicleEx(400,1237.8593,-1674.6151,11.8854,359.8473,3,3,-1); // RS Landstalker
	RSVehs[4] = AddStaticVehicleEx(400,1242.7999,-1674.3789,11.8810,0.0281,3,3,-1); // RS Landstalker
	RSVehs[5] = AddStaticVehicleEx(409,1239.1998,-1646.9327,11.5843,269.9387,3,3,-1); // RS Limo
	RSVehs[6] = AddStaticVehicleEx(580,1216.0835,-1658.1497,11.5927,269.9886,3,3,-1); // RS Stafford
	RSVehs[7] = AddStaticVehicleEx(580,1216.0441,-1661.8872,11.5929,268.6573,3,3,-1); // RS Stafford
	RSVehs[8] = AddStaticVehicleEx(522,1214.6466,-1649.8140,11.3839,246.3854,3,3,-1); // RS PCJ
	RSVehs[9] = AddStaticVehicleEx(522,1214.9814,-1648.3562,11.3759,238.4720,3,3,-1); // RS PCJ
	RSVehs[10] = AddStaticVehicleEx(522,1214.2659,-1651.4980,11.3825,240.2404,3,3,-1); // RS PCJ
	RSVehs[11] = AddStaticVehicleEx(487,1247.3971,-1671.4408,38.2880,90.0040,3,3,-1); // RS Maverick


//*********************************************************************************************************************



//**********************************************Organisationen Autos***************************************************

	HitmanVehs[1] = AddStaticVehicleEx(487,2141.6362,-1823.3567,19.0453,271.4308,0,0,-1); // Heli
	HitmanVehs[2] = AddStaticVehicleEx(487,2143.1404,-1773.9198,18.7363,270.3177,0,0,-1); // Heli
	HitmanVehs[3] = AddStaticVehicleEx(411,2162.5964,-1793.9319,12.9539,177.7564,0,0,-1); // 1
	HitmanVehs[4] = AddStaticVehicleEx(411,2165.8101,-1794.0240,12.9560,179.1572,0,0,-1); // 2
	HitmanVehs[5] = AddStaticVehicleEx(411,2168.5010,-1794.1312,12.9503,181.3496,0,0,-1); // 1
	HitmanVehs[6] = AddStaticVehicleEx(402,2172.1589,-1793.9498,13.1887,179.2325,0,0,-1); // 1
	HitmanVehs[7] = AddStaticVehicleEx(402,2187.6484,-1807.0620,13.2203,1.1855,0,0,-1); // 1
	HitmanVehs[8] = AddStaticVehicleEx(402,2183.1462,-1807.4945,13.2190,0.0763,0,0,-1); // 1
	HitmanVehs[9] = AddStaticVehicleEx(560,2178.9685,-1807.6077,13.0526,2.0526,0,0,-1); // 1
	HitmanVehs[10] = AddStaticVehicleEx(560,2175.4358,-1807.5959,13.0806,0.3830,0,0,-1); // 1
	HitmanVehs[11] = AddStaticVehicleEx(560,2171.4531,-1807.7738,13.0802,0.3949,0,0,-1); // 1
	HitmanVehs[12] = AddStaticVehicleEx(541,2167.0935,-1807.5175,12.9715,0.4239,0,0,-1); // 1
	HitmanVehs[13] = AddStaticVehicleEx(541,2162.6260,-1807.2223,12.9985,359.8359,0,0,-1); // 1
	HitmanVehs[14] = AddStaticVehicleEx(541,2158.4600,-1807.0844,12.9946,357.1800,0,0,-1); // 1
	HitmanVehs[15] = AddStaticVehicleEx(522,2152.9111,-1792.3329,13.0782,267.5252,0,0,-1); // 1
	HitmanVehs[16] = AddStaticVehicleEx(522,2152.8914,-1790.8663,13.0759,274.3680,0,0,-1); // 1
	HitmanVehs[17] = AddStaticVehicleEx(522,2153.0208,-1789.3008,13.0752,268.3280,0,0,-1); // 1
	HitmanVehs[18] = AddStaticVehicleEx(522,2153.0952,-1787.5492,13.0712,267.1247,0,0,-1); // 1



AddStaticVehicleEx(462,476.0053,-1502.9269,20.1664,259.9388,1,1,-1); // NoobRoller
AddStaticVehicleEx(462,476.7347,-1500.5853,20.1175,263.9020,1,1,-1); // NoobRoller1
AddStaticVehicleEx(462,476.8246,-1498.8116,20.0801,264.8165,1,1,-1); // NoobRoller2
AddStaticVehicleEx(462,476.7999,-1502.0811,20.1478,265.6341,1,1,-1); // NoobRoller3
AddStaticVehicleEx(462,477.3418,-1497.6282,20.0550,268.9941,1,1,-1); // NoobRoller4
AddStaticVehicleEx(462,477.4732,-1495.7882,20.0169,270.2082,1,1,-1); // NoobRoller5
AddStaticVehicleEx(462,477.2457,-1492.0172,19.9192,282.7068,1,1,-1); // NoobRoller6
AddStaticVehicleEx(462,476.8328,-1490.6268,19.8729,281.0433,1,1,-1); // NoobRoller7
AddStaticVehicleEx(462,476.7686,-1489.2740,19.8270,279.6713,1,1,-1); // NoobRoller8
AddStaticVehicleEx(462,476.2954,-1486.8748,19.7397,283.7249,1,1,-1); // NoobRoller9
AddStaticVehicleEx(462,476.0085,-1485.5126,19.6821,283.4615,1,1,-1); // NoobRoller10
AddStaticVehicleEx(462,476.6497,-1506.2019,20.1916,246.9294,1,1,-1); // NoobRoller11
AddStaticVehicleEx(462,475.8868,-1507.4946,20.1821,257.4241,1,1,-1); // NoobRoller12
AddStaticVehicleEx(462,475.4652,-1508.8688,20.1705,254.1375,1,1,-1); // NoobRoller13
AddStaticVehicleEx(462,474.6058,-1510.6240,20.1562,252.4211,1,1,-1); // NoobRoller14
AddStaticVehicleEx(462,474.0922,-1512.1862,20.1297,265.1374,1,1,-1); // NoobRoller15


TerrorVehs[1] = AddStaticVehicleEx(487,-313.1847,1750.7062,43.0085,0.0005,1,1,-1); // Terror
TerrorVehs[2] = AddStaticVehicleEx(522,-302.2701,1775.2054,42.2511,268.3170,1,1,-1); // Terror
TerrorVehs[3] = AddStaticVehicleEx(522,-302.3763,1772.6125,42.2540,266.7061,1,1,-1); // Terror
TerrorVehs[4] = AddStaticVehicleEx(522,-302.4188,1770.0967,42.2573,264.8620,1,1,-1); // Terror
TerrorVehs[5] = AddStaticVehicleEx(411,-301.7005,1765.4866,42.4152,268.5578,1,1,-1); // Terror
TerrorVehs[6] = AddStaticVehicleEx(411,-301.7909,1760.5791,42.4139,268.6897,1,1,-1); // Terror
TerrorVehs[7] = AddStaticVehicleEx(411,-301.8947,1755.6283,42.4152,270.4697,1,1,-1); // Terror
TerrorVehs[8] = AddStaticVehicleEx(545,-302.3505,1750.6707,42.4983,268.3742,1,1,-1); // Terror
TerrorVehs[9] = AddStaticVehicleEx(545,-302.2796,1745.8442,42.4992,268.9339,1,1,-1); // Terror
TerrorVehs[10] = AddStaticVehicleEx(541,-290.7181,1746.5452,42.3140,88.9914,1,1,-1); // Terror
TerrorVehs[11] = AddStaticVehicleEx(541,-290.6518,1751.6146,42.3154,91.1521,1,1,-1); // Terror
TerrorVehs[12] = AddStaticVehicleEx(541,-290.3574,1756.9315,42.3153,88.9634,1,1,-1); // Terror
TerrorVehs[13] = AddStaticVehicleEx(560,-290.8550,1762.2239,42.3701,89.8439,1,1,-1); // Terror
TerrorVehs[14] = AddStaticVehicleEx(560,-290.5566,1767.3766,42.3932,88.7069,1,1,-1); // Terror
TerrorVehs[15] = AddStaticVehicleEx(560,-290.1997,1772.7717,42.4020,88.5931,1,1,-1); // Terror
TerrorVehs[16] = AddStaticVehicleEx(560,-290.3976,1778.2075,42.3517,90.1784,1,1,-1); // Terror

/*	TerrorVehs[1] = AddStaticVehicleEx(560,-290.3859,1778.1981,42.4126,89.8540,1,1,-1); // Terroristen
	TerrorVehs[2] = AddStaticVehicleEx(560,-563.9539,-471.9844,25.1993,178.5884,1,1,-1); // Terror Sultan
	TerrorVehs[3] = AddStaticVehicleEx(560,-559.2881,-471.8158,25.2340,180.2898,1,1,-1); // Terror Sultan
	TerrorVehs[7] = AddStaticVehicleEx(429,-529.5658,-500.3094,24.7102,0.1987,1,1,-1); // Terror Banshee
	TerrorVehs[9] = AddStaticVehicleEx(487,-597.0775,-480.2222,25.7080,268.4014,1,1,-1); // Terror Maverick
	TerrorVehs[10] = AddStaticVehicleEx(405,-584.2971,-472.3098,25.3988,178.5238,1,1,-1); // Terror Sentinel
	TerrorVehs[11] = AddStaticVehicleEx(405,-589.4825,-472.2569,25.3823,178.8963,1,1,-1); // Terror Sentinel
	TerrorVehs[12] = AddStaticVehicleEx(409,-534.7103,-500.6428,25.3175,356.8373,1,1,-1); // //Terror Limo
	TerrorVehs[13] = AddStaticVehicleEx(522,-539.6852,-502.3712,25.0843,4.6420,1,1,-1); // //TERROR NRG
	TerrorVehs[14] = AddStaticVehicleEx(522,-541.4721,-502.1722,25.0887,8.9575,1,1,-1); // //Terror NRG2*/

//*******************************************************************************************************************


//**********************************************CreateDynamicObjectige Autos******************************************************



/*	//boote hafen
	HafenKlause[0] = AddStaticVehicleEx(484,855.9911,-2109.2454,0.2322,355.9453,7,8,500); // Boot 1
	HafenKlause[1] = AddStaticVehicleEx(473,873.2510,-2107.7917,-0.1557,13.5675,1,1,500); // Boot 2
	HafenKlause[2] = AddStaticVehicleEx(473,870.7504,-2095.2893,-0.3732,22.1158,1,1,500); // Boot 3
	HafenKlause[3] = AddStaticVehicleEx(473,910.4105,-2121.0913,-0.3595,217.4711,1,1,500); // Boot 4
	HafenKlause[4] = AddStaticVehicleEx(473,912.5323,-2128.9722,-0.2171,332.6553,1,1,500); // Boot 5
	HafenKlause[5] = AddStaticVehicleEx(454,890.0164,-2138.8931,0.1791,39.8262,1,1,500); // Boot 6
	HafenKlause[6] = AddStaticVehicleEx(454,867.9653,-2115.3384,0.2224,14.3371,1,1,500); // Boot 7
	HafenKlause[7] = AddStaticVehicleEx(446,848.1476,-2112.7415,-0.5426,1.3206,1,2,500); // Boot 8
	HafenKlause[8] = AddStaticVehicleEx(446,847.5084,-2127.0857,-0.7058,349.6012,1,2,500); // Boot 9
	HafenKlause[9] = AddStaticVehicleEx(446,818.2567,-2121.3801,-0.6036,177.5656,1,2,500); // Boot 10
	HafenKlause[10] = AddStaticVehicleEx(484,818.8365,-2097.9524,0.1485,14.9664,1,1,500); // Boot 11
	HafenKlause[11] = AddStaticVehicleEx(595,760.0771,-2129.8540,0.0526,343.4758,7,7,500); // Boot 12
	HafenKlause[12] = AddStaticVehicleEx(473,783.8690,-2125.1309,-0.3720,214.2166,7,7,500); // Boot 13
	HafenKlause[13] = AddStaticVehicleEx(473,785.9188,-2134.5750,-0.0722,98.7748,7,7,500); // Boot 14*/

//PRODCARS
	AddStaticVehicleEx(456,2794.9788,-2417.9172,13.8211,91.9586,0,0,600); // truck1
	AddStaticVehicleEx(456,2781.0115,-2418.0171,13.8093,89.6792,0,0,600); // truck2
	AddStaticVehicleEx(456,2792.4055,-2455.8757,13.8061,89.1830,0,0,300); // truck3
	AddStaticVehicleEx(456,2780.3369,-2455.6748,13.8089,89.6262,0,0,300); // truck4

	NewbFahrrad[1] =
/*	NewbFahrrad[2] = AddStaticVehicleEx(481,1719.3571,-1884.0820,13.0794,42.7627,0,4,-1); // BMX3
	NewbFahrrad[3] = AddStaticVehicleEx(481,1719.3955,-1881.9503,13.0803,42.9366,0,5,-1); // BMX4
	NewbFahrrad[4] = AddStaticVehicleEx(481,1719.4285,-1879.8439,13.0819,44.4051,0,3,-1); // BMX5
	NewbFahrrad[5] = AddStaticVehicleEx(481,1719.4288,-1878.1250,13.0798,51.6137,0,2,-1); // BMX6
	NewbFahrrad[6] = AddStaticVehicleEx(481,1719.2770,-1876.5858,13.0812,55.5794,0,1,-1); // BMX7
	NewbFahrrad[7] = AddStaticVehicleEx(481,1719.3707,-1874.8108,13.0813,51.5528,3,3,-1); // BMX8
	NewbFahrrad[8] = AddStaticVehicleEx(481,1710.8424,-1884.7373,13.0827,306.4653,0,0,-1); // BMX9
	NewbFahrrad[9] = AddStaticVehicleEx(481,1710.8130,-1883.4691,13.0835,309.9821,0,4,-1); // BMX10
	NewbFahrrad[10] = AddStaticVehicleEx(481,1710.7816,-1882.4082,13.0821,304.7401,0,5,-1); // BMX11
	NewbFahrrad[11] = AddStaticVehicleEx(481,1710.6680,-1880.8398,13.0843,305.9754,0,3,-1); // BMX12
	NewbFahrrad[12] = AddStaticVehicleEx(481,1710.7168,-1879.3759,13.0786,309.2661,0,2,-1); // BMX13
	NewbFahrrad[13] = AddStaticVehicleEx(481,1710.7751,-1877.8817,13.0842,306.4824,0,1,-1); // BMX14
	NewbFahrrad[14] = AddStaticVehicleEx(481,1710.7728,-1876.0095,13.0827,309.2777,3,3,-1); // BMX15*/

	PilotenVehs[0] = AddStaticVehicleEx(553,1889.3807,-2627.0354,14.8796,359.8895,0,0,-1); // nevada1
	PilotenVehs[1] = AddStaticVehicleEx(553,1822.7711,-2626.9678,15.2144,359.8876,0,0,-1); // nevada2
	PilotenVehs[2] = AddStaticVehicleEx(553,1754.5712,-2626.8796,15.4564,359.8876,0,0,-1); // nevada3
	PilotenVehs[6] = AddStaticVehicleEx(593,1682.9775,-2624.0579,14.9352,0.2591,0,0,-1); // Dodo2
	PilotenVehs[7] = AddStaticVehicleEx(487,1617.5323,-2624.4602,15.4561,0.2613,0,0,-1); // Maverick

	BMXEN[1] = AddStaticVehicleEx(481,1923.0358,-1438.4713,13.1201,225.2164,1,1,-1); // BMX - LS Pipe
	BMXEN[2] = AddStaticVehicleEx(481,1925.9242,-1438.0210,13.1261,222.1919,2,2,-1); // BMX - LS Pipe
	BMXEN[3] = AddStaticVehicleEx(481,1928.6671,-1437.1633,13.1297,228.4984,3,3,-1); // BMX - LS Pipe
	BMXEN[4] = AddStaticVehicleEx(481,1919.7489,-1414.5242,13.1361,320.3998,4,4,-1); // BMX - LS Pipe
	BMXEN[5] = AddStaticVehicleEx(481,1923.1971,-1414.6820,13.1463,313.7765,6,6,-1); // BMX - LS Pipe
	BMXEN[6] = AddStaticVehicleEx(481,1926.6367,-1414.5822,13.1399,314.0963,7,7,-1); // BMX - LS Pipe
	BMXEN[7] = AddStaticVehicleEx(481,1947.1016,-1362.3192,18.0928,90.4319,6,6,-1); // BMX - LS Pipe
	BMXEN[8] = AddStaticVehicleEx(481,1947.2954,-1366.1267,18.0930,96.7058,7,7,-1); // BMX - LS Pipe
	BMXEN[9] = AddStaticVehicleEx(481,1947.3434,-1376.5751,18.0926,94.0958,4,4,-1); // BMX - LS Pipe
	BMXEN[10] = AddStaticVehicleEx(481,1947.5251,-1381.2081,18.0860,100.1993,7,7,-1); // BMX - LS Pipe
	BMXEN[11] = AddStaticVehicleEx(481,1872.2836,-1370.2439,13.0505,178.0831,6,6,-1); // BMX - LS Pipe
	BMXEN[12] = AddStaticVehicleEx(481,1883.3069,-1369.7556,13.0857,179.3563,6,6,-1); // BMX - LS Pipe
	BMXEN[13] = AddStaticVehicleEx(481,1887.9427,-1369.0032,13.0815,184.9156,6,6,-1); // BMX - LS Pipe
	BMXEN[14] = AddStaticVehicleEx(481,1867.9071,-1369.2559,13.0226,178.8100,6,6,-1); // BMX - LS Pipe

	BusVehs[1] = AddStaticVehicleEx(431,1080.9860,-1757.8781,13.4861,89.6626,47,74,-1); // Bus unternehmen
	BusVehs[2] = AddStaticVehicleEx(431,1081.0449,-1763.8130,13.4697,90.0676,55,83,-1); // Bus unternehmen
	BusVehs[3] = AddStaticVehicleEx(431,1081.1018,-1769.7091,13.4630,89.9703,47,74,-1); // Bus unternehmen
	BusVehs[4] = AddStaticVehicleEx(431,1081.0482,-1775.4705,13.4423,90.3725,55,83,-1); // Bus unternehmen

//Müllcars
/*	AddStaticVehicleEx(408,1198.7201,-1834.9252,13.9327,270.2211,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1198.4971,-1828.5854,13.9396,270.1808,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1276.9803,-1827.1478,13.9404,86.0319,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1276.6466,-1820.0087,13.9486,86.3309,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1276.6621,-1813.9977,13.9171,88.1733,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1276.6035,-1807.5027,13.9332,88.7626,0,0,20); // Müllcar
	AddStaticVehicleEx(408,1276.1372,-1800.2759,13.9653,90.9056,0,0,20); // Müllcar*/



	PraesiVehs[0] = AddStaticVehicleEx(490,1277.5282,-2010.5134,59.0530,180.7345,1,1,-1); // Rancher
	PraesiVehs[1] = AddStaticVehicleEx(421,1272.0981,-2010.6849,58.9561,182.3831,1,1,-1); // Wachington
	PraesiVehs[2] = AddStaticVehicleEx(405,1267.6931,-2010.6243,59.0832,180.8389,1,1,-1); // sentinel
	PraesiVehs[3] = AddStaticVehicleEx(409,1263.2800,-2011.8212,59.1331,180.1586,1,1,-1); // Limo
	PraesiVehs[4] = AddStaticVehicleEx(409,1258.6603,-2011.6980,59.2614,180.8830,1,1,-1); // Limo
	PraesiVehs[5] = AddStaticVehicleEx(405,1254.0137,-2010.4321,59.4704,179.6508,1,1,-1); // sentinel
	PraesiVehs[6] = AddStaticVehicleEx(421,1249.3412,-2010.7068,59.6193,181.8670,1,1,-1); // Wachington
	PraesiVehs[7] = AddStaticVehicleEx(490,1244.7531,-2010.8969,59.9754,180.6525,1,1,-1); // Rancher
	PraesiVehs[8] = AddStaticVehicleEx(487,1115.6652,-2051.4167,74.6495,270.1703,1,1,-1); // Heli
	PraesiVehs[9] = AddStaticVehicleEx(487,1117.1118,-2022.1006,74.6212,269.5826,1,1,-1); // Heli

//********************************************************************************************************************


	for(new c=0;c<CAR_AMOUNT;c++)
	{
		Gas[c] = GetGasMax(GetVehicleModel(c));
	}
	//-------------------------------  PICKUPS ------------------------------------------
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			AddStaticPickup(1273, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			AddStaticPickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			AddStaticPickup(1272, 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			AddStaticPickup(1239, 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			AddStaticPickup(1272, 1, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
			AddStaticPickup(1239, 1, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
	}
	AddStaticPickup(1239, 1, 233.9411,123.2318,1003.2188); //ERLAUBNIS
	AddStaticPickup(1581, 1, 1952.8041,-2178.1680,13.5469); //FLYLICENSE
	AddStaticPickup(1581, 1, -242.1245,-235.2225,2.4297); //LKWLICENSE
	AddStaticPickup(1239, 1, 240.9979,112.8959,1003.2188); //KLINGEL
	AddStaticPickup(1239, 2, 288.7460,169.3510,1007.1719); //SWATEXIT
	AddStaticPickup(1550, 2, 2155.1436,1623.8749,993.6882); //rob pickup
	AddStaticPickup(1239, 2, 2316.6191,-12.6046,26.7422); //BANK  
	AddStaticPickup(1239, 2, 2316.4468,-10.1002,26.7422); //BANK
	AddStaticPickup(1239, 2, 2316.1729,-7.1389,26.7422); //BANK
	AddStaticPickup(1239, 2, 1414.7958,-988.8644,1639.7843); //BANK REIN
	AddStaticPickup(1239, 2, 2308.8831,-2.0025,26.7422); //Kredit
	AddStaticPickup(1581, 1, 252.1642,111.8994,1003.2188); //Buywaffenschein
	AddStaticPickup(1239, 3, 489.5197,-1511.6572,20.5045); //ZIVIHILFE
	AddStaticPickup(1239, 3, 1000.2737,-1104.4468,23.4015); //Neeeeon
	AddStaticPickup(1239, 3, 290.2523,-106.7863,1001.5156); //SHOP 
	AddStaticPickup(1239, 3, 295.4237,-38.1667,1001.5156); //SHOP
	AddStaticPickup(1239, 2, 2179.6458,-2256.0725,14.7734); //Rifasenter
	AddStaticPickup(1239, 2, 1835.9020,-1682.5295,13.3704); //Alambhra "i"
	AddStaticPickup(1239, 2, 195.5248,-228.4122,1.7786); //GANGTÜR "I"
	AddStaticPickup(1239, 2, 204.5171,-232.7427,1.7786); //Gangjail
	AddStaticPickup(1239, 2, 205.0009,-240.5190,1.5781); //Gangtor
	AddStaticPickup(1239, 2, 2668.9263,-2639.5989,2.1344); //BundeswehrRep2
	AddStaticPickup(1239, 2, 2758.9431,-2393.5806,13.6328); //BundeswehrRep1
	AddStaticPickup(1239, 2, 2324.6418,-1135.9731,1051.3047); //KRZ "I"
	AddStaticPickup(1239, 2, 2324.419921,-1145.568359,1050.710083); //KFZEXIT
	AddStaticPickup(1239, 2, 1209.8247,-1749.9943,13.5937); //KFZENTER
	AddStaticPickup(1239, 2, 2770.7278,-1627.9824,12.1775); //VAGOSENTER
	AddStaticPickup(1239, 2, -2029.7687,-118.9294,1035.1719); //Fahrschule Exit
	AddStaticPickup(1239, 2, 725.3910,-1450.1915,17.6953); //Fahrschule Enter
	AddStaticPickup(1239, 23, 2805.0444,-1434.0425,40.0484); // FRAKMATS
	AddStaticPickup(1239, 23, 1017.9830,-919.3538,42.3359); // FARBE NORTH
	AddStaticPickup(1239, 23, 1911.2693,-1776.6720,13.3828); // /FARBE SOUTH
	AddStaticPickup(1239, 23, 1207.2928,-917.7825,43.0665); // AD SF
	AddStaticPickup(1239, 23, 2516.8743,-2120.1921,13.5469); // RM ENTER
	AddStaticPickup(1239, 23, -85.4636,2.1646,3.1172);//Drogenpoint
	AddStaticPickup(1239, 23, 1213.8599,-1638.5707,11.7969);//mwLIFT
	AddStaticPickup(1239, 23, 1281.1855,-1641.1213,27.3750);//mwLIFT
	AddStaticPickup(1239, 23, 992.7688,-1460.1172,13.5469);//MLIFT
	AddStaticPickup(1239, 23, 990.2078,-1461.0585,21.2656);//MLIFT
	AddStaticPickup(1239, 23, 1647.9086,-1817.2784,13.5346); // /LENTER
	AddStaticPickup(1239, 23, 433.7250,-83.9479,999.5547); // /raus
	AddStaticPickup(1239, 23, 1771.4659,-1547.2609,9.9151); // /rein
	AddStaticPickup(1240, 2, 236.7048,1068.0605,1084.2059,5); // HEAL RS
	AddStaticPickup(1239, 2, 2808.0757,-1442.0732,40.0432); // /KAMPFSTYLES
	AddStaticPickup(1239, 23, 2548.9006,-1294.7961,1060.9844);//Fuegos
	AddStaticPickup(1239, 23, -2119.5020,-178.9242,35.3203);//Fuegos
	AddStaticPickup(1239, 23, 490.8359,-14.0423,1000.6797); //dance
	AddStaticPickup(1239, 23, 499.4521,-20.6484,1000.6797); //drink
	AddStaticPickup(1240, 2, 2332.1470,-1135.1956,1050.7031); // Yakuza Heal
	AddStaticPickup(1239, 23, 1924.3221,959.9957,10.8203); // Yakuza Enter
	AddStaticPickup(1239, 23, 2002.8409,-2382.0603,13.5469);
	AddStaticPickup(1239, 23, 1214.4454,-904.4616,42.9208);
	AddStaticPickup(1239, 23, 1571.3887,-1705.3455,28.3948);
	AddStaticPickup(1239, 23, 1557.1471,-1675.6034,28.3955);
	AddStaticPickup(1274, 2, 448.4033,-84.3045,999.5547); //MENU DOLLAR
	AddStaticPickup(1239, 23, 1957.5536,-2183.4856,13.5469); // LS AIRPORT PRODS
	AddStaticPickup(1239, 23, 2232.1707,-1159.8075,25.8906); // Arbeitsamt
	AddStaticPickup(1239, 23, 1244.3359,-2042.6630,59.8744); // Präsi rep
	AddStaticPickup(1239, 23, 1117.8037,-2037.0393,78.7500); // Dachluke Präsi
	AddStaticPickup(1239, 23, 1123.2803,-2037.1238,69.8875); // Enter Präsi
	AddStaticPickup(1240, 2, 1292.1702,-798.5539,1089.9375, 4); // Präsi Heal
	AddStaticPickup(1240, 2, 1272.6268,-797.7535,1089.9375, 4); // SeSe Heal
	AddStaticPickup(1239, 23, 1910.2467,-2639.1057,13.5469); // Flughafen LS
	AddStaticPickup(1239, 23, -1233.6982,-88.1554,13.9228); // Flughafen SF
	AddStaticPickup(1239, 23, 1346.5087,1712.4694,10.8203); // Flughafen LV
	AddStaticPickup(1313, 2, 260.8033,102.8064,1030.2539,-1); //Enforcer interior /equip
	AddStaticPickup(1313, 2, 1277.3894,-797.1385,1089.9375,-1); //Präsi interior /equip
	AddStaticPickup(1275, 2, 1083.6311,-1223.3904,15.8203,-1); //Ballas Kleiderschrank
	AddStaticPickup(1275, 2, 2489.5862,-1691.1185,14.7656,-1);// Gs Kleiderschrank
	AddStaticPickup(1275, 2, 1274.7148,-800.4757,1089.9327,-1); // LCNKLEIDERSCHRANK
	AddStaticPickup(1239, 2, 1494.3556,1303.7893,1093.2891,-1); // FW exit + Mexit
	AddStaticPickup(1253, 2, 2804.8872,-1437.9536,40.0447,-1); // Markt xD
	AddStaticPickup(1253, 2, 2800.9880,-1429.8492,40.0625); //PORNOS
	AddStaticPickup(1248, 2, 1564.5691,-1675.1954,61.8963,-1); // LSPD
	AddStaticPickup(1318, 2, 2323.7102,-1254.4778,22.5000,-1); // RM Aufzug Unten
	AddStaticPickup(1318, 2, 1709.5562,-1642.9690,20.2188,-1); // RM Aufzug Oben
	AddStaticPickup(1239,23,1261.1112,-785.4005,1091.9063,-1); // LCN Exit
	AddStaticPickup(1239,23,1701.3274,-1667.7771,20.2188); // RM Base Exit
	AddStaticPickup(1239,23,2334.8171,-1265.9872,27.9693); // RM Base Enter
	AddStaticPickup(1240, 2, 1812.7900,-1311.0913,120.2878,-1); //Hitman health
	AddStaticPickup(1239, 23, -1060.0887,-1205.5676,129.2188, -1); //Hitman Agency entrance
	AddStaticPickup(1239, 23, 1825.5352,-1305.2288,120.3046, -1); //Hitman Agency exit
	AddStaticPickup(347, 23, 2149.2600,-1802.2012,16.1548, -1); //Hitman Agency Waffen abhol Ort
	AddStaticPickup(1239,23,2804.8872,-1437.9536,40.0447); // Schwarzmarkt "i"
	AddStaticPickup(1239, 2, 799.1068,-1629.4493,12.9548); //DRIVEIN
	AddStaticPickup(1239, 2, 811.4277,-1616.1138,13.5469); //BSSENTER
	AddStaticPickup(1239, 2, 457.304748,-88.428497,999.554687); //BSSEXIT
	AddStaticPickup(1239, 23, 1388.7091,-993.8844,5651.8315); //Aufsprengen
	AddStaticPickup(1275, 2, 223.4126,185.4840,1003.0313,-1); //Unifo/rm LSPD
	AddStaticPickup(1254, 2, 201.8244,1865.1124,13.1406,-1); //BW EQUIP
	AddStaticPickup(1247, 2, 217.5230,184.4352,1003.0313,-1); //Duty LSPD
	AddStaticPickup(1247, 2, 217.8921,78.9727,1005.0391,-1); //Duty FBi
	AddStaticPickup(1313, 2, 211.7037,185.3334,1003.0313,-1); //Equip
	port3 = CreatePickup(1318, 24, 226.0206,183.8430,1003.0313,-1); //SWAT aufzug oben/drinne
	port4 = CreatePickup(1318, 24, 325.6128,-1499.1409,24.9219,-1); //SWAT aufzug unten/draussen
	port5 = CreatePickup(1318, 24, 231.1162,177.7738,1003.0313,-1); //SWAT aufzug dach/draussen
	port6 = CreatePickup(1318, 24, 302.7378,-1523.5830,76.5391,-1); //SWAT aufzug drinne/dach
	AddStaticPickup(1239, 2, 312.6207,-1518.2163,24.9219,-1); // LCn Garage I
	AddStaticPickup(1239, 2, 490.7159,-1519.1860,20.3347,-1);//guide
	port = CreatePickup(1318, 24, 1526.2549,-1677.8899,5.8906,-1); //LSPD aufzug draußen/unten
	port1 = CreatePickup(1318, 24, 215.6369,124.8877,1003.2188,-1);//LSPD AUfzug drinnen/oben
	//AddStaticPickup(1314, 2, -1592.2162,716.2927,-5.2422,-1); //LSPD Undercover
	AddStaticPickup(1275, 2, 219.1845,109.5997,1003.2188,-1); //Uniform SFPD
	AddStaticPickup(1247, 2, 227.6519,111.8072,1003.2188,-1); //Duty SFPD
	AddStaticPickup(1239, 23, 1188.4054,-912.0315,48.0625);

    AddStaticPickup(1239, 2, 478.3927,-1527.7627,20.0114,-1); //Startbonus icon
    AddStaticPickup(1239, 2, -2719.0527,-315.4308,7.8438,-1); //Yakuza skin icon
	AddStaticPickup(1239, 2, -314.1795,1774.4463,43.6406,-1); //Terrorbase
    
    AddStaticPickup(1239, 2, 1220.0658,-1813.3065,16.5938,-1); ///fenter
    	//Prison
/*	AddStaticPickup(1239, 1, 575.7631,-2307.2932,2.3297,-1); //iicon EINLIEFERUNG
   	AddStaticPickup(1240, 2, 571.3146,-2400.7935,2.6275,-1); //Prison Health*/
   	//Waffenladen
   	AddStaticPickup(1239, 2, 1369.0005,-1279.7201,13.5469,-1); //Waffenladen rein
    //Bank
    AddStaticPickup(1318, 2, 1462.4657,-1011.3002,26.8438,-1); //Bank
    
    AddStaticPickup(1239, 2, 489.5197,-1511.6572,20.5045,-1); //Neuling icon
    
 //   AddStaticPickup(1239, 2, 973.7838,-1299.0173,13.3828,-1); //neon garage
    
    AddStaticPickup(1239, 2, 1647.7377,-1813.4070,13.5343,-1); //Armour
AddStaticPickup(1239, 2, -2717.9670,-317.2987,7.8438,-1); //Armour
AddStaticPickup(1239, 2, 2149.6931,-1808.4832,16.1440,-1); //Armour
AddStaticPickup(1239, 2, -2115.0789,-178.0732,35.3203,-1); //armour
AddStaticPickup(1239, 2, 2497.9807,-1687.7264,13.5108,-1); //Armour
AddStaticPickup(1239, 2, -2032.3395,164.5288,28.8359,-1); //Armour
AddStaticPickup(1239, 2, 2536.5503,-1060.8982,69.5679,-1); //Armour
AddStaticPickup(1239, 2, 2786.1611,-1930.1277,13.5469,-1); //Armour
AddStaticPickup(1239, 2, 2176.9104,-2257.9685,14.7734,-1); //Armour
AddStaticPickup(1239, 2, 1269.8015,-1641.0773,27.3750,-1); //Armour
AddStaticPickup(1239, 2, -314.3889,1766.8217,43.6406,-1); //Armour
AddStaticPickup(1239, 2, 2513.9211,-2120.2246,13.5469,-1); //Armour 
AddStaticPickup(1239, 2, 1770.9941,-2020.0448,14.1344,-1); //Armour
AddStaticPickup(1239, 2, -510.2045,-505.2142,25.5234,-1); //Armour


    AddStaticPickup(1239, 2, 2149.6309,-1805.6676,16.1474,-1); //HSkin

    AddStaticPickup(1239, 2, 1102.1628,-1263.3516,21.5469,-1); //Ballas /armor

	AddStaticPickup(1239, 2, 1580.2678,1769.0098,10.8203,-1); //Hospital 2 near speedway
	AddStaticPickup(1239, 2, 1906.0333,994.9215,52.7387,-1); //iicon
	AddStaticPickup(1239, 2, 681.4097,-474.4054,16.5363,-1); //iicon
	AddStaticPickup(1239, 2, 323.0342,1118.5804,1083.8828,-1); //Getting Drugs for DrugDealers
	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906,-1); //Bill Board (old Job Department)
	AddStaticPickup(1239, 23, 593.0110,-1248.0918,18.1534,-1); //Materials Paket-Hol-Punkt
	AddStaticPickup(1239, 23, -1826.4926,42.1423,15.1228,-1); //Materials Paket-Hinbring-Punkt
	AddStaticPickup(1313, 2, 1106.8654,-311.5620,73.9922,-1); //Hitman Agency Order
	AddStaticPickup(371,2,1544.2,-1353.4,329.4,-1); //LS towertop Fallschirm
	AddStaticPickup(371,2,1536.0, -1360.0, 1150.0,-1); //LS towertop Fallschirm
	AddStaticPickup(1240,2,279.3000,1853.5619,8.7649,-1); //area51 health
	AddStaticPickup(1239,23,-49.7952,-269.3755,6.6332,-1);
    AddStaticPickup(1239,23,364.3931,173.7390,1008.3828,-1); // Fahrprüfung i-Punkt
    AddStaticPickup(1313,23,1712.4611,-1640.0770,20.2239,-1); // RM WAFFEN
    AddStaticPickup(1313,23,1277.5029,-808.4862,1089.9375,1);//LCN WAFFEN
    AddStaticPickup(1313,23,231.5756,1067.9391,1084.2061,5);//RS WAFFEN
    AddStaticPickup(1313,23,-2642.2175,1419.0121,906.4609,5);//Fuegos WAFFEN
    AddStaticPickup(1313,23,2819.4785,-1169.4138,1025.5703,-1);//Terror Waffen
    AddStaticPickup(1313,23,1939.4677,982.8486,992.4688,-1);//Yakuza WAFFEN
	AddStaticPickup(1239, 2, -2281.0369,2288.4565,4.9621,-1); //base,dings RM

	AddStaticPickup(1275, 23,-2646.6782,1423.5521,906.4609,-1); //Fuegos Kleidung
	AddStaticPickup(1254, 23,-2642.2175,1419.0121,906.4609,-1); //Fuegos Wkammer

//Enter mit Eingabe
    AddStaticPickup(1239,23,-310.2000,1762.5668,43.6406,-1); // Terror /skin
    AddStaticPickup(1239,23,2322.0334,587.1565,7.7802,-1);//Hitman /Enter
    AddStaticPickup(1239,23,1480.9919,-1771.2096,18.7958,-1);//Stadthalle /Enter
    AddStaticPickup(1239,23,389.9180,173.6584,1008.3828,-1);//Stadthalle /exit
    AddStaticPickup(1239,23,1381.2601,-992.4224,5664.4189,-1);//Bank /exit
    AddStaticPickup(1239,23,1554.7513,-1675.6208,16.1953,-1);//LSPD /Enter
    AddStaticPickup(1239,23,238.7018,139.9523,1003.0234,-1);//LSPD /exit
    AddStaticPickup(1239,23,-2346.9465,-1662.5482,508.3459,-1);//Geheimstation /Enter
    AddStaticPickup(1239,23,231.8635,1822.7120,7.4141,-1);//Geheimstation /exit
	AddStaticPickup(1239,23,1833.1556,-1125.7290,24.6721,-1);//FBI /Enter
    AddStaticPickup(1239,23,246.8075,63.2147,1003.6406,-1);//FBI /exit
	AddStaticPickup(1239,23,1833.1556,-1125.7290,24.6721,-1);//FBI Aufzug unten
    AddStaticPickup(1239,23,1838.6667,-1143.1451,51.8640,-1);//FBI Aufzug oben
    AddStaticPickup(1239,23,1007.9469,1154.9111,10.7402,-1);//FBI Rep "i"
    AddStaticPickup(1239,23,-2329.1199,-1708.0713,501.0656,-1);//Geheimstation /aufzug oben
    AddStaticPickup(1239,23,1838.6667,-1143.1451,51.8640,-1);//Geheimstation /aufzug unten
	AddStaticPickup(1313, 2, 230.6416,113.6176,1003.2188,-1); //SWAT /equip
 	AddStaticPickup(1239,23,329.0090,-1513.4635,36.0391,-1);//SWAT Eingang
    AddStaticPickup(1239,23,246.4113,109.2882,1003.2188,-1);//SWAT Ausgang

 	AddStaticPickup(1239,23,-2237.0981,130.4937,1035.4141,-1); // Handyladen /handyladen

 	AddStaticPickup(1239,23,823.4207,3.3140,1004.1797,-1); // Uhrenladen /uhren
	AddStaticPickup(1239,23,1847.2902,-1871.5498,13.5781,-1); //Uhrenladen exit

    AddStaticPickup(1239,23,2034.0126,-1403.0018,17.2933,-1); // KH-Heli 1
	AddStaticPickup(1239,23,2051.0828,-1407.7554,48.3359,-1); // KH-Heli 2
	AddStaticPickup(1239,23,1137.1093,-1341.3873,13.7162,-1); // Krankenhaus RTW-Repair
	AddStaticPickup(1239,23,1547.5663,-1610.0396,13.3828,-1); // LSPD Streifenwagen-Repair
	AddStaticPickup(1239,23,-1628.6464,652.0121,7.1875,-1); // SFPD Streifenwagen-Repair
    AddStaticPickup(1274, 1, 233.7505,112.1678,1010.2188,-1);
 	AddStaticPickup(1239,23,-1407.8838,507.2498,18.2344,-1); // Bundeswehr-Repair
   	AddStaticPickup(1313, 2, -1402.2922,458.8101,8.0854,-1); //Equip
   	AddStaticPickup(1313, 2, 257.8690,77.2030,1003.6406,-1); //Equip FBI
 	AddStaticPickup(1239,23,-1234.6599,473.8205,7.1875,-1); // Bundeswehr-Repair

    AddStaticPickup(1240,2,2819.4785,-1169.4138,1025.5703,-1); // heal pickup ganghäuer
    AddStaticPickup(1240,2,-2160.3408,638.6109,1057.5861,-1); // heal pickup yaku
    AddStaticPickup(1240,2,1709.4355,-1642.6681,20.2188,-1); // heal pickup Rm
	AddStaticPickup(1240, 2,-2642.2944,1419.0110,906.4609,-1); //Fuegos Heal
	AddStaticPickup(1240, 2,1956.4037,1017.7150,992.4688,-1); //Yakuza Heal


    AddStaticPickup(1240,2,1494.4905,1309.0504,1093.2839,-1); // heal pickup FW

    AddStaticPickup(1239,23,-2720.8020,-320.6040,7.8438,-1); // Yakuza Ausgang
    AddStaticPickup(1239,23,2018.5990,1017.7141,996.8750,-1); // Yakuza Eingang
    AddStaticPickup(1239,23,1274.1163,-1641.3193,27.3750,-1); // RS Eingang
    AddStaticPickup(1239,23,1084.1470,-1227.1428,15.8203,-1); // Ballas Eingang
    AddStaticPickup(1239,23,2495.3865,-1690.6353,14.7656,-1); // Groove Eingang
    AddStaticPickup(1239,23,2786.4897,-1926.2115,13.5469,-1);// Aztecas Eingang
    AddStaticPickup(1239,23,2534.0478515625,-1063.4067382813,69.7,-1);// Vagos Eingang
    AddStaticPickup(1239,23,-516.1633,-506.0980,25.5234,-1);//Terror Eingang
    AddStaticPickup(1239,23,1752.9672,-1893.8470,13.5573,-1); // LCN Eingang
    AddStaticPickup(1239,23,1081.1771,-345.3208,73.9825,-1);// Hitman Eingang
    AddStaticPickup(1239, 23, 1956.7604,691.5200,10.8203,-1); //LCN Enter
    AddStaticPickup(1239, 23, 1654.1954,-1654.9637,22.5156, -1); //News Oben
    AddStaticPickup(1239, 23, 1658.7493,-1691.7506,15.6094, -1); //News Unten
    AddStaticPickup(1239, 23, 1649.4564,-1641.6837,83.7813, -1); //News Heli

    EssenPickup[0] = CreatePickup(1274,1,376.4389,-67.9595,1001.5151,-1);
	EssenPickup[1] = CreatePickup(1274,1,374.7315,-119.5200,1001.4995,-1);
	EssenPickup[2] = CreatePickup(1274,1,369.5129,-6.7848,1001.8589,-1);

	KLEIDUNG_PRO = CreatePickup( 1275, 23, 199.0634,-128.0607,1003.5152,-1);
	KLEIDUNG_ZIP = CreatePickup( 1275, 23, 181.2543,-91.6659,1002.0234,-1);


	pickups=pickups+22;
	printf("Pickups Max = 2048, Current Pickups = %d",pickups);
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour+1);
	}


	//-----------------------------------------------------------------------------------
	//-------------------------------  TIMER --------------------------------------------
	cartimer = SetTimer("CarCheck", 900000, 1);
	pickuptimer = SetTimer("CustomPickups", 1500, 1);
	idletimer = SetTimer("IdleKick", idletime, 1);
	productiontimer = SetTimer("Production", 600000, 1); //10 mins (300000)
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
	SetTimer("serverNews", 480000, 1);
	SetTimer("ShowLotto",7200000,true);
	SetTimer("Timer1",60000, 1); // SyncUp + InCreasePlayerMinute
	SetTimer("Timer2",1000, 1); // UpdateClock + Streamcheckpoint + Othertimer
	SetTimer("Timer3",1800000, 1); // Accountstimer + ArenaSpawn
	SetTimer("Blitzer_Timer", BLITZER_TIMER_INTERVALL, 1);
	//-----------------------------------------------------------------------------------



	//-----------------------------------------------------------------------------------
	//------------------------------- OBJECTS -------------------------------------------
	//--------------------------- GESTREAMTE OBJECTS ------------------------------------

//***********************Sonstige***************************************************

//CLOSEZÖLLE

	lszoll1 = CreateObject(978, 68.300003051758, -1526.5, 2.9000000953674, 0, 0, 266);
	lszoll2 = CreateObject(978, 67.900001525879, -1535.8000488281, 2.7999999523163, 0, 0, 267.99548339844);
	lszoll3 = CreateObject(978, 67.699996948242, -1541.4000244141, 2.9000000953674, 0, 0, 267.99499511719);
	lszoll4 = CreateObject(978, 35.599998474121, -1522.1999511719, 3.4000000953674, 0, 0, 87.995483398438);
	lszoll5 = CreateObject(978, 35.099998474121, -1537.0999755859, 2.5999999046326, 0, 0, 87.994995117188);
	lszoll6 = CreateObject(978, 35.200000762939, -1529.9000244141, 3.0999999046326, 0, 0, 87.994995117188);
	
	lvzoll1 = CreateObject(978, 1719.5, 511.5, 26, 0, 0, 162);
	lvzoll2 = CreateObject(978, 1728.4000244141, 508.60000610352, 26.200000762939, 0, 0, 161.99890136719);
	lvzoll3 = CreateObject(978, 1737.3000488281, 505.70001220703, 26, 0, 0, 161.99890136719);
	lvzoll4 = CreateObject(978, 1746.1999511719, 502.79998779297, 25.700000762939, 0, 0, 161.99890136719);
	lvzoll5 = CreateObject(978, 1763.5, 550.5, 23.200000762939, 0, 0, 341.99890136719);
	lvzoll6 = CreateObject(978, 1754.5999755859, 553.40002441406, 23.200000762939, 0, 0, 341.99340820313);
	lvzoll7 = CreateObject(978, 1745.6999511719, 556.29998779297, 23.5, 0, 0, 341.99340820313);
	lvzoll8 = CreateObject(978, 1736.8000488281, 559.20001220703, 23.700000762939, 0, 0, 341.99340820313);

//Ziviparkplatz

/*	CreateDynamicObject(984, 1774.9000244141, -1942.4000244141, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(984, 1760.0999755859, -1942.5, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(982, 1774.3000488281, -1922.5999755859, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(982, 1774.3000488281, -1897, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(982, 1787.1999511719, -1935.4000244141, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(984, 1800, -1935.4000244141, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(982, 1806.5, -1922.5999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1807.5999755859, -1909.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1808.6999511719, -1909.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1809.8000488281, -1909.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(983, 1811.5, -1897.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(983, 1810.4000244141, -1881.5, 13.300000190735, 0, 0, 18);
	CreateDynamicObject(1257, 1828.8000488281, -1882.0999755859, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1231, 1774.9000244141, -1942.4000244141, 15.300000190735, 0, 0, 0);
	CreateDynamicObject(1231, 1763.3000488281, -1942.5, 15.300000190735, 0, 0, 0);
	CreateDynamicObject(1231, 1811.5, -1897.5999755859, 15.300000190735, 0, 0, 272);
	CreateDynamicObject(1231, 1810.9000244141, -1883, 15.300000190735, 0, 0, 271.99951171875);

//	zivitor = CreateObject(978, 1811.5, -1889.5999755859, 13.199999809265, 0, 0, 270);*/
//Extron
	extrontor = CreateObject(980, 1245.6999511719, -767.20001220703, 93.800003051758, 0, 0, 359.99462890625);

//RIFAS ZAUN
CreateDynamicObject(10841, 2263.3999023438, -2254.3999023438, 20.200000762939, 0, 0, 314.45935058594);
//=====================================HAUS VON SCHOKOBONG=================
CreateObject(8210, 1503.4000244141, -657.40002441406, 93.800003051758, 0, 0, 179.91076660156);
CreateObject(987, 1475.8000488281, -657.20001220703, 93.400001525879, 0, 0, 180.41076660156);
CreateObject(987, 1468.8000488281, -657.20001220703, 93.400001525879, 0, 0, 180.15649414063);
CreateObject(987, 1456.9000244141, -657.09997558594, 93.400001525879, 0, 0, 269.43713378906);
CreateObject(987, 1456.8000488281, -669.09997558594, 93.400001525879, 0, 0, 269.68420410156);
CreateObject(987, 1456.8000488281, -681.09997558594, 93.400001525879, 0, 0, 269.68139648438);
CreateObject(987, 1456.8000488281, -682.09997558594, 93.400001525879, 0, 0, 269.68139648438);
CreateObject(987, 1456.6999511719, -693.79998779297, 93.400001525879, 0, 0, 359.97595214844);
CreateObject(987, 1468.6999511719, -693.79998779297, 93.400001525879, 0, 0, 359.97253417969);
CreateObject(987, 1480.6999511719, -693.79998779297, 93.400001525879, 0, 0, 328.55334472656);
CreateObject(987, 1508.5999755859, -699.70001220703, 93.400001525879, 0, 0, 0.19964599609375);
CreateObject(987, 1519.1999511719, -699.70001220703, 93.400001525879, 0, 0, 0.19775390625);
CreateObject(987, 1530.9000244141, -699.59997558594, 93.400001525879, 0, 0, 90.224060058594);
CreateObject(987, 1530.9000244141, -687.59997558594, 93.400001525879, 0, 0, 90.2197265625);
CreateObject(987, 1530.9000244141, -675.59997558594, 93.400001525879, 0, 0, 90.2197265625);
CreateObject(987, 1530.9000244141, -668.90002441406, 93.400001525879, 0, 0, 90.2197265625);
CreateObject(987, 1502.3000488281, -699.70001220703, 93.400001525879, 0, 0, 0.19775390625);
//======================================NoobSpawn======================================//
//Bank interior
CreateObject(14789, 1424.690308, -1004.066162, 1643.018677, 0.0000, 0.0000, 90.0000);
CreateObject(2774, 1433.026245, -1004.643921, 1635.819824, 0.0000, 0.0000, 0.0000);
CreateObject(2774, 1429.296997, -1004.618652, 1641.281128, 0.0000, 0.0000, 0.0000);
CreateObject(2774, 1440.957031, -979.682068, 1640.297729, 0.0000, 0.0000, 0.0000);
CreateObject(2774, 1429.337158, -979.545288, 1639.723389, 0.0000, 0.0000, 0.0000);
CreateObject(2774, 1449.314087, -984.505005, 1648.023193, 0.0000, 0.0000, 0.0000);
CreateObject(2774, 1413.914063, -984.515381, 1643.073486, 0.0000, 0.0000, 0.0000);
CreateObject(1886, 1448.510132, -1003.642944, 1647.093994, 19.7670, 0.0000, 223.3584);
CreateObject(1886, 1414.706543, -980.604431, 1647.061646, 19.7670, 0.0000, 43.3584);
CreateObject(2774, 1430.416870, -999.017273, 1638.722412, 0.0000, 269.7592, 0.0000);
CreateObject(2774, 1408.149292, -998.996826, 1638.722412, 0.0000, 269.7592, 180.0000);
CreateObject(2774, 1443.577271, -986.634644, 1638.723389, 0.0000, 269.7592, 270.0000);
CreateObject(2774, 1443.604492, -998.998169, 1647.797485, 0.0000, 0.0000, 0.0000);
CreateObject(11359, 1414.356201, -988.985352, 1639.795898, 0.0000, 0.0000, 90.0000);
CreateObject(2774, 1413.927368, -986.011719, 1643.046997, 0.0000, 0.0000, 270.0000);
CreateObject(2774, 1413.763672, -992.085388, 1643.673340, 0.0000, 0.0000, 0.0000);
CreateObject(626, 1427.554565, -997.322998, 1640.766479, 0.0000, 0.0000, 135.0000);
CreateObject(626, 1427.488281, -990.752502, 1640.841553, 0.0000, 0.0000, 135.0000);
CreateObject(2773, 1427.756714, -995.781189, 1639.310181, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1427.694946, -992.841431, 1639.310181, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1427.596924, -989.128601, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1429.863159, -982.927368, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateObject(626, 1427.665283, -983.128601, 1640.841553, 0.0000, 0.0000, 236.2500);
CreateObject(2773, 1432.755859, -982.990784, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateObject(626, 1434.648315, -983.188904, 1640.841553, 0.0000, 0.0000, 236.2500);
CreateObject(2773, 1437.091431, -983.054993, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateObject(2773, 1440.040283, -983.012756, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateObject(3462, 1448.466919, -993.014465, 1640.297974, 0.0000, 0.0000, 0.0000);
CreateObject(3462, 1448.512085, -982.992615, 1640.181519, 0.0000, 0.0000, 0.0000);
CreateObject(626, 1441.636230, -997.047729, 1640.741455, 0.0000, 0.0000, 146.2500);
CreateObject(14632, 1443.648682, -995.934631, 1638.667725, 0.0000, 0.0000, 90.0000);
CreateObject(14632, 1432.156372, -1018.015259, 1639.988159, 0.0000, 0.0000, 270.0000);
CreateObject(1514, 1432.294922, -998.852478, 1639.740112, 0.0000, 0.0000, 180.0000);
CreateObject(1514, 1438.352539, -998.846741, 1639.815674, 0.0000, 0.0000, 180.0000);
CreateObject(2773, 1435.183838, -996.759277, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1435.152466, -993.932556, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1439.338623, -996.658691, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1439.288940, -994.000671, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(1723, 1426.280151, -994.863586, 1638.707275, 0.0000, 0.0000, 270.0000);
CreateObject(1723, 1426.244629, -991.150452, 1638.732300, 0.0000, 0.0000, 270.0000);
CreateObject(1723, 1422.277466, -996.935059, 1638.682251, 0.0000, 0.0000, 90.0000);
CreateObject(1723, 1422.279297, -993.210022, 1638.657227, 0.0000, 0.0000, 90.0000);
CreateObject(2637, 1424.232422, -992.173584, 1638.838745, 0.0000, 0.0000, 270.0000);
CreateObject(2637, 1424.228516, -995.704163, 1638.838745, 0.0000, 0.0000, 270.0000);
CreateObject(3657, 1432.633301, -987.739014, 1639.202393, 0.0000, 0.0000, 0.0000);
CreateObject(3657, 1432.631104, -986.977234, 1639.202393, 0.0000, 0.0000, 180.0000);
CreateObject(3657, 1438.111572, -986.977539, 1639.202393, 0.0000, 0.0000, 180.0000);
CreateObject(3657, 1438.086304, -987.730713, 1639.227417, 0.0000, 0.0000, 0.0000);
CreateObject(2961, 1439.028320, -999.826660, 1639.211304, 0.0000, 0.0000, 0.0000);
CreateObject(2961, 1433.505615, -999.827637, 1639.301392, 0.0000, 0.0000, 0.0000);
CreateObject(2946, 1414.355225, -990.513489, 1638.755615, 0.0000, 0.0000, 0.0000);
CreateObject(2946, 1414.380249, -987.392517, 1638.755005, 0.0000, 0.0000, 180.0000);
CreateObject(2963, 1424.165283, -1004.815674, 1640.781128, 0.0000, 0.0000, 270.0000);
CreateObject(2963, 1426.806763, -1004.832520, 1640.826904, 0.0000, 0.0000, 90.0000);
CreateObject(1886, 1414.730591, -993.523010, 1646.908569, 17.1887, 0.0000, 67.5000);
CreateObject(2773, 1431.414551, -996.845825, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(2773, 1431.473389, -994.017090, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateObject(632, 1434.735352, -987.757507, 1639.131226, 0.0000, 0.0000, 213.7500);
CreateObject(2942, 1417.713623, -980.475159, 1639.363525, 0.0000, 0.0000, 0.0000);
CreateObject(1216, 1443.281372, -989.311279, 1639.387817, 0.0000, 0.0000, 270.0000);
CreateObject(2942, 1421.217163, -980.448914, 1639.385498, 0.0000, 0.0000, 0.0000);
CreateObject(2942, 1424.630493, -980.526672, 1639.371460, 0.0000, 0.0000, 0.0000);
CreateObject(1216, 1443.277832, -991.424866, 1639.424194, 0.0000, 0.0000, 270.0000);
CreateObject(1216, 1443.251221, -987.278198, 1639.376221, 0.0000, 0.0000, 270.0000);
CreateObject(1216, 1443.259766, -985.484985, 1639.376221, 0.0000, 0.0000, 270.0000);
CreateObject(2773, 1441.228638, -993.042969, 1639.301514, 0.0000, 0.0000, 270.0000);
CreateObject(2824, 1424.297241, -992.054932, 1639.247681, 0.0000, 0.0000, 78.7500);

//FBI by Julian  AddPlayerClass(165,1807.3842,-1133.5145,24.0859,89.8733,0,0,0,0,0,0); // test
CreateObject(987, 1703.1999511719, -1130.0999755859, 23.10000038147, 0, 0, 270.5);
CreateObject(987, 1703.9000244141, -1095.6999511719, 23.10000038147, 0, 0, 269.75);
CreateObject(987, 1716.9000244141, -1095.0999755859, 23.200000762939, 0, 0, 179.75006103516);
CreateObject(987, 1728.9000244141, -1095.0999755859, 23.200000762939, 0, 0, 179.99993896484);
CreateObject(987, 1740.9000244141, -1095.1999511719, 23.200000762939, 0, 0, 179.75006103516);
CreateObject(987, 1752.9000244141, -1095.1999511719, 23.200000762939, 0, 0, 179.99993896484);
CreateObject(987, 1764.9000244141, -1095.3000488281, 23.200000762939, 0, 0, 179.49993896484);
CreateObject(987, 1776.9000244141, -1095.3000488281, 23.10000038147, 0, 0, 180);
CreateObject(987, 1788.9000244141, -1095.3000488281, 23.10000038147, 0, 0, 179.99993896484);
CreateObject(987, 1802.1999511719, -1095.4000244141, 23.10000038147, 0, 0, 179.99993896484);
CreateObject(987, 1807.5, -1095.4000244141, 23.10000038147, 0, 0, 179.99993896484);
CreateObject(987, 1807.1999511719, -1108.5999755859, 23.10000038147, 0, 0, 89.75);
CreateObject(987, 1818.4000244141, -1095.6999511719, 23.10000038147, 0, 0, 179);
CreateObject(987, 1830.4000244141, -1095.6999511719, 23.10000038147, 0, 0, 179.74993896484);
CreateObject(987, 1842.3000488281, -1095.8000488281, 23.10000038147, 0, 0, 179.25);
CreateObject(987, 1807.0999755859, -1140.9000244141, 22.89999961853, 0, 0, 269.25);
//CreateObject(987, 1807, -1140.5999755859, 23, 0, 0, 88.75);
CreateObject(987, 1793.9000244141, -1142.0999755859, 23.10000038147, 0, 0, 0);
CreateObject(987, 1781.9000244141, -1142.1999511719, 23.10000038147, 0, 0, 0);
CreateObject(987, 1769.9000244141, -1142.1999511719, 23.10000038147, 0, 0, 0);
CreateObject(987, 1757.9000244141, -1142.1999511719, 23.10000038147, 0, 0, 0);
CreateObject(987, 1754.4000244141, -1142.1999511719, 23.10000038147, 0, 0, 0);
CreateObject(3749, 1729.6999511719, -1140.5, 28.89999961853, 0, 0, 0);
CreateObject(1997, 1718.9000244141, -1129.4000244141, 23.10000038147, 0, 0, 269.5);
CreateObject(2990, 1710.0999755859, -1141.6999511719, 27, 0, 0, 0);
CreateObject(2990, 1716.8000488281, -1141.6999511719, 27, 0, 0, 0);
CreateObject(2990, 1744.3000488281, -1141.5, 27, 0, 0, 0);
CreateObject(2990, 1751, -1141.5, 27, 0, 0, 0);


    //Stadthalle Die glassscheiben
    CreateObject(1649, 1492.1999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateObject(1649, 1492.19921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateObject(1649, 1492.19921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateObject(1649, 1492.19921875, -1751.5, 26, 0, 0, 0);
    CreateObject(1649, 1486.6999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateObject(1649, 1486.69921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateObject(1649, 1486.69921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateObject(1649, 1486.69921875, -1751.5, 26, 0, 0, 0);
    CreateObject(1649, 1481.1999511719, -1751.5, 19.39999961853, 0, 0, 0);
    CreateObject(1649, 1481.19921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateObject(1649, 1481.19921875, -1751.5, 26, 0, 0, 0);
    CreateObject(1649, 1475.6999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateObject(1649, 1475.69921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateObject(1649, 1475.69921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateObject(1649, 1475.69921875, -1751.5, 26, 0, 0, 0);
    CreateObject(1649, 1470.1999511719, -1751.5999755859, 16.10000038147, 0, 0, 0);
    CreateObject(1649, 1470.19921875, -1751.599609375, 19.39999961853, 0, 0, 0);
    CreateObject(1649, 1470.19921875, -1751.599609375, 22.700000762939, 0, 0, 0);
    CreateObject(1649, 1470.19921875, -1751.599609375, 26, 0, 0, 0);
    CreateObject(1649, 1492.1999511719, -1751.5, 16.10000038147, 0, 0, 180);
    CreateObject(1649, 1492.19921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateObject(1649, 1492.19921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateObject(1649, 1492.19921875, -1751.5, 26, 0, 0, 180);
    CreateObject(1649, 1486.6999511719, -1751.5, 16.10000038147, 0, 0, 180);
    CreateObject(1649, 1486.69921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateObject(1649, 1486.69921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateObject(1649, 1486.69921875, -1751.5, 26, 0, 0, 180);
    CreateObject(1649, 1481.1999511719, -1751.5, 19.39999961853, 0, 0, 180);
    CreateObject(1649, 1481.19921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateObject(1649, 1481.19921875, -1751.5, 26, 0, 0, 180);
    CreateObject(1649, 1475.6999511719, -1751.5, 16.10000038147, 0, 180, 180);
    CreateObject(1649, 1475.69921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateObject(1649, 1475.69921875, -1751.5, 22.700000762939, 0, 180, 180);
    CreateObject(1649, 1475.69921875, -1751.5, 26, 0, 0, 180);
    CreateObject(1649, 1470.1999511719, -1751.5999755859, 16.10000038147, 0, 0, 180);
    CreateObject(1649, 1470.19921875, -1751.599609375, 19.39999961853, 0, 0, 180);
    CreateObject(1649, 1470.19921875, -1751.599609375, 22.700000762939, 0, 0, 180);
    CreateObject(1649, 1470.19921875, -1751.599609375, 26, 0, 0, 180);
    CreateObject(3471, 1478.5, -1749.6999511719, 15.699999809265, 0, 0, 90);
    CreateObject(3471, 1483.7998046875, -1749.69921875, 15.699999809265, 0, 0, 90);
    //LS Große Straße Palmen Linie mit blumen in der nähe von bank
    CreateObject(669, 1306.768677, -1547.639893, 12.669865, 0.0000, 0.0000, 0.0000);
    CreateObject(669, 1312.129272, -1527.759033, 12.869863, 0.0000, 0.0000, 0.0000);
    CreateObject(669, 1322.687744, -1509.135254, 12.869862, 0.0000, 0.0000, 90.0000);
    CreateObject(669, 1335.822510, -1486.952759, 12.869862, 0.0000, 0.0000, 90.0000);
    CreateObject(669, 1344.699219, -1459.157349, 12.862068, 0.0000, 0.0000, 90.0000);
    CreateObject(669, 1348.442505, -1435.367310, 12.869862, 0.0000, 0.0000, 11.2500);
//
CreateObject(1232, 1557.8000488281, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1557.9000244141, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1564.3000488281, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1564.1999511719, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1569.6999511719, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1569.0999755859, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1575.5, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateObject(1232, 1576.0999755859, -1633.1999511719, 14.199999809265, 0, 0, 0);

//BALLAS//

	CreateDynamicObject(974, 1073.6999511719, -1207.5, 18.799999237061, 0, 2, 268);
	CreateDynamicObject(974, 1121.3000488281, -1159.9000244141, 25.39999961853, 0, 1.99951171875, 177.99499511719);
	CreateDynamicObject(974, 1118.0999755859, -1159.8000488281, 25.39999961853, 0, 1.99951171875, 177.99499511719);
	CreateDynamicObject(994, 1090.9000244141, -1222.5999755859, 14.89999961853, 0, 0, 272);
	CreateDynamicObject(994, 1094.9000244141, -1222.5999755859, 14.89999961853, 0, 0, 269.99951171875);
	CreateDynamicObject(994, 1098.5, -1222.5999755859, 14.800000190735, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1102.1999511719, -1222.6999511719, 14.800000190735, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1105.8000488281, -1222.8000488281, 14.800000190735, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1109.5, -1222.6999511719, 14.800000190735, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1090.8000488281, -1215.6999511719, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1094.9000244141, -1215.8000488281, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1098.5, -1215.8000488281, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1102.1999511719, -1215.8000488281, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1105.8000488281, -1215.9000244141, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1109.5999755859, -1215.9000244141, 16.799999237061, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1113, -1215.8000488281, 16.799999237061, 0, 0, 269.98901367188);
   CreateDynamicObject(12839, 1086.0999755859, -1223.1999511719, 14.60000038147, 0, 0, 90);
//	CreateDynamicObject(982, 1141, -1225.0999755859, 25, 0, 0, 0);
    CreateObject(974, 1161.5, -1208.8000488281, 20.60000038147, 0, 0, 269.70544433594);
    CreateObject(974, 1161.5999755859, -1202.0999755859, 20.60000038147, 0, 0, 268.70361328125);
	CreateDynamicObject(982, 1121.9000244141, -1225.1999511719, 25, 0, 0, 0);
	CreateDynamicObject(984, 1141, -1244.3000488281, 24.89999961853, 0, 0, 0);
	CreateDynamicObject(984, 1121.9000244141, -1244.4000244141, 24.89999961853, 0, 0, 0);
	CreateDynamicObject(984, 1134.6999511719, -1253.4000244141, 24.89999961853, 0, 0, 270);
	CreateDynamicObject(984, 1128.3000488281, -1253.4000244141, 24.89999961853, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1134.5999755859, -1212.1999511719, 24.89999961853, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1128.1999511719, -1212.1999511719, 24.89999961853, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1141.0999755859, -1250.1999511719, 25, 0, 0, 0);
 	CreateDynamicObject(3934, 1131.5999755859, -1232.8000488281, 24.299999237061, 0, 0, 0);

	ballastor = CreateObject(980, 1141.0999755859, -1206.5, 20.5, 0, 0, 271.70556640625);//Tor Oben


//Fahrschule bye  JULIAN
CreateObject(987, 1289.0999755859, -1785.6999511719, 12.5, 0, 0, 179.25);
CreateObject(987, 1289, -1797.5999755859, 12.5, 0, 0, 90);
CreateObject(987, 1289, -1809.5999755859, 12.5, 0, 0, 90);
CreateObject(987, 1289, -1821.5999755859, 12.5, 0, 0, 90.75);
CreateObject(987, 1289, -1833.5999755859, 12.5, 0, 0, 90);
CreateObject(987, 1289.0999755859, -1845.5999755859, 12.5, 0, 0, 90.5);
CreateObject(987, 1277.1999511719, -1845.5999755859, 12.5, 0, 0, 0);
CreateObject(3749, 1270, -1844.9000244141, 18.200000762939, 0, 0, 0);
CreateObject(987, 1252.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateObject(987, 1240.1999511719, -1845.5999755859, 12.5, 0, 0, 0);
CreateObject(987, 1228.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateObject(3749, 1214.1999511719, -1844.9000244141, 18.200000762939, 0, 0, 0);
CreateObject(987, 1220.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateObject(987, 1196.4000244141, -1845.4000244141, 12.60000038147, 0, 0, 0);
CreateObject(987, 1188.8000488281, -1845.4000244141, 12.60000038147, 0, 0, 0);
CreateObject(987, 1188.8000488281, -1833.5, 12.60000038147, 0, 0, 269.99996948242);
CreateObject(987, 1188.8000488281, -1821.5, 12.60000038147, 0, 0, 269.99996948242);
CreateObject(987, 1189, -1809.5999755859, 12.60000038147, 0, 0, 269.99996948242);

//Wheelman

//	wheeltor = CreateObject(980, 1812.9000244141, -2071.8999023438, 15.300000190735, 0, 0, 270);
	
	CreateDynamicObject(984, 1770.8000488281, -2025.9000244141, 13.800000190735, 0, 0, 90);
	CreateDynamicObject(17950, 1808.0999755859, -2023.4000244141, 14.800000190735, 0, 0, 90);
	CreateDynamicObject(17950, 1808.0999755859, -2030.5999755859, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(17950, 1808.0999755859, -2037.8000488281, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(17950, 1808.0999755859, -2045, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(8615, 1807.8000488281, -2049.5, 15.300000190735, 0, 0, 0);
	CreateDynamicObject(987, 1683.5999755859, -2065.8000488281, 12.60000038147, 0, 0, 270);
	CreateDynamicObject(987, 1683.8000488281, -2053.8000488281, 12.60000038147, 0, 0, 269.74450683594);
	CreateDynamicObject(987, 1784.8000488281, -2018.4000244141, 13.10000038147, 0, 0, 180);

//VAGOS//
	CreateDynamicObject(8613, 2791.5, -1621, 14.300000190735, 0, 0, 252);
	CreateDynamicObject(1472, 2793.6000976563, -1624.8000488281, 18.10000038147, 0, 0, 162);
	CreateDynamicObject(1472, 2793.3000488281, -1625.9000244141, 18.89999961853, 0, 0, 161.99340820313);
	CreateDynamicObject(1472, 2793.1000976563, -1626.6999511719, 19.700000762939, 0, 0, 161.99340820313);
	CreateDynamicObject(3934, 2781, -1636.3000488281, 20.39999961853, 0, 0, 270);
	CreateDynamicObject(3749, 2800.3999023438, -1585.9000244141, 15.800000190735, 0, 0, 336);

	vagostor = CreateObject(980, 2800.6000976563, -1585.5, 12.699999809265, 0, 0, 336);

//GSF TREPPE//
    CreateDynamicObject(12985, 2527.1999511719, -1685.5999755859, 15.800000190735, 0, 0, 90);

//=========================================Noobspawn================================//
CreateDynamicObject(3749, 500.19921875, -1556.2998046875, 20.89999961853, 3.460693359375, 0, 37.880859375);
CreateDynamicObject(3749, 502.70001220703, -1559.4000244141, 20.89999961853, 3.460693359375, 0, 38.344604492188);
CreateDynamicObject(3749, 505.29998779297, -1562.5999755859, 20.89999961853, 3.4552001953125, 0, 38.592041015625);
CreateDynamicObject(3749, 507.79998779297, -1565.5, 20.89999961853, 3.4552001953125, 0, 40.342041015625);
CreateDynamicObject(3749, 510.20001220703, -1568.3000488281, 20.89999961853, 3.4552001953125, 0, 40.341796875);
CreateDynamicObject(3749, 511.70001220703, -1570, 20.89999961853, 3.4552001953125, 0, 40.841796875);
CreateDynamicObject(974, 506.39999389648, -1572.6999511719, 17.89999961853, 0, 356.53674316406, 130.37210083008);
CreateDynamicObject(974, 502.29998779297, -1567.9000244141, 17.89999961853, 0, 356.53381347656, 130.36926269531);
CreateDynamicObject(974, 498.10000610352, -1562.8000488281, 17.89999961853, 0, 356.53381347656, 129.11926269531);
CreateDynamicObject(974, 496.29998779297, -1560.5999755859, 17.89999961853, 0, 356.53381347656, 129.11926269531);
CreateDynamicObject(974, 515.09997558594, -1565.1999511719, 17.89999961853, 0, 356.53381347656, 132.61932373047);
CreateDynamicObject(974, 510.79998779297, -1560.1999511719, 17.89999961853, 0, 356.5283203125, 128.61596679688);
CreateDynamicObject(974, 506.60000610352, -1555, 17.89999961853, 0, 356.52282714844, 129.11145019531);
CreateDynamicObject(974, 505.5, -1553.5999755859, 17.89999961853, 0, 356.52282714844, 128.111328125);
CreateDynamicObject(3749, 495.39999389648, -1460.8000488281, 20.89999961853, 3.460693359375, 0, 329.86590576172);
CreateDynamicObject(3749, 497.29998779297, -1457.5999755859, 20.89999961853, 3.4552001953125, 0, 329.36450195313);
CreateDynamicObject(3749, 499.10000610352, -1454.8000488281, 20.5, 3.4552001953125, 0, 323.66424560547);
CreateDynamicObject(3749, 500.89999389648, -1452.3000488281, 20.10000038147, 3.4552001953125, 0, 323.66271972656);
CreateDynamicObject(3749, 503.20001220703, -1449.1999511719, 19.700000762939, 3.4552001953125, 0, 323.66271972656);
CreateDynamicObject(3749, 505.5, -1446.1999511719, 19.700000762939, 3.4552001953125, 0, 321.93109130859);
CreateDynamicObject(3749, 507.20001220703, -1444, 19.39999961853, 3.4552001953125, 0, 320.9453125);
CreateDynamicObject(974, 511, -1448.5, 16.60000038147, 0, 358.26837158203, 50.217224121094);
CreateDynamicObject(974, 507.20001220703, -1453.4000244141, 17.200000762939, 0, 6.9223327636719, 53.213012695313);
CreateDynamicObject(974, 504.20001220703, -1457.5, 17.799999237061, 0, 358.25866699219, 55.657165527344);
CreateDynamicObject(974, 501.10000610352, -1462.4000244141, 18, 0, 358.25866699219, 60.369873046875);
CreateDynamicObject(974, 502.10000610352, -1441.1999511719, 16.60000038147, 0, 359.99584960938, 52.463012695313);
CreateDynamicObject(974, 498.10000610352, -1446.5, 17, 0, 359.99450683594, 53.709716796875);
CreateDynamicObject(974, 494.20001220703, -1451.9000244141, 17.39999961853, 0, 359.98901367188, 53.706665039063);
CreateDynamicObject(974, 491.10000610352, -1456.6999511719, 18, 0, 356.52575683594, 59.401550292969);
CreateDynamicObject(1215, 512.79998779297, -1445.8000488281, 14.300000190735, 0, 0, 0);
CreateDynamicObject(1215, 511.29998779297, -1447.5999755859, 14.300000190735, 0, 0, 0);
CreateDynamicObject(1215, 509.20001220703, -1450.0999755859, 14.39999961853, 0, 0, 0);
CreateDynamicObject(1215, 507.10000610352, -1452.9000244141, 14.800000190735, 0, 0, 0);
CreateDynamicObject(1215, 505.20001220703, -1455.4000244141, 15.5, 0, 0, 0);
CreateDynamicObject(1215, 503.10000610352, -1458.1999511719, 16.299999237061, 0, 0, 0);
CreateDynamicObject(1215, 501.20001220703, -1461.4000244141, 16.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 499.70001220703, -1464.0999755859, 17.200000762939, 0, 0, 0);
CreateDynamicObject(1215, 490.39999389648, -1458.9000244141, 17.200000762939, 0, 0, 0);
CreateDynamicObject(1215, 491.70001220703, -1456.5999755859, 16.799999237061, 0, 0, 0);
CreateDynamicObject(1215, 493.39999389648, -1453.6999511719, 16.5, 0, 0, 0);
CreateDynamicObject(1215, 495.60000610352, -1450.5999755859, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 497.60000610352, -1447.9000244141, 15.300000190735, 0, 0, 0);
CreateDynamicObject(1215, 499.70001220703, -1445, 14.699999809265, 0, 0, 0);
CreateDynamicObject(1215, 501.89999389648, -1442.3000488281, 14.699999809265, 0, 0, 0);
CreateDynamicObject(1215, 504.20001220703, -1439.1999511719, 14.699999809265, 0, 0, 0);
CreateDynamicObject(1215, 503.10000610352, -1551.5, 16.700000762939, 0, 0, 0);
CreateDynamicObject(1215, 504.79998779297, -1553.9000244141, 16.39999961853, 0, 0, 0);
CreateDynamicObject(1215, 506.89999389648, -1556.5, 16.200000762939, 0, 0, 0);
CreateDynamicObject(1215, 509.10000610352, -1559.5, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 512.20001220703, -1562.9000244141, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 514.20001220703, -1565.3000488281, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 516.29998779297, -1567.5, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 508, -1574.0999755859, 15.699999809265, 0, 0, 0);
CreateDynamicObject(1215, 505.79998779297, -1571.5999755859, 15.800000190735, 0, 0, 0);
CreateDynamicObject(1215, 503.20001220703, -1568.5999755859, 15.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 501.10000610352, -1566.0999755859, 16.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 498.70001220703, -1563.1999511719, 16.200000762939, 0, 0, 0);
CreateDynamicObject(1215, 496.70001220703, -1560.6999511719, 16.5, 0, 0, 0);
CreateDynamicObject(1215, 494.60000610352, -1558, 16.60000038147, 0, 0, 0);
CreateDynamicObject(3511, 485.60000610352, -1463.1999511719, 16.89999961853, 0, 0, 0);
CreateDynamicObject(3511, 499, -1469.8000488281, 16.89999961853, 0, 0, 0);
CreateDynamicObject(3511, 501.60000610352, -1546.0999755859, 16.39999961853, 0, 0, 0);
CreateDynamicObject(3511, 489.70001220703, -1555.4000244141, 16.39999961853, 0, 0, 0);
//=========================================Noobspawn================================//

//LSPD
CreateObject(9131, 1539.9000244141, -1622.5, 13.699999809265, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1622.5, 15.800000190735, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1622.5, 17.39999961853, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1633.4000244141, 13.699999809265, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1633.4000244141, 15.699999809265, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1633.4000244141, 17.39999961853, 0, 0, 0);
CreateObject(9131, 1539.9000244141, -1623.9000244141, 18.200000762939, 270.0439453125, 179.99450683594, 179.99871826172);
CreateObject(9131, 1539.9000244141, -1626, 18.200000762939, 270.0439453125, 179.99450683594, 179.99450683594);
CreateObject(9131, 1539.9000244141, -1628, 18.200000762939, 270.0439453125, 179.99450683594, 179.99450683594);
CreateObject(9131, 1539.9000244141, -1630, 18.200000762939, 270.0439453125, 179.99450683594, 179.99450683594);
CreateObject(9131, 1539.9000244141, -1632.1999511719, 18.200000762939, 270.0439453125, 179.99450683594, 179.99450683594);
CreateObject(987, 1539.8000488281, -1610.3000488281, 12.300000190735, 0, 0, 270.43713378906);
CreateObject(987, 1539.8000488281, -1602.5, 12.300000190735, 0, 0, 270.43395996094);
CreateObject(987, 1551.6999511719, -1602.5999755859, 12.300000190735, 0, 0, 180.38934326172);
CreateObject(987, 1563.6999511719, -1602.5999755859, 12.300000190735, 0, 0, 180.13452148438);
CreateObject(987, 1575.6999511719, -1602.5999755859, 12.300000190735, 0, 0, 179.8818359375);
CreateObject(987, 1587.6999511719, -1602.5999755859, 12.300000190735, 0, 0, 179.87915039063);
CreateObject(987, 1599.6999511719, -1602.5999755859, 12.300000190735, 0, 0, 179.87915039063);
CreateObject(987, 1607.9000244141, -1602.6999511719, 12.300000190735, 0, 0, 179.87915039063);
CreateObject(987, 1607.8000488281, -1614.5999755859, 12.300000190735, 0, 0, 89.83447265625);
CreateObject(987, 1607.8000488281, -1626.5999755859, 12.300000190735, 0, 0, 89.829711914063);
CreateObject(987, 1607.8000488281, -1638, 12.300000190735, 0, 0, 89.829711914063);
CreateObject(987, 1595.8000488281, -1637.8000488281, 12.300000190735, 0, 0, 359.78509521484);
CreateObject(987, 1539.8000488281, -1633.5999755859, 12.300000190735, 0, 0, 311.99298095703);
CreateObject(1215, 1537.8000488281, -1622.1999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1536.2998046875, -1621.19921875, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1535.3000488281, -1619.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1534.8000488281, -1618, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1537.6999511719, -1633.5999755859, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1536.3000488281, -1634.5999755859, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1535.1999511719, -1636.3000488281, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1534.8000488281, -1637.8000488281, 13.10000038147, 0, 0, 0);
CreateObject(983, 1534.6999511719, -1605.5, 13.199999809265, 0, 0, 0);
CreateObject(983, 1534.6999511719, -1611.5, 13.199999809265, 0, 0, 0);
CreateObject(983, 1534.6999511719, -1614.6999511719, 13.199999809265, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1644.3000488281, 13.199999809265, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1657.0999755859, 13.199999809265, 0, 0, 0);
CreateObject(1215, 1534.8000488281, -1663.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1715.9000244141, 13.199999809265, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1703.0999755859, 13.199999809265, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1690.3000488281, 13.199999809265, 0, 0, 0);
CreateObject(984, 1534.6999511719, -1688.6999511719, 13.199999809265, 0, 0, 0);
CreateObject(1215, 1534.8000488281, -1682.1999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1534.8000488281, -1681.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(983, 1537.5, -1667.0999755859, 13.10000038147, 0, 0, 0);
CreateObject(983, 1537.5, -1678.4000244141, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1535.5999755859, -1663.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1536.4000244141, -1663.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1537.3000488281, -1663.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1535.5999755859, -1681.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1536.4000244141, -1681.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(1215, 1537.0999755859, -1681.6999511719, 13.10000038147, 0, 0, 0);
CreateObject(18284, 1598.19921875, -1606.8994140625, 15.10000038147, 0, 0, 90.291137695313);
CreateObject(18284, 1581.69921875, -1606.8994140625, 15.10000038147, 0, 0, 90.28564453125);
CreateObject(17950, 1545.19921875, -1610, 14.60000038147, 0, 0, 269.95056152344);
CreateObject(715, 1554, -1621.1999511719, 20.39999961853, 0, 0, 335.00610351563);
CreateObject(715, 1560.5, -1621.5999755859, 20.39999961853, 0, 0, 283.05725097656);
CreateObject(715, 1569, -1621.1999511719, 20.39999961853, 0, 0, 283.05725097656);
CreateObject(715, 1576.9000244141, -1621.3000488281, 20.39999961853, 0, 0, 291.71545410156);
CreateObject(715, 1573.6999511719, -1636.5999755859, 20.39999961853, 0, 0, 283.05725097656);
CreateObject(715, 1566.5, -1636.8000488281, 20.39999961853, 0, 0, 283.05725097656);
CreateObject(715, 1559.5999755859, -1636.6999511719, 20.39999961853, 0, 0, 283.05725097656);
CreateObject(715, 1553, -1636.6999511719, 20.39999961853, 0, 0, 283.05725097656);
/*CreateObject(1232, 1554.0999755859, -1627.5999755859, 14.39999961853, 0, 0, 0);
CreateObject(1232, 1559.4000244141, -1627.5999755859, 14.39999961853, 0, 0, 0);
CreateObject(1232, 1564.6999511719, -1627.5999755859, 14.39999961853, 0, 0, 0);
CreateObject(1232, 1570.5, -1627.6999511719, 14.39999961853, 0, 0, 0);
CreateObject(1232, 1576.3000488281, -1627.6999511719, 14.300000190735, 0, 0, 0);
CreateObject(1232, 1581.8000488281, -1627.8000488281, 14.39999961853, 0, 0, 0);
CreateObject(1232, 1548.8000488281, -1627.5999755859, 14.300000190735, 0, 0, 0);*/
//CreateObject(3660, 1572.1999511719, -1627.5, 14.39999961853, 0, 0, 359.75);RAUS DAMIT SCHEIß
//CreateObject(3660, 1558.4000244141, -1627.4000244141, 14.39999961853, 0, 0, 359.49462890625);RAUS DAMIT SCHEIß
CreateObject(984, 1570.6999511719, -1622.8000488281, 13.199999809265, 0, 0, 269.95544433594);
CreateObject(984, 1557.9000244141, -1622.8000488281, 13.199999809265, 0, 0, 269.95056152344);
CreateObject(984, 1546.6999511719, -1622.8000488281, 13.199999809265, 0, 0, 269.95056152344);
CreateObject(984, 1570.8000488281, -1617.5999755859, 13.199999809265, 0, 0, 270.20056152344);
CreateObject(984, 1558, -1617.5999755859, 13.199999809265, 0, 0, 270.19775390625);
CreateObject(984, 1554.8000488281, -1617.5999755859, 13.199999809265, 0, 0, 270.19775390625);
CreateObject(984, 1571.4000244141, -1633, 13.199999809265, 0, 0, 269.95056152344);
CreateObject(984, 1559.5, -1633, 13.199999809265, 0, 0, 270.20056152344);
CreateObject(984, 1546.6999511719, -1633, 13.199999809265, 0, 0, 270.20056152344);
CreateObject(8613, 1581.8000488281, -1659.6999511719, 23.60000038147, 0, 0, 90.044677734375);
CreateObject(12985, 1599.8000488281, -1635.1999511719, 16.60000038147, 0, 0, 0);
CreateObject(3749, 1546.5, -1627.5999755859, 17.700000762939, 0, 0, 271.18707275391);
CreateObject(3666, 1539.8000488281, -1622.5, 18.60000038147, 0, 0, 0);
CreateObject(3666, 1539.9000244141, -1633.4000244141, 18.60000038147, 0, 0, 0);
// Hafen 1 an der anderen Seite
     CreateDynamicObject(3458, -169.906006, -1785.358765, -1.203387, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -147.863464, -1789.263306, -1.428164, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -155.607635, -1828.442993, -1.393290, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -140.066315, -1749.870117, -1.403008, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -118.190384, -1731.279663, -1.256134, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3458, -142.605820, -1853.682739, -1.333315, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(10828, -135.702881, -1832.218872, -2.452391, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -132.119354, -1813.138184, -2.490521, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -128.915741, -1793.497192, -2.486747, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -124.224411, -1769.919922, -2.496351, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -120.116837, -1750.776978, -2.448018, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1461, -145.670425, -1788.136475, 0.901519, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -141.052292, -1763.114746, 0.926675, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -137.107422, -1743.447510, 0.926675, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -99.642639, -1734.827637, 1.073549, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -149.885025, -1806.434204, 0.901519, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -153.238068, -1826.211182, 0.936393, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -123.582947, -1857.458496, 0.996368, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(5184, -219.255280, -1766.264404, 19.702538, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(5184, -242.773193, -1761.256836, 19.015713, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3187, -208.763885, -1776.380005, 4.872223, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(2714, -208.681702, -1767.651001, 2.457701, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(8550, -221.425262, -1808.126099, 5.067808, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -199.768417, -1775.765015, 1.516759, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -200.485809, -1781.020874, 1.516759, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(669, -246.720764, -1795.008301, 7.659835, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(669, -237.947906, -1774.729858, 4.999296, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(970, -200.132965, -1784.498047, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -200.921524, -1788.499023, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -201.732025, -1792.569702, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -202.529053, -1796.565552, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -203.357315, -1800.639404, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -204.141205, -1804.647339, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -204.924149, -1808.640503, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -205.725708, -1812.739624, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -206.498322, -1816.804321, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -207.328262, -1820.904297, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -208.111160, -1824.978149, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -208.933426, -1829.151855, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -209.473007, -1831.861450, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -211.927963, -1833.371948, 1.371206, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -216.016541, -1832.566040, 1.371206, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -220.114746, -1831.716919, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -224.270309, -1830.913086, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -228.283478, -1830.123291, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -232.341919, -1829.346680, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -236.517151, -1828.562012, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -240.581451, -1827.786255, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -244.640274, -1826.977783, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -248.572006, -1825.800537, 1.374410, 0.0000, 0.0000, 157.5000);
     CreateDynamicObject(970, -252.463745, -1824.239746, 1.371206, 0.0000, 0.0000, 157.5000);
     CreateDynamicObject(970, -197.676712, -1773.637817, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -196.886871, -1769.660522, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -195.926178, -1764.787109, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -195.155594, -1760.773315, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -194.359451, -1756.641968, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -193.581192, -1752.629150, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -192.817093, -1748.612793, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -192.007813, -1744.508789, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -191.164688, -1740.436035, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -190.321869, -1736.370239, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -189.489395, -1732.304321, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -188.688690, -1728.250122, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -187.850220, -1724.172241, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -187.073456, -1720.089844, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -186.301270, -1716.078979, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -185.600754, -1712.152710, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -185.040085, -1709.005615, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -186.679504, -1706.583374, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -190.708817, -1705.793213, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -194.769196, -1704.972534, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -198.803589, -1704.151367, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -202.892410, -1703.341064, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -206.918198, -1702.553955, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -211.006500, -1701.731445, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(638, -198.980865, -1762.132446, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -196.927292, -1751.622070, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -195.143433, -1742.867920, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -193.074493, -1732.727173, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -190.849854, -1721.287598, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -204.422562, -1785.903320, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -205.575211, -1792.153809, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -207.343735, -1801.083618, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -209.129623, -1809.614624, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -211.778656, -1823.270508, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2587, -206.582870, -1773.165894, 2.022864, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(2588, -205.829422, -1769.378052, 2.558418, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(2599, -205.495224, -1774.545898, 1.286638, 0.0000, 0.0000, 292.5000);
     CreateDynamicObject(1481, -210.262772, -1781.321899, 1.522851, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1481, -211.390625, -1781.101807, 1.522851, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(16151, -212.717422, -1781.659912, 1.211478, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1281, -218.090454, -1791.579590, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -213.093277, -1786.695313, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -210.974442, -1793.356079, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -222.083817, -1784.283569, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -192.457367, -1727.586548, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -190.274261, -1716.381470, 3.550118, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -194.448547, -1737.637329, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -196.061096, -1746.895874, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -197.989304, -1756.316406, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -206.144470, -1795.570801, 3.550118, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -207.640366, -1804.556885, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -209.656158, -1814.698975, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -211.921539, -1826.656494, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1646, -218.607574, -1819.992188, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1646, -218.788498, -1822.797607, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1646, -219.276520, -1826.022705, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1676, -101.679184, -1732.878906, 1.853202, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1676, -125.036003, -1858.868286, 1.776021, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -198.437820, -1779.719971, -1.283246, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -169.660339, -1785.475952, -1.307508, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -140.484436, -1726.962158, -1.340826, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3458, -166.490250, -1849.296631, -1.465709, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(1461, -206.285645, -1798.071655, 1.620938, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1461, -196.184875, -1748.688232, 1.624141, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(9237, -195.864822, -1714.607300, 8.805156, 0.0000, 0.0000, 168.7499);
     CreateDynamicObject(5152, -235.263214, -1728.845215, 1.858285, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -234.863113, -1726.731934, 1.920299, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -235.599884, -1730.792603, 1.803543, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3406, -240.562805, -1725.526978, 0.875801, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3406, -240.952545, -1727.528076, 0.865175, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3406, -241.327469, -1729.483276, 0.867492, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(8420, -235.006424, -1738.029053, 0.870311, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(638, -222.344025, -1740.557129, 1.700157, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -229.468781, -1739.096680, 1.700157, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -207.347610, -1724.166870, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(638, -203.171387, -1724.884521, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(638, -198.849045, -1725.574829, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1231, -212.670380, -1724.180908, 3.780391, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -205.418961, -1724.271240, 3.577266, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -200.945969, -1725.309204, 3.780391, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -225.759155, -1739.775513, 3.733516, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -211.498688, -1706.527832, 3.780391, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2773, -201.242035, -1773.199097, 1.336953, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2773, -200.686172, -1770.127563, 1.361953, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2796, -214.811600, -1775.020630, 2.336676, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(3666, -226.557678, -1758.541016, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -223.163895, -1759.122925, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -220.017609, -1759.714722, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -216.881943, -1760.318604, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -214.042953, -1760.891113, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -211.104675, -1761.548584, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -208.093292, -1762.134033, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -108.299225, -1773.037231, 0.663969, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -104.712440, -1753.843018, 0.868894, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -112.752914, -1796.811890, 0.673573, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -116.567947, -1816.287598, 0.669799, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -119.861382, -1835.384033, 0.707929, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, -221.810455, -1829.379761, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -227.412872, -1828.293823, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -232.962753, -1826.917114, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1643, -224.707489, -1828.770874, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1643, -230.183624, -1827.778442, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1643, -236.073822, -1826.617310, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(3657, -224.181580, -1827.404175, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3657, -229.791016, -1826.450439, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3657, -235.623322, -1825.346558, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -223.987030, -1823.298340, 1.620107, 0.0000, 0.0000, 33.7500);
     CreateDynamicObject(1281, -228.744110, -1820.457397, 1.620107, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(5184, -268.501099, -1799.074585, 19.338663, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -234.780762, -1820.450928, 1.963762, 0.0000, 0.0000, 22.5000);
     CreateDynamicObject(1231, -239.854080, -1824.321411, 3.553320, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(1231, -219.485794, -1828.553833, 3.550118, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1210, -207.079453, -1778.610962, 1.718162, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(5152, -233.285431, -1727.111206, 1.145057, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -234.681610, -1729.018066, 1.570056, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -235.076584, -1730.903687, 1.560713, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -247.368256, -1724.213989, 1.923523, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(5152, -247.776413, -1726.182007, 1.930465, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(5152, -248.105225, -1728.009521, 1.948787, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -244.057159, -1729.954956, 3.395098, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -239.959290, -1730.778076, 3.396802, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -243.027176, -1724.072632, 3.505111, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -238.946716, -1724.882813, 3.498100, 0.0000, 0.0000, 348.7500);

//Banktresortür
    CreateDynamicObject(2963, 2144.2492675781, 1606.7133789063, 994.75732421875, 0, 0, 270.67565917969);

//========FBIBASE===============//
	CreateDynamicObject(987, 1178.0380859375, 980.310546875, 8.9260787963867, 0, 0, 87.994995117188);
	CreateDynamicObject(987, 1178.9453125, 1040.2801513672, 9.5062370300293, 0, 0, 90);
	CreateDynamicObject(987, 1178.9816894531, 1028.3618164063, 9.5100936889648, 0, 0, 90);
	CreateDynamicObject(987, 1178.8502197266, 1016.3881835938, 9.5353927612305, 0, 0, 90);
	CreateDynamicObject(987, 1178.4108886719, 992.35913085938, 9.2585601806641, 0, 0, 87.994995117188);
	CreateDynamicObject(987, 1178.9259033203, 1004.2803955078, 9.5207080841064, 0, 0, 90);
	CreateDynamicObject(987, 1178.9119873047, 1051.9990234375, 9.5211181640625, 0, 0, 90);
	CreateDynamicObject(987, 1178.849609375, 1063.9155273438, 9.5313148498535, 0, 0, 90);
	CreateDynamicObject(987, 1179.0186767578, 1075.9379882813, 9.4985189437866, 0, 0, 90);
	CreateDynamicObject(987, 1179.0883789063, 1085.9412841797, 9.4849796295166, 0, 0, 91);
	CreateDynamicObject(987, 1178.9334716797, 1097.9122314453, 9.5150375366211, 0, 0, 91.25);
	CreateDynamicObject(987, 1178.8322753906, 1109.8911132813, 9.5346870422363, 0, 0, 90);
	CreateDynamicObject(987, 1178.8864746094, 1121.7059326172, 9.5241708755493, 0, 0, 90);
	CreateDynamicObject(987, 1178.9235839844, 1133.6904296875, 9.5169620513916, 0, 0, 90);
	CreateDynamicObject(987, 1178.9366455078, 1145.5983886719, 9.5144329071045, 0, 0, 88);
	CreateDynamicObject(987, 1179.2409667969, 1157.4739990234, 9.4575624465942, 0, 0, 90);
	CreateDynamicObject(987, 1179.3043212891, 1169.2192382813, 9.3855571746826, 0, 0, 180);
	CreateDynamicObject(987, 1167.3989257813, 1169.2662353516, 9.8203144073486, 0, 0, 179.75);
	CreateDynamicObject(987, 1155.9406738281, 1169.4471435547, 9.8203125, 0, 0, 180);
	CreateDynamicObject(987, 1152.9858398438, 1169.6853027344, 9.8203125, 0, 0, 180);
	CreateDynamicObject(987, 1141, 1169.6999511719, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1257.4105224609, 1183.1394042969, 9.8220815658569, 0, 0, 0);
	CreateDynamicObject(987, 1266.6187744141, 1183.1247558594, 10.583161354065, 0, 0, 0);
	CreateDynamicObject(987, 1257.8331298828, 1203.44921875, 9.8203125, 0, 0, 88);
	CreateDynamicObject(987, 1247.4853515625, 1183.1796875, 9.2218036651611, 0, 0, 0);
	CreateDynamicObject(987, 976.55859375, 1161.1025390625, 9.8203125, 0, 0, 0);
	CreateDynamicObject(987, 988.572265625, 1160.951171875, 9.8203125, 0, 0, 0);
	CreateDynamicObject(987, 1000.5529785156, 1160.9161376953, 9.7963905334473, 0, 0, 0);
	CreateDynamicObject(987, 1129, 1169.6999511719, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1117, 1169.6999511719, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1105, 1169.6999511719, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1093, 1169.6999511719, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1081, 1169.6999511719, 9.8000001907349, 0, 0, 179.49462890625);
	CreateDynamicObject(987, 1069, 1169.8000488281, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1057, 1169.8000488281, 9.8000001907349, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1045.0999755859, 1169.8000488281, 9.8000001907349, 0, 0, 208.20593261719);
	CreateDynamicObject(987, 1009.5, 1160.9000244141, 9.8000001907349, 0, 0, 1.7683715820313);
	CreateDynamicObject(987, 976.46600341797, 1161.2048339844, 10.200552940369, 0, 0, 269.99499511719);
	CreateDynamicObject(987, 976.53271484375, 1149.4135742188, 9.8203125, 0, 0, 268);
	CreateDynamicObject(987, 976.04516601563, 1137.4187011719, 9.8203125, 0, 0, 270);
	CreateDynamicObject(987, 975.923828125, 1126.060546875, 9.8203125, 0, 0, 270);
	CreateDynamicObject(987, 975.86700439453, 1114.0334472656, 9.8203125, 0, 0, 270);
	CreateDynamicObject(987, 975.787109375, 1102.287109375, 9.8203125, 0, 0, 272.24670410156);
	CreateDynamicObject(987, 976.0693359375, 1090.5029296875, 9.8203125, 0, 0, 270);
	CreateDynamicObject(987, 976.1123046875, 1078.576171875, 9.8203125, 0, 0, 271.99951171875);
	CreateDynamicObject(3511, 1076.0595703125, 1064.84375, 9.8359375, 0, 0, 0);
	CreateDynamicObject(3511, 1097.5, 1062.4000244141, 9.8000001907349, 0, 0, 0);
	CreateDynamicObject(3511, 1100.04296875, 1083.4033203125, 9.8359375, 0, 0, 0);
	CreateDynamicObject(3511, 1079.1669921875, 1085.861328125, 9.8359375, 0, 0, 0);
	CreateDynamicObject(1597, 1073.6533203125, 1075.5107421875, 12.493319511414, 0, 0, 355.98999023438);
	CreateDynamicObject(1597, 1086.1999511719, 1059, 12.5, 0, 0, 84.263854980469);
	CreateDynamicObject(1597, 1102.5999755859, 1072.6999511719, 12.5, 0, 0, 349.99145507813);
	CreateDynamicObject(1597, 1090.0341796875, 1088.6923828125, 12.495541572571, 0, 0, 263.99047851563);
	CreateDynamicObject(983, 1074.376953125, 1068.1416015625, 10.519492149353, 0, 0, 19.9951171875);
	CreateDynamicObject(983, 1100.3000488281, 1065.3000488281, 10.5, 0, 0, 329.99633789063);
	CreateDynamicObject(983, 1102.4000244141, 1080.0999755859, 10.5, 0, 0, 21.721252441406);
	CreateDynamicObject(983, 1097.0999755859, 1086.3000488281, 10.5, 0, 0, 56.265197753906);
	CreateDynamicObject(983, 1082.5999755859, 1088.0999755859, 10.5, 0, 0, 295.72576904297);
	CreateDynamicObject(983, 1075.7978515625, 1082.0634765625, 10.519492149353, 0, 0, 327.99682617188);
	CreateDynamicObject(983, 1078.8000488281, 1061.5999755859, 10.5, 0, 0, 51.332702636719);
	CreateDynamicObject(983, 1094, 1059.9000244141, 10.5, 0, 0, 295.45782470703);
	CreateDynamicObject(987, 1166.5988769531, 982.24481201172, 9.8203125, 0, 0, 349.99145507813);
	CreateDynamicObject(987, 1155, 984.70001220703, 9.8000001907349, 0, 0, 347.99743652344);
	CreateDynamicObject(987, 1143.3000488281, 986.79998779297, 9.8000001907349, 0, 0, 349.99145507813);
	CreateDynamicObject(951, 1206.80859375, 1183.591796875, 14.746120452881, 0, 0, 0);
	CreateDynamicObject(1597, 1011.75, -947.603515625, 43.969882965088, 0, 0, 7.9925537109375);
	CreateDynamicObject(1597, 996.36932373047, -949.33166503906, 43.691112518311, 0, 0, 6);
	CreateDynamicObject(1361, 996.08312988281, -944.97839355469, 41.981330871582, 0, 0, 0);
	CreateDynamicObject(1361, 997.00756835938, -953.70428466797, 41.988544464111, 0, 0, 0);
	CreateDynamicObject(1361, 1012.5052490234, -951.95397949219, 42.267314910889, 0, 0, 0);
	CreateDynamicObject(1361, 1011.3158569336, -943.4677734375, 42.260101318359, 0, 0, 0);
	CreateDynamicObject(983, 1000.6630859375, -953.48541259766, 41.784103393555, 0, 0, 276);
	CreateDynamicObject(983, 1009.3874511719, -952.62133789063, 41.945369720459, 0, 0, 276);
	CreateDynamicObject(7390, 1009.9921875, -951.3759765625, 46.139019012451, 0, 0, 275.99853515625);
	CreateDynamicObject(7390, 1000.8022460938, -952.42852783203, 45.972499847412, 0, 0, 276);
	CreateDynamicObject(1364, 1004.9747924805, -952.78399658203, 41.964839935303, 0, 0, 8);
	CreateDynamicObject(3472, 994.47631835938, -949.82653808594, 41.0390625, 0, 0, 0);
	CreateDynamicObject(3472, 1014.2568359375, -947.21929931641, 41.3125, 0, 0, 0);
	CreateDynamicObject(7986, 1089.5185546875, 1074.2314453125, 10.955023765564, 0, 0, 0);
	CreateDynamicObject(984, 1437.16015625, -1021.7300415039, 23.487098693848, 0, 0, 270);
	CreateDynamicObject(984, 1445.1512451172, -1021.7022705078, 23.49747467041, 0, 0, 90);
	CreateDynamicObject(984, 1485.6610107422, -1021.7510986328, 23.479232788086, 0, 0, 270);
	CreateDynamicObject(984, 1479.2854003906, -1021.7370605469, 23.484477996826, 0, 0, 90);
	CreateDynamicObject(983, 1472.6923828125, -1011.2945556641, 26.527305603027, 0, 0, 0);
	CreateDynamicObject(983, 1451.7398681641, -1011.3726196289, 26.527305603027, 0, 0, 0);
	CreateDynamicObject(1597, 1461.2911376953, -1021.6787719727, 25.526954650879, 0, 0, 270);
	CreateDynamicObject(1360, 1451.2512207031, -1016.6840820313, 27.145051956177, 0, 0, 0);
	CreateDynamicObject(1360, 1472.681640625, -1016.7671508789, 27.139207839966, 0, 0, 0);
	CreateDynamicObject(1361, 1465.4758300781, -1021.8576049805, 23.81717300415, 0, 0, 0);
	CreateDynamicObject(1361, 1456.8905029297, -1022.0145874023, 23.81717300415, 0, 0, 0);
	CreateDynamicObject(1360, 1451.3155517578, -1020.2398071289, 24.179140090942, 0, 0, 0);
	CreateDynamicObject(1360, 1472.7056884766, -1020.65625, 24.023572921753, 0, 0, 0);
	CreateDynamicObject(3660, 1437.0299072266, -1033.5726318359, 25.30931854248, 0, 0, 0);
	CreateDynamicObject(3660, 1449.7769775391, -1033.5809326172, 25.30931854248, 0, 0, 0);
	CreateDynamicObject(3439, 1427.9353027344, -1033.8826904297, 28.032493591309, 0, 0, 0);
	CreateDynamicObject(3439, 1458.8978271484, -1033.8002929688, 28.032493591309, 0, 0, 0);
	CreateDynamicObject(3472, 1444.4364013672, -1033.8148193359, 23.919143676758, 0, 0, 0);
	CreateDynamicObject(983, 1007.8818359375, -943.50732421875, 41.931941986084, 0, 0, 276);
	CreateDynamicObject(983, 1001.5673217773, -944.19061279297, 41.811664581299, 0, 0, 276);
	CreateDynamicObject(983, 999.98602294922, -944.36840820313, 41.781543731689, 0, 0, 276);
	CreateDynamicObject(9833, 1088.5662841797, 1074.537109375, 13.038480758667, 0, 0, 0);
	CreateDynamicObject(7090, 1438.5743408203, -1021.0405883789, 34.073020935059, 0, 0, 266);
	CreateDynamicObject(7091, 1454.9168701172, -1020.4450683594, 33.746593475342, 0, 0, 268);
	CreateDynamicObject(7091, 1470.3420410156, -1020.4450683594, 34.046737670898, 0, 0, 268);
	CreateDynamicObject(3749, 2441.1196289063, -1659.7208251953, 18.184066772461, 0, 0, 270);
	CreateDynamicObject(987, 2440.12109375, -1669.4052734375, 12.514521598816, 0, 0, 264);
	CreateDynamicObject(987, 2440.2731933594, -1638.1162109375, 12.433465003967, 0, 0, 272);
	CreateDynamicObject(987, 2440.3950195313, -1629.4088134766, 12.390221595764, 0, 0, 270);
	CreateDynamicObject(983, 2478.5991210938, -1629.4044189453, 15.943531990051, 0, 0, 270);
	CreateDynamicObject(984, 2482.0524902344, -1722.0074462891, 13.185648918152, 0, 0, 268);
	CreateDynamicObject(3524, 2477.2158203125, -1722.0865478516, 15.435924530029, 0, 0, 0);
	CreateDynamicObject(3524, 2483.9467773438, -1722.3168945313, 15.48219871521, 0, 0, 0);
	CreateDynamicObject(3524, 2437.6472167969, -1652.3449707031, 15.385293960571, 0, 0, 276);
	CreateDynamicObject(3524, 2437.6772460938, -1666.3894042969, 15.414957046509, 0, 0, 272);
	CreateDynamicObject(969, 2540.7143554688, -1709.8244628906, 12.567720413208, 0, 0, 270);
	CreateDynamicObject(987, 1131.5, 988.90002441406, 9.8000001907349, 0, 0, 349.99145507813);
	CreateDynamicObject(3749, 1027.3000488281, 1163, 15.5, 0, 0, 359.75);
	CreateDynamicObject(3749, 1027.4000244141, 1167, 15.5, 0, 0, 359.49682617188);
	CreateDynamicObject(3749, 1027.4000244141, 1170, 15.5, 0, 0, 0.246826171875);
	CreateDynamicObject(3749, 1027.4000244141, 1174, 15.5, 0, 0, 358.53356933594);
	CreateDynamicObject(3749, 1027.5, 1177.8000488281, 15.5, 0, 0, 358.53332519531);
	CreateDynamicObject(3749, 1027.5999755859, 1181.3000488281, 15.5, 0, 0, 358.53332519531);


//LSPD Interior
	CreateDynamicObject(1649, 246.5, 119.5, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(1649, 242.19999694824, 119.5, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(1649, 250.89999389648, 119.59999847412, 1004.9000244141, 0, 0, 2);
	CreateDynamicObject(914, 239.60000610352, 112.30000305176, 1005, 0, 0, 276);
	CreateDynamicObject(914, 239.5, 113.5, 1005, 0, 0, 275.99853515625);
	CreateDynamicObject(914, 253.30000305176, 118, 1005, 0, 0, 89.998565673828);
	CreateDynamicObject(914, 253.30000305176, 116.80000305176, 1005, 0, 0, 89.994506835938);
	CreateDynamicObject(1649, 250.60000610352, 119.40000152588, 1004.9000244141, 0, 0, 180);
	CreateDynamicObject(1649, 246.19999694824, 119.40000152588, 1004.9000244141, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 241.80000305176, 119.40000152588, 1004.9000244141, 0, 0, 179.99450683594);

//Bundestag
	CreateDynamicObject(14789, 346.4919128418, 178.05694580078, 1053.5247802734, 0, 0, 0);
	CreateDynamicObject(16010, 331.96536254883, 135.87156677246, 1007.6179199219, 0, 0, 0);
	CreateDynamicObject(2094, 357.84497070313, 174.56507873535, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2094, 359.81289672852, 174.56507873535, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2094, 361.57958984375, 174.62107849121, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2094, 357.87057495117, 174.56507873535, 1050.0404052734, 0, 0, 0);
	CreateDynamicObject(2094, 359.77554321289, 174.56507873535, 1050.0404052734, 0, 0, 0);
	CreateDynamicObject(2094, 361.57037353516, 174.59854125977, 1050.0404052734, 0, 0, 0);
	CreateDynamicObject(2163, 361.13723754883, 188.39503479004, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2163, 358.60641479492, 188.41702270508, 1049.3428955078, 0, 0, 0);
	CreateDynamicObject(2167, 353.87976074219, 188.41702270508, 1049.3094482422, 0, 0, 0);
	CreateDynamicObject(2167, 355.41329956055, 188.36642456055, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2167, 357.11480712891, 188.3436126709, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2197, 357.07339477539, 176.94505310059, 1049.2904052734, 0, 0, 180);
	CreateDynamicObject(2197, 363.42886352539, 176.88716125488, 1049.2904052734, 0, 0, 179.99450683594);
	CreateDynamicObject(2200, 345.56979370117, 176.06449890137, 1049.2919921875, 0, 0, 90);
	CreateDynamicObject(2200, 345.46417236328, 178.71992492676, 1049.2913818359, 0, 0, 90);
	CreateDynamicObject(2200, 345.53289794922, 162.19624328613, 1049.2917480469, 0, 0, 90);
	CreateDynamicObject(2200, 345.52777099609, 164.95343017578, 1049.2917480469, 0, 0, 90);
	CreateDynamicObject(2208, 353.55487060547, 175.79397583008, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2208, 364.29800415039, 175.88375854492, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2208, 352.8662109375, 174.00596618652, 1049.2904052734, 0, 0, 270);
	CreateDynamicObject(2208, 352.85498046875, 169.7010345459, 1049.2972412109, 0, 0, 270);
	CreateDynamicObject(2208, 352.89678955078, 165.42427062988, 1049.2972412109, 0, 0, 270);
	CreateDynamicObject(2208, 367.67132568359, 174.35328674316, 1049.2904052734, 0, 0, 270);
	CreateDynamicObject(2208, 367.57217407227, 169.48486328125, 1049.2904052734, 0, 0, 270);
	CreateDynamicObject(2208, 367.54934692383, 163.77684020996, 1049.2904052734, 0, 0, 270);
	CreateDynamicObject(14455, 364.39801025391, 153.95272827148, 1050.9621582031, 0, 0, 0);
	CreateDynamicObject(14455, 357.57907104492, 153.93467712402, 1050.9621582031, 0, 0, 0);
	CreateDynamicObject(2614, 360.20007324219, 175.32278442383, 1050.0643310547, 0, 0, 0);
	CreateDynamicObject(11245, 346.4987487793, 181.66282653809, 1055.0826416016, 0, 0, 0);
	CreateDynamicObject(11245, 369.98474121094, 182.60646057129, 1054.6942138672, 0, 0, 198);
	CreateDynamicObject(14438, 359.5758972168, 169.99169921875, 1057.4923095703, 0, 0, 0);
	CreateDynamicObject(1671, 351.87854003906, 173.53741455078, 1049.7506103516, 0, 0, 90);
	CreateDynamicObject(1671, 351.84555053711, 171.82582092285, 1049.7506103516, 0, 0, 90);
	CreateDynamicObject(1671, 351.78009033203, 169.25003051758, 1049.7506103516, 0, 0, 90);
	CreateDynamicObject(1671, 351.73831176758, 167.95820617676, 1049.7506103516, 0, 0, 90);
	CreateDynamicObject(1671, 351.67532348633, 165.11512756348, 1049.7506103516, 0, 0, 90);
	CreateDynamicObject(1671, 351.57232666016, 163.36853027344, 1049.7574462891, 0, 0, 90);
	CreateDynamicObject(1671, 368.62078857422, 161.45568847656, 1049.7506103516, 0, 0, 268);
	CreateDynamicObject(1671, 368.64138793945, 162.80038452148, 1049.7506103516, 0, 0, 267.99499511719);
	CreateDynamicObject(1671, 368.59127807617, 167.38372802734, 1049.7506103516, 0, 0, 267.99499511719);
	CreateDynamicObject(1671, 368.67645263672, 168.90719604492, 1049.7506103516, 0, 0, 267.99499511719);
	CreateDynamicObject(1671, 368.74935913086, 172.47723388672, 1049.7506103516, 0, 0, 267.99499511719);
	CreateDynamicObject(1671, 368.74877929688, 173.93890380859, 1049.7506103516, 0, 0, 267.99499511719);
	CreateDynamicObject(1671, 365.74865722656, 177.0965423584, 1049.7506103516, 0, 0, 357.99499511719);
	CreateDynamicObject(1671, 354.83746337891, 177.1483001709, 1049.7506103516, 0, 0, 357.98950195313);
	CreateDynamicObject(2330, 360.71817016602, 177.44470214844, 1047.7904052734, 0, 0, 180);
	CreateDynamicObject(2330, 360.67953491211, 178.1195526123, 1047.7904052734, 0, 0, 179.99450683594);
	CreateDynamicObject(2202, 363.64483642578, 187.88079833984, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(1808, 352.44342041016, 153.96865844727, 1049.2904052734, 0, 0, 180);
	CreateDynamicObject(2885, 365.48468017578, 153.18681335449, 1055.591796875, 0, 0, 0);
	CreateDynamicObject(1892, 354.68530273438, 158.00814819336, 1049.2904052734, 0, 0, 0);
	CreateDynamicObject(2773, 356.64376831055, 154.64468383789, 1049.8076171875, 0, 0, 0);
	CreateDynamicObject(2773, 353.51287841797, 154.67495727539, 1049.8076171875, 0, 0, 0);
	CreateDynamicObject(2773, 356.53887939453, 157.02471923828, 1049.8076171875, 0, 0, 10);
	CreateDynamicObject(2773, 353.66455078125, 157.03207397461, 1049.8076171875, 0, 0, 346);
	CreateDynamicObject(2233, 359.94451904297, 175.29075622559, 1050.4456787109, 0, 0, 178);

//Savebox
	  CreateDynamicObject(964,2133.82666016,-1787.04248047,12.52786732,0.00000000,0.00000000,0.00000000); //Savebox PizzaLaden Idlewood
	  CreateDynamicObject(964,836.9014,-1853.4141,6.4093,0.0,0.0,0.0); //Strand

//cargo interrior
	  CreateDynamicObject(14548, 89.519714, 2020.374390, 2866.246094, 12.8916, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.533310, 2029.764893, 2868.303223, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(14548, 89.519714, 2020.374390, 2866.246094, 12.8916, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.533310, 2029.764893, 2868.303223, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16773, 89.411331, 2029.798096, 2867.853516, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2653, 89.779823, 2022.231201, 2867.770508, 359.1406, 180.3776, 270.0000);
	  CreateDynamicObject(964, 86.499214, 2029.009766, 2864.180664, 0.0000, 0.0000, 56.2500);
	  CreateDynamicObject(964, 85.636429, 2027.832397, 2864.233154, 0.0000, 0.0000, 281.2500);
	  CreateDynamicObject(964, 87.203506, 2027.539307, 2864.210205, 0.0000, 0.0000, 22.5000);
	  CreateDynamicObject(964, 86.381035, 2028.268066, 2865.126221, 0.0000, 0.0000, 348.7500);
	  CreateDynamicObject(1348, 85.543137, 2025.873413, 2864.864014, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3386, 85.947548, 2024.133057, 2864.214355, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(3387, 85.901123, 2023.021851, 2864.192139, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(3395, 85.345024, 2020.886841, 2864.246338, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(16773, 89.532257, 2017.847290, 2867.814697, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.980759, 2031.198120, 2866.834229, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16501, 89.530731, 2029.773193, 2863.913818, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3877, 89.504906, 2029.658813, 2869.955078, 0.0000, 179.5182, 0.0000);
	  CreateDynamicObject(16637, 89.561150, 2029.667236, 2865.656250, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16377, 86.129745, 2018.613770, 2865.229492, 0.0000, 0.0000, 315.0000);
	  CreateDynamicObject(14819, 90.200516, 2018.078735, 2865.399902, 0.0000, 0.0000, 0.8594);
	  CreateDynamicObject(3657, 93.586044, 2027.677490, 2864.751221, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3657, 93.561325, 2024.313477, 2864.759521, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3657, 93.548538, 2020.939941, 2864.763672, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3791, 92.164589, 2017.949707, 2865.615234, 272.3375, 358.2811, 0.0000);
	  CreateDynamicObject(3787, 94.055038, 2027.650513, 2866.843262, 114.3051, 0.0000, 269.1406);
	  CreateDynamicObject(16644, 89.871155, 2022.409668, 2867.237793, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2653, 89.729614, 2024.553223, 2867.813232, 359.1406, 180.3776, 270.0000);
	  CreateDynamicObject(17950, 674.61944580078, -1303.7014160156, 14.866870880127, 0, 0, 89.730041503906);
	  CreateDynamicObject(18452, 675.77178955078, -1304.1761474609, 9.2565441131592, 0, 0, 270.27026367188);
	  CreateDynamicObject(1364, 680.39727783203, -1303.8420410156, 13.423478126526, 0, 0, 89.730041503906);
	  CreateDynamicObject(3463, 679.34197998047, -1303.9521484375, 12.939352035522, 0, 0, 89.730010986328);

//ENFORCER INTERRIOR
	  CreateDynamicObject(14548, 260.93215942383, 130.32568359375, 1030.2967529297, 11, 0, 0);
	  CreateDynamicObject(16501, 263.30981445313, 119.30065155029, 1030.8798828125, 0, 0, 264.720703125);
	  CreateDynamicObject(16501, 258.37243652344, 119.77773284912, 1030.86328125, 0, 0, 264.71557617188);
	  CreateDynamicObject(16501, 259.53961181641, 101.31005859375, 1031.5064697266, 0, 0, 270.67565917969);
	  CreateDynamicObject(16501, 263.11785888672, 101.33490753174, 1031.5056152344, 0, 0, 270.67565917969);
	  CreateDynamicObject(3657, 256.97509765625, 104.43422698975, 1029.7153320313, 0, 1, 89.324493408203);
	  CreateDynamicObject(3657, 256.97509765625, 108.41323852539, 1029.5767822266, 0, 1, 89.322784423828);
	  CreateDynamicObject(3657, 256.97509765625, 112.51470184326, 1029.4339599609, 0, 1, 89.322784423828);
	  CreateDynamicObject(3657, 256.97509765625, 117.31567382813, 1029.2667236328, 0, 1, 87.337799072266);
	  CreateDynamicObject(3393, 265.28921508789, 106.56674194336, 1029.1229248047, 0, 0, 0);
	  CreateDynamicObject(3388, 263.33383178711, 101.97392272949, 1029.2828369141, 0, 0, 272.66064453125);
	  CreateDynamicObject(3388, 258.49377441406, 102.12097930908, 1029.2777099609, 0, 0, 272.65869140625);
	  CreateDynamicObject(2977, 264.43765258789, 117.57531738281, 1028.7395019531, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 116.12423706055, 1028.7900390625, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 114.69711303711, 1028.8397216797, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 113.29434967041, 1028.888671875, 0, 0, 0);
	  CreateDynamicObject(3392, 265.43835449219, 110.13626098633, 1028.9986572266, 0, 0, 0);

//Tuning Shop
    CreateDynamicObject(13028, 86.788338, -160.999084, 2.735940, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(7023, 120.330841, -199.664719, 0.439705, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(982, 122.875496, -184.896194, 1.261680, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(983, 122.874725, -168.910782, 1.261680, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(983, 122.885239, -162.514984, 1.261680, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(984, 84.838501, -201.065796, 1.221024, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(984, 101.726082, -201.080917, 1.223987, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(983, 111.341522, -201.058868, 1.238936, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(983, 117.736298, -201.054733, 1.261680, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(816, 112.512833, -147.099213, 0.825202, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(816, 111.378304, -147.912674, 0.906143, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1465, 108.091171, -148.405518, 2.061325, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1465, 114.438805, -148.159912, 1.742710, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1238, 109.963295, -149.947189, 1.045135, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1238, 111.254189, -150.755814, 0.932180, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1238, 112.532753, -149.843918, 0.896305, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1244, 93.856377, -157.781631, 2.381179, 0.0000, 0.0000, 90.0000);

        // Bundeswehr
/*   	CreateDynamicObject(5191, 1004.7834472656, 2625.3708496094, 22.580648422241, 2.74658203125, 0, 0.760986328125, -1, -1, -1, 500);
	CreateDynamicObject(5191, 1003.0185546875, 2855.4267578125, 36.980758666992, 6.712646484375, 0, 0.50537109375, -1, -1, -1, 500);
	CreateDynamicObject(5191, 1003.7333984375, 2745.7958984375, 28.243398666382, 2.74658203125, 0, 0.2581787109375, -1, -1, -1, 500);
	CreateDynamicObject(5191, 1003.3511962891, 2978.8125, 44.575675964355, 0.758056640625, 0, 359.25842285156, -1, -1, -1, 500);
	CreateDynamicObject(16258, 1006.306640625, 2963.7856445313, -22.755554199219, 0, 0, 107.19000244141, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1020.767578125, 2967.2294921875, -70.17554473877, 0, 0, 107.1826171875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1004.1708374023, 2991.7043457031, -66.67554473877, 0, 0, 107.18811035156, -1, -1, -1, 180);
	CreateDynamicObject(16258, 980.3046875, 2974.1728515625, -82.92554473877, 0, 358.01501464844, 117.11312866211, -1, -1, -1, 180);
	CreateDynamicObject(5191, 1006.0578613281, 3101.8962402344, 37.100677490234, 352.80944824219, 0, 358.26965332031, -1, -1, -1, 500);
	CreateDynamicObject(5191, 1010.296875, 3223.2392578125, 14.865686416626, 346.84936523438, 0, 357.75329589844, -1, -1, -1, 500);
	CreateDynamicObject(16258, 997.09375, 3091.353515625, -37.255554199219, 0, 0, 93.290405273438, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1010.317199707, 3091.0415039063, -80.545547485352, 0, 0, 85.350402832031, -1, -1, -1, 180);
	CreateDynamicObject(16258, 993.82025146484, 3113.4155273438, -83.045547485352, 0, 0, 85.347290039063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1006.5363769531, 3102.0131835938, -83.795547485352, 0, 0, 109.16732788086, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1061.3974609375, 3324.6611328125, -4.5060043334961, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1015.599609375, 3327.775390625, -4.5027942657471, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1107.109375, 3321.5078125, -4.4996042251587, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1113.091796875, 3408.5615234375, -4.5070052146912, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1067.29296875, 3411.6708984375, -4.5069046020508, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1021.5106201172, 3414.7978515625, -4.5060043334961, 0, 0, 356.02844238281, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1009.2224731445, 3223.0270996094, -46.465553283691, 0, 0, 105.20040893555, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1024.916015625, 3223.8603515625, -45.529563903809, 358.01147460938, 1.9775390625, 97.256469726563, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1109.4504394531, 3355.9189453125, -46.728713989258, 358.01147460938, 359.998046875, 252.80145263672, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1122.8994140625, 3360.9990234375, -47.728713989258, 358.01147460938, 359.98901367188, 262.72155761719, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1140.2901611328, 3358.7497558594, -47.255035400391, 358.01147460938, 359.98901367188, 262.72155761719, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1155.7119140625, 3369.5478515625, -47.703468322754, 358.01147460938, 359.98352050781, 262.71606445313, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1131.2030029297, 3410.4084472656, -47.689949035645, 358.01147460938, 359.98901367188, 292.49633789063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 985.3720703125, 3379.8828125, -47.920352935791, 0, 0, 91.29638671875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1089.9246826172, 3440.0830078125, -47.170387268066, 358.01147460938, 359.98352050781, 330.20922851563, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1066.5072021484, 3452.958984375, -48.170387268066, 358.01147460938, 359.97802734375, 3.9498291015625, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1013.2041015625, 3409.19140625, -48.170387268066, 358.01147460938, 359.97802734375, 53.5693359375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1003.4429321289, 3383.4523925781, -48.124862670898, 358.01147460938, 359.97802734375, 89.299346923828, -1, -1, -1, 180);
	CreateDynamicObject(16258, 975.39556884766, 3339.2944335938, -48.124862670898, 358.01147460938, 359.97802734375, 89.296875, -1, -1, -1, 180);
	CreateDynamicObject(3749, 1012.7060546875, 3286.9541015625, 13.082182884216, 0, 0, 358.01147460938, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1004.9228515625, 2631.6943359375, 31.535882949829, 0.28564453125, 2.669677734375, 270.703125, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1003.8271484375, 2754.2431640625, 37.266487121582, 0.5712890625, 2.7410888671875, 270.26916503906, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1003.1254882813, 2860.5307617188, 46.38493347168, 0.5712890625, 6.8450927734375, 270.26916503906, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1003.4110107422, 2975.4301757813, 53.23770904541, 359.26977539063, 0.79647827148438, 269.54931640625, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1006.5119018555, 3112.0578613281, 44.605438232422, 0.27728271484375, 352.94299316406, 268.3203125, -1, -1, -1, 180);
	CreateDynamicObject(11422, 1010.666015625, 3229.240234375, 21.902589797974, 0.2691650390625, 346.81640625, 267.73681640625, -1, -1, -1, 180);
	CreateDynamicObject(5145, 953.8740234375, 3455.8828125, -3.2218999862671, 0, 0, 177.36877441406, -1, -1, -1, 180);
	CreateDynamicObject(16258, 994.1796875, 3459.83203125, -45.862419128418, 358.01147460938, 359.97802734375, 87.308349609375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 936.669921875, 3549.3896484375, -50.73974609375, 358.01147460938, 359.97802734375, 31.723022460938, -1, -1, -1, 180);
	CreateDynamicObject(16258, 896.7451171875, 3540.3818359375, -66.73974609375, 358.01147460938, 359.97802734375, 45.618041992188, -1, -1, -1, 180);
	CreateDynamicObject(16258, 851.35028076172, 3536.9997558594, -64.48974609375, 358.01147460938, 359.97802734375, 45.615234375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 871.57391357422, 3486.408203125, -63.23974609375, 358.01147460938, 359.97802734375, 95.240234375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 853.71057128906, 3452.1599121094, -63.48974609375, 358.01147460938, 359.97802734375, 95.234985351563, -1, -1, -1, 180);
	CreateDynamicObject(16258, 858.09063720703, 3414.3435058594, -63.23974609375, 358.01147460938, 359.97802734375, 95.234985351563, -1, -1, -1, 180);
	CreateDynamicObject(16258, 948.90435791016, 3330.9914550781, -65.73974609375, 358.01147460938, 359.97802734375, 186.54504394531, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1010.9180908203, 3329.142578125, -63.48974609375, 358.01147460938, 359.97802734375, 186.54235839844, -1, -1, -1, 180);
	CreateDynamicObject(16133, 861.50451660156, 3398.0231933594, -24.339998245239, 342.13500976563, 0, 350.07501220703, -1, -1, -1, 180);
	CreateDynamicObject(16133, 977.04663085938, 3560.5571289063, -27.089998245239, 342.13073730469, 0, 350.07385253906, -1, -1, -1, 180);
	CreateDynamicObject(8210, 952.03967285156, 3340.5400390625, 9.0811948776245, 0, 0, 358.66009521484, -1, -1, -1, 180);
	CreateDynamicObject(8210, 896.73309326172, 3341.8305664063, 9.1131954193115, 0, 0, 358.65966796875, -1, -1, -1, 180);
	CreateDynamicObject(16133, 989.42974853516, 3316.5302734375, -4.5886669158936, 0, 336.18005371094, 352.05993652344, -1, -1, -1, 180);
	CreateDynamicObject(16133, 990.62420654297, 3310.3562011719, -5.8386669158936, 0, 336.17614746094, 352.05688476563, -1, -1, -1, 180);
	CreateDynamicObject(16133, 992.47265625, 3284.5380859375, -10.088666915894, 0, 310.37133789063, 37.711547851563, -1, -1, -1, 180);
	CreateDynamicObject(3277, 989.076171875, 3285.2783203125, 7.7237691879272, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(3884, 988.9384765625, 3285.1748046875, 7.7040681838989, 0, 0, 142.98709106445, -1, -1, -1, 180);
	CreateDynamicObject(16133, 986.14947509766, 3286.2072753906, -9.5886669158936, 0, 336.17614746094, 348.0869140625, -1, -1, -1, 180);
	CreateDynamicObject(16133, 990.97253417969, 3283.8696289063, -11.588666915894, 0, 336.17065429688, 79.394653320313, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1010.6025390625, 3284.0981445313, -14.588666915894, 27.790008544922, 336.17065429688, 71.452697753906, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1050.7668457031, 3280.2224121094, 9.1131954193115, 0, 0, 356.24273681641, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1100.60546875, 3276.791015625, 9.1131954193115, 0, 0, 356.24267578125, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1129.564453125, 3302.232421875, 9.1067953109741, 0, 0, 86.753540039063, -1, -1, -1, 180);
	CreateDynamicObject(3279, 1028.8103027344, 3293.76171875, 7.0317649841309, 0, 0, 356.03002929688, -1, -1, -1, 180);
	CreateDynamicObject(3279, 998.98168945313, 3295.4970703125, 7.0317649841309, 0, 0, 89.31884765625, -1, -1, -1, 180);
	CreateDynamicObject(3881, 1021.0096435547, 3292.7705078125, 9.0753307342529, 0, 0, 355.63580322266, -1, -1, -1, 180);
	CreateDynamicObject(3882, 1021.0966796875, 3292.8056640625, 8.1885623931885, 0, 0, 87.335815429688, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1035.8154296875, 3366.7373046875, 8.3835783004761, 0, 0, 9.920654296875, -1, -1, -1, 180);
	CreateDynamicObject(8034, 995.2939453125, 3371.521484375, 11.662110328674, 0, 0, 267.28088378906, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1035.8203125, 3366.7421875, 10.094386100769, 0, 0, 9.920654296875, -1, -1, -1, 180);
	CreateDynamicObject(10757, 1032.8876953125, 3369.00390625, 11.41893196106, 0, 0, 49.619750976563, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1030.30859375, 3370.912109375, 8.3835783004761, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1030.30859375, 3370.9118652344, 8.9731798171997, 0, 0, 356.02844238281, -1, -1, -1, 180);
	CreateDynamicObject(738, 1041.1340332031, 3335.5114746094, 7.2994632720947, 0, 0, 356.14324951172, -1, -1, -1, 180);
	CreateDynamicObject(738, 1019.3416748047, 3336.4782714844, 7.2994632720947, 0, 0, 356.02844238281, -1, -1, -1, 180);
	CreateDynamicObject(738, 1042.1184082031, 3354.1748046875, 7.2994632720947, 0, 0, 358.98010253906, -1, -1, -1, 180);
	CreateDynamicObject(738, 1043.2165527344, 3378.8647460938, 7.2994632720947, 0, 0, 356.96435546875, -1, -1, -1, 180);
	CreateDynamicObject(738, 1043.6555175781, 3397.6301269531, 7.2994632720947, 0, 0, 356.96228027344, -1, -1, -1, 180);
	CreateDynamicObject(738, 1023.6483154297, 3398.6979980469, 7.2994632720947, 0, 0, 356.96228027344, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1011.57421875, 3355.4116210938, 9.1323909759521, 89.427978515625, 359.71203613281, 357.72277832031, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1004.8311767578, 3371.0014648438, 14.747988700867, 89.417724609375, 359.70886230469, 357.72033691406, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1013.0231323242, 3386.0734863281, 9.1335783004761, 89.423217773438, 359.70886230469, 357.72033691406, -1, -1, -1, 180);
	CreateDynamicObject(738, 996.0078125, 3422.017578125, 7.2994632720947, 0, 0, 356.95678710938, -1, -1, -1, 180);
	CreateDynamicObject(738, 1044.7883300781, 3419.7951660156, 7.2994632720947, 0, 0, 356.96228027344, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1027.2010498047, 3482.3088378906, -48.623016357422, 358.01147460938, 359.97802734375, 7.9072265625, -1, -1, -1, 180);
	CreateDynamicObject(3941, 971.81640625, 3435.701171875, 10.424621582031, 0, 0, 356.748046875, -1, -1, -1, 180);
	CreateDynamicObject(3941, 972.412109375, 3446.8427734375, 10.424621582031, 0, 0, 356.748046875, -1, -1, -1, 180);
	CreateDynamicObject(3941, 967.37225341797, 3398.3959960938, 10.341420173645, 0, 0, 88.0576171875, -1, -1, -1, 180);
	CreateDynamicObject(16613, 1027.259765625, 3440.3896484375, 11.755990028381, 0, 0, 358.01147460938, -1, -1, -1, 180);
	CreateDynamicObject(3941, 1008.2646484375, 3517.197265625, 10.213418006897, 0, 0, 177.37426757813, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1017.0874633789, 3501.4228515625, -9.8014640808105, 358.01501464844, 324.26623535156, 346.10192871094, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1009.2080078125, 3491.361328125, -11.2682762146, 358.01147460938, 324.26147460938, 296.47155761719, -1, -1, -1, 180);
	CreateDynamicObject(3941, 992.18359375, 3524.45703125, 10.085415840149, 0, 0, 267.67639160156, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1158.8530273438, 3405.3857421875, -4.5124044418335, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1164.9279785156, 3492.4479980469, -4.5188045501709, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1210.6768798828, 3489.2971191406, -4.5252046585083, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1170.9061279297, 3579.7104492188, -4.5316047668457, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1176.8388671875, 3666.82421875, -4.5444049835205, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1139.0367431641, 3462.8979492188, 7.6248083114624, 0, 0, 86.753540039063, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1110.8671875, 3452.92578125, 9.0747947692871, 0, 0, 176.08337402344, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1077.12890625, 3455.2236328125, 9.1451959609985, 0, 0, 176.08337402344, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1023.9108886719, 3458.8640136719, 9.1195955276489, 0, 0, 176.08337402344, -1, -1, -1, 180);
	CreateDynamicObject(3941, 1002.1988525391, 3476.5444335938, 10.341420173645, 0, 0, 177.38256835938, -1, -1, -1, 180);
	CreateDynamicObject(3941, 1002.646484375, 3487.0390625, 10.32861995697, 0, 0, 177.37426757813, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1005.5278930664, 3487.8356933594, 9.1199913024902, 0, 0, 87.11865234375, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1012.5668945313, 3485.4621582031, -11.2682762146, 358.01147460938, 324.26147460938, 336.17126464844, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1012.6442260742, 3481.2119140625, -11.2682762146, 358.01147460938, 324.26147460938, 344.11059570313, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1012.748840332, 3475.4619140625, -11.2682762146, 358.01147460938, 324.26147460938, 344.10827636719, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1012.8487548828, 3469.9619140625, -11.2682762146, 358.01147460938, 324.26147460938, 344.10827636719, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1013.00390625, 3461.4619140625, -11.2682762146, 358.01147460938, 324.26147460938, 344.10827636719, -1, -1, -1, 180);
	CreateDynamicObject(3941, 973.57672119141, 3471.3757324219, 10.437421798706, 0, 0, 356.748046875, -1, -1, -1, 180);
	CreateDynamicObject(738, 997.68676757813, 3459.1540527344, 7.2994632720947, 0, 0, 356.95678710938, -1, -1, -1, 180);
	CreateDynamicObject(738, 996.76116943359, 3438.6667480469, 7.2994632720947, 0, 0, 356.95678710938, -1, -1, -1, 180);
	CreateDynamicObject(3279, 950.66864013672, 3399.6008300781, 6.9101629257202, 0, 0, 87.339508056641, -1, -1, -1, 180);
	CreateDynamicObject(3279, 953.94714355469, 3425.79296875, 6.9101629257202, 0, 0, 266.70202636719, -1, -1, -1, 180);
	CreateDynamicObject(3941, 946.72235107422, 3438.2426757813, 10.35422039032, 0, 0, 176.11401367188, -1, -1, -1, 180);
	CreateDynamicObject(3941, 947.47308349609, 3449.74609375, 10.32861995697, 0, 0, 176.11083984375, -1, -1, -1, 180);
	CreateDynamicObject(3941, 948.21197509766, 3461.24609375, 10.315819740295, 0, 0, 176.11083984375, -1, -1, -1, 180);
	CreateDynamicObject(3941, 948.962890625, 3472.7497558594, 10.315819740295, 0, 0, 176.11083984375, -1, -1, -1, 180);
	CreateDynamicObject(3941, 949.68322753906, 3483.740234375, 10.315819740295, 0, 0, 176.11083984375, -1, -1, -1, 180);
	CreateDynamicObject(8172, 1163.6025390625, 3443.2373046875, 7.2284088134766, 0, 0, 356.02844238281, -1, -1, -1, 180);
	CreateDynamicObject(8172, 1174.3717041016, 3602.4135742188, 7.234808921814, 0, 0, 176.28112792969, -1, -1, -1, 180);
	CreateDynamicObject(3268, 995.08416748047, 3553.2795410156, 7.2321367263794, 0, 0, 357.51501464844, -1, -1, -1, 180);
	CreateDynamicObject(10764, 1156.1494140625, 3316.6611328125, 4.9019145965576, 0, 0, 222.30834960938, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1155.9429931641, 3376.6215820313, -47.914703369141, 358.01147460938, 359.98352050781, 282.56591796875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1186.2191162109, 3447.4873046875, -48.670028686523, 358.01147460938, 359.97802734375, 282.56286621094, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1182.3458251953, 3486.0649414063, -48.670028686523, 358.01147460938, 359.97802734375, 282.56286621094, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1199.0421142578, 3522.1574707031, -49.670028686523, 358.01147460938, 359.97802734375, 282.56286621094, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1208.6171875, 3525.3034667969, -49.670028686523, 358.01147460938, 359.97802734375, 304.39770507813, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1211.0600585938, 3568.9033203125, -49.670028686523, 358.01147460938, 359.97802734375, 304.39270019531, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1181.3161621094, 3579.5, -49.670028686523, 358.01147460938, 359.97802734375, 328.21252441406, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1203.4342041016, 3611.8728027344, -47.670028686523, 358.01147460938, 359.97802734375, 272.63146972656, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1212.64453125, 3661.8759765625, -47.670028686523, 358.01147460938, 359.97802734375, 272.62573242188, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1157.1940917969, 3564.765625, -47.670028686523, 358.01147460938, 359.97802734375, 77.385009765625, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1158.9149169922, 3623.2380371094, -49.420028686523, 358.01147460938, 359.97802734375, 91.277221679688, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1151.8449707031, 3620.7373046875, -49.420028686523, 358.01147460938, 359.97802734375, 101.19943237305, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1133.6668701172, 3595.416015625, -49.420028686523, 358.01147460938, 359.97802734375, 91.270080566406, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1130.4588623047, 3560.2780761719, -49.420028686523, 358.01147460938, 359.97802734375, 91.268920898438, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1129.8881835938, 3505.5883789063, -49.920028686523, 358.01147460938, 359.97802734375, 91.268920898438, -1, -1, -1, 180);
	CreateDynamicObject(16133, 1137.5079345703, 3494.7756347656, -17.5182762146, 358.01147460938, 324.26147460938, 35.717895507813, -1, -1, -1, 180);
	CreateDynamicObject(16098, 1222.7777099609, 3488.0537109375, 11.980139732361, 0, 0, 356.03002929688, -1, -1, -1, 180);
	CreateDynamicObject(16368, 1198.4869384766, 3536.1564941406, 17.345369338989, 0, 11.9091796875, 0, -1, -1, -1, 180);
	CreateDynamicObject(4574, 1198.6291503906, 3535.9626464844, -10.898641586304, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(3277, 1236.4272460938, 3531.2868652344, 7.9261531829834, 0, 0, 125.05444335938, -1, -1, -1, 180);
	CreateDynamicObject(3884, 1236.4753417969, 3531.369140625, 7.9192523956299, 0, 0, 17.864868164063, -1, -1, -1, 180);
	CreateDynamicObject(3277, 1230.9711914063, 3444.0615234375, 7.9261531829834, 0, 0, 65.502197265625, -1, -1, -1, 180);
	CreateDynamicObject(3884, 1230.9884033203, 3444.1882324219, 7.9192523956299, 0, 0, 221.04968261719, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1060.3955078125, 3344.6611328125, 6.098744392395, 0, 0, 86.748046875, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1065.166015625, 3428.3251953125, 6.1715202331543, 0, 0, 86.748046875, -1, -1, -1, 180);
	CreateDynamicObject(3881, 1065.7602539063, 3370.0444335938, 9.0753307342529, 0, 0, 266.01977539063, -1, -1, -1, 180);
	CreateDynamicObject(3620, 864.2431640625, 3357.802734375, 20.350101470947, 0, 0, 268.29162597656, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1064.4345703125, 3415.3515625, 6.1647243499756, 0, 0, 86.742553710938, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1063.146484375, 3387.57421875, 8.287576675415, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1063.146484375, 3387.57421875, 10.453979492188, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1063.146484375, 3387.57421875, 12.665183067322, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(3578, 1062.8881835938, 3377.5107421875, 6.4345903396606, 0, 0, 266.7021484375, -1, -1, -1, 180);
	CreateDynamicObject(3578, 1063.1887207031, 3382.4936523438, 6.4345903396606, 0, 0, 266.7021484375, -1, -1, -1, 180);
	CreateDynamicObject(9131, 953.791015625, 3529.2373046875, 8.3835783004761, 0, 0, 358.00598144531, -1, -1, -1, 180);
	CreateDynamicObject(9131, 953.791015625, 3529.2373046875, 8.8315858840942, 0, 0, 358.00598144531, -1, -1, -1, 180);
	CreateDynamicObject(3881, 943.81024169922, 3406.4143066406, 9.0678243637085, 0, 0, 267.53491210938, -1, -1, -1, 180);
	CreateDynamicObject(3882, 1066.4265136719, 3369.9436035156, 8.1885623931885, 0, 0, 358.01135253906, -1, -1, -1, 180);
	CreateDynamicObject(3882, 944.26666259766, 3406.2277832031, 8.1885623931885, 0, 0, 357.69592285156, -1, -1, -1, 180);
	CreateDynamicObject(3881, 956.03924560547, 3504.6857910156, 9.0678243637085, 0, 0, 267.53356933594, -1, -1, -1, 180);
	CreateDynamicObject(3882, 956.77484130859, 3504.4338378906, 8.2527055740356, 0, 0, 358.01501464844, -1, -1, -1, 180);
	CreateDynamicObject(5147, 1006.8117675781, 2469.8693847656, 19.467226028442, 359.767578125, 2.4870300292969, 270.69708251953, -1, -1, -1, 180);
	CreateDynamicObject(10771, 841.671875, 3480.029296875, 6.0952100753784, 0, 0, 87.182006835938, -1, -1, -1, 180);
	CreateDynamicObject(17007, 925.41253662109, 3349.3999023438, 6.8450536727905, 0, 0, 355.28002929688, -1, -1, -1, 180);
	CreateDynamicObject(1595, 982.17944335938, 3345.2934570313, 20.477312088013, 0, 0, 357.73504638672, -1, -1, -1, 180);
	CreateDynamicObject(967, 1064.2492675781, 3386.5620117188, 7.2205581665039, 0, 0, 177.41271972656, -1, -1, -1, 180);
	CreateDynamicObject(3113, 836.5478515625, 3369.6162109375, 9.752046585083, 359.92309570313, 0, 86.390991210938, -1, -1, -1, 180);
	CreateDynamicObject(11145, 838.763671875, 3417.1083984375, 4.883017539978, 0, 0, 87.335815429688, -1, -1, -1, 180);
	CreateDynamicObject(10834, 896.744140625, 3541.412109375, 2.0228826999664, 0, 0, 89.307861328125, -1, -1, -1, 180);
	CreateDynamicObject(10834, 975.8125, 3565.255859375, 2.0218360424042, 0, 0, 88.665161132813, -1, -1, -1, 180);
	CreateDynamicObject(10830, 934.82489013672, 3598.7038574219, 14.75, 0, 0, 42.182983398438, -1, -1, -1, 180);
	CreateDynamicObject(10830, 935.47692871094, 3612.4055175781, 14.75, 0, 0, 42.182006835938, -1, -1, -1, 180);
	CreateDynamicObject(9958, 934.62622070313, 3623.6257324219, 5.3765325546265, 0, 0, 177.33544921875, -1, -1, -1, 180);
	CreateDynamicObject(10814, 949.52014160156, 3368.6540527344, 11.018706321716, 0, 0, 86.615783691406, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1062.4566650391, 3372.3649902344, 8.287576675415, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1062.4560546875, 3372.3642578125, 10.428774833679, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 1062.4522705078, 3372.3591308594, 12.588777542114, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(11146, 840.72253417969, 3471.0903320313, 12.946370124817, 359.71197509766, 0.0714111328125, 87.094116210938, -1, -1, -1, 180);
	CreateDynamicObject(1337, 98.110244750977, 195.96006774902, 490.61712646484, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(11149, 846.59936523438, 3473.5661621094, 12.605560302734, 0, 0, 87.339508056641, -1, -1, -1, 180);
	CreateDynamicObject(10770, 849.22747802734, 3482.9216308594, 39.254173278809, 359.78399658203, 0, 87.263824462891, -1, -1, -1, 180);
	CreateDynamicObject(11237, 849.38146972656, 3482.7663574219, 39.217132568359, 0, 0, 87.339508056641, -1, -1, -1, 180);
	CreateDynamicObject(8210, 1058.2918701172, 3307.6989746094, 6.098744392395, 0, 0, 86.748046875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1186.9504394531, 3792.2490234375, -4.5606360435486, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8419, 1183.6016845703, 3754.5021972656, -4.5806374549866, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8172, 1180.0434570313, 3689.6062011719, 7.2412090301514, 0, 0, 176.28112792969, -1, -1, -1, 180);
	CreateDynamicObject(10764, 1187.455078125, 3809.9736328125, 6.594313621521, 0, 0, 41.602142333984, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1221.7813720703, 3748.7275390625, -48.420028686523, 358.01147460938, 359.97802734375, 272.62573242188, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1190.2130126953, 3811.5004882813, -49.670028686523, 358.01147460938, 359.97802734375, 308.35546875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1161.30859375, 3765.2067871094, -50.920028686523, 358.01147460938, 359.97802734375, 87.30224609375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1189.8103027344, 3759.6159667969, -50.920028686523, 358.01147460938, 359.97802734375, 87.29736328125, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1143.373046875, 3747.8854980469, -50.920028686523, 358.01147460938, 359.97802734375, 97.222351074219, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1140.640625, 3703.7333984375, -50.920028686523, 358.01147460938, 359.97802734375, 97.212524414063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1135.7099609375, 3670.0478515625, -50.920028686523, 358.01147460938, 359.97802734375, 97.212524414063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 936.669921875, 3549.3896484375, -50.73974609375, 358.01147460938, 359.97802734375, 31.723022460938, -1, -1, -1, 180);
	CreateDynamicObject(16258, 912.89465332031, 3567.4370117188, -50.129745483398, 352.05651855469, 359.97802734375, 31.723022460938, -1, -1, -1, 180);
	CreateDynamicObject(16139, 1000.638671875, 3598.2060546875, -5.5247364044189, 0, 0, 158.79638671875, -1, -1, -1, 180);
	CreateDynamicObject(16139, 985.39404296875, 3587.6486816406, -6.2747364044189, 0, 348.09002685547, 67.486358642578, -1, -1, -1, 180);
	CreateDynamicObject(3277, 988.91851806641, 3596.7978515625, 14.043378829956, 0, 0, 350.07507324219, -1, -1, -1, 180);
	CreateDynamicObject(16139, 997.34436035156, 3589.6489257813, -5.2747364044189, 0, 0, 127.03634643555, -1, -1, -1, 180);
	CreateDynamicObject(3884, 989.00701904297, 3596.8825683594, 13.991281509399, 0, 0, 313.73706054688, -1, -1, -1, 180);
	CreateDynamicObject(2938, 829.86358642578, 3503.5112304688, 13.362742424011, 0, 0, 176.68212890625, -1, -1, -1, 180);
	CreateDynamicObject(2938, 830.45208740234, 3514.5080566406, 13.362742424011, 0, 0, 178.01696777344, -1, -1, -1, 180);
	CreateDynamicObject(12912, 941.22210693359, 3348.9494628906, 17.18310546875, 0, 0, 87.339508056641, -1, -1, -1, 180);
	CreateDynamicObject(10828, 939.05010986328, 3685.3415527344, 4.3844022750854, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(10828, 939.0498046875, 3685.3408203125, -10.301596641541, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(10828, 939.0498046875, 3685.3408203125, -24.865592956543, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(16258, 915.49755859375, 3640.7785644531, -47.420028686523, 358.01147460938, 359.97802734375, 11.857513427734, -1, -1, -1, 180);
	CreateDynamicObject(16258, 917.4931640625, 3670.7626953125, -48.420028686523, 358.01147460938, 359.97802734375, 11.854248046875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 922.26123046875, 3704.3764648438, -48.420028686523, 358.01147460938, 359.97802734375, 11.854248046875, -1, -1, -1, 180);
	CreateDynamicObject(16258, 911.466796875, 3705.0810546875, -48.920028686523, 358.01147460938, 359.97802734375, 29.712524414063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 884.66088867188, 3613.6594238281, -48.920028686523, 358.01147460938, 359.97802734375, 101.1780090332, -1, -1, -1, 180);
	CreateDynamicObject(10828, 939.0498046875, 3685.3408203125, -39.325592041016, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(7091, 1018.5348510742, 3286.115234375, 16.290683746338, 0, 0, 266.70568847656, -1, -1, -1, 180);
	CreateDynamicObject(7091, 1006.6825561523, 3286.2980957031, 16.174663543701, 0, 0, 266.7041015625, -1, -1, -1, 180);
	CreateDynamicObject(10889, 963.51641845703, 3621.4331054688, 7.4092321395874, 2.4554443359375, 0, 177.63439941406, -1, -1, -1, 180);
	CreateDynamicObject(973, 974.68585205078, 3578.4045410156, 7.6068868637085, 0, 0, 87.339508056641, -1, -1, -1, 180);
	CreateDynamicObject(973, 975.08764648438, 3587.2065429688, 7.6068868637085, 0, 0, 87.335815429688, -1, -1, -1, 180);
	CreateDynamicObject(973, 976.95324707031, 3596.2360839844, 7.6004867553711, 0, 0, 69.470947265625, -1, -1, -1, 180);
	CreateDynamicObject(973, 979.96276855469, 3604.2639160156, 7.6004867553711, 0, 0, 69.466552734375, -1, -1, -1, 180);
	CreateDynamicObject(973, 986.123046875, 3608.6506347656, 7.6004867553711, 0, 0, 359.99169921875, -1, -1, -1, 180);
	CreateDynamicObject(973, 995.12438964844, 3608.6420898438, 7.6004867553711, 0, 0, 359.98901367188, -1, -1, -1, 180);
	CreateDynamicObject(18450, 982.6787109375, 3754.369140625, 6.7167806625366, 0, 0, 87.335815429688, -1, -1, -1, 180);
	CreateDynamicObject(18450, 986.21234130859, 3826.8422851563, 11.333169937134, 0.028076171875, 352.70483398438, 87.116088867188, -1, -1, -1, 180);
	CreateDynamicObject(3330, 984.50744628906, 3794.6589355469, -3.2834784984589, 0, 0, 358.01501464844, -1, -1, -1, 180);
	CreateDynamicObject(8419, 986.193359375, 3913.1298828125, 5.0271835327148, 0, 0, 357.35778808594, -1, -1, -1, 180);
	CreateDynamicObject(16258, 952.59289550781, 3909.2687988281, -37.253601074219, 358.01147460938, 359.97802734375, 152.93518066406, -1, -1, -1, 180);
	CreateDynamicObject(16258, 964.109375, 3869.3720703125, -37.266044616699, 358.01147460938, 359.97802734375, 182.548828125, -1, -1, -1, 180);
	CreateDynamicObject(16258, 970.0849609375, 3841.7119140625, -38.94563293457, 358.01147460938, 359.97802734375, 182.548828125, -1, -1, -1, 180);
	CreateDynamicObject(16258, 105.60218048096, 124.43058776855, 507.26007080078, 358.01147460938, 359.97802734375, 234.16259765625, -1, -1, -1, 180);
	CreateDynamicObject(16258, 1007.4326171875, 3907.4365234375, -36.689231872559, 6.4324951171875, 6.1688232421875, 268.59375, -1, -1, -1, 180);
	CreateDynamicObject(16258, 925.88671875, 3944.89453125, -31.94563293457, 358.01147460938, 1.95556640625, 43.599243164063, -1, -1, -1, 180);
	CreateDynamicObject(16258, 875.966796875, 3987.4091796875, -36.44563293457, 358.01147460938, 359.96704101563, 9.84375, -1, -1, -1, 180);
	CreateDynamicObject(8419, 920.3759765625, 3916.375, 5.0015830993652, 0, 0, 357.35778808594, -1, -1, -1, 180);
	CreateDynamicObject(3401, 952.95703125, 3909.150390625, 14.5, 0, 0, 357.39074707031, -1, -1, -1, 180);
	CreateDynamicObject(3401, 952.95703125, 3909.150390625, 9.8083925247192, 0, 0, 357.39074707031, -1, -1, -1, 180);
	CreateDynamicObject(3401, 952.95703125, 3909.150390625, 5.1792030334473, 0, 0, 357.39074707031, -1, -1, -1, 180);
	CreateDynamicObject(3401, 952.95703125, 3909.150390625, 0.57640278339386, 0, 0, 357.39624023438, -1, -1, -1, 180);
	CreateDynamicObject(8419, 930.486328125, 3877.216796875, 5.01438331604, 0, 0, 88.049926757813, -1, -1, -1, 180);
	CreateDynamicObject(8419, 929.45703125, 3943.1748046875, 4.9951829910278, 0, 0, 87.154541015625, -1, -1, -1, 180);
	CreateDynamicObject(16139, 967.8515625, 3840.5673828125, -0.52473640441895, 0, 0, 222.30834960938, -1, -1, -1, 180);
	CreateDynamicObject(16139, 970.09930419922, 3845.7158203125, -0.69753611087799, 0, 0, 242.16381835938, -1, -1, -1, 180);
	CreateDynamicObject(16139, 992.4970703125, 3864.5654296875, -4.4151430130005, 0, 0, 166.728515625, -1, -1, -1, 180);
	CreateDynamicObject(16139, 1000.294921875, 3863.0048828125, -4.0687456130981, 0, 0, 166.72302246094, -1, -1, -1, 180);
	CreateDynamicObject(16139, 1009.025390625, 3875.20703125, -4.0423536300659, 0, 0, 250.09851074219, -1, -1, -1, 180);
	CreateDynamicObject(790, 956.23913574219, 3821.826171875, 10.485492706299, 0, 0, 302.42614746094, -1, -1, -1, 180);
	CreateDynamicObject(790, 949.31079101563, 3823.4487304688, 10.485492706299, 0, 0, 312.35229492188, -1, -1, -1, 180);
	CreateDynamicObject(790, 959.46270751953, 3840.8706054688, 10.485492706299, 0, 0, 308.38232421875, -1, -1, -1, 180);
	CreateDynamicObject(790, 1006.8128662109, 3824.400390625, 6.4854927062988, 0, 0, 264.70861816406, -1, -1, -1, 180);
	CreateDynamicObject(790, 1000.3118896484, 3811.0424804688, 3.2354927062988, 0, 0, 159.49963378906, -1, -1, -1, 180);
	CreateDynamicObject(790, 1028.9809570313, 3829.5773925781, 3.2354927062988, 0, 0, 283.28564453125, -1, -1, -1, 180);
	CreateDynamicObject(790, 1037.3159179688, 3831.4990234375, 2.4854927062988, 0, 0, 237.62768554688, -1, -1, -1, 180);
	CreateDynamicObject(790, 1058.009765625, 3908.6455078125, 1.9854927062988, 0, 0, 275.32836914063, -1, -1, -1, 180);
	CreateDynamicObject(790, 1056.5023193359, 3934.1345214844, 1.9854927062988, 0, 0, 275.32836914063, -1, -1, -1, 180);
	CreateDynamicObject(790, 1021.2095947266, 3947.7407226563, 14.985492706299, 0, 0, 293.19323730469, -1, -1, -1, 180);
	CreateDynamicObject(790, 979.67028808594, 3973.9765625, 14.985492706299, 0, 0, 275.32836914063, -1, -1, -1, 180);
	CreateDynamicObject(790, 910.03668212891, 3983.8439941406, 10.485492706299, 0, 0, 340.82336425781, -1, -1, -1, 180);
	CreateDynamicObject(790, 880.24462890625, 3974.3586425781, 10.485492706299, 0, 0, 352.73876953125, -1, -1, -1, 180);
	CreateDynamicObject(16258, 816.50384521484, 4030.3266601563, -49.254997253418, 358.01147460938, 359.97253417969, 329.96923828125, -1, -1, -1, 180);
	CreateDynamicObject(790, 880.244140625, 3974.3583984375, 10.485492706299, 0, 0, 352.73803710938, -1, -1, -1, 180);
	CreateDynamicObject(790, 889.015625, 3925.3166503906, 10.485492706299, 0, 0, 14.56787109375, -1, -1, -1, 180);
	CreateDynamicObject(790, 871.59356689453, 3913.6538085938, 10.485492706299, 0, 0, 14.56787109375, -1, -1, -1, 180);
	CreateDynamicObject(790, 872.97180175781, 3872.0607910156, 7.2354927062988, 0, 0, 14.56787109375, -1, -1, -1, 180);
	CreateDynamicObject(621, 776.12255859375, 4057.3669433594, 1.1583671569824, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(790, 901.53521728516, 3847.6555175781, 7.2354927062988, 0, 354.04498291016, 44.340393066406, -1, -1, -1, 180);
	CreateDynamicObject(623, 775.36846923828, 4058.9772949219, 0.9039649963379, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(2905, 770.68640136719, 4057.7568359375, 2.1497521400452, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(2907, 771.76361083984, 4057.3439941406, 2.3508429527283, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(2908, 771.26605224609, 4056.9965820313, 2.333233833313, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(3092, 775.23510742188, 4058.208984375, 3.8729166984558, 0, 0, 59.820007324219, -1, -1, -1, 180);
	CreateDynamicObject(3258, 948.0234375, 3911.4599609375, -28.17456817627, 0, 0, 0, -1, -1, -1, 180);
	CreateDynamicObject(3258, 955.0380859375, 3905.048828125, -28.226194381714, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(13654, 959.00714111328, 3909.716796875, 3.0066089630127, 76.678344726563, 271.68298339844, 352.05993652344, -1, -1, -1, 180);
	CreateDynamicObject(13654, 955.49169921875, 3910.0966796875, 3.0066089630127, 76.673583984375, 271.68090820313, 352.05688476563, -1, -1, -1, 180);
	CreateDynamicObject(13654, 951.4921875, 3910.1669921875, 3.0066089630127, 76.673583984375, 271.68090820313, 352.05688476563, -1, -1, -1, 180);
	CreateDynamicObject(13654, 947.76043701172, 3911.2329101563, 3.0322093963623, 76.673583984375, 271.68090820313, 352.05688476563, -1, -1, -1, 180);
	CreateDynamicObject(13654, 948.02423095703, 3904.1999511719, 3.0322093963623, 76.673583984375, 271.68090820313, 266.70251464844, -1, -1, -1, 180);
	CreateDynamicObject(13654, 957.33380126953, 3904.0808105469, 3.0322093963623, 76.668090820313, 271.67541503906, 266.69860839844, -1, -1, -1, 180);
	CreateDynamicObject(16258, 982.91937255859, 3870.8918457031, -37.69563293457, 358.01147460938, 359.97802734375, 234.16259765625, -1, -1, -1, 180);
	CreateDynamicObject(16139, 986.40197753906, 3962.2072753906, 6.4752635955811, 0, 5.95458984375, 285.83129882813, -1, -1, -1, 180);
	CreateDynamicObject(16093, 953.8037109375, 3863.9482421875, 16.579814910889, 0, 0, 178.40148925781, -1, -1, -1, 180);
	CreateDynamicObject(16093, 947.560546875, 3864.1875, 16.585348129272, 0, 0, 178.40148925781, -1, -1, -1, 180);
	CreateDynamicObject(3578, 993.47192382813, 3713.677734375, 7.0689401626587, 0, 0, 358.01501464844, -1, -1, -1, 180);
	CreateDynamicObject(3578, 984.09088134766, 3713.9897460938, 6.4673299789429, 0, 0, 357.48001098633, -1, -1, -1, 180);
	CreateDynamicObject(10832, 991.63586425781, 3708.5568847656, 8.8286724090576, 0, 0, 358.01501464844, -1, -1, -1, 180);
	CreateDynamicObject(3578, 975.79559326172, 3714.3916015625, 6.4737300872803, 0, 0, 357.28500366211, -1, -1, -1, 180);
	CreateDynamicObject(10832, 969.04577636719, 3708.9846191406, 8.7902717590332, 0, 0, 176.61193847656, -1, -1, -1, 180);
	CreateDynamicObject(9361, 951.2568359375, 3860.359375, 22.419952392578, 0, 0, 42.7587890625, -1, -1, -1, 180);
	CreateDynamicObject(9819, 949.4326171875, 3860.4384765625, 20.714157104492, 0, 0, 177.37976074219, -1, -1, -1, 180);
	CreateDynamicObject(3095, 950.1162109375, 3858.4580078125, 19.485845565796, 0, 0, 358.9892578125, -1, -1, -1, 180);
	CreateDynamicObject(9131, 951.2646484375, 3854.6220703125, 17.793558120728, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(9131, 951.2646484375, 3854.6220703125, 18.582386016846, 0, 0, 356.02294921875, -1, -1, -1, 180);
	CreateDynamicObject(8614, 957.01171875, 3858.93359375, 18.696210861206, 0, 0, 358.01147460938, -1, -1, -1, 180);
	CreateDynamicObject(1715, 950.59527587891, 3861.4755859375, 19.99094581604, 0, 0, 284.39038085938, -1, -1, -1, 180);*/

//Schwarzmarkt
	CreateDynamicObject(11492, 2804.69921875, -1438, 39, 0, 0, 90);
	CreateDynamicObject(974, 2803.3000488281, -1426.4000244141, 41.799999237061, 0, 0, 0);
	
	CreateDynamicObject(2612, 2807.6000976563, -1426.5999755859, 41.700000762939, 0, 0, 0);
	CreateDynamicObject(1989, 2800.6999511719, -1427.0999755859, 39.099998474121, 0, 0, 0);
	CreateDynamicObject(2579, 2798.8999023438, -1429.5999755859, 40.099998474121, 0, 0, 90);
	CreateDynamicObject(2583, 2799.1000976563, -1428.4000244141, 39.900001525879, 0, 0, 88);
	CreateDynamicObject(2582, 2799, -1430.8000488281, 39.900001525879, 0, 0, 90);
	CreateDynamicObject(2584, 2799.1999511719, -1432, 39.900001525879, 0, 0, 0);
	CreateDynamicObject(18070, 2808.1999511719, -1437.5, 39.5, 0, 0, 270);
	CreateDynamicObject(2941, 2806.5, -1439.1999511719, 40.400001525879, 0, 0, 268);
	CreateDynamicObject(2941, 2806.3999023438, -1436.0999755859, 40.400001525879, 0, 0, 270);
	CreateDynamicObject(2586, 2810.1999511719, -1430.0999755859, 39.599998474121, 0, 0, 270);
	CreateDynamicObject(2582, 2810, -1427.3000488281, 39.900001525879, 0, 0, 309.99450683594);
	CreateDynamicObject(2620, 2810.1000976563, -1440.1999511719, 40.799999237061, 0, 0, 0);
	CreateDynamicObject(2620, 2806.3000488281, -1440.1999511719, 40.799999237061, 0, 0, 0);
	CreateDynamicObject(2771, 2809, -1440.0999755859, 40.200000762939, 0, 0, 0);
	CreateDynamicObject(14666, 2810.6999511719, -1432.5, 41.099998474121, 0, 0, 0);
	CreateDynamicObject(14890, 2808.1999511719, -1434.5, 40, 0, 0, 0);
	CreateDynamicObject(964, 2809.8999023438, -1432.9000244141, 39.099998474121, 0, 0, 0);
	CreateDynamicObject(2567, 2799.8999023438, -1438.0999755859, 41, 0, 0, 270);
	CreateDynamicObject(2567, 2800, -1443.4000244141, 41, 0, 0, 269.99450683594);

	schwarztor = CreateObject(980, 2804.8999023438, -1449.5999755859, 46, 0, 0, 0);
//*********************************************************************************************

//*********************Stadt Objecte*************************************************

//Zivispawn
/*	CreateDynamicObject(983, 1723.1999511719, -1872.1999511719, 13.199999809265, 0, 0, 270);
	CreateDynamicObject(983, 1707.0999755859, -1872.3000488281, 13.300000190735, 0, 0, 269.99450683594);
	CreateDynamicObject(3666, 1716.4000244141, -1872.5999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1713.8000488281, -1872.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1715.6999511719, -1934.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(673, 1701.9000244141, -1929.8000488281, 11.89999961853, 0, 0, 0);
	CreateDynamicObject(673, 1701.8000488281, -1920, 11.89999961853, 0, 0, 0);
	CreateDynamicObject(673, 1702.0999755859, -1904, 11.60000038147, 0, 0, 0);
	CreateDynamicObject(673, 1702, -1894.5, 11.39999961853, 0, 0, 0);
	CreateDynamicObject(983, 1700.5, -1860.5, 13.300000190735, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1700.6999511719, -1869.5999755859, 13.300000190735, 0, 0, 179.98901367188);
	CreateDynamicObject(983, 1700.5, -1847, 13.199999809265, 0, 0, 179.98901367188);
	CreateDynamicObject(673, 1715.0999755859, -1907.0999755859, 10.60000038147, 0, 0, 0);
	CreateDynamicObject(673, 1715.3000488281, -1917.1999511719, 11.60000038147, 0, 0, 0);*/

//Ammunation neu
/*

	CreateDynamicObject(3091, 1364.5985107422, -1375.2152099609, 13.268136024475, 0, 0, 0);
	CreateDynamicObject(1427, 1367.0128173828, -1375.8618164063, 13.182158470154, 0, 0, 318);
	CreateDynamicObject(979, 1358.1802978516, -1362.5725097656, 13.237888336182, 0, 0, 90);
	CreateDynamicObject(979, 1358.1810302734, -1353.1551513672, 13.223032951355, 0, 0, 90);
	CreateDynamicObject(3091, 1350.4259033203, -1385.9399414063, 13.152423858643, 0, 0, 179.99731445313);
	CreateDynamicObject(979, 1356.6616210938, -1330.4398193359, 13.23082447052, 0, 0, 270);
	CreateDynamicObject(979, 1356.662109375, -1321.0280761719, 13.23082447052, 0, 0, 270);
	CreateDynamicObject(979, 1356.6602783203, -1311.7509765625, 13.200217247009, 0, 0, 270);
	CreateDynamicObject(979, 1354.1435546875, -1303.1273193359, 13.161547660828, 0, 0, 302);
	CreateDynamicObject(979, 1360.1712646484, -1344.2001953125, 13.223032951355, 0, 0, 64);
	CreateDynamicObject(979, 1360.4479980469, -1371.3973388672, 13.289608955383, 0, 0, 119.99536132813);
	CreateDynamicObject(1228, 1363.8367919922, -1339.5390625, 12.96800327301, 0, 0, 268);
	CreateDynamicObject(1228, 1366.2376708984, -1339.5974121094, 12.96800327301, 0, 0, 267.99499511719);
	CreateDynamicObject(1228, 1368.7893066406, -1339.5701904297, 12.96800327301, 0, 0, 267.99499511719);
	CreateDynamicObject(979, 1354.2628173828, -1339.3192138672, 13.223032951355, 0, 0, 239.99267578125);
	CreateDynamicObject(996, 1362.8842773438, -1330.1789550781, 13.287833213806, 0, 0, 270);
	CreateDynamicObject(996, 1362.8831787109, -1320.7075195313, 13.287833213806, 0, 0, 270);
	CreateDynamicObject(996, 1362.76953125, -1310.7937011719, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(1231, 1362.8723144531, -1318.9711914063, 15.269470214844, 0, 0, 272);
	CreateDynamicObject(1231, 1362.9114990234, -1328.8211669922, 15.269470214844, 0, 0, 271.99951171875);
	CreateDynamicObject(1231, 1362.8426513672, -1338.4498291016, 15.277267456055, 0, 0, 271.99951171875);
	CreateDynamicObject(3578, 1356.8853759766, -1374.5516357422, 11.745908737183, 0, 0, 0);
	CreateDynamicObject(4641, 1349.7655029297, -1290.1687011719, 14.079392433167, 0, 0, 0);
	CreateDynamicObject(983, 1347.8010253906, -1287.2009277344, 13.066367149353, 0, 0, 0);
	CreateDynamicObject(983, 1347.8088378906, -1280.8288574219, 13.066367149353, 0, 0, 0);
	CreateDynamicObject(983, 1347.8372802734, -1274.3673095703, 13.066367149353, 0, 0, 0);
	CreateDynamicObject(983, 1350.2766113281, -1278.1428222656, 13.066367149353, 0, 0, 228);
	CreateDynamicObject(983, 1350.1632080078, -1282.9976806641, 13.066367149353, 0, 0, 227.99928283691);
	CreateDynamicObject(983, 1350.3471679688, -1273.3919677734, 13.066367149353, 0, 0, 227.99926757813);
	CreateDynamicObject(792, 1347.9597167969, -1270.8486328125, 12.632813453674, 0, 0, 0);
	CreateDynamicObject(792, 1347.8298339844, -1291.0666503906, 12.662230491638, 0, 0, 0);
	CreateDynamicObject(1231, 1347.7744140625, -1280.8914794922, 15.113204956055, 0, 0, 268);
	CreateDynamicObject(1231, 1347.8132324219, -1276.021484375, 15.113204956055, 0, 0, 267.99499511719);
	CreateDynamicObject(996, 1362.7791748047, -1300.8070068359, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(996, 1362.8337402344, -1291.4149169922, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(996, 1362.8094482422, -1282.1108398438, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(996, 1362.8131103516, -1271.8660888672, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(1215, 1366.5518798828, -1268.3487548828, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1365.142578125, -1269.3781738281, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1363.5474853516, -1270.5358886719, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1231, 1362.8271484375, -1309.2393798828, 15.277267456055, 0, 0, 271.99951171875);
	CreateDynamicObject(1231, 1362.8597412109, -1299.4656982422, 15.277267456055, 0, 0, 271.99951171875);
	CreateDynamicObject(1231, 1362.8698730469, -1290.1530761719, 15.277267456055, 0, 0, 271.99951171875);
	CreateDynamicObject(1231, 1362.8149414063, -1270.8280029297, 15.277267456055, 0, 0, 271.99951171875);
	CreateDynamicObject(2773, 1367.1593017578, -1282.2810058594, 13.064103126526, 0, 0, 270);
	CreateDynamicObject(2773, 1366.189453125, -1277.2165527344, 13.064103126526, 0, 0, 180);
	CreateDynamicObject(2773, 1366.1370849609, -1274.7784423828, 13.064103126526, 0, 0, 179.99450683594);
	CreateDynamicObject(2773, 1366.271484375, -1281.3344726563, 13.064103126526, 0, 0, 179.99450683594);
	CreateDynamicObject(3867, 1365.5582275391, -1365.5646972656, 27.556873321533, 0, 0, 270);
	CreateDynamicObject(3867, 1365.5509033203, -1348.681640625, 27.534112930298, 0, 0, 270);
	CreateDynamicObject(12930, 1362.5, -1358.6049804688, 14.93803691864, 0, 0, 0);
	CreateDynamicObject(3675, 1369.7110595703, -1345.1446533203, 19.378074645996, 0, 0, 270);
	CreateDynamicObject(3675, 1369.6624755859, -1343.6877441406, 19.378074645996, 0, 0, 270);
	CreateDynamicObject(3675, 1369.6342773438, -1342.0089111328, 19.378074645996, 0, 0, 270);
	CreateDynamicObject(3502, 1360.57421875, -1363.2017822266, 14.329996109009, 0, 0, 0);
	CreateDynamicObject(3502, 1354.0037841797, -1323.4477539063, 14.319244384766, 0, 0, 0);
	CreateDynamicObject(3502, 1353.3428955078, -1330.2401123047, 15.819244384766, 30, 0, 0);
	CreateDynamicObject(1554, 1352.2966308594, -1317.0571289063, 12.438217163086, 0, 0, 0);
	CreateDynamicObject(1554, 1352.26171875, -1315.9615478516, 12.443981170654, 0, 0, 0);
	CreateDynamicObject(1554, 1352.2890625, -1314.7882080078, 12.439458847046, 0, 0, 0);
	CreateDynamicObject(1554, 1353.4808349609, -1306.8579101563, 12.347078323364, 0, 0, 0);
	CreateDynamicObject(1554, 1352.201171875, -1312.0295410156, 12.453981399536, 0, 0, 0);
	CreateDynamicObject(1554, 1352.2384033203, -1310.8491210938, 12.447830200195, 0, 0, 0);
	CreateDynamicObject(1554, 1352.2989501953, -1309.3143310547, 12.437818527222, 0, 0, 0);
	CreateDynamicObject(1554, 1353.0155029297, -1308.2803955078, 12.365159988403, 0, 0, 0);
	CreateDynamicObject(1554, 1352.1647949219, -1307.9248046875, 12.459995269775, 0, 0, 0);
	CreateDynamicObject(1554, 1352.3072509766, -1306.6938476563, 12.436445236206, 0, 0, 0);
	CreateDynamicObject(918, 1354.4333496094, -1312.8598632813, 12.740463256836, 0, 0, 0);
	CreateDynamicObject(918, 1354.455078125, -1309.8536376953, 12.716236114502, 0, 0, 0);
	CreateDynamicObject(1218, 1354.8538818359, -1311.26953125, 12.847809791565, 0, 0, 0);
	CreateDynamicObject(1218, 1353.7319335938, -1310.2711181641, 12.839764595032, 0, 0, 0);
	CreateDynamicObject(1218, 1355.0717773438, -1309.48828125, 12.833455085754, 0, 0, 0);
	CreateDynamicObject(3502, 1353.7578125, -1316.4366455078, 16.069244384766, 151, 0, 8);
	CreateDynamicObject(1228, 1352.4873046875, -1305.8864746094, 12.827816009521, 0, 0, 267.99499511719);
	CreateDynamicObject(1228, 1354.4228515625, -1306.4226074219, 12.738185882568, 0, 0, 243.99499511719);
	CreateDynamicObject(983, 1350.2027587891, -1287.7637939453, 13.066367149353, 0, 0, 227.99926757813);
	CreateDynamicObject(1231, 1347.7803955078, -1285.5827636719, 15.113204956055, 0, 0, 267.99499511719);
	CreateDynamicObject(8843, 1360.2416992188, -1380.3779296875, 12.494209289551, 0, 0, 16);
	CreateDynamicObject(8843, 1355.1337890625, -1373.1156005859, 12.451648712158, 0, 0, 0);
	CreateDynamicObject(8843, 1355.4476318359, -1349.7911376953, 12.3828125, 0, 0, 0);
	CreateDynamicObject(8843, 1360.1466064453, -1329.9455566406, 12.390602111816, 0, 0, 0);
	CreateDynamicObject(8843, 1360.1743164063, -1317.3050537109, 12.390604019165, 0, 0, 0);
	CreateDynamicObject(8843, 1355.5570068359, -1303.5850830078, 12.294189453125, 0, 0, 0);
	CreateDynamicObject(8843, 1360.0493164063, -1305.5798339844, 12.302450180054, 0, 0, 0);
	CreateDynamicObject(984, 1402.5035400391, -1414.2280273438, 13.355573654175, 0, 0, 0);
	CreateDynamicObject(984, 1402.4998779297, -1427.0377197266, 13.34924697876, 0, 0, 0);
	CreateDynamicObject(983, 1402.5369873047, -1433.4274902344, 13.402011871338, 0, 0, 0);
	CreateDynamicObject(984, 1415.1303710938, -1429.8394775391, 13.38484287262, 0, 0, 0);
	CreateDynamicObject(984, 1415.16015625, -1417.0725097656, 13.382351875305, 0, 0, 0);
	CreateDynamicObject(983, 1415.1550292969, -1407.4849853516, 13.430037498474, 0, 0, 0);
	CreateDynamicObject(984, 1406.2019042969, -1400.7596435547, 13.356740951538, 0, 0, 90);
	CreateDynamicObject(984, 1413.2639160156, -1440.73046875, 13.34268951416, 0, 0, 90);
	CreateDynamicObject(3666, 1402.8947753906, -1437.7868652344, 13.243871688843, 0, 0, 0);
	CreateDynamicObject(3666, 1403.6958007813, -1439.0958251953, 13.236326217651, 0, 0, 0);
	CreateDynamicObject(3666, 1405.0380859375, -1440.1927490234, 13.230461120605, 0, 0, 0);
	CreateDynamicObject(3666, 1419.9765625, -1438.9106445313, 13.237225532532, 0, 0, 0);
	CreateDynamicObject(3666, 1418.228515625, -1438.0924072266, 13.2283411026, 0, 0, 0);
	CreateDynamicObject(3666, 1416.392578125, -1437.4117431641, 13.2302942276, 0, 0, 0);
	CreateDynamicObject(3666, 1420.9086914063, -1440.2645263672, 13.227119445801, 0, 0, 0);
	CreateDynamicObject(3666, 1414.9266357422, -1402.9450683594, 13.227492332458, 0, 0, 0);
	CreateDynamicObject(3666, 1413.9405517578, -1401.7185058594, 13.230518341064, 0, 0, 0);
	CreateDynamicObject(3666, 1399.5493164063, -1401.7827148438, 13.21681022644, 0, 0, 0);
	CreateDynamicObject(3666, 1400.28515625, -1403.2890625, 13.224603652954, 0, 0, 0);
	CreateDynamicObject(3666, 1401.4118652344, -1404.9412841797, 13.21681022644, 0, 0, 0);
	CreateDynamicObject(3666, 1402.0250244141, -1406.5950927734, 13.21681022644, 0, 0, 0);
	CreateDynamicObject(750, 1409.1871337891, -1412.298828125, 13.203125, 0, 0, 0);
	CreateDynamicObject(748, 1409.0836181641, -1420.3536376953, 14.026478767395, 0, 0, 0);
	CreateDynamicObject(744, 1408.2614746094, -1431.4533691406, 13.178660392761, 0, 0, 0);
	CreateDynamicObject(748, 1404.9285888672, -1404.0028076172, 13.695829391479, 0, 0, 0);*/



// ATMs
	  CreateDynamicObject(2942, 810.565063, -1623.768799, 13.189775, 0.0000, 0.0000, 90.0001);
	  CreateDynamicObject(2942, 1000.825195, -922.610168, 41.971024, 0.0000, 0.0000, 277.8123);
	  CreateDynamicObject(2942, 1504.693359, -1706.567749, 13.689775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 1928.620850, -1771.269043, 13.189775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 1036.071655, -1024.509766, 31.744461, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 926.909912, -1355.081421, 13.021199, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2942, 491.439484, -1734.586548, 10.871187, 0.0000, 0.0000, 168.3452);
	  CreateDynamicObject(2942, 380.780701, -2021.725830, 7.478837, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 1223.778320, -1744.292603, 13.240016, 0.0000, 0.0000, 193.3734);
	  CreateDynamicObject(2942, 2105.436035, -1809.228516, 13.197587, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2942, 2072.053955, -1836.951416, 13.197434, 0.0000, 0.0000, 90.0001);
	  CreateDynamicObject(2942, 1956.735596, -2186.291016, 13.189775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 2394.498047, -1914.865356, 13.189775, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 2779.040283, -1821.910034, 10.157268, 0.0000, 0.0000, 33.7500);
	  CreateDynamicObject(2942, 1196.011841, -918.630188, 40.792793, 0.0000, 0.0000, 5.1566);
	  CreateDynamicObject(2942, 1458.4338,2767.5984,10.8203, 0,0,90.0);

//Lampen in SA
	  CreateDynamicObject(1215, 1554.292358, -1672.484253, 16.236198, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, 1554.540039, -1678.753174, 16.236198, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, 1219.033081, -923.268433, 42.658073, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -890.670898, -1106.842285, 98.519646, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -895.001831, -1121.806030, 98.525261, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -1215.353638, -774.154785, 63.461586, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -1225.152100, -783.667297, 63.470837, 0.0000, 0.0000, 0.0000);

//Benzin Zapfseulen
	  CreateDynamicObject(1686, 999.061584, -937.677124, 41.341427, 0.0000, 0.0000, 279.5312);
	  CreateDynamicObject(1686, 1001.707642, -937.323975, 41.341427, 0.0000, 0.0000, 277.8123);
	  CreateDynamicObject(1686, 1006.411499, -936.608154, 41.341427, 0.0000, 0.0000, 278.6717);
	  CreateDynamicObject(1686, 1008.847473, -936.295105, 41.341427, 0.0000, 0.0000, 276.0161);
	  CreateDynamicObject(1676, -2026.529053, 156.427383, 29.619930, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(1478, 403.10845947266, -1166.8913574219, 78.271385192871, 0, 0, 332.21020507813);
	  CreateDynamicObject(1215, 401.99563598633, -1166.8287353516, 78.22876739502, 0, 0, 0);
	  CreateDynamicObject(1215, 396.21929931641, -1162.908203125, 78.38159942627, 0, 0, 0);
	  CreateDynamicObject(1215, 402.88714599609, -1151.4522705078, 76.765037536621, 0, 0, 0);
	  CreateDynamicObject(1215, 400.11080932617, -1156.8591308594, 77.554794311523, 0, 0, 0);
	  CreateDynamicObject(1215, 419.89184570313, -1162.5523681641, 76.251937866211, 0, 0, 0);
	  CreateDynamicObject(1215, 412.61679077148, -1158.216796875, 76.251937866211, 0, 0, 0);
	  CreateDynamicObject(1432, 430.77648925781, -1135.6459960938, 72.716911315918, 0, 0, 0);
	  CreateDynamicObject(1432, 426.81814575195, -1133.3518066406, 72.716911315918, 0, 0, 0);


// Anzeige Tafel
	  CreateDynamicObject(648, 1180.917725, -1418.015747, 14.331814, 0.0000, 0.0000, 247.5000);
	  CreateDynamicObject(1282, 1228.083008, -918.375244, 42.590260, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1309, 1311.811646, -951.617676, 50.117989, 0.0000, 0.0000, 325.3906);
	  CreateDynamicObject(2790, 1314.072998, -946.420166, 62.206589, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(2790, 1311.052490, -950.745300, 62.184284, 0.0000, 359.1406, 237.0320);
	  CreateDynamicObject(2790, 1316.990723, -942.176880, 62.219135, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(2790, 1308.280762, -954.797180, 62.250763, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(18244, 1314.947266, -944.974426, 56.388088, 88.5220, 358.2811, 57.1094);

//Los Santos Bank Interior NEU
/*	CreateDynamicObject(14576, 1388.6025390625, -979.0361328125, 5659.0209960938, 0, 0, 0);
	CreateDynamicObject(14789, 1372.5791015625, -969.2958984375, 5667.6533203125, 0, 0, 0);
	CreateDynamicObject(7707, 1391.6492919922, -993.76959228516, 5660.546875, 0, 0, 90);
	CreateDynamicObject(7707, 1394.3056640625, -996.61676025391, 5660.5361328125, 0, 0, 0);
	tuer1 = CreateObject(2963, 1387.9091796875, -971.20501708984, 5652.53515625, 0, 0, 90); //Tresortür
	tuer2 = CreateObject(2963, 1387.9912109375, -991.5615234375, 5652.17578125, 0, 0, 90); //Tresortür
	CreateDynamicObject(2957, 1393.9821777344, -993.64117431641, 5660.5986328125, 0, 0, 0);
	CreateDynamicObject(2957, 1394.4165039063, -995.87939453125, 5660.6513671875, 0, 0, 270);
	CreateDynamicObject(2957, 1391.8572998047, -993.79064941406, 5667.5014648438, 0, 0, 0.25);
	CreateDynamicObject(2957, 1395.2294921875, -993.75500488281, 5665.1064453125, 0, 0, 0);
	CreateDynamicObject(2957, 1389.1815185547, -993.73059082031, 5664.810546875, 0, 0, 0);
	CreateDynamicObject(1523, 1391.4387207031, -993.71466064453, 5663.3950195313, 0, 0, 0);
	CreateDynamicObject(1726, 1372.0887451172, -970.2958984375, 5663.3940429688, 0, 0, 90);
	CreateDynamicObject(1726, 1371.9916992188, -984.07092285156, 5663.4213867188, 0, 0, 90);
	CreateDynamicObject(1727, 1373.1317138672, -981.1826171875, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1727, 1374.0562744141, -984.966796875, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1727, 1373.3013916016, -967.26196289063, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1727, 1374.2368164063, -971.26800537109, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(630, 1372.0124511719, -967.33624267578, 5664.4477539063, 0, 0, 0);
	CreateDynamicObject(630, 1371.7877197266, -971.42181396484, 5664.4467773438, 0, 0, 0);
	CreateDynamicObject(630, 1372.0112304688, -985.13787841797, 5664.4477539063, 0, 0, 0);
	CreateDynamicObject(630, 1371.9652099609, -981.13470458984, 5664.4477539063, 0, 0, 0);
	CreateDynamicObject(630, 1379.3234863281, -992.93981933594, 5664.4443359375, 0, 0, 0);
	CreateDynamicObject(630, 1383.1148681641, -992.92706298828, 5664.4443359375, 0, 0, 0);
	CreateDynamicObject(2605, 1392.2071533203, -960.25891113281, 5663.8173828125, 0, 0, 90);
	CreateDynamicObject(2605, 1392.2138671875, -963.96411132813, 5663.8686523438, 0, 0, 90);
	CreateDynamicObject(2605, 1392.1840820313, -967.49603271484, 5663.8173828125, 0, 0, 90);
	CreateDynamicObject(2370, 1373.4903564453, -969.66278076172, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2370, 1373.4655761719, -983.42639160156, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2309, 1390.9503173828, -960.80316162109, 5663.4189453125, 0, 0, 302);
	CreateDynamicObject(2309, 1390.8302001953, -959.52124023438, 5663.4189453125, 0, 0, 248);
	CreateDynamicObject(2309, 1390.8679199219, -964.67333984375, 5663.4189453125, 0, 0, 314);
	CreateDynamicObject(2309, 1390.5640869141, -963.27917480469, 5663.4189453125, 0, 0, 252);
	CreateDynamicObject(2309, 1390.7421875, -966.66687011719, 5663.4189453125, 0, 0, 260);
	CreateDynamicObject(2309, 1390.6275634766, -967.61743164063, 5663.4189453125, 0, 0, 274);
	CreateDynamicObject(1714, 1393.0716552734, -963.86657714844, 5663.4189453125, 0, 0, 306);
	CreateDynamicObject(1714, 1392.9161376953, -960.27435302734, 5663.4189453125, 0, 0, 270);
	CreateDynamicObject(1714, 1393.0373535156, -967.548828125, 5663.4189453125, 0, 0, 258);
	CreateDynamicObject(1210, 1392.1884765625, -966.42523193359, 5663.5922851563, 0, 0, 0);
	CreateDynamicObject(1210, 1392.3251953125, -965.00152587891, 5663.5966796875, 0, 0, 0);
	CreateDynamicObject(1210, 1392.3226318359, -961.32104492188, 5663.5854492188, 0, 0, 0);
	CreateDynamicObject(2690, 1372.6857910156, -961.72393798828, 5664.4301757813, 0, 0, 94);
	CreateDynamicObject(2690, 1378.3255615234, -993.52935791016, 5664.31640625, 0, 0, 180);
	CreateDynamicObject(626, 1392.4136962891, -962.18872070313, 5665.4677734375, 0, 0, 0);
	CreateDynamicObject(626, 1392.4036865234, -965.80523681641, 5665.517578125, 0, 0, 0);
	CreateDynamicObject(2610, 1394.0549316406, -959.27484130859, 5664.2446289063, 0, 0, 0);
	CreateDynamicObject(2610, 1395.0433349609, -959.27478027344, 5664.2446289063, 0, 0, 0);
	CreateDynamicObject(2610, 1393.5627441406, -959.28009033203, 5664.2446289063, 0, 0, 0);
	CreateDynamicObject(2610, 1394.5490722656, -959.27557373047, 5664.2446289063, 0, 0, 0);
	CreateDynamicObject(2610, 1395.5363769531, -959.27838134766, 5664.2446289063, 0, 0, 0);
	CreateDynamicObject(2609, 1396.2247314453, -960.39343261719, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2152099609, -960.84661865234, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.216796875, -961.29858398438, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2189941406, -961.75396728516, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2253417969, -967.78057861328, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2236328125, -967.32794189453, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2182617188, -966.87615966797, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2609, 1396.2142333984, -966.42218017578, 5664.1508789063, 0, 0, 270);
	CreateDynamicObject(2164, 1396.4993896484, -963.70397949219, 5663.4365234375, 0, 0, 269.5);
	CreateDynamicObject(2167, 1396.5281982422, -965.48034667969, 5663.4189453125, 0, 0, 269.25);
	CreateDynamicObject(2205, 1391.3752441406, -973.23590087891, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1389.1005859375, -973.2373046875, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1386.8182373047, -973.23419189453, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1384.5417480469, -973.23126220703, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1382.259765625, -973.22796630859, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1379.9750976563, -973.22375488281, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1392.6229248047, -976.82763671875, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1390.6437988281, -976.81463623047, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1388.6871337891, -976.81341552734, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1386.7204589844, -976.82391357422, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1384.7581787109, -976.81976318359, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1382.7916259766, -976.82501220703, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2174, 1380.927734375, -976.83361816406, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1380.6950683594, -973.99237060547, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1382.9096679688, -973.88775634766, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1385.0616455078, -973.94085693359, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1387.3062744141, -974.00762939453, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1389.8911132813, -973.94750976563, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1714, 1392.12109375, -974.00872802734, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1514, 1391.2734375, -973.20056152344, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(1514, 1388.9608154297, -973.23571777344, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(1514, 1386.708984375, -973.21215820313, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(1514, 1384.4827880859, -973.20843505859, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(1514, 1382.1694335938, -973.20916748047, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(1514, 1379.9017333984, -973.22900390625, 5664.6206054688, 0, 0, 180);
	CreateDynamicObject(2773, 1381.8254394531, -971.19213867188, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1384.0555419922, -971.20574951172, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1390.8447265625, -971.19152832031, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1388.6129150391, -971.20782470703, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1386.2716064453, -971.2138671875, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1382.9714355469, -991.11492919922, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1379.2608642578, -991.18829345703, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2174, 1379.9351806641, -977.81652832031, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1381.8957519531, -977.80865478516, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1383.8586425781, -977.80047607422, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1385.82421875, -977.81072998047, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1387.7944335938, -977.80017089844, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1389.7626953125, -977.80419921875, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2174, 1391.6284179688, -977.80493164063, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(2205, 1392.6671142578, -980.89782714844, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2205, 1390.3768310547, -980.90460205078, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2205, 1388.1185302734, -980.89105224609, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2205, 1385.8399658203, -980.89318847656, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2205, 1383.5594482422, -980.89715576172, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(2205, 1381.3006591797, -980.89239501953, 5663.4189453125, 0, 0, 180);
	CreateDynamicObject(1514, 1381.3887939453, -980.92779541016, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(1514, 1383.7081298828, -980.91259765625, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(1514, 1385.9888916016, -980.86492919922, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(1514, 1388.2279052734, -980.85076904297, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(1514, 1390.4854736328, -980.8818359375, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(1514, 1392.8194580078, -980.87457275391, 5664.6206054688, 0, 0, 0);
	CreateDynamicObject(2773, 1390.8393554688, -982.92370605469, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1388.5306396484, -982.88177490234, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1386.2633056641, -982.84423828125, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1384.0108642578, -982.87463378906, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(2773, 1381.6693115234, -982.91394042969, 5663.9360351563, 0, 0, 0);
	CreateDynamicObject(1714, 1392.2160644531, -980.10247802734, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1714, 1389.9320068359, -980.21057128906, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1714, 1387.521484375, -980.23236083984, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1714, 1385.3142089844, -980.08337402344, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1714, 1383.2939453125, -980.09094238281, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(1714, 1380.7843017578, -980.2119140625, 5663.4189453125, 0, 0, 0);
	CreateDynamicObject(626, 1393.673828125, -1001.671875, 5663.2797851563, 0, 0, 0);
	CreateDynamicObject(626, 1387.9946289063, -1001.8073730469, 5663.2797851563, 0, 0, 0);
	CreateDynamicObject(626, 1387.8642578125, -994.57073974609, 5661.2797851563, 0, 0, 0);
	CreateDynamicObject(626, 1393.7954101563, -1001.8503417969, 5659.0795898438, 0, 0, 0);
	CreateDynamicObject(626, 1387.8201904297, -1001.8786621094, 5659.0795898438, 0, 0, 0);
	CreateDynamicObject(626, 1387.8044433594, -994.59197998047, 5657.0883789063, 0, 0, 0);
	CreateDynamicObject(626, 1393.8450927734, -994.65698242188, 5657.0883789063, 0, 0, 0);
	CreateDynamicObject(626, 1393.7681884766, -1001.8433227539, 5654.8798828125, 0, 0, 0);
	CreateDynamicObject(626, 1387.7700195313, -1001.9794311523, 5654.8798828125, 0, 0, 0);
	CreateDynamicObject(1550, 1385.7976074219, -955.92620849609, 5651.2329101563, 0, 0, 0);
	CreateDynamicObject(1550, 1386.7369384766, -956.416015625, 5651.2329101563, 0, 0, 0);
	CreateDynamicObject(1550, 1385.9923095703, -957.04248046875, 5651.2329101563, 0, 0, 0);
	CreateDynamicObject(1550, 1387.716796875, -956.22406005859, 5651.2329101563, 0, 0, 0);
	CreateDynamicObject(2886, 1390.2069091797, -991.91998291016, 5652.6333007813, 0, 0, 0);
	CreateDynamicObject(2886, 1389.9132080078, -971.59533691406, 5652.7416992188, 0, 0, 0);*/
//Krankenhaus map by DarkSh00ter
CreateDynamicObject(1360, 1189.5999755859, -1329.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1332.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1334.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1337.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1339.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1341.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1344.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1346.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1348.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1351, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1353.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1355.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1358.3000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1360.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1362.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1367.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1369.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1372.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1374.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1376.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1379.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1381.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1383.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1120.4000244141, -1351.1999511719, -23.10000038147, 0, 0, 0);
CreateDynamicObject(1597, 1200.6999511719, -1316.3000488281, 15.10000038147, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1300.1999511719, 15, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1308.1999511719, 15, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1295, 15, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1333.6999511719, 15.10000038147, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1342.4000244141, 15.10000038147, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1351, 15.10000038147, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1359.5999755859, 15, 0, 0, 0);
CreateDynamicObject(1597, 1200.5999755859, -1368.1999511719, 15, 0, 0, 0);
CreateDynamicObject(1597, 1200.6999511719, -1376.9000244141, 14.89999961853, 0, 0, 0);
CreateDynamicObject(1597, 1200.8000488281, -1381.8000488281, 14.89999961853, 0, 0, 0);
CreateDynamicObject(1215, 1189.6999511719, -1328.3000488281, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1189.6999511719, -1319.6999511719, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1189.5999755859, -1312.1999511719, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1189.9000244141, -1305.3000488281, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1189.9000244141, -1290.3000488281, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1200.8000488281, -1290.6999511719, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1200.9000244141, -1329.5, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1215, 1201, -1320.6999511719, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1215, 1200.9000244141, -1338.3000488281, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1215, 1200.9000244141, -1347, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1215, 1200.8000488281, -1355.5, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1215, 1200.9000244141, -1372.8000488281, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1200.9000244141, -1364.0999755859, 13.10000038147, 0, 0, 0);
CreateDynamicObject(1215, 1201.5, -1304.5999755859, 13.60000038147, 0, 0, 0);
CreateDynamicObject(982, 1190.3000488281, -1341.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(982, 1190.1999511719, -1367.1999511719, 13.199999809265, 0, 0, 0);
CreateDynamicObject(982, 1190.0999755859, -1371.9000244141, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1365.3000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(983, 1190.3000488281, -1301.6999511719, 13.199999809265, 0, 0, 0);
CreateDynamicObject(983, 1190.3000488281, -1316, 13.199999809265, 0, 0, 0);
CreateDynamicObject(983, 1190.3000488281, -1295.3000488281, 13.199999809265, 0, 0, 0);
CreateDynamicObject(982, 1211.1999511719, -1372.3000488281, 13.199999809265, 0, 0, 0);
CreateDynamicObject(982, 1211.0999755859, -1346.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(983, 1211.1999511719, -1332.3000488281, 13.199999809265, 0, 0, 0);
CreateDynamicObject(982, 1211.1999511719, -1308, 13.199999809265, 0, 0, 0);
CreateDynamicObject(983, 1211.1999511719, -1293.5999755859, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1211.8000488281, -1292.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1294.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1297.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1299.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1301.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1304.3000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1306.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1309.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1311.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1313.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1316.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1318.3000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1319.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1330.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1332.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1335.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1337.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1339.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1342.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1344.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1346.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1349, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1351.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1353.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1355.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1357.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1360.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1362.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1365, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1366.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1369.0999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1371.5, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1373.8000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1211.9000244141, -1376.1999511719, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1212, -1378.5, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1212, -1380.8000488281, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1212, -1383.0999755859, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1212, -1384.5999755859, 13.199999809265, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1318.3000488281, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1316, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1313.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1304, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1301.6999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1299.4000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1297.1999511719, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1294.9000244141, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1360, 1189.5999755859, -1292.5999755859, 13.300000190735, 0, 0, 0);
CreateDynamicObject(1215, 1211.9000244141, -1290.5, 13.10000038147, 0, 0, 0);
CreateDynamicObject(3578, 1206, -1290.4000244141, 11.699999809265, 0, 0, 0);
CreateDynamicObject(3578, 1195.4000244141, -1290.5, 11.699999809265, 0, 0, 0);
CreateDynamicObject(3578, 1206.3000488281, -1384.8000488281, 11.5, 0, 0, 0);
CreateDynamicObject(3578, 1195.3000488281, -1385, 11.60000038147, 0, 0, 0);
CreateDynamicObject(3578, 1201, -1325, 11.699999809265, 0, 0, 270);
CreateDynamicObject(3578, 1199.3000488281, -1324.9000244141, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1190.8000488281, -1324.4000244141, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1196.4000244141, -1324.8000488281, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1193.6999511719, -1324.6999511719, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1202.8000488281, -1324.5999755859, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1205.4000244141, -1324.5, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1210.8000488281, -1324.4000244141, 11.699999809265, 0, 0, 269.99450683594);
CreateDynamicObject(3578, 1208, -1324.5, 11.699999809265, 0, 0, 269.99450683594);

//einkaufszentrum
	  CreateDynamicObject(1536, 1154.934448, -1442.743896, 14.789881, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(1536, 1154.982422, -1445.776245, 14.788172, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2698, 1152.474121, -1441.202515, 15.717060, 0.0000, 0.0000, 326.2500);
	  CreateDynamicObject(2698, 1152.401733, -1446.898804, 15.717060, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(2652, 1152.467529, -1447.867065, 15.264395, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2622, 1154.612915, -1442.143311, 15.531694, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2412, 1154.702026, -1442.951782, 14.796875, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2412, 1154.705811, -1446.253418, 14.796875, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(4730, 1156.247070, -1444.267334, 18.712761, 0.0000, 0.0000, 277.7351);
	  CreateDynamicObject(6056, 1129.646729, -1440.498413, 15.144344, 0.0000, 180.3776, 90.0001);
	  CreateDynamicObject(1234, 1130.034302, -1441.109863, 15.854324, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1536, 1102.012939, -1450.510498, 14.675667, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1536, 1101.965942, -1447.570679, 14.664883, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16501, 1101.774902, -1445.151855, 16.397362, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 1101.637573, -1452.122925, 16.347729, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2714, 1102.062988, -1448.901367, 17.574104, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2732, 1101.937866, -1446.152344, 17.102303, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2733, 1101.837769, -1451.712524, 16.873190, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2734, 1101.812744, -1453.857300, 15.839190, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2735, 1101.962891, -1444.416016, 16.075478, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1234, 1102.244263, -1450.704224, 15.431559, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1234, 1102.190796, -1450.709351, 15.431555, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(1234, 1102.238159, -1450.706909, 15.436562, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(3515, 1130.056152, -1453.683350, 14.892088, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1280, 1130.107666, -1456.478760, 15.198231, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1280, 1132.695313, -1453.511841, 15.198231, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(1280, 1130.166138, -1450.892212, 15.198231, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(1280, 1127.459961, -1453.588989, 15.198231, 0.0000, 0.0000, 0.0001);
	  CreateDynamicObject(1432, 1106.126221, -1444.582397, 14.928677, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1432, 1105.327271, -1452.787109, 14.928677, 0.0000, 0.0000, 315.0000);
	  CreateDynamicObject(1432, 1109.648682, -1446.720825, 14.928677, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(1432, 1109.236328, -1451.697021, 14.928677, 0.0000, 0.0000, 146.2501);
	  CreateDynamicObject(1215, 1130.194824, -1440.189453, 19.843939, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1226, 1130.321289, -1441.617798, 16.065090, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(1285, 1131.248779, -1441.089355, 16.556946, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(1340, 1105.311890, -1441.155396, 15.924461, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(970, 1147.9000244141, -1411.0999755859, 13.199999809265, 0, 0, 0);
      CreateDynamicObject(970, 1143.8000488281, -1411.0999755859, 13.199999809265, 0, 0, 0);
      CreateDynamicObject(970, 1139.6999511719, -1411.0999755859, 13.199999809265, 0, 0, 0);
      CreateDynamicObject(1257, 1135.1999511719, -1411.9000244141, 13.699999809265, 0, 0, 270);
      CreateDynamicObject(1229, 1137.5999755859, -1410.9000244141, 14.199999809265, 0, 0, 180);
      CreateDynamicObject(970, 1130.8000488281, -1411.0999755859, 13.199999809265, 0, 0, 0);
      CreateDynamicObject(970, 1126.6999511719, -1411.0999755859, 13.199999809265, 0, 0, 0);
      CreateDynamicObject(970, 1122.5999755859, -1411.0999755859, 13.199999809265, 0, 0, 0);
   	  CreateDynamicObject(970, 1118.5, -1411.0999755859, 13.199999809265, 0, 0, 0);
	  CreateDynamicObject(970, 1114.4000244141, -1411.0999755859, 13.199999809265, 0, 0, 0);
	  CreateDynamicObject(970, 1110.3000488281, -1411.0999755859, 13.199999809265, 0, 0, 0);
	  CreateDynamicObject(638, 1131.5, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1128.9000244141, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1126.3000488281, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1123.6999511719, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1121.0999755859, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1118.5, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1116, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1113.4000244141, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1110.8000488281, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1139, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1141.5999755859, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1144.1999511719, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(638, 1146.8000488281, -1411.5, 13.300000190735, 0, 0, 90);
	  CreateDynamicObject(646, 1108.5999755859, -1411.3000488281, 14, 0, 0, 0);
	  CreateDynamicObject(646, 1148.9000244141, -1411.4000244141, 14.10000038147, 0, 0, 0);
	  CreateDynamicObject(1215, 1108.0999755859, -1411.1999511719, 13.199999809265, 0, 0, 0);
	  CreateDynamicObject(1215, 1150.0999755859, -1411.0999755859, 13.199999809265, 0, 0, 0);
	  CreateDynamicObject(1226, 1132.8000488281, -1411.6999511719, 12.60000038147, 0, 0, 270);
	  CreateDynamicObject(1226, 1137.4000244141, -1411.6999511719, 12.60000038147, 0, 0, 270);
	  CreateDynamicObject(1231, 1119.8000488281, -1412.19921875, 15.300000190735, 0, 0, 0);
	  CreateDynamicObject(1231, 1112.099609375, -1412.19921875, 15.300000190735, 0, 0, 0);
	  CreateDynamicObject(1231, 1127.5999755859, -1412.19921875, 15.300000190735, 0, 0, 0);
	  CreateDynamicObject(1231, 1142.9000244141, -1412.19921875, 15.39999961853, 0, 0, 0);
	  CreateDynamicObject(792, 1150.0999755859, -1413.5999755859, 12.89999961853, 0, 0, 0);
	  CreateDynamicObject(792, 1107.9000244141, -1413.5999755859, 12.89999961853, 0, 0, 0);
	  CreateDynamicObject(1893, 1135.5999755859, -1411.5, 15.39999961853, 0, 0, 0);
	  CreateDynamicObject(2765, 1136.3000488281, -1411.9000244141, 15.10000038147, 0, 0, 180);
	  CreateDynamicObject(1893, 1133.9000244141, -1411.5, 15.39999961853, 0, 0, 0);
	  CreateDynamicObject(2733, 1135.3000488281, -1411.3000488281, 15.699999809265, 0, 0, 179.42895507813);



//ALCATRAZ// AUSSEN//
/*	CreateDynamicObject(16148, -352.281006, 4077.540039, 7.565597, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16147, -190.311996, 4065.300049, -2.239100, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16149, -175.983994, 3861.800049, -3.731212, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16264, -303.468994, 3781.340088, -7.051614, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16109, -344.062012, 3898.699951, 5.135883, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(9829, -359.740753, 3855.419434, -61.709656, 0.0000, 0.0000, 30.4671);
    CreateDynamicObject(4874, -283.278656, 3798.420166, 10.977269, 0.0000, 0.0000, 172.2650);
    CreateDynamicObject(4874, -283.278656, 3798.420166, 7.877283, 0.0000, 0.0000, 172.2650);
    CreateDynamicObject(4874, -283.278656, 3798.420166, 4.627272, 0.0000, 0.0000, 172.2650);
    CreateDynamicObject(16139, -270.011261, 3824.376221, -9.043680, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(16139, -244.810059, 3796.027832, -10.335654, 0.0000, 0.0000, 67.5000);
    CreateDynamicObject(16127, -283.377930, 3774.991455, -4.936389, 0.0000, 0.0000, 168.7500);
    CreateDynamicObject(16127, -318.159485, 3784.079834, -4.734166, 0.0000, 0.0000, 168.7500);
    CreateDynamicObject(16667, -354.940216, 3815.890869, 6.507803, 0.0000, 0.0000, 154.9217);
    CreateDynamicObject(16127, -361.073792, 3804.429199, -4.818086, 0.0000, 0.0000, 153.1256);
    CreateDynamicObject(16127, -375.693146, 3829.437500, -7.525631, 17.1887, 10.3132, 121.8764);
    CreateDynamicObject(16133, -255.821655, 3846.334229, -2.559015, 0.0000, 0.0000, 146.2501);
    CreateDynamicObject(16133, -276.163757, 3876.047119, 18.259314, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(16139, -259.332642, 3862.839844, 6.511215, 0.0000, 323.0442, 123.7500);
    CreateDynamicObject(987, -306.967834, 3878.095947, 25.870365, 0.0000, 0.0000, 11.2500);
    CreateDynamicObject(987, -315.526581, 3886.679932, 26.398115, 0.0000, 2.5783, 315.0000);
    CreateDynamicObject(987, -323.811096, 3895.046387, 26.430893, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(987, -330.925476, 3904.011475, 25.436203, 0.0000, 354.8434, 308.1245);
    CreateDynamicObject(987, -337.195923, 3914.179443, 24.394951, 0.0000, 354.8434, 301.2490);
    CreateDynamicObject(987, -343.181885, 3924.066406, 22.813700, 0.0000, 352.2651, 301.2490);
    CreateDynamicObject(987, -349.170532, 3933.873779, 20.705282, 0.0000, 349.6868, 301.2490);
    CreateDynamicObject(987, -355.261597, 3944.060547, 19.057299, 0.0000, 352.2651, 301.2490);
    CreateDynamicObject(987, -361.421417, 3954.202148, 17.445929, 0.0000, 352.2651, 301.2490);
    CreateDynamicObject(987, -309.122620, 4005.298096, 29.887472, 0.0000, 0.0000, 276.0161);
    CreateDynamicObject(987, -307.831299, 3993.434570, 29.899292, 0.0000, 0.0000, 275.1566);
    CreateDynamicObject(987, -306.781952, 3981.822021, 29.891367, 0.0000, 3.4377, 275.1566);
    CreateDynamicObject(987, -305.683319, 3969.883789, 29.178947, 0.0000, 3.4377, 275.1566);
    CreateDynamicObject(987, -304.631866, 3957.958252, 28.456438, 0.0000, 3.4377, 274.2972);
    CreateDynamicObject(987, -303.730927, 3946.047363, 27.723639, 0.0000, 3.4377, 275.1566);
    CreateDynamicObject(987, -302.623871, 3933.954834, 26.999311, 0.0000, 1.7189, 273.4378);
    CreateDynamicObject(987, -301.860016, 3922.026123, 26.678772, 0.0000, 1.7189, 271.7189);
    CreateDynamicObject(987, -301.588318, 3909.729248, 26.282619, 0.0000, 0.0000, 225.7823);
    CreateDynamicObject(3279, -363.527985, 3948.506348, 16.255291, 0.0000, 0.0000, 303.7500);
    CreateDynamicObject(3279, -308.231262, 3909.005615, 25.567221, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(1294, -307.513977, 3822.205322, 12.830591, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(10828, -328.854523, 4006.648438, 33.758839, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8656, -311.669434, 4006.655029, 21.008123, 89.3814, 0.0000, 180.0000);
    CreateDynamicObject(8656, -312.055481, 4006.761963, 35.888260, 0.0000, 269.7591, 90.0000);
    CreateDynamicObject(10828, -284.648010, 4018.398193, 33.763672, 0.0000, 0.0000, 42.4217);
    CreateDynamicObject(8656, -312.050598, 4006.539063, 35.888306, 0.0000, 269.7591, 270.0000);
    CreateDynamicObject(996, -313.744904, 4007.798096, 36.881157, 0.0000, 0.0000, 358.2811);
    CreateDynamicObject(996, -305.678711, 4007.567627, 36.880058, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(996, -304.369781, 4005.674805, 36.914696, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(996, -308.419403, 4005.717773, 36.904053, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8656, -297.345276, 4006.806152, 21.113382, 89.3814, 0.0000, 41.4849);
    CreateDynamicObject(8656, -309.028625, 4006.266113, 20.088387, 89.3814, 0.0000, 7.7348);
    CreateDynamicObject(8656, -309.062683, 4006.528076, 20.106682, 89.3814, 0.0000, 187.7352);
    CreateDynamicObject(1965, -311.188538, 4007.445313, 33.864170, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(12985, -313.703033, 4004.734131, 33.834465, 359.1406, 0.0000, 90.0000);
    CreateDynamicObject(1698, -311.034210, 4005.904541, 36.257309, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(987, -308.908203, 4002.378906, 29.819626, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(987, -320.913239, 4002.361816, 29.832462, 0.0000, 0.0000, 157.5000);
    CreateDynamicObject(11327, -303.541565, 4007.341064, 32.193382, 0.0000, 0.0000, 90.0001);
    CreateDynamicObject(10828, -363.418976, 4006.641846, 33.760498, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3279, -316.954956, 3852.203369, 9.011751, 0.0000, 0.0000, 33.7500);
    CreateDynamicObject(10828, -383.196533, 4006.639404, 33.763657, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(10828, -400.856445, 4027.096191, 33.763626, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(8656, -401.050781, 4009.910156, 21.116579, 89.3814, 0.0000, 270.8595);
    CreateDynamicObject(8656, -400.498657, 4006.888184, 21.095793, 89.3814, 0.0000, 185.1567);
    CreateDynamicObject(1965, -400.243622, 4009.426514, 33.854179, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(8656, -400.980469, 4020.517822, 35.914181, 0.0000, 269.7591, 180.0000);
    CreateDynamicObject(8656, -400.743927, 4020.511963, 35.910053, 0.0000, 269.7591, 360.0000);
    CreateDynamicObject(1497, -400.177917, 4007.935059, 29.850504, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1497, -311.182556, 4007.361328, 29.850504, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(5728, -269.790771, 3850.355713, 18.994282, 0.0000, 0.0000, 352.1878);
    CreateDynamicObject(9582, -311.957581, 4052.827637, 38.332306, 0.0000, 0.0000, 345.2349);
    CreateDynamicObject(8169, -279.235107, 4051.095947, 29.675871, 0.0000, 0.0000, 287.2660);
    CreateDynamicObject(10828, -269.432220, 4032.297852, 33.760468, 0.0000, 0.0000, 42.4217);
    CreateDynamicObject(10828, -268.756989, 4056.891113, 33.769737, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(1497, -273.279938, 4060.026367, 29.647379, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(8656, -256.126709, 4044.493896, 21.159750, 89.3814, 0.0000, 173.9065);
    CreateDynamicObject(1497, -314.155090, 4101.166016, 29.395079, 0.0000, 0.0000, 225.0001);
    CreateDynamicObject(12985, -285.003632, 4070.511230, 33.501373, 356.5623, 0.0000, 45.0000);
    CreateDynamicObject(10828, -318.290527, 4106.424805, 33.804352, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(10828, -293.785095, 4081.926514, 33.784191, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(8656, -336.300873, 4124.330566, 21.193327, 89.3814, 0.0000, 304.6096);
    CreateDynamicObject(1497, -338.518585, 4125.041992, 28.981155, 0.0000, 0.0000, 315.0007);
    CreateDynamicObject(8656, -323.766418, 4089.556641, 35.958931, 0.0000, 269.7591, 316.7189);
    CreateDynamicObject(8656, -328.329071, 4116.701660, 35.971836, 0.0000, 269.7591, 225.0000);
    CreateDynamicObject(1965, -314.144745, 4101.156738, 33.372780, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(1965, -337.481934, 4124.000488, 34.852242, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(1965, -337.489532, 4124.020508, 32.897091, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(10828, -324.126129, 4112.299805, 33.821239, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(10828, -351.345276, 4113.787109, 35.059612, 0.0000, 4.2972, 45.0000);
    CreateDynamicObject(10828, -376.209076, 4088.950684, 36.374985, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(10828, -394.575134, 4060.643311, 35.088722, 0.0000, 4.2972, 249.2189);
    CreateDynamicObject(987, -347.200134, 4034.441650, 29.656929, 0.0000, 0.0000, 67.5000);
    CreateDynamicObject(987, -347.302551, 4024.470703, 29.656929, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(987, -347.305878, 4018.486572, 29.656929, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1965, -274.259674, 4059.002930, 33.633209, 0.0000, 0.0000, 314.9999);
    CreateDynamicObject(5728, -283.406189, 3835.516602, 7.516424, 0.8594, 0.0000, 352.1878);
    CreateDynamicObject(5728, -285.537170, 3819.975342, -2.901389, 0.8594, 0.0000, 352.1878);
    CreateDynamicObject(5728, -286.301575, 3814.303711, -10.015227, 23.2048, 0.0000, 352.1878);
    CreateDynamicObject(18553, -288.837799, 3831.872070, 9.974839, 0.8594, 292.9640, 261.3283);
    CreateDynamicObject(994, -401.957245, 4005.349121, 36.181282, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(997, -257.547089, 4041.611572, 36.182404, 0.0000, 0.0000, 54.5311);
    CreateDynamicObject(997, -255.664764, 4044.153320, 36.191673, 0.0000, 0.0000, 118.5933);
    CreateDynamicObject(997, -335.986603, 4125.497559, 36.232418, 0.0000, 0.0000, 149.7650);
    CreateDynamicObject(997, -341.390686, 4125.394043, 36.231575, 0.0000, 0.0000, 32.0311);
    CreateDynamicObject(16337, -397.807922, 4009.707520, 37.197132, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(5302, -396.688873, 4007.711182, 36.286217, 0.0000, 89.3814, 135.0000);
    CreateDynamicObject(5302, -399.866302, 4010.942139, 36.311172, 0.0000, 89.3814, 134.1406);
    CreateDynamicObject(18367, -397.588959, 4009.886963, 36.319416, 95.6049, 0.0000, 315.0000);
    CreateDynamicObject(16337, -338.474701, 4122.377930, 37.246193, 0.0000, 0.0000, 90.0001);
    CreateDynamicObject(16337, -386.273224, 4075.628906, 39.681324, 0.0000, 0.0000, 146.2501);
    CreateDynamicObject(3864, -396.926666, 4010.626221, 32.059338, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(3872, -392.184143, 4015.383057, 32.877377, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(1215, -397.388519, 4011.081787, 37.639900, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -396.469818, 4010.113281, 37.673012, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -397.381653, 4011.074951, 37.060268, 0.0000, 0.0000, 348.7500);
    CreateDynamicObject(1215, -396.487518, 4010.105713, 37.100708, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -397.531982, 4010.868652, 36.589405, 0.0000, 0.0000, 348.7500);
    CreateDynamicObject(1215, -396.598694, 4010.016357, 36.580635, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(5302, -386.775085, 4075.983398, 38.846313, 0.0000, 89.3814, 55.3907);
    CreateDynamicObject(18367, -386.051147, 4075.548828, 38.866966, 95.6049, 0.0000, 236.2501);
    CreateDynamicObject(5302, -340.398499, 4123.002441, 36.408714, 0.0000, 89.3814, 359.1406);
    CreateDynamicObject(5302, -337.006195, 4122.967773, 36.418850, 0.0000, 89.3814, 359.1406);
    CreateDynamicObject(18367, -338.342072, 4122.007324, 36.434593, 95.6049, 0.0000, 168.7500);
    CreateDynamicObject(3864, -385.182404, 4074.956787, 34.439224, 0.0000, 0.0000, 146.2500);
    CreateDynamicObject(3872, -379.560669, 4071.220215, 35.228336, 0.0000, 0.0000, 146.2500);
    CreateDynamicObject(3864, -338.501373, 4121.197266, 31.964725, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(3872, -338.502380, 4114.357422, 32.821896, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1215, -339.215942, 4121.083008, 37.571693, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -337.826355, 4121.073242, 37.574867, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -339.208069, 4121.107910, 37.084770, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -337.833191, 4121.084961, 37.080528, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -339.194641, 4121.158691, 36.551277, 0.0000, 0.0000, 236.2501);
    CreateDynamicObject(1215, -337.839661, 4121.085938, 36.537437, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -385.565643, 4074.431152, 40.116463, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -384.821259, 4075.526367, 40.095352, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -385.574219, 4074.383545, 39.549923, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -384.797302, 4075.531982, 39.549225, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -385.590759, 4074.400635, 38.933826, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1215, -384.802704, 4075.536133, 38.941471, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3460, -341.551697, 4054.269287, 33.208031, 0.0000, 0.0000, 67.5000);
    CreateDynamicObject(3460, -338.178467, 4080.331055, 34.749626, 0.0000, 0.0000, 22.5000);
    CreateDynamicObject(2886, -311.456757, 4007.628662, 31.033083, 0.0000, 0.0000, 177.4217);
    CreateDynamicObject(1501, -280.543091, 4047.717041, 29.553473, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(987, -371.358826, 3949.214111, 15.737392, 0.0000, 351.4056, 31.2490);
    CreateDynamicObject(11327, -319.813873, 3830.636230, 10.773924, 0.0000, 0.0000, 101.2501);
    CreateDynamicObject(11327, -303.540100, 4007.352295, 33.782742, 0.0000, 0.0000, 90.0001);
    CreateDynamicObject(11327, -347.364624, 4029.474609, 32.193382, 0.0000, 0.0000, 0.0001);
    CreateDynamicObject(11327, -347.358856, 4029.460449, 34.170681, 0.0000, 0.0000, 0.0001);
    CreateDynamicObject(11327, -319.802460, 3830.653076, 12.825305, 0.0000, 0.0000, 101.2501);
    CreateDynamicObject(987, -336.033356, 3832.027588, 7.400957, 0.0000, 355.7028, 349.5321);
    CreateDynamicObject(987, -340.811218, 3842.819580, 6.615160, 0.0000, 356.5623, 293.2822);
    CreateDynamicObject(987, -343.222382, 3854.520020, 6.884872, 0.0000, 0.8594, 282.0322);
    CreateDynamicObject(987, -349.403595, 3864.978516, 7.865357, 0.0000, 4.2972, 301.0944);
    CreateDynamicObject(987, -356.964264, 3874.308350, 9.950745, 0.0000, 9.4538, 308.9067);
    CreateDynamicObject(987, -362.959259, 3884.577148, 11.466610, 0.0000, 6.8755, 300.2350);
    CreateDynamicObject(987, -367.166809, 3895.571777, 12.573673, 0.0000, 5.1566, 290.7038);
    CreateDynamicObject(987, -371.926788, 3906.438477, 13.475338, 0.0000, 4.2972, 293.2822);
    CreateDynamicObject(987, -377.261719, 3917.086670, 14.288242, 0.0000, 3.4377, 297.5793);
    CreateDynamicObject(987, -382.689240, 3927.659668, 14.871820, 0.0000, 2.5783, 297.5793);
    CreateDynamicObject(987, -388.001953, 3938.287109, 15.407955, 0.0000, 2.5783, 296.7199);
    CreateDynamicObject(987, -387.648987, 3949.955566, 15.757544, 0.0000, 1.7189, 268.1266);
    CreateDynamicObject(947, -361.771637, 4098.194336, 33.302917, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(947, -343.175903, 4079.835938, 32.760681, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(947, -350.971252, 4109.442383, 32.402206, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(947, -331.959686, 4091.781982, 32.690872, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(1412, -356.340454, 4103.866699, 31.903219, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(1412, -352.658051, 4100.196777, 31.888224, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(1412, -348.903168, 4096.514160, 31.878225, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(1412, -345.165283, 4092.815430, 31.858295, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(1412, -341.419159, 4089.100342, 31.829649, 0.0000, 0.0000, 315.0001);
    CreateDynamicObject(1412, -337.616364, 4085.410400, 31.801010, 0.0000, 0.0000, 315.0000);
    CreateDynamicObject(3865, -217.540588, 3861.715332, 1.647892, 7.7349, 336.6920, 31.9538);
    CreateDynamicObject(1414, -216.322220, 3858.704102, 0.718898, 0.0000, 67.8954, 33.7500);
    CreateDynamicObject(1414, -215.500565, 3859.244873, 1.106063, 0.0000, 223.4538, 33.7500);
    CreateDynamicObject(16123, -253.635910, 3991.806641, 16.842131, 0.0000, 311.0122, 348.7500);
    CreateDynamicObject(987, -385.995575, 3961.811768, 16.099691, 0.0000, 1.7189, 262.0332);
    CreateDynamicObject(3865, -219.496048, 3865.489014, 3.119103, 249.9922, 305.7525, 20.7038);
    CreateDynamicObject(17546, -393.756104, 3986.371338, 21.976376, 0.0000, 0.0000, 88.2037);
    CreateDynamicObject(10763, -387.751801, 3990.945068, 31.283932, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(996, -385.038086, 3970.487793, 34.127350, 0.0000, 90.2409, 0.0000);
    CreateDynamicObject(996, -384.519623, 3970.491943, 26.045677, 0.0000, 90.2409, 0.0000);
    CreateDynamicObject(996, -384.511780, 3970.486084, 34.126850, 0.0000, 90.2409, 0.0000);
    CreateDynamicObject(3257, -277.625305, 3841.864746, 19.344498, 0.0000, 0.0000, 171.3284);
    CreateDynamicObject(3475, -276.162415, 3849.908936, 21.772385, 0.0000, 0.0000, 168.7500);
    CreateDynamicObject(3475, -284.030182, 3821.947021, 21.278952, 0.0000, 0.0000, 171.3283);
    CreateDynamicObject(3475, -283.211121, 3827.886719, 21.329554, 359.1406, 0.0000, 172.1877);
    CreateDynamicObject(3475, -282.346497, 3833.749512, 21.432522, 359.1406, 0.0000, 171.3283);
    CreateDynamicObject(3475, -279.879333, 3838.875977, 21.522306, 0.0000, 0.0000, 137.5783);
    CreateDynamicObject(987, -314.819000, 3831.679443, 8.440645, 0.0000, 359.1406, 315.0000);
    CreateDynamicObject(987, -306.405609, 3823.280762, 8.611793, 0.0000, 0.0000, 346.9538);
    CreateDynamicObject(987, -294.712524, 3820.581299, 8.617189, 0.0000, 359.1406, 351.2510);
    CreateDynamicObject(3475, -384.831177, 4003.252197, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(3475, -385.025238, 3997.328613, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(3475, -385.212189, 3991.362061, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(3475, -385.382324, 3985.421387, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(3475, -385.599213, 3979.468018, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(3475, -385.757080, 3973.488525, 32.224487, 0.0000, 0.0000, 178.2813);
    CreateDynamicObject(17546, -405.043030, 4003.430908, 21.974125, 0.0000, 0.0000, 121.9539);
    CreateDynamicObject(1498, -393.501617, 3974.911133, 29.842155, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(3475, -388.480927, 3970.815918, 32.224487, 0.0000, 0.0000, 88.2812);
    CreateDynamicObject(3475, -402.598297, 3980.162598, 32.224487, 0.0000, 0.0000, 358.2812);
    CreateDynamicObject(3475, -402.798065, 3974.187012, 32.224487, 0.0000, 0.0000, 358.2812);
    CreateDynamicObject(3475, -400.086334, 3971.276123, 32.224487, 0.0000, 0.0000, 88.2812);
    CreateDynamicObject(3475, -404.150574, 3985.740479, 32.222237, 0.0000, 0.0000, 33.7501);
    CreateDynamicObject(3475, -407.377747, 3990.719482, 32.222237, 0.0000, 0.0000, 33.7501);
    CreateDynamicObject(3475, -410.481445, 3995.706299, 32.222237, 0.0000, 0.0000, 32.0312);
    CreateDynamicObject(3475, -413.600861, 4000.698975, 32.222237, 0.0000, 0.0000, 32.0312);
    CreateDynamicObject(3475, -416.782043, 4005.798828, 32.222237, 0.0000, 0.0000, 32.0312);
    CreateDynamicObject(3475, -419.924957, 4010.810303, 32.222237, 0.0000, 0.0000, 32.0312);
    CreateDynamicObject(3475, -422.822388, 4015.449219, 32.222237, 0.0000, 0.0000, 32.0312);
    CreateDynamicObject(3475, -422.052856, 4019.242676, 32.222237, 0.0000, 0.0000, 302.0312);
    CreateDynamicObject(8165, -411.928406, 4053.329346, 27.628073, 0.0000, 0.0000, 326.2500);
    CreateDynamicObject(8165, -412.239197, 4053.444336, 32.927246, 0.0000, 0.0000, 326.2500);
    CreateDynamicObject(8154, -360.672394, 4108.085938, 23.596632, 0.0000, 0.0000, 149.6105);
    CreateDynamicObject(8154, -360.678009, 4108.115723, 28.265793, 0.0000, 0.0000, 149.6105);
    CreateDynamicObject(8154, -360.704102, 4108.161133, 33.721962, 0.0000, 0.0000, 149.6105);
    CreateDynamicObject(8149, -264.377808, 4080.845703, 23.820486, 0.0000, 0.0000, 225.8595);
    CreateDynamicObject(8149, -264.531158, 4080.703613, 28.136635, 0.0000, 0.0000, 225.8595);
    CreateDynamicObject(8149, -264.582428, 4080.671875, 33.642998, 0.0000, 0.0000, 225.8595);
    CreateDynamicObject(8149, -228.099426, 3949.687012, 23.821583, 0.0000, 0.0000, 345.3122);
    CreateDynamicObject(8149, -228.136139, 3949.681885, 28.138916, 0.0000, 0.0000, 345.3122);
    CreateDynamicObject(8149, -228.163605, 3949.709473, 33.646675, 0.0000, 0.0000, 345.3122);
    CreateDynamicObject(8165, -245.126404, 4015.772949, 27.571745, 0.0000, 0.0000, 236.2501);
    CreateDynamicObject(8165, -245.134506, 4015.776367, 33.121712, 0.0000, 0.0000, 236.2501);
    CreateDynamicObject(3279, -257.066040, 3977.395508, 41.474121, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(5822, -257.965240, 3971.657227, 36.186954, 0.0000, 0.0000, 94.2972);
    CreateDynamicObject(987, -295.195770, 3880.393799, 25.835501, 0.0000, 358.2811, 33.7500);
    CreateDynamicObject(16116, -263.185852, 3886.978760, 13.288935, 0.0000, 0.0000, 48.5151);
    CreateDynamicObject(987, -285.485901, 3886.867920, 26.178713, 0.0000, 1.7189, 33.7500);
    CreateDynamicObject(987, -275.537628, 3893.565918, 25.827162, 0.0000, 0.0000, 22.5000);
    CreateDynamicObject(987, -264.420868, 3898.164063, 25.817183, 0.0000, 2.5783, 22.5000);
    CreateDynamicObject(987, -253.493164, 3902.693115, 25.270817, 0.0000, 4.2972, 348.7500);
    CreateDynamicObject(10828, -326.618073, 4086.545410, 33.813629, 0.0000, 0.0000, 46.7189);
    CreateDynamicObject(8656, -314.914734, 4099.108398, 21.204161, 89.3814, 0.0000, 224.0637);
    CreateDynamicObject(8656, -339.469147, 4125.640625, 21.144173, 89.3814, 0.0000, 224.1408);
    CreateDynamicObject(1280, -395.480499, 4045.317139, 30.263828, 0.0000, 0.0000, 191.2500);
    CreateDynamicObject(1280, -381.190735, 4019.731689, 30.261459, 0.0000, 0.0000, 258.7500);
    CreateDynamicObject(1280, -355.859802, 4073.839111, 30.717306, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(1508, -340.253601, 4053.725586, 31.520782, 0.0000, 0.0000, 154.9217);
    CreateDynamicObject(8656, -323.270508, 4090.098633, 35.954571, 0.0000, 269.7591, 136.7189);
    CreateDynamicObject(16766, -267.115204, 3951.647949, 43.808121, 0.0000, 0.8594, 284.6877);
    CreateDynamicObject(11461, -265.131165, 3853.659424, 30.321405, 0.0000, 0.0000, 236.2500);
    CreateDynamicObject(3530, -265.072113, 3943.650635, 34.982635, 0.0000, 0.0000, 13.0462);
    CreateDynamicObject(3530, -272.436737, 3972.284912, 35.041359, 0.0000, 0.0000, 13.0462);
    CreateDynamicObject(3530, -257.620941, 3915.692627, 36.770454, 0.0000, 0.0000, 13.0462);
    CreateDynamicObject(3530, -257.594482, 3915.704834, 32.689754, 0.0000, 0.0000, 13.0462);
    CreateDynamicObject(16116, -219.192673, 3883.099609, 3.064840, 328.2008, 70.4738, 259.5321);
    CreateDynamicObject(10402, -292.846313, 3973.801758, 29.561670, 0.0000, 1.7189, 275.1566);
    CreateDynamicObject(17049, -249.512695, 3890.276123, 28.903534, 0.0000, 0.0000, 348.7500);
    CreateDynamicObject(16766, -293.998260, 3826.706055, 1.888986, 8.5944, 30.9397, 228.3605);*/

//ALCATRAZ//INNEN//

    CreateDynamicObject(3865, 1195.845703, -72.528946, 1.383192, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(3865, 1201.585571, -72.853889, 1.871448, 314.4499, 90.1369, 78.7500);
    CreateDynamicObject(3865, 1187.530396, -72.800400, 1.211240, 357.4217, 1.7189, 95.1566);
    CreateDynamicObject(3865, 1179.112793, -73.861816, 0.500791, 353.1245, 1.7189, 101.1727);
    CreateDynamicObject(3865, 1170.514771, -75.475151, -0.516947, 353.1245, 1.7189, 101.1727);
    CreateDynamicObject(3865, 1161.720703, -76.185219, -1.325558, 355.7028, 1.7189, 89.9226);
    CreateDynamicObject(3865, 1153.098511, -75.139961, -1.580533, 0.0000, 0.0000, 78.6727);
    CreateDynamicObject(3865, 1144.747314, -72.408798, -1.191780, 4.2972, 0.0000, 67.4226);
    CreateDynamicObject(3865, 1136.508301, -69.858398, -0.497578, 4.2972, 0.0000, 78.6727);
    CreateDynamicObject(3865, 1127.836792, -68.941345, 0.476992, 7.7349, 359.1406, 89.9226);
    CreateDynamicObject(16658, 1076.411987, -64.824371, 5.850303, 0.0000, 0.0000, 360.0000);
    CreateDynamicObject(3865, 1119.165649, -68.839279, 1.330420, 3.4377, 359.1406, 89.9226);
    CreateDynamicObject(3865, 1110.510742, -67.826363, 1.598876, 0.0000, 359.1406, 78.6727);
    CreateDynamicObject(3865, 1056.667114, -59.341469, 2.554096, 0.0000, 358.1777, 180.7821);
    CreateDynamicObject(16645, 1075.724243, -66.511703, 3.514202, 0.0000, 0.0000, 360.0000);
    CreateDynamicObject(3865, 1102.463135, -65.161690, 1.642508, 0.0000, 359.1406, 67.4226);
    CreateDynamicObject(3865, 1056.856079, -47.208904, 2.544224, 0.0000, 1.7189, 0.7820);
    CreateDynamicObject(3865, 1062.835327, -53.368534, 2.531879, 0.0000, 1.7189, 270.7820);
    CreateDynamicObject(3865, 1050.677612, -53.235111, 2.510675, 0.0000, 333.2542, 90.7823);
    CreateDynamicObject(3865, 1056.910889, -53.270653, 5.355008, 0.0000, 300.6989, 315.7820);
    CreateDynamicObject(3865, 1056.895752, -53.266644, 5.336772, 0.0000, 300.6989, 237.0320);
    CreateDynamicObject(3865, 1056.940674, -53.245144, -0.249691, 0.0000, 154.6987, 315.7820);
    CreateDynamicObject(3865, 1056.959839, -53.247761, -0.287717, 0.0000, 154.6987, 225.7820);
    CreateDynamicObject(3865, 1071.374146, -53.971642, 2.315304, 3.4377, 1.7189, 79.5322);
    CreateDynamicObject(3865, 1079.262451, -56.249889, 1.842074, 3.4377, 1.7189, 68.2823);
    CreateDynamicObject(3865, 1087.301025, -59.544159, 1.423019, 1.7189, 1.7189, 68.2823);
    CreateDynamicObject(3865, 1094.495728, -62.258739, 1.438569, 357.4217, 359.1406, 73.4390);
    CreateDynamicObject(1358, 1094.503174, -63.408443, 0.836421, 302.4177, 357.4217, 337.5000);
    CreateDynamicObject(3865, 1056.686768, -42.259441, 1.970739, 314.4499, 126.2329, 180.0000);
    CreateDynamicObject(3865, 1046.375244, -53.555538, 1.904888, 314.4499, 116.7792, 270.0001);
    CreateDynamicObject(1369, 1056.164429, -45.842934, 1.743976, 315.3093, 35.2369, 318.4378);
    CreateDynamicObject(1462, 1049.807861, -52.847317, 1.182698, 67.0360, 40.3935, 258.7500);
    CreateDynamicObject(8948, 1049.067261, -67.178482, 5.140333, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(8948, 1049.139160, -66.998375, 6.546829, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(8948, 1051.331787, -63.776817, 5.147590, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8948, 1058.579712, -63.669071, 5.147590, 0.0000, 0.0000, 91.7188);
    CreateDynamicObject(8948, 1051.350708, -63.823784, 6.555346, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8948, 1058.575562, -63.707260, 6.542184, 0.0000, 0.0000, 91.7188);
    CreateDynamicObject(8948, 1061.188477, -63.681740, 2.065930, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8948, 1052.247314, -63.734505, 2.028061, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8948, 1090.573975, -61.747383, 8.449911, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(14576, 1070.728394, -34.742817, 3.078434, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1437, 1072.527832, -65.514343, 6.973473, 295.5423, 0.0000, 180.0000);
    CreateDynamicObject(1555, 1071.632813, -70.124176, 8.349556, 3.4377, 0.0000, 0.0001);
    CreateDynamicObject(914, 1071.796997, -70.074265, 7.482104, 0.0000, 214.8598, 0.0000);
    CreateDynamicObject(8948, 1070.467896, -61.772869, 8.432522, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1437, 1076.544922, -62.762611, 3.305780, 322.1848, 0.0000, 90.0000);
    CreateDynamicObject(1412, 1056.745728, -63.894424, 2.300166, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1239, 1072.560059, -69.798111, 8.387575, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1239, 1195.837524, -72.668808, 0.230100, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1220, 1094.551514, -61.749298, 0.465565, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1221, 1094.725464, -61.949715, 1.266535, 29.2208, 20.6265, 0.0000);
    CreateDynamicObject(1239, 1071.889160, -35.168743, 2.483840, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1492, 1069.960815, -42.112419, -5.124367, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(18553, 1070.755859, -42.175247, -3.649266, 90.2408, 0.0000, 270.0000);
    CreateDynamicObject(14408, 1042.735107, -6.151438, 6.278552, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1967, 1065.044678, -18.986315, 4.786386, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1967, 1065.052979, -17.415012, 4.786386, 0.0000, 0.0000, 181.7189);
    CreateDynamicObject(1967, 1065.006348, -18.138250, 3.261381, 90.2408, 0.0000, 0.0000);
    CreateDynamicObject(1967, 1065.042114, -18.401146, 7.262824, 90.2408, 0.0000, 0.0000);
    CreateDynamicObject(1534, 1048.771606, 7.831377, -1.357124, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(14409, 1062.470581, -9.422371, 0.120997, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(986, 1052.521118, -8.417847, 3.220139, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(986, 1052.521118, -0.389186, 3.251442, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(986, 1052.565063, 2.176354, -2.579532, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(986, 1052.686157, -5.873131, -2.554532, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(971, 1052.551636, -16.951757, -3.314750, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(8948, 1035.202759, -17.403259, 89.768433, 358.2811, 0.0000, 180.0000);
    CreateDynamicObject(8185, 1020.308411, 7.330478, 91.676331, 0.0000, 90.2409, 269.9999);
    CreateDynamicObject(1508, 1009.980652, -8.455176, -1.406888, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8185, 926.466919, -28.623928, -0.965509, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(971, 1060.209351, -15.520641, 6.831278, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1499, 1015.946960, -16.932980, -3.071074, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1499, 1012.944763, -16.952868, -3.071074, 0.0000, 0.0000, 360.0000);
    CreateDynamicObject(8185, 922.699158, -16.911819, -0.965509, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8185, 926.446289, -16.885944, 1.536062, 0.0000, 179.6227, 270.0000);
    CreateDynamicObject(8185, 1047.733154, 8.306663, -0.890512, 180.4818, 0.0000, 269.9999);
    CreateDynamicObject(2255, 1048.482178, 7.603449, -1.405088, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8185, 1048.364746, 9.204869, -3.245484, 0.0000, 269.7592, 90.0003);
    CreateDynamicObject(9339, 1031.388916, -17.518623, 3.132543, 0.0000, 269.7592, 269.9999);
    CreateDynamicObject(9339, 1031.388916, 4.856366, 3.132543, 0.0000, 269.7592, 90.0000);
    CreateDynamicObject(9339, 1031.388916, 4.031367, 3.132543, 0.0000, 269.7592, 90.0000);
    CreateDynamicObject(9339, 1019.913208, -8.743644, 3.132543, 0.0000, 269.7592, 180.0000);
    CreateDynamicObject(9339, 1019.110229, -5.468654, 3.132543, 0.0000, 269.7592, 180.0000);
    CreateDynamicObject(9339, 1031.388916, -16.418652, 3.132543, 0.0000, 269.7592, 270.0000);
    CreateDynamicObject(1499, 1012.153870, -24.528854, -3.071074, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1499, 1014.178711, -24.532009, -3.071074, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16501, 1015.832092, -28.025930, -0.864719, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16501, 1012.066101, -28.039104, -0.864719, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16501, 1014.003174, -28.033226, -0.864719, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16501, 1013.813171, -28.030962, -0.864719, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(16501, 1013.999084, -24.552582, 1.710276, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(2602, 1014.770325, -28.416763, -2.541760, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(2602, 1012.821777, -28.455187, -2.541760, 0.0000, 0.0000, 225.0000);
    CreateDynamicObject(3294, 1009.026367, -22.305328, -3.085595, 0.0000, 269.8632, 180.0000);
    CreateDynamicObject(3294, 1009.937317, -22.020958, -3.502339, 0.0000, 0.0000, 180.0001);
    CreateDynamicObject(3294, 1008.321594, -24.448997, -3.500935, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(3294, 1008.310120, -20.403454, -3.500674, 0.0000, 0.0000, 90.0004);
    CreateDynamicObject(3294, 1011.866333, -21.610859, -5.623923, 0.0000, 0.0000, 0.0003);
    CreateDynamicObject(2150, 1009.795898, -23.832346, -0.269890, 91.9597, 0.0000, 90.0000);
    CreateDynamicObject(2150, 1009.795898, -21.180475, -0.243319, 91.9597, 0.0000, 90.0000);
    CreateDynamicObject(2150, 1009.795898, -22.520035, -0.261603, 91.9597, 0.0000, 90.0000);
    CreateDynamicObject(2332, 1010.479858, -22.351957, -3.443364, 270.6186, 1.7189, 0.0000);
    CreateDynamicObject(2518, 1015.420532, -21.612900, -2.682857, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(2518, 1015.395508, -22.823864, -2.670018, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(2518, 1015.420532, -20.227869, -2.677568, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(18001, 1015.921021, -23.070486, -0.931512, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(16649, 1066.695190, -27.051601, 9.560216, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(8948, 1062.675415, -20.090805, 8.392888, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(979, 1069.381714, -19.954073, 7.603541, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1651, 1066.674683, -32.162807, 11.416418, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(8229, 1068.408081, -3.637179, 7.989528, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(2173, 1069.329712, -28.883501, -4.991213, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(2173, 1073.230347, -28.902000, -4.991213, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(2205, 1071.450073, -28.903570, -4.998936, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(2356, 1070.659302, -27.823597, -4.996560, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1498, 1012.155884, -4.217271, -3.071355, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(971, 1011.507019, -4.150609, 1.829719, 0.0000, 179.6227, 0.0000);
    CreateDynamicObject(1498, 1012.398560, -0.471042, -3.071355, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2190, 1070.927856, -29.223568, -4.066915, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1239, 1070.722412, -41.198956, -4.796744, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1239, 1010.593689, -10.030163, -2.870729, 0.0000, 0.0000, 292.5000);
    CreateDynamicObject(1239, 1066.599121, -31.346786, 10.520496, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(14464, 1044.397339, -29.878742, -0.148927, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(14464, 1020.573242, 17.469059, -0.173927, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(14464, 1020.573853, 17.442976, 6.201082, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(14464, 1006.495178, -18.829163, 6.201746, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(14464, 1044.411011, -29.861933, 6.176073, 0.0000, 0.0000, 270.0001);
    CreateDynamicObject(9339, 1044.329834, -16.453966, -3.341112, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1044.321167, -17.850521, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1044.314453, -19.252169, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1040.387573, -16.455074, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1040.380493, -17.851051, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1040.379272, -19.241039, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1036.347900, -16.473494, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1036.351563, -17.846746, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1036.347778, -19.235455, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1032.365234, -16.470215, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1032.365967, -17.862738, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1032.365112, -19.263700, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1028.383301, -16.459139, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1028.376953, -17.860653, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1028.370605, -19.259670, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1024.406616, -16.456877, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1024.404297, -17.840588, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1024.409424, -19.226349, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1020.662720, -16.464172, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1020.668152, -17.847347, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1020.674988, -19.236830, -2.366121, 269.7592, 0.0000, 0.0000);
    CreateDynamicObject(9339, 1017.133179, -15.857641, 9.732288, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.509155, -15.864792, 16.109900, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.863159, -15.849192, 16.085543, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1044.309204, 6.852743, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1044.309082, 5.459843, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1044.311523, 4.056484, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1040.381714, 4.062516, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1040.391235, 5.467145, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1040.393188, 6.843500, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1036.369873, 4.049647, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1036.376587, 5.444561, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1036.380981, 6.852037, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1032.349976, 4.053426, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1032.352417, 6.838749, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1032.344482, 5.446962, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1028.397827, 4.051565, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1028.399292, 5.458675, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1028.400146, 6.854933, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1024.370850, 4.053601, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1024.367432, 5.453306, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1024.358643, 6.859984, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1020.667175, 4.045816, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1020.674622, 5.433133, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1020.671631, 6.827520, -2.366121, 269.7592, 0.0000, 180.0000);
    CreateDynamicObject(9339, 1017.143860, 3.447040, 9.859531, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.562866, 3.418604, 16.110331, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.959290, 3.423086, 16.110001, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.968445, -0.158381, 16.233862, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1017.189270, -0.130899, 16.260441, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.595215, -0.166673, 16.110424, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.957703, -4.161370, 16.108881, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.544495, -4.163829, 16.235424, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1017.164856, -4.168707, 16.260450, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.965576, -8.163240, 16.208891, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.578308, -8.158398, 16.111412, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1017.186584, -8.155918, 16.235462, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1019.949158, -12.198248, 16.108904, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1018.557678, -12.202415, 16.185455, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(9339, 1017.165039, -12.199060, 16.260450, 269.7592, 0.0000, 270.0000);
    CreateDynamicObject(996, 1043.762573, -13.917768, 3.986075, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(996, 1037.829834, -13.919753, 3.986609, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(997, 1044.360840, -13.867668, 3.342156, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(996, 1022.605774, -10.862389, 3.935771, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(996, 1022.618774, -8.122116, 3.938451, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(996, 1043.766357, 1.481337, 3.961933, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(996, 1038.595093, 1.471625, 3.962842, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(997, 1044.360352, 1.421283, 3.316501, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(980, 1038.609131, -16.660349, 3.208193, 90.2409, 0.0000, 0.0000);
    CreateDynamicObject(980, 1027.100830, -16.664425, 3.208195, 90.2409, 0.0000, 0.0000);
    CreateDynamicObject(980, 1019.867188, -10.555090, 3.208193, 90.2409, 0.0000, 270.0000);
    CreateDynamicObject(980, 1019.835571, 0.948011, 3.183193, 90.2409, 0.0000, 270.0000);
    CreateDynamicObject(980, 1038.649658, 4.199170, 3.183190, 90.2409, 0.0000, 180.0000);
    CreateDynamicObject(980, 1027.123535, 4.178074, 3.208197, 90.2409, 0.0000, 180.0000);
    CreateDynamicObject(14413, 1041.496338, 0.597903, 2.976794, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(12987, 1026.994873, -0.610827, 0.673499, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(12985, 1027.026733, -11.693703, 0.698213, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(980, 1022.009521, -17.925631, 3.208193, 90.2409, 0.0000, 270.0000);
    CreateDynamicObject(980, 1021.986694, 5.672253, 3.183197, 90.2409, 0.0000, 90.0000);
    CreateDynamicObject(996, 1032.236816, -13.931599, 3.985208, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(996, 1025.361206, 1.445599, 3.968153, 0.0000, 0.0000, 359.9999);
    CreateDynamicObject(8131, 1018.465454, 7.686447, -10.746788, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1368, 1017.958252, 3.940457, -2.375461, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1368, 1017.019348, 4.844296, -2.375461, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1368, 1017.738159, -16.367407, -2.375461, 0.0000, 0.0000, 360.0000);
    CreateDynamicObject(1368, 1016.817383, -17.272032, -2.375461, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(16377, 1019.920593, -19.333858, -2.134865, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(1553, 1019.701233, -19.419594, -3.271343, 0.0000, 0.0000, 45.0000);
    CreateDynamicObject(1432, 1025.492798, -11.385380, -2.933396, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1432, 1025.588501, -0.911067, -2.933396, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1216, 1059.654419, -14.411251, -2.373195, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(956, 1046.044189, -19.481501, -2.661185, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1209, 1073.297729, -22.484615, -5.116213, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1811, 1053.733154, -12.515923, -2.438893, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1811, 1053.772583, -9.593957, -2.438893, 0.0000, 0.0000, 90.0001);
    CreateDynamicObject(2637, 1053.798828, -11.113306, -2.660457, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(976, 1055.960327, -11.123051, -8.253289, 0.0000, 270.6186, 0.0000);
    CreateDynamicObject(16501, 1056.449951, -11.077324, 1.060280, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(16501, 1056.741577, -11.079287, -3.414718, 90.2408, 0.0000, 270.0000);
    CreateDynamicObject(1495, 1058.481812, -11.107529, -3.071358, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2596, 1053.160400, 4.437511, 4.619444, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(2596, 1053.160400, 5.234198, 4.623643, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(2596, 1053.160645, 6.030101, 4.619221, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1998, 1054.443115, 2.799801, 3.286365, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(2356, 1054.582886, 3.891757, 3.281017, 0.0000, 0.0000, 123.7499);
    CreateDynamicObject(1726, 1063.516602, 6.829164, 3.278780, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1726, 1063.516968, 2.748415, 3.278780, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1459, 1066.610352, -19.934456, 3.550243, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(979, 1066.665527, -20.138449, 5.756526, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(934, 1068.131348, -35.772526, 3.617651, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(958, 1064.478027, -35.582848, 3.166209, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3384, 1066.185669, -35.106964, 3.431977, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(939, 1071.612793, -22.564171, 4.735274, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(910, 1073.391968, -31.710217, 3.558527, 0.0000, 0.0000, 180.0000);
    CreateDynamicObject(1227, 1071.295654, -31.924141, 2.591092, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1299, 1068.891479, -30.850557, 2.745232, 0.0000, 0.0000, 326.2500);
    CreateDynamicObject(979, 1066.346069, -20.166031, 3.536234, 0.0000, 0.0000, 0.0000);


    //BSN
	CreateDynamicObject(3512, 1166, -890, 42.900001525879, 0, 0, 327.99865722656);
	CreateDynamicObject(3512, 1165.5, -884, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1165, -878.29998779297, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1166.5, -896.59997558594, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1167.0999755859, -903.40002441406, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1167.8000488281, -910.5, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1168.4000244141, -917.20001220703, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1169, -924.09997558594, 42.900001525879, 0, 0, 269.99682617188);
	CreateDynamicObject(3512, 1169.9000244141, -931.59997558594, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1175.6999511719, -930.70001220703, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1181.8000488281, -929.70001220703, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1188.3000488281, -928.59997558594, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1195.5, -927.40002441406, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1202.1999511719, -926.29998779297, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3512, 1210.1999511719, -925, 42.900001525879, 0, 0, 327.99682617188);
	CreateDynamicObject(3660, 1201.3000488281, -926.29998779297, 44.400001525879, 0, 0, 9.25);
	CreateDynamicObject(3660, 1183.5, -929.20001220703, 44.400001525879, 0, 0, 9.2449951171875);
	CreateDynamicObject(3660, 1178.5999755859, -930, 44.400001525879, 0, 0, 9.2449951171875);
	CreateDynamicObject(3660, 1168.5999755859, -921.09997558594, 44.400001525879, 0, 0, 95.494995117188);
	CreateDynamicObject(3660, 1166.8000488281, -901.59997558594, 44.400001525879, 0, 0, 94.9931640625);
	CreateDynamicObject(3660, 1165.5, -886.70001220703, 44.400001525879, 0, 0, 94.98779296875);
	CreateDynamicObject(7033, 1178.1999511719, -945.70001220703, 46, 0, 0, 278);
	CreateDynamicObject(7033, 1238.3000488281, -935.09997558594, 46, 0, 0, 280.748046875);
	CreateDynamicObject(9527, 1242.6999511719, -934.29998779297, 49.5, 0, 0, 101.25);
	CreateDynamicObject(9527, 1173.6999511719, -946.5, 49.5, 0, 0, 277.74450683594);
	CreateDynamicObject(1597, 1189.9000244141, -943.59997558594, 44.299999237061, 0, 0, 279.99755859375);
	CreateDynamicObject(1597, 1197.3000488281, -942.29998779297, 44.299999237061, 0, 0, 279.99206542969);
	CreateDynamicObject(1597, 1204.3000488281, -941.09997558594, 44.299999237061, 0, 0, 279.99206542969);
	CreateDynamicObject(1597, 1211.0999755859, -939.90002441406, 44.299999237061, 0, 0, 279.99206542969);
	CreateDynamicObject(1597, 1227.9000244141, -936.79998779297, 44.200000762939, 0, 0, 280.24475097656);
	CreateDynamicObject(1215, 1215.5999755859, -939.29998779297, 42.299999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1223.4000244141, -937.79998779297, 42.299999237061, 0, 0, 0);
	CreateDynamicObject(5130, 1185.8000488281, -888, 44.099998474121, 0, 0, 52.248291015625);
	CreateDynamicObject(984, 1185.599609375, -900.5, 47.700000762939, 0, 0, 7.2454833984375);
	CreateDynamicObject(984, 1185.5999755859, -900.5, 47.700000762939, 0, 0, 7.25);
	CreateDynamicObject(984, 1186.5999755859, -908.40002441406, 47.700000762939, 0, 0, 7.2454833984375);
	CreateDynamicObject(984, 1194.5999755859, -892.90002441406, 47.700000762939, 0, 0, 276.9326171875);
	CreateDynamicObject(983, 1203.5999755859, -891.79998779297, 47.700000762939, 0, 0, 276.88195800781);
	CreateDynamicObject(984, 1207.5999755859, -897.79998779297, 47.700000762939, 0, 0, 187.63781738281);
	CreateDynamicObject(983, 1211.1999511719, -900, 47.700000762939, 0, 0, 276.87744140625);
	CreateDynamicObject(983, 1214.6999511719, -899.59997558594, 47.700000762939, 0, 0, 276.87744140625);
	CreateDynamicObject(983, 1216, -908.70001220703, 47.700000762939, 0, 0, 277.87744140625);
	CreateDynamicObject(983, 1212.3000488281, -909.20001220703, 47.700000762939, 0, 0, 277.37731933594);
	CreateDynamicObject(983, 1209.3000488281, -911.20001220703, 47.700000762939, 0, 0, 187.33276367188);
	CreateDynamicObject(983, 1218.6999511719, -905.20001220703, 47.700000762939, 0, 0, 187.32788085938);
	CreateDynamicObject(983, 1218.3000488281, -902.40002441406, 47.700000762939, 0, 0, 187.32788085938);
	CreateDynamicObject(14831, 1196.5, -900.70001220703, 48.5, 0, 0, 7.1948852539063);
	CreateDynamicObject(14537, 1192.5, -909.09997558594, 48.900001525879, 0, 0, 6.926513671875);
	CreateDynamicObject(14831, 1201.1999511719, -900.09997558594, 48.5, 0, 0, 7.1905517578125);
	CreateDynamicObject(1726, 1216, -900, 47.099998474121, 0, 0, 321.90423583984);
	CreateDynamicObject(1726, 1218.3000488281, -906.40002441406, 47.099998474121, 0, 0, 237.04974365234);
	CreateDynamicObject(1432, 1214.4000244141, -902.20001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1216.4000244141, -904.29998779297, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1214.3000488281, -907.40002441406, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1212, -904.90002441406, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1209.9000244141, -902.20001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1210.3000488281, -908, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1204.8000488281, -894.09997558594, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1204, -898.20001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1200.5, -895.79998779297, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1199.9000244141, -899, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1200.8000488281, -903.79998779297, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1204.1999511719, -903.79998779297, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1206.6999511719, -900.70001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1196.6999511719, -901.20001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1195.8000488281, -897.20001220703, 47, 0, 0, 0);
	CreateDynamicObject(1432, 1197.4000244141, -894.59997558594, 47, 0, 0, 0);

//____________restliche Zollobjekte_________________________//

	  CreateDynamicObject(7522,53.26778412,-1532.19824219,8.78054237,0.00000000,0.00000000,81.38504028); //object(vgnhsegate1) (1)
	  CreateDynamicObject(997,54.02749252,-1521.33227539,4.32880974,0.00000000,0.00000000,25.91009521); //object(lhouse_barrier3) (1)
	  CreateDynamicObject(997,51.76637650,-1544.01184082,4.44089222,0.00000000,0.00000000,7.94000244); //object(lhouse_barrier3) (2)
	  CreateDynamicObject(7033,-974.60913086,-378.75970459,39.82848740,0.00000000,0.00000000,346.85498047); //object(vgnhsegate02) (1)
	  CreateDynamicObject(997,-985.93945312,-380.27337646,35.66093445,0.00000000,359.50000000,219.57501221); //object(lhouse_barrier3) (1)
	  CreateDynamicObject(997,-964.97509766,-380.34747314,35.75716782,2.95397949,358.49798584,63.77743530); //object(lhouse_barrier3) (2)
	  CreateDynamicObject(9623,1740.75610352,526.56286621,29.45607376,0.00000000,0.00000000,340.15002441); //ls lv
	  CreateDynamicObject(9623,-159.34638977,399.15466309,13.87241077,0.00000000,0.00000000,344.60498047); //lv blueberry
	  CreateDynamicObject(7033,-1235.14392090,998.95019531,47.48900604,0.00000000,0.00000000,314.34497070); //lv sf
	  CreateDynamicObject(997,-1231.37805176,985.48468018,42.93623734,0.00000000,359.25000000,280.01998901); //object(lhouse_barrier3) (4)
	  CreateDynamicObject(973,-1229.03442383,987.18865967,43.46020126,0.00000000,0.00000000,248.36987305); //object(sub_roadbarrier) (3)
	  CreateDynamicObject(973,-1223.02136230,993.33142090,43.52420425,0.00000000,1.25000000,24.82000732); //object(sub_roadbarrier) (4)
	  CreateDynamicObject(973,-1242.29089355,1007.81542969,43.65176773,358.50018311,358.99969482,52.40881348); //object(sub_roadbarrier) (6)
	  CreateDynamicObject(997,-1238.87536621,1012.70074463,43.33435822,0.00000000,0.25000000,135.21508789); //object(lhouse_barrier3) (7)
	  CreateDynamicObject(997,-1248.29821777,1003.71899414,42.98434448,3.97000122,0.00000000,8.25000000); //object(lhouse_barrier3) (8)
	  CreateDynamicObject(997,-1251.29638672,1004.54431152,42.74088669,358.01498413,0.00000000,344.11999512); //object(lhouse_barrier3) (9)
	  CreateDynamicObject(8556,106.65058899,-1274.44775391,17.99364662,0.00000000,0.00000000,307.14001465); //object(vgshsegate04) (1)
	  CreateDynamicObject(7033,95.59352112,-1250.65161133,18.18517685,0.00000000,0.00000000,304.41998291); //object(vgnhsegate02) (2)

//Rakete
	  CreateDynamicObject(3267, -2236.1936035156, 1803.8532714844, 38.799171447754,0.0,0.0,180.000);


//GangJail
	CreateDynamicObject(1508, 215.10000610352, -224.19999694824, 2.4000000953674, 0, 0, 270);
	CreateDynamicObject(985, 208.39999389648, -232.10000610352, 0.80000001192093, 0, 0, 87.999877929688);
	CreateDynamicObject(985, 208.69999694824, -228.5, 0.80000001192093, 0, 0, 87.994995117188);

	gangtor =	CreateObject(1508, 204.89999389648, -235.69999694824, 2.4000000953674, 0, 0, 269.99450683594);
	gangtuer =	CreateObject(1495, 193, -227.80000305176, 0.80000001192093, 0, 0, 270);
//*****************************************************************************************

//*******************************Staatsfraktionen Bases*********************************
//SWAT Base
    MVTor4 = CreateObject(980, 309.39999389648, -1554.8000488281, 32.200000762939, 0, 0, 322);
	MVTor5 = CreateObject(980, 363.29998779297, -1469.3000488281, 31.799999237061, 0, 0, 215.99829101563);
	
	armylift1 = CreateObject(971, 135.239868, 1941.596191, 18.319401, 270.6186, 0.0000, 0.0000);
	armylift2 = CreateObject(971, 135.249451, 1948.701782, 18.366772, 270.6186, 0.0000, 0.0000);
	armylift3 = CreateObject(971, 135.242264, 1934.456055, 18.236771, 270.6186, 0.0000, 0.0000);
	armylift4 = CreateObject(971, 282.634491, 1821.245972, 16.593493, 270.6186, 0.0000, 90.0000);
	armylift5 = CreateObject(971, 289.555176, 1821.240967, 16.585548, 269.7592, 0.0000, 270.0000);

//======= LSPD ========
	MVTor3 = CreateObject(980, 1539.8000488281, -1627.6999511719, 15.199999809265, 0, 0, 269.95544433594);//LSPDTOR2 Oben
	MVTor2 = CreateObject(971, 1588.5999755859, -1638, 15.10000038147, 0, 0, 0);//LSPDTOR1 Oben
/*	CreateDynamicObject(3749, 1546.7877197266, -1627.455078125, 18.241226196289, 0, 0, 272.66064453125);
	CreateDynamicObject(996, 1550, -1622.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1559.4000244141, -1622.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1569, -1622.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1569.1999511719, -1633.0999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1559.8000488281, -1633.0999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1550.5, -1633.0999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(997, 1546.8000488281, -1618.6999511719, 12.60000038147, 0, 0, 296.24926757813);
	CreateDynamicObject(997, 1546.3000488281, -1636.0999755859, 12.60000038147, 0, 0, 43.993774414063);
	CreateDynamicObject(984, 1539.5999755859, -1611.4000244141, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(983, 1539.5999755859, -1605.5999755859, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(983, 1542.8000488281, -1617.8000488281, 16.60000038147, 0, 0, 90);
	CreateDynamicObject(983, 1546, -1617.8000488281, 16.60000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1607.9000244141, -1631.3000488281, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(982, 1608, -1615.3000488281, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(982, 1595.0999755859, -1602.5, 16.60000038147, 0, 0, 90);
	CreateDynamicObject(982, 1569.5, -1602.5, 16.60000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1550.3000488281, -1602.5, 16.5, 0, 0, 270);
	CreateDynamicObject(983, 1542.8000488281, -1602.5, 16.60000038147, 0, 0, 270);
	CreateDynamicObject(983, 1604.8000488281, -1637.9000244141, 16.60000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1583.6999511719, -1637.9000244141, 19.5, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1593.3000488281, -1638, 19.60000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(8613, 1602.9000244141, -1633.6999511719, 15.39999961853, 0, 0, 180);
	CreateDynamicObject(8613, 1582.0999755859, -1657.5, 24, 0, 0, 89.994506835938);
	CreateDynamicObject(1472, 1587, -1661.5999755859, 19.299999237061, 0, 0, 90);
	CreateDynamicObject(1471, 1579, -1662.4000244141, 19.299999237061, 0, 0, 92);
	CreateDynamicObject(1471, 1578.9000244141, -1654.6999511719, 19.299999237061, 0, 0, 91.994018554688);
	CreateDynamicObject(1471, 1579, -1652.1999511719, 19.299999237061, 0, 0, 91.994018554688);
	CreateDynamicObject(982, 1565, -1637.3000488281, 28.10000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1549, -1637.3000488281, 28, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1542.5999755859, -1643.9000244141, 28, 0, 0, 359.99450683594);
	CreateDynamicObject(983, 1545.9000244141, -1650.4000244141, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1550.6999511719, -1650.4000244141, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1553.8000488281, -1653.5999755859, 28.10000038147, 0, 0, 179.99450683594);
	CreateDynamicObject(984, 1553.8000488281, -1663.1999511719, 28, 0, 0, 359.98901367188);
	CreateDynamicObject(983, 1553.8000488281, -1669.5999755859, 28.10000038147, 0, 0, 359.99450683594);
	CreateDynamicObject(983, 1557, -1672.8000488281, 28.10000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(983, 1556.8000488281, -1678.4000244141, 28.10000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1553.5999755859, -1684.8000488281, 28, 0, 0, 359.98901367188);
	CreateDynamicObject(984, 1553.5999755859, -1694.4000244141, 28, 0, 0, 359.98901367188);
	CreateDynamicObject(983, 1550.4000244141, -1700.6999511719, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1545.5999755859, -1700.6999511719, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1542.5, -1707.5, 28, 0, 0, 359.98901367188);
	CreateDynamicObject(982, 1555.4000244141, -1714.3000488281, 28.10000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(983, 1571.4000244141, -1714.3000488281, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(983, 1574.5999755859, -1714.3000488281, 28.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(982, 1577.6999511719, -1701.5, 28.10000038147, 0, 0, 359.99450683594);
	CreateDynamicObject(982, 1577.6999511719, -1675.9000244141, 28.10000038147, 0, 0, 359.98901367188);
	CreateDynamicObject(983, 1577.5999755859, -1659.9000244141, 28.10000038147, 0, 0, 179.98901367188);
	CreateDynamicObject(984, 1577.8000488281, -1643.6999511719, 28, 0, 0, 359.98901367188);
	CreateDynamicObject(996, 1534.6999511719, -1639.0999755859, 13.300000190735, 0, 0, 270);
	CreateDynamicObject(996, 1534.6999511719, -1647.5999755859, 13.300000190735, 0, 0, 269.99450683594);
	CreateDynamicObject(996, 1534.6999511719, -1656, 13.300000190735, 0, 0, 269.99450683594);
	CreateDynamicObject(997, 1534.5999755859, -1663.8000488281, 12.5, 0, 0, 359.99377441406);
	CreateDynamicObject(994, 1537.6999511719, -1664.0999755859, 12.5, 0, 0, 270);
	CreateDynamicObject(994, 1537.6999511719, -1675, 12.5, 0, 0, 269.99450683594);
	CreateDynamicObject(997, 1534.5999755859, -1681.5999755859, 12.5, 0, 0, 359.98352050781);
	CreateDynamicObject(997, 1534.5999755859, -1670.5999755859, 12.39999961853, 0, 0, 359.98352050781);
	CreateDynamicObject(997, 1534.5999755859, -1674.6999511719, 12.39999961853, 0, 0, 359.98352050781);
	CreateDynamicObject(994, 1534.6999511719, -1681.9000244141, 12.5, 0, 0, 269.99450683594);
	CreateDynamicObject(994, 1534.6999511719, -1688.5, 12.5, 0, 0, 269.99450683594);
	CreateDynamicObject(994, 1534.6999511719, -1695.1999511719, 12.5, 0, 0, 269.99450683594);
	CreateDynamicObject(994, 1534.69921875, -1701.8994140625, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1534.69921875, -1708.599609375, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(3666, 1537.6999511719, -1672.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1534.4000244141, -1670.5999755859, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(3666, 1534.5, -1674.6999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(996, 1534.6999511719, -1603, 13.300000190735, 0, 0, 269.99450683594);
	CreateDynamicObject(996, 1534.6999511719, -1611.1999511719, 13.300000190735, 0, 0, 269.99450683594);
	CreateDynamicObject(3666, 1538.3000488281, -1638.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1536.1999511719, -1638.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1536.0999755859, -1714.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(3666, 1538, -1714.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(700, 1547.1999511719, -1686.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(700, 1546.7998046875, -1664.3994140625, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(700, 1541.3000488281, -1646.6999511719, 13, 0, 0, 0);
	CreateDynamicObject(700, 1541.1999511719, -1704.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(640, 1538.3000488281, -1678, 13.199999809265, 0, 0, 180);
	CreateDynamicObject(640, 1538.1999511719, -1667.3000488281, 13.199999809265, 0, 0, 179.99450683594);
	CreateDynamicObject(638, 1536.1999511719, -1682.0999755859, 13.199999809265, 0, 0, 269.99450683594);
	CreateDynamicObject(638, 1536.3000488281, -1663.1999511719, 13.199999809265, 0, 0, 269.99450683594);
	CreateDynamicObject(1226, 1533.5999755859, -1708.5999755859, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(1226, 1533.5, -1695.1999511719, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(1226, 1533.5999755859, -1655.3000488281, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(1226, 1533.5999755859, -1610.6999511719, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(996, 1550.4000244141, -1617.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1559.5, -1617.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(996, 1568.8000488281, -1617.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1257, 1522.4000244141, -1697.9000244141, 13.800000190735, 0, 0, 180);
	CreateDynamicObject(994, 1524.4000244141, -1702.1999511719, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.4000244141, -1708.8000488281, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1688.5999755859, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1682, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1675.3000488281, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1664.3000488281, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1657.5999755859, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1650.9000244141, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.1999511719, -1644.0999755859, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.0999755859, -1637.3000488281, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.0999755859, -1630.4000244141, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.0999755859, -1623.6999511719, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.0999755859, -1617, 12.5, 0, 0, 269.98901367188);
	CreateDynamicObject(994, 1524.0999755859, -1610.3000488281, 12.5, 0, 0, 269.98901367188);*/
	
//=========NEU=NEU==========//

	CreateDynamicObject(1215, 2456.6000976563, -1658.9000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2463.2998046875, -1658.8994140625, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2446.8999023438, -1658.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2428.6999511719, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2438.19921875, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2418.5, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2412.6000976563, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2396.3000488281, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2405.599609375, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2386, -1658.9000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2375.8000488281, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2364.8999023438, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2357.6999511719, -1659.0999755859, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1232, 2469.1000976563, -1690.3000488281, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2478.099609375, -1647.8994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2460.3994140625, -1647.3994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2446.099609375, -1647.8994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2486.1000976563, -1691.0999755859, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2500.8999023438, -1688.8000488281, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2513.8999023438, -1682.4000244141, 15, 0, 0, 0);
	CreateDynamicObject(1232, 2521.8000488281, -1667.3000488281, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2521.8999023438, -1658.3000488281, 16.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2492.5, -1646.6999511719, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2513, -1654.099609375, 15.5, 0, 0, 0);
	CreateDynamicObject(1232, 2505.3994140625, -1648.599609375, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(1360, 2529.6000976563, -1720.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1360, 2531.5, -1708.3000488281, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2526, -1708.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2520.1000976563, -1708.9000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2524.3000488281, -1720.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(970, 2538.8999023438, -1716.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(970, 2536.8000488281, -1718.1999511719, 13, 0, 0, 90);
	CreateDynamicObject(970, 2536.8999023438, -1707.5, 13, 0, 0, 90);
	CreateDynamicObject(970, 2536.7998046875, -1720, 13, 0, 0, 90);
	CreateDynamicObject(970, 2538.8999023438, -1709.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(970, 2536.8999023438, -1703.4000244141, 12.89999961853, 0, 0, 90);
	CreateDynamicObject(970, 2539, -1701.3000488281, 12.699999809265, 0, 0, 4);
	CreateDynamicObject(970, 2519.8000488281, -1711.9000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(1468, 2460.5, -1669.0999755859, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1468, 2460.5, -1669.099609375, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2537, -1715.9000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1361, 2537.099609375, -1709.8994140625, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1361, 2537, -1715.8994140625, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1361, 2534.5, -1698.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1361, 2539.1000976563, -1698.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1361, 2466.1999511719, -1652.1999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1361, 2465.7998046875, -1667.099609375, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1358, 2489.6000976563, -1669.8000488281, 13.5, 0, 0, 0);
	CreateDynamicObject(1448, 2489.3000488281, -1668.3000488281, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1549, 2487.8000488281, -1668.6999511719, 12.300000190735, 0, 0, 0);
	CreateDynamicObject(854, 2485, -1660, 12.5, 0, 0, 0);
	CreateDynamicObject(1257, 2531.6000976563, -1667.4000244141, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(970, 1076.4000244141, -1270.8000488281, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(970, 1080.599609375, -1270.7998046875, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(970, 1075, -1270.8000488281, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1072.8000488281, -1270.6999511719, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(970, 1072.8000488281, -1268.5, 17.60000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1265.8000488281, 17.60000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1261.5999755859, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1258.8000488281, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1254.5, 18.799999237061, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1251.5999755859, 18.799999237061, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1247.4000244141, 19.39999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1244.4000244141, 19.39999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1240.3000488281, 19.89999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1237.4000244141, 19.89999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1233.5, 21, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1229.3000488281, 21, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1225.1999511719, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1221, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1216.9000244141, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1213, 21, 0, 0, 270);
	CreateDynamicObject(970, 1073.3000488281, -1201.0999755859, 23.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1073.3000488281, -1198.9000244141, 23.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1194.5999755859, 24.700000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1190.5, 24.700000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1187.5, 26.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1183.3000488281, 26.10000038147, 0, 0, 270);
	CreateDynamicObject(1215, 1083.5, -1245, 16.700000762939, 0, 0, 0);
	CreateDynamicObject(1215, 1083.6999511719, -1214, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1084.19921875, -1216.2998046875, 19.60000038147, 0, 0, 0);
	CreateDynamicObject(1575, 1091.6999511719, -1184, 19.5, 0, 0, 14);
	CreateDynamicObject(1575, 1092.5999755859, -1185.0999755859, 19.60000038147, 0, 0, 0);
	CreateDynamicObject(1575, 1091.5999755859, -1185.5, 19.60000038147, 0, 0, 335.99487304688);
	CreateDynamicObject(1212, 1089.5999755859, -1184.0999755859, 17.299999237061, 0, 0, 0);
	CreateDynamicObject(1550, 1089.5999755859, -1184.9000244141, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1550, 1089.599609375, -1183.3994140625, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1550, 1089.8000488281, -1184.0999755859, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(2359, 1090.9000244141, -1184.9000244141, 19.700000762939, 0, 0, 0);
	CreateDynamicObject(925, 1084, -1183.8000488281, 18.39999961853, 0, 0, 0);
	CreateDynamicObject(930, 1085.8000488281, -1183.4000244141, 17.799999237061, 0, 0, 0);
	CreateDynamicObject(1370, 1124.1999511719, -1212.0999755859, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1370, 1120.3994140625, -1193.8994140625, 31.60000038147, 0, 0, 0);
	CreateDynamicObject(1370, 1124.4000244141, -1201.5999755859, 17.5, 0, 0, 0);
	CreateDynamicObject(1370, 1074.5, -1203.4000244141, 23.200000762939, 0, 0, 0);
	CreateDynamicObject(1370, 1073.8000488281, -1211.3000488281, 21, 0, 0, 0);
	CreateDynamicObject(5821, 1087, -1251.5999755859, 17.700000762939, 0, 0, 270);
	CreateDynamicObject(1361, 1112.8000488281, -1222.0999755859, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1361, 1083.1999511719, -1222.0999755859, 17.5, 0, 0, 0);
	CreateDynamicObject(1360, 1081.8000488281, -1204.6999511719, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(1360, 1092, -1190.5999755859, 18, 0, 0, 0);
	CreateDynamicObject(1360, 1104.7998046875, -1190.599609375, 18, 0, 0, 0);
	CreateDynamicObject(1360, 1082, -1210.0999755859, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(2653, 1079.1999511719, -1207.3000488281, 19.700000762939, 0, 0, 0);
	CreateDynamicObject(1255, 1084.5, -1269, 21.10000038147, 0, 0, 34);
	CreateDynamicObject(1255, 1084.5999755859, -1266.8000488281, 21.10000038147, 0, 0, 33.997192382813);
	CreateDynamicObject(1255, 1084.5, -1264.8000488281, 21.10000038147, 0, 0, 33.997192382813);
	CreateDynamicObject(1231, 1087.5999755859, -1254.0999755859, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1133.4000244141, -1254.4000244141, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1098.19921875, -1254.2998046875, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1108.19921875, -1254.099609375, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1122, -1254.099609375, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1703, 1107.1999511719, -1267.5999755859, 20.5, 0, 0, 180);
	CreateDynamicObject(1703, 1103.5, -1267.5, 20.5, 0, 0, 179.99450683594);
	CreateDynamicObject(1703, 1099.4000244141, -1266.1999511719, 20.5, 0, 0, 91.994506835938);
	CreateDynamicObject(1703, 1108.9000244141, -1263.8000488281, 20.5, 0, 0, 271.99401855469);
	CreateDynamicObject(1827, 1104.3000488281, -1264.8000488281, 20.5, 0, 0, 0);
	CreateDynamicObject(1704, 1103.5999755859, -1262.4000244141, 20.5, 0, 0, 0);
	CreateDynamicObject(1215, 1099.1999511719, -1263.3000488281, 21.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1108.9000244141, -1262.6999511719, 21.10000038147, 0, 0, 0);
	CreateDynamicObject(2964, 1103.5999755859, -1255.5999755859, 20.5, 0, 0, 0);
	CreateDynamicObject(2964, 1116, -1255.9000244141, 20.5, 0, 0, 0);
	CreateDynamicObject(2964, 1093.0999755859, -1255.5, 20.5, 0, 0, 0);

//========NEU=NEU===========//



	//-----------------------------------------------------------------------------------
	CreateDynamicObject(988, 3572.873779, -1638.097900, 0.386014, 269.7591, 0.0000, 0.0000);//spawn
	//-----------------------------------------------------------------------------------


	lspdinside = CreateObject(2930, 239.60000610352, 118.30000305176, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(2930, 239.60000610352, 120.09999847412, 1004.9000244141, 0, 0, 0);
 	lspdinside2 = CreateObject(2930, 253.19999694824, 110.09999847412, 1004.9000244141, 0, 0, 0);
    CreateDynamicObject(2930, 253.19999694824, 108.40000152588, 1004.9000244141, 0, 0, 0);
    lspdinside3 = CreateObject(2930, 239.69999694824, 125.80000305176, 1004.9000244141, 0, 0, 0);
	lspdinside4 = CreateObject(2930, 253.19999694824, 126, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(2930, 239.60000610352, 127.40000152588, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(2930, 253.10000610352, 127.69999694824, 1004.9000244141, 0, 0, 0);



//	MVTor = CreateObject(971, 1589.148315, -1638.497070, 15.292543, 0.0000, 0.0000, 180.0000); //LSPD Tor
//Rund Um Die Stadt !

	CreateDynamicObject(982, 1304.9468994141, -1697.9730224609, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.9357910156, -1723.5932617188, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8927001953, -1749.2042236328, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8973388672, -1774.8034667969, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8526611328, -1800.4556884766, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8597412109, -1826.0609130859, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(870, 1304.7902832031, -1726.6826171875, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9122314453, -1721.2595214844, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9937744141, -1715.4724121094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8856201172, -1709.2572021484, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0769042969, -1702.6242675781, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8564453125, -1696.8950195313, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0018310547, -1692.0639648438, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9611816406, -1686.7077636719, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.7788085938, -1733.8428955078, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0598144531, -1738.4645996094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8704833984, -1742.7396240234, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9692382813, -1747.9169921875, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9197998047, -1756.7983398438, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0006103516, -1761.0760498047, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.2108154297, -1766.4068603516, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1602783203, -1771.2668457031, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1342773438, -1777.1391601563, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9768066406, -1784.2071533203, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9241943359, -1789.4011230469, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1027832031, -1794.4035644531, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0925292969, -1800.1236572266, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0780029297, -1805.6018066406, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1309814453, -1812.8205566406, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.4063720703, -1818.2906494141, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1798095703, -1823.6356201172, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.138671875, -1828.8887939453, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0269775391, -1834.2932128906, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.6956787109, -1842.2237548828, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(984, 1306.8974609375, -1548.1116943359, 13.183554649353, 0, 0, 352);
	CreateDynamicObject(984, 1307.3767089844, -1544.9272460938, 13.183554649353, 0, 0, 351.99645996094);
	CreateDynamicObject(984, 1310.7010498047, -1532.611328125, 13.183554649353, 0, 0, 337.99096679688);
	CreateDynamicObject(983, 1314.3104248047, -1523.7216796875, 13.222636222839, 0, 0, 338);
	CreateDynamicObject(983, 1315.5098876953, -1520.7918701172, 13.222636222839, 0, 0, 337.99987792969);
	CreateDynamicObject(984, 1320.2944335938, -1512.49609375, 13.183554649353, 0, 0, 325.98889160156);
	CreateDynamicObject(984, 1327.4541015625, -1501.9254150391, 13.183554649353, 0, 0, 325.986328125);
	CreateDynamicObject(984, 1333.8764648438, -1490.8311767578, 13.183554649353, 0, 0, 333.986328125);
	CreateDynamicObject(984, 1338.8249511719, -1480.7482910156, 13.183554649353, 0, 0, 333.984375);
	CreateDynamicObject(984, 1343.0185546875, -1468.7991943359, 13.175761222839, 0, 0, 347);
	CreateDynamicObject(984, 1345.8800048828, -1456.4654541016, 13.183554649353, 0, 0, 346.99768066406);
	CreateDynamicObject(984, 1347.9301757813, -1443.8193359375, 13.183554649353, 0, 0, 354.99768066406);
	CreateDynamicObject(984, 1349.0433349609, -1431.0946044922, 13.183554649353, 0, 0, 354.99572753906);
	CreateDynamicObject(984, 1349.7193603516, -1423.1762695313, 13.183554649353, 0, 0, 354.99572753906);
	CreateDynamicObject(870, 1349.7622070313, -1418.4534912109, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1349.5935058594, -1423.2766113281, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1349.1450195313, -1428.7672119141, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1348.6840820313, -1434.7901611328, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1348.1314697266, -1440.1870117188, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1347.7141113281, -1447.2104492188, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1346.5600585938, -1453.3884277344, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1345.2602539063, -1458.8898925781, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1344.1955566406, -1464.7464599609, 12.781203269958, 0, 0, 0);
	CreateDynamicObject(870, 1342.9658203125, -1469.6669921875, 12.781203269958, 0, 0, 350);
	CreateDynamicObject(870, 1341.2407226563, -1476.2468261719, 12.781203269958, 0, 0, 339.99694824219);
	CreateDynamicObject(870, 1338.4833984375, -1481.7393798828, 12.788996696472, 0, 0, 339.99389648438);
	CreateDynamicObject(870, 1335.3601074219, -1487.8764648438, 12.788996696472, 0, 0, 339.99389648438);
	CreateDynamicObject(870, 1332.6290283203, -1493.501953125, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1328.6234130859, -1500.2862548828, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1324.8276367188, -1506.2065429688, 12.788996696472, 0, 0, 332);
	CreateDynamicObject(870, 1321.5795898438, -1510.9041748047, 12.788996696472, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1317.4368896484, -1516.9163818359, 12.788996696472, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1314.5092773438, -1523.1890869141, 12.781203269958, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1312.4759521484, -1528.8159179688, 12.781203269958, 0, 0, 0);
	CreateDynamicObject(870, 1309.9907226563, -1534.8317871094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1307.9705810547, -1541.8428955078, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1307.1420898438, -1547.2496337891, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1306.0828857422, -1552.8713378906, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(1281, 1301.8063964844, -1866.2396240234, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1302.0598144531, -1870.8815917969, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1290.9669189453, -1876.3804931641, 13.352896690369, 0, 0, 0);
	CreateDynamicObject(1281, 1302.1552734375, -1876.3165283203, 13.352896690369, 0, 0, 0);
	CreateDynamicObject(1281, 1290.970703125, -1870.3883056641, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1291.2794189453, -1865.8643798828, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(643, 1296.4981689453, -1874.0516357422, 13.017346382141, 0, 0, 0);
	CreateDynamicObject(643, 1296.5693359375, -1868.6201171875, 13.017346382141, 0, 0, 0);
	CreateDynamicObject(983, 1301.5759277344, -1862.3165283203, 13.230429649353, 0, 0, 270);
	CreateDynamicObject(983, 1290.6713867188, -1862.2672119141, 13.230429649353, 0, 0, 270);
	CreateDynamicObject(2773, 1297.8903808594, -1863.4284667969, 13.064103126526, 0, 0, 322);
	CreateDynamicObject(2773, 1294.2143554688, -1863.3950195313, 13.064103126526, 0, 0, 35.997314453125);
	CreateDynamicObject(983, 1287.4357910156, -1880.1752929688, 13.236068725586, 0, 0, 180);
	CreateDynamicObject(1776, 1298.5115966797, -1880.1678466797, 13.646266937256, 0, 0, 182);
	CreateDynamicObject(1775, 1297.2154541016, -1880.1146240234, 13.643911361694, 0, 0, 180);
	CreateDynamicObject(1231, 1301.5502929688, -1862.2928466797, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1290.5443115234, -1862.2702636719, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(983, 1376.5454101563, -1881.7703857422, 13.237580299377, 0, 0, 264);
	CreateDynamicObject(983, 1370.1872558594, -1881.1110839844, 13.236107826233, 0, 0, 263.99597167969);
	CreateDynamicObject(983, 1368.6242675781, -1880.9482421875, 13.235756874084, 0, 0, 263.99047851563);
	CreateDynamicObject(1231, 1376.4932861328, -1881.8039550781, 15.283758163452, 0, 0, 356);
	CreateDynamicObject(1231, 1368.5618896484, -1880.8916015625, 15.283414840698, 0, 0, 349.99548339844);
	CreateDynamicObject(982, 1287.4117431641, -1829.4525146484, 13.237483024597, 0, 0, 0);
	CreateDynamicObject(982, 1287.4077148438, -1807.0612792969, 13.24405002594, 0, 0, 0);
	CreateDynamicObject(982, 1274.5335693359, -1793.3767089844, 13.083199501038, 0, 0, 90);
	CreateDynamicObject(983, 1260.1640625, -1793.3928222656, 13.107747077942, 0, 0, 270);
	CreateDynamicObject(983, 1232.9532470703, -1825.3370361328, 13.272395133972, 0, 0, 270);
	CreateDynamicObject(983, 1224.7744140625, -1825.2927246094, 13.272459983826, 0, 0, 270);
	CreateDynamicObject(983, 1216.736328125, -1825.306640625, 13.272439002991, 0, 0, 270);
	CreateDynamicObject(983, 1208.8957519531, -1825.2824707031, 13.272475242615, 0, 0, 270);
	CreateDynamicObject(983, 1200.8861083984, -1825.3009033203, 13.272448539734, 0, 0, 270);
	CreateDynamicObject(983, 1193.2546386719, -1825.2922363281, 13.272461891174, 0, 0, 270);
	CreateDynamicObject(983, 1190.0477294922, -1822.1337890625, 13.260739326477, 0, 0, 180);
	CreateDynamicObject(983, 1190.0515136719, -1815.7663574219, 13.260745048523, 0, 0, 180);
	CreateDynamicObject(983, 1190.0509033203, -1812.6096191406, 13.260745048523, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1236.1246337891, -1820.6785888672, 13.279221534729, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1236.1456298828, -1812.6815185547, 13.29093837738, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1198.2064208984, -1837.3310546875, 13.256678581238, 0, 0, 270);
	CreateDynamicObject(983, 1199.8275146484, -1837.3494873047, 13.254431724548, 0, 0, 270);
	CreateDynamicObject(983, 1195.0101318359, -1834.1063232422, 13.266268730164, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1195.0130615234, -1829.3216552734, 13.263573646545, 0, 0, 179.99450683594);
	CreateDynamicObject(3666, 1194.8081054688, -1825.7407226563, 13.115976333618, 0, 0, 0);
	CreateDynamicObject(3666, 1204.0826416016, -1837.4578857422, 13.06955909729, 0, 0, 0);
	CreateDynamicObject(3666, 1203.6988525391, -1842.1923828125, 13.066823959351, 0, 0, 0);
	CreateDynamicObject(3666, 1223.8203125, -1842.271484375, 13.06056022644, 0, 0, 0);
	CreateDynamicObject(983, 1226.9571533203, -1837.4904785156, 13.270976066589, 0, 0, 270);
	CreateDynamicObject(983, 1233.3441162109, -1837.501953125, 13.270773887634, 0, 0, 270);
	CreateDynamicObject(983, 1239.7121582031, -1837.4992675781, 13.266272544861, 0, 0, 270);
	CreateDynamicObject(983, 1246.1385498047, -1837.5272216797, 13.264399528503, 0, 0, 270);
	CreateDynamicObject(983, 1252.4221191406, -1837.3950195313, 13.24675655365, 0, 0, 270);
	CreateDynamicObject(983, 1257.2119140625, -1837.3836669922, 13.244194984436, 0, 0, 270);
	CreateDynamicObject(983, 1284.1945800781, -1842.2836914063, 13.228772163391, 0, 0, 270);
	CreateDynamicObject(3666, 1223.5888671875, -1837.5812988281, 13.069229125977, 0, 0, 0);
	CreateDynamicObject(3666, 1260.142578125, -1837.7532958984, 13.058977127075, 0, 0, 0);
	CreateDynamicObject(3666, 1259.9665527344, -1842.0784912109, 13.076805114746, 0, 0, 0);
	CreateDynamicObject(3666, 1280.3946533203, -1842.1732177734, 13.087188720703, 0, 0, 0);
	CreateDynamicObject(1231, 1252.9938964844, -1841.9677734375, 15.316919326782, 0, 0, 0);
	CreateDynamicObject(1231, 1242.5729980469, -1842.0960693359, 15.299505233765, 0, 0, 0);
	CreateDynamicObject(1231, 1231.7780761719, -1842.1237792969, 15.295318603516, 0, 0, 0);
	CreateDynamicObject(1231, 1199.0712890625, -1842.0906982422, 15.311740875244, 0, 0, 0);
	CreateDynamicObject(1231, 1190.1539306641, -1842.1428222656, 15.320255279541, 0, 0, 0);
	CreateDynamicObject(1231, 1189.9285888672, -1834.1168212891, 15.300704956055, 0, 0, 268);
	CreateDynamicObject(1231, 1190.1104736328, -1825.5405273438, 15.320964813232, 0, 0, 267.99499511719);
	CreateDynamicObject(1231, 1280.3781738281, -1842.2850341797, 15.279340744019, 0, 0, 179.99499511719);
	CreateDynamicObject(3666, 1236.060546875, -1816.0998535156, 13.116060256958, 0, 0, 0);
	CreateDynamicObject(3666, 1236.0368652344, -1825.1246337891, 13.102836608887, 0, 0, 0);
	CreateDynamicObject(3666, 1228.1689453125, -1825.2387695313, 13.102670669556, 0, 0, 0);
	CreateDynamicObject(3666, 1221.3990478516, -1825.2287597656, 13.102684020996, 0, 0, 0);
	CreateDynamicObject(3666, 1212.3413085938, -1825.2725830078, 13.102621078491, 0, 0, 0);
	CreateDynamicObject(3666, 1205.3474121094, -1825.2340087891, 13.102676391602, 0, 0, 0);
	CreateDynamicObject(982, 1059.1430664063, -1764.1168212891, 13.240622520447, 0, 0, 0);
	CreateDynamicObject(982, 1102.1683349609, -1764.1756591797, 13.203336715698, 0, 0, 0);
	CreateDynamicObject(982, 1088.8211669922, -1777.2604980469, 13.203715324402, 0, 0, 90);
	CreateDynamicObject(982, 1072.7874755859, -1777.2686767578, 13.203919410706, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1072.9261474609, -1735.7808837891, 13.3736743927, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1098.5444335938, -1735.8441162109, 13.44093132019, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1124.1313476563, -1735.8500976563, 13.456992149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1119.3057861328, -1745.9907226563, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1144.8438720703, -1746.0327148438, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1149.7088623047, -1735.8211669922, 13.456992149353, 0, 0, 89.994506835938);
	CreateDynamicObject(983, 1160.9205322266, -1735.8228759766, 13.456992149353, 0, 0, 90);
	CreateDynamicObject(983, 1160.8322753906, -1746.0909423828, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1059.0766601563, -1744.9410400391, 13.25629234314, 0, 0, 0);
	CreateDynamicObject(983, 1059.1109619141, -1740.1285400391, 13.317593574524, 0, 0, 0);
	CreateDynamicObject(3666, 1059.4627685547, -1777.1745605469, 13.031704902649, 0, 0, 0);
	CreateDynamicObject(3666, 1101.8972167969, -1777.0985107422, 13.030601501465, 0, 0, 0);
	CreateDynamicObject(3666, 1101.896484375, -1777.09765625, 13.030601501465, 0, 0, 0);
	CreateDynamicObject(3666, 1102.2243652344, -1750.4031982422, 13.045902252197, 0, 0, 0);
	CreateDynamicObject(3666, 1103.1716308594, -1748.1320800781, 13.079196929932, 0, 0, 0);
	CreateDynamicObject(3666, 1105.7670898438, -1746.2209472656, 13.087428092957, 0, 0, 0);
	CreateDynamicObject(3666, 1059.2069091797, -1735.8656005859, 13.171046257019, 0, 0, 0);
	CreateDynamicObject(3666, 1216.3941650391, -1722.7170410156, 13.070556640625, 0, 0, 0);
	CreateDynamicObject(3666, 1211.5487060547, -1722.6658935547, 13.070306777954, 0, 0, 0);
	CreateDynamicObject(3666, 1225.6622314453, -1722.71484375, 13.070545196533, 0, 0, 0);
	CreateDynamicObject(3666, 1229.8852539063, -1722.6635742188, 13.070295333862, 0, 0, 0);
	CreateDynamicObject(3666, 1237.3260498047, -1722.7202148438, 13.070571899414, 0, 0, 0);
	CreateDynamicObject(3666, 1243.5894775391, -1722.6818847656, 13.070384979248, 0, 0, 0);
	CreateDynamicObject(3666, 1240.3292236328, -1722.7043457031, 13.07049369812, 0, 0, 0);
	CreateDynamicObject(983, 1164.9580078125, -1754.0443115234, 13.257978439331, 0, 0, 0);
	CreateDynamicObject(3666, 1164.9187011719, -1749.1864013672, 13.08399772644, 0, 0, 0);
	CreateDynamicObject(3666, 1164.9254150391, -1747.2734375, 13.08399772644, 0, 0, 0);
	CreateDynamicObject(3666, 1163.3778076172, -1758.7359619141, 13.142159461975, 0, 0, 0);


//Stadthalle


/*	CreateDynamicObject(996, 1493.4024658203, -1737.7603759766, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1484.8374023438, -1737.69921875, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1470.9411621094, -1737.6519775391, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1462.4947509766, -1737.6884765625, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(997, 1460.9493408203, -1738.625, 12.546875, 0, 0, 230);
	CreateDynamicObject(997, 1483.9654541016, -1737.8579101563, 12.546875, 0, 0, 234);
	CreateDynamicObject(997, 1478.5921630859, -1738.0168457031, 12.546875, 0, 0, 311.99780273438);
	CreateDynamicObject(996, 1458.4482421875, -1742.5617675781, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(996, 1503.8594970703, -1742.7635498047, 13.295630455017, 0, 0, 270);
	CreateDynamicObject(997, 1503.4805908203, -1741.1362304688, 12.546875, 0, 0, 125.9977722168);
	CreateDynamicObject(997, 1493.9327392578, -1748.4202880859, 14.4453125, 0, 0, 179.99670410156);
	CreateDynamicObject(997, 1488.6243896484, -1748.3919677734, 14.4453125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1482.9711914063, -1748.4296875, 14.4453125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1477.2840576172, -1748.4860839844, 14.4453125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1471.8312988281, -1748.4400634766, 14.4453125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1482.7216796875, -1756.6176757813, 16.53125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1488.4251708984, -1756.6401367188, 16.53125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1494.5841064453, -1756.6683349609, 16.53125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1477.3394775391, -1756.7021484375, 16.53125, 0, 0, 179.99450683594);
	CreateDynamicObject(997, 1471.0661621094, -1756.7182617188, 16.53125, 0, 0, 179.99450683594);
	CreateDynamicObject(638, 1486.9310302734, -1748.9763183594, 15.142346382141, 0, 0, 270);
	CreateDynamicObject(638, 1481.2807617188, -1748.9334716797, 15.142346382141, 0, 0, 270);
	CreateDynamicObject(638, 1475.6356201172, -1748.9556884766, 15.142346382141, 0, 0, 270);
	CreateDynamicObject(638, 1470.1927490234, -1748.8980712891, 15.142346382141, 0, 0, 270);
	CreateDynamicObject(638, 1486.8927001953, -1757.251953125, 17.228282928467, 0, 0, 270);
	CreateDynamicObject(638, 1493.0327148438, -1757.2354736328, 17.228282928467, 0, 0, 270);
	CreateDynamicObject(638, 1481.0699462891, -1757.1608886719, 17.228282928467, 0, 0, 270);
	CreateDynamicObject(638, 1475.6828613281, -1757.1707763672, 17.228282928467, 0, 0, 270);
	CreateDynamicObject(638, 1469.3664550781, -1757.1536865234, 17.228282928467, 0, 0, 270);
	CreateDynamicObject(638, 1492.3438720703, -1748.8513183594, 15.142346382141, 0, 0, 270);
	CreateDynamicObject(638, 1482.5916748047, -1738.9095458984, 13.243908882141, 0, 0, 324);
	CreateDynamicObject(638, 1480.1053466797, -1738.9554443359, 13.243908882141, 0, 0, 221.99780273438);
	CreateDynamicObject(9833, 1492.521484375, -1770.9053955078, 20.99829864502, 0, 0, 0);
	CreateDynamicObject(9833, 1468.9636230469, -1770.5782470703, 20.99829864502, 0, 0, 0);
	CreateDynamicObject(1231, 1500.296875, -1738.0168457031, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1492.4840087891, -1738.0720214844, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1484.1663818359, -1737.9301757813, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1478.0805664063, -1737.9915771484, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1470.0018310547, -1737.876953125, 15.566337585449, 0, 0, 0);
	CreateDynamicObject(1231, 1461.9914550781, -1737.8666992188, 15.277267456055, 0, 0, 4);
	CreateDynamicObject(1231, 1458.8117675781, -1746.0847167969, 15.277267456055, 0, 0, 267.9990234375);
	CreateDynamicObject(1231, 1503.5317382813, -1746.1330566406, 15.277267456055, 0, 0, 267.99499511719);
	CreateDynamicObject(640, 1487.9533691406, -1738.2028808594, 13.243908882141, 0, 0, 90);
	CreateDynamicObject(640, 1496.5682373047, -1738.3298339844, 13.243908882141, 0, 0, 90);
	CreateDynamicObject(640, 1473.9731445313, -1738.1943359375, 13.243908882141, 0, 0, 90);
	CreateDynamicObject(640, 1466.0673828125, -1738.0607910156, 13.243908882141, 0, 0, 90);*/



//BundeswehrBase Normale Objecte

	CreateDynamicObject(3749, 2473.3999023438, -2270.3999023438, 29.89999961853, 0, 0, 44);
	CreateDynamicObject(3749, 2366.6000976563, -2382.5, 18.200000762939, 0, 0, 43.9892578125);
	CreateDynamicObject(8355, 2701.8000488281, -2634.1000976563, 1.2000000476837, 0, 0, 180);
	CreateDynamicObject(8355, 2702.1000976563, -2771.3999023438, 1.2999999523163, 0, 0, 179.99450683594);
	CreateDynamicObject(8355, 2616.6000976563, -2640.6999511719, 1.2999999523163, 0, 0, 179.99450683594);
	CreateDynamicObject(5004, 2689.1000976563, -2672.8000488281, 0.89999997615814, 0, 0, 270);
	CreateDynamicObject(3491, 2631.1999511719, -2608.3000488281, 9.6999998092651, 0, 0, 90);
	CreateDynamicObject(16098, 2733, -2612.3999023438, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(3491, 2631.3000488281, -2677.3000488281, 9.8000001907349, 0, 0, 89.994506835938);
	CreateDynamicObject(8355, 2702.3999023438, -2908.1999511719, 1.2999999523163, 0, 0, 179.98901367188);
	CreateDynamicObject(5004, 2662.3000488281, -2841.3000488281, 1, 0, 0, 270);
	CreateDynamicObject(7153, 2640.8000488281, -2812.6000976563, -1.8999999761581, 0, 0, 0);
	CreateDynamicObject(7153, 2641.3000488281, -2774, -1.8999999761581, 0, 0, 0);
	CreateDynamicObject(7153, 2727.1999511719, -2643.6999511719, -2.0999999046326, 0, 0, 180);
	CreateDynamicObject(7153, 2728.8000488281, -2675, -2.7999999523163, 0, 0, 179.99450683594);
	CreateDynamicObject(4844, 2769.8000488281, -2595.8999023438, -10.10000038147, 0, 0, 90);
	CreateDynamicObject(4844, 2756.8999023438, -2765.3999023438, -10.10000038147, 0, 0, 89.994506835938);
	CreateDynamicObject(1682, 2734, -2956.1999511719, 7.3000001907349, 0, 0, 0);
	CreateDynamicObject(1682, 2670, -2951.1000976563, 7.6999998092651, 0, 0, 0);
	CreateDynamicObject(3749, 2301.5, -2663.3999023438, 18.39999961853, 0, 0, 89.9892578125);
/*
	Bundeswehrtor1 = 	CreateObject(980, 2473.3999023438, -2270.3999023438, 26.799999237061, 0, 0, 44);
	Bundeswehrtor2 =  CreateObject(980, 2366.6999511719, -2382.6000976563, 15.199999809265, 0, 0, 43.9892578125);
	Bundeswehrtor3 =	CreateObject(980, 2301.5, -2663.3999023438, 15.300000190735, 0, 0, 90);*/

//LSPD Wasserwacht
	CreateDynamicObject(9245, 1022.3041381836, -2021.9006347656, 23.688447952271, 0, 0, 172.60034179688);
	  CreateDynamicObject(966, 1033.6019287109, -2012.0004882813, 12.09588432312, 0, 0, 264.31530761719);
	  CreateDynamicObject(3378, 1031.2286376953, -2006.0333251953, 10.933077812195, 0, 0, 354.04504394531);
	  CreateDynamicObject(3378, 1025.6058349609, -2005.4897460938, 10.933104515076, 0, 0, 354.03991699219);
	  CreateDynamicObject(3378, 1019.94921875, -2004.9541015625, 10.913676261902, 0, 0, 354.03991699219);
	  CreateDynamicObject(3378, 1017.1995239258, -2004.7529296875, 10.912369728088, 0, 0, 354.03991699219);
	  CreateDynamicObject(968, 1033.6282958984, -2011.9787597656, 13.045881271362, 0.75, 0, 262.81530761719);
	  CreateDynamicObject(1412, 1033.2266845703, -2014.8568115234, 13.362104415894, 0, 0, 263.03515625);
	  CreateDynamicObject(1412, 1034.9404296875, -1997.7565917969, 13.387928009033, 0, 0, 265.30029296875);
	  CreateDynamicObject(1412, 1034.5177001953, -2002.7115478516, 13.387928009033, 0, 0, 265.02026367188);
	  CreateDynamicObject(1412, 1032.5268554688, -1994.8337402344, 13.387928009033, 0, 0, 355);
	  CreateDynamicObject(1412, 1027.3404541016, -1994.3735351563, 13.387954711914, 0, 0, 354.99572753906);
	  CreateDynamicObject(1412, 1022.1094360352, -1993.9234619141, 13.36852645874, 0, 0, 354.99572753906);
	  CreateDynamicObject(1412, 1018.4602661133, -1993.5740966797, 13.367219924927, 0, 0, 355.25);
	  CreateDynamicObject(1412, 1015.3472290039, -1995.9760742188, 13.367219924927, 0, 0, 264.03527832031);
	  CreateDynamicObject(1412, 1014.836730957, -2001.1529541016, 13.367219924927, 0, 0, 264.03442382813);
	  CreateDynamicObject(1412, 1014.2769165039, -2006.3375244141, 13.367219924927, 0, 0, 264.03442382813);
	  CreateDynamicObject(1412, 1013.9123535156, -2009.7922363281, 13.367219924927, 0, 0, 264.05029296875);
	  CreateDynamicObject(3361, 1022.0664672852, -2013.009765625, 14.468494415283, 0, 0, 83.47998046875);
	  CreateDynamicObject(17068, 1003.064453125, -2012.7294921875, 8.5774869918823, 17.792358398438, 0.2471923828125, 265.2978515625);
	  CreateDynamicObject(17068, 984.19189453125, -2010.474609375, 3.1206665039063, 14.5, 0, 261.55029296875);
	  CreateDynamicObject(17068, 951.57885742188, -1991.5322265625, 0.10000000149012, 0, 0, 350.06640625);
	  CreateDynamicObject(17068, 947.13513183594, -2018.0886230469, 0.10000000149012, 0, 0, 352.05139160156);
	  CreateDynamicObject(3934, 1026.1019287109, -2022.5627441406, 17.071260452271, 0, 0, 354.04479980469);
	  CreateDynamicObject(17068, 933.44879150391, -1988.8365478516, 0.69999998807907, 0, 0, 352.05139160156);
	  CreateDynamicObject(17068, 929.64605712891, -2014.9904785156, 0.63899999856949, 0, 0, 352.05688476563);
	  CreateDynamicObject(3666, 971.97113037109, -1985.6702880859, 1.0913163423538, 0, 0, 0);
	  CreateDynamicObject(3666, 956.01239013672, -1982.9392089844, 1.0840451717377, 0, 0, 0);
	  CreateDynamicObject(3526, 1022.5034179688, -2018.9211425781, 17.139678955078, 0, 0, 81.384521484375);
	  CreateDynamicObject(3526, 1029.3680419922, -2026.34375, 17.139678955078, 0, 0, 262.73571777344);
	  CreateDynamicObject(3526, 1021.8428955078, -2025.4527587891, 17.124380111694, 0, 0, 266.70227050781);
	  CreateDynamicObject(3526, 1030.1391601563, -2019.7099609375, 17.139678955078, 0, 0, 81.381225585938);
	  CreateDynamicObject(12990, 957.36083984375, -2006.0676269531, 0.25622940063477, 0, 0, 260.75073242188);
	  CreateDynamicObject(12990, 930.26782226563, -2001.6232910156, 0.65622937679291, 0, 0, 260.74951171875);
	  CreateDynamicObject(17068, 918.46813964844, -1986.4399414063, 0.80000001192093, 0, 0, 352.05139160156);
	  CreateDynamicObject(17068, 914.44421386719, -2012.8171386719, 0.10000000149012, 0, 0, 352.05688476563);

//MEDICS

      ziviltor = CreateObject(978, 2095.3999023438, -1445.6999511719, 23.700000762939, 0, 0, 270);
	  ziviltor2 = CreateObject(978, 2002.0999755859, -1358.5999755859, 23.5, 0, 0, 0);
      Medictor = CreateObject(980, 1997.1999511719, -1445, 15.300000190735, 0, 0, 88);
	  Medictor2 = CreateObject(980, 2002.9000244141, -1450.6999511719, 15.300000190735, 0, 0, 179.99499511719);
	  



//San Andreas Präsidenten

	PTor =   CreateObject(980, 1285.7044677734, -2056.2905273438, 60.493286132813, 0, 0, 268.69067382813);

	CreateDynamicObject(3749, 1285.3000488281, -2056.3999023438, 63.599998474121, 0, 0, 90);
	CreateDynamicObject(982, 1283.5, -2033.5999755859, 58.599998474121, 0, 0, 0);
	CreateDynamicObject(982, 1268.9000244141, -2002.6999511719, 59, 2, 0, 90);
	CreateDynamicObject(982, 1243.3000488281, -2002.6999511719, 59.799999237061, 2, 0, 89.994995117188);
	CreateDynamicObject(984, 1283.6999511719, -2014.4000244141, 58.5, 0, 0, 0);
	CreateDynamicObject(984, 1276.9000244141, -2046.6999511719, 58.900001525879, 0, 0, 270);
	CreateDynamicObject(984, 1249.5, -2045.6999511719, 59.599998474121, 0, 0, 270);
	CreateDynamicObject(982, 1270.4000244141, -2065.6999511719, 59, 2, 0, 88);
	CreateDynamicObject(982, 1249.5999755859, -2065, 59.599998474121, 1.99951171875, 0, 87.994995117188);

//Mozzo's Villa (Präsi Villa eingang
	  CreateDynamicObject(10829,1434.19860840,-1896.67187500,12.74899292,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(10829,1418.77282715,-1896.69030762,12.86988831,0.00000000,0.00000000,180.00000000);
	  leo1 = CreateObject(969,1426.56945801,-1901.34228516,12.76267624,0.00000000,0.00000000,0.00000000);
	  leo2 = CreateObject(969,1426.33483887,-1901.32604980,12.75741196,0.00000000,0.00000000,180.00000000);
	  CreateDynamicObject(638,1420.66711426,-1890.57885742,13.42064190,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(638,1420.69238281,-1887.02539062,13.32005787,0.00000000,0.00000000,359.50000000);
	  CreateDynamicObject(638,1432.17822266,-1888.34289551,13.35925388,0.00000000,0.00000000,359.49462891);
	  CreateDynamicObject(638,1432.12902832,-1883.93859863,13.26969624,0.00000000,0.00000000,359.24462891);
	  CreateDynamicObject(638,1420.64794922,-1883.62243652,13.26514149,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1421.68200684,-1900.70849609,13.26118469,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1431.40734863,-1900.70495605,13.26834297,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1421.13452148,-1891.83447266,13.32934570,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1431.69506836,-1891.83056641,13.33467674,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1421.67175293,-1901.79296875,13.27256966,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(1215,1431.39953613,-1902.02563477,13.28334427,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(3666,1432.00378418,-1900.60510254,15.99877930,0.00000000,270.25024414,0.00000000);
	  CreateDynamicObject(3666,1431.40734863,-1900.70495605,13.21834373,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(3666,1421.69799805,-1900.69653320,13.22925472,0.00000000,0.00000000,0.00000000);

//OAmt
	  CreateDynamicObject(971, 924.214294, -1224.909790, 16.021503, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(971, 924.175110, -1224.971680, 23.121490, 0.0000, 179.5181, 89.1405);
	  CreateDynamicObject(971, 924.185730, -1233.726318, 16.006943, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(971, 924.216309, -1227.161255, 23.127350, 0.0000, 179.5181, 89.1405);
	  CreateDynamicObject(3462, 926.401428, -1224.801270, 17.482027, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(1238, 926.065796, -1223.157471, 16.291216, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1238, 925.134216, -1221.667236, 16.295637, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1238, 926.144043, -1226.190674, 16.289129, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1238, 925.218872, -1227.566040, 16.289129, 0.0000, 0.0000, 0.0000);
//O-Amt
	  CreateDynamicObject(12950, 878.85943603516, -1263.9136962891, 14.028175354004, 0, 0, 183.33630371094);
	  CreateDynamicObject(12950, 879.24761962891, -1270.3598632813, 18.711246490479, 0, 0, 181.34936523438);

//O-amt Mauer
	  CreateDynamicObject(990, 2540.674316, -2071.285645, 17.398710, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.692139, -2081.197754, 17.407009, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.724121, -2091.178467, 17.389473, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.823730, -2101.209473, 17.420303, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.861816, -2107.623779, 17.396448, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.611084, -2129.322998, 17.357006, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.624512, -2139.266113, 17.393982, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(990, 2540.635986, -2126.693604, 17.338097, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(993, 2541.235596, -2117.069092, 14.153420, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(993, 2541.258057, -2117.068848, 16.503422, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(990, 2540.805908, -2117.481201, 17.424765, 0.0000, 0.0000, 268.2811);


//******************************************************************************

//********************************Normale Fraktionen***********************************

//Fahrschule
	CreateDynamicObject(984, 770.79998779297, -1419.5, 13.199999809265, 0, 0, 270);
	CreateDynamicObject(8613, 708, -1462.9000244141, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(3934, 726, -1462.4000244141, 21.200000762939, 0, 0, 270);
	CreateDynamicObject(966, 711.40002441406, -1416.9000244141, 12.5, 0, 0, 0);
	CreateDynamicObject(984, 776.29998779297, -1441.5, 13.199999809265, 0, 0, 177.99450683594);


//NR BASE
	CreateDynamicObject(9833, 1658.8088378906, -1708.07421875, 21.936918258667, 0, 0, 0);
	CreateDynamicObject(1361, 1658.5294189453, -1709.8642578125, 20.227718353271, 0, 0, 0);
	CreateDynamicObject(1361, 1660.8101806641, -1707.5581054688, 20.220542907715, 0, 0, 0);
	CreateDynamicObject(1361, 1658.6071777344, -1706.9769287109, 20.227718353271, 0, 0, 0);
	CreateDynamicObject(1215, 1659.4200439453, -1708.5119628906, 20.048698425293, 0, 0, 0);
	CreateDynamicObject(1215, 1651.4058837891, -1655.4010009766, 22.079948425293, 0, 0, 0);
	CreateDynamicObject(1215, 1656.7255859375, -1655.5129394531, 22.079948425293, 0, 0, 0);
	CreateDynamicObject(1215, 1638.5888671875, -1709.8605957031, 12.870270729065, 0, 0, 0);
	CreateDynamicObject(1215, 1634.1494140625, -1714.4959716797, 12.861198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1643.6572265625, -1718.3516845703, 15.177978515625, 0, 0, 0);
	CreateDynamicObject(1215, 1643.6326904297, -1711.5255126953, 15.179391860962, 0, 0, 0);
	CreateDynamicObject(1215, 1642.9670410156, -1699.6286621094, 15.146172523499, 0, 0, 0);
	CreateDynamicObject(1215, 1642.9533691406, -1693.5815429688, 15.114974975586, 0, 0, 0);
	CreateDynamicObject(1215, 1642.8791503906, -1717.9881591797, 20.052062988281, 0, 0, 0);
	CreateDynamicObject(1215, 1642.8610839844, -1711.76171875, 20.041522979736, 0, 0, 0);
	CreateDynamicObject(1231, 1672.4696044922, -1693.8986816406, 22.209480285645, 0, 0, 0);
	CreateDynamicObject(1231, 1645.6854248047, -1693.5103759766, 22.175277709961, 0, 0, 0);
	CreateDynamicObject(1231, 1644.1737060547, -1720.9373779297, 22.207592010498, 0, 0, 0);
	CreateDynamicObject(1231, 1672.2110595703, -1720.3974609375, 22.214767456055, 0, 0, 0);
//*********************************************************************************************
//************************************Gang Bases************************************************
//Ballas
	CreateDynamicObject(638,2801.96679688,-1190.11914062,25.20410538,0.00000000,0.00000000,358.00000000); //object(kb_planter_bush) (1)
	CreateDynamicObject(638,2802.32714844,-1177.84765625,25.24060440,0.00000000,0.00000000,357.99499512); //object(kb_planter_bush) (2)
	CreateDynamicObject(638,2802.25488281,-1180.97949219,25.22931099,0.00000000,0.00000000,357.99499512); //object(kb_planter_bush) (3)
	CreateDynamicObject(638,2802.10156250,-1184.00000000,25.21953583,0.00000000,0.00000000,357.99499512); //object(kb_planter_bush) (4)
	CreateDynamicObject(638,2830.75610352,-1204.92016602,24.12745667,0.00000000,0.00000000,272.73950195); //object(kb_planter_bush) (5)
	CreateDynamicObject(638,2802.44091797,-1174.70007324,25.25934982,0.00000000,0.00000000,357.99499512); //object(kb_planter_bush) (6)
	CreateDynamicObject(646,2806.57714844,-1176.26062012,25.84306908,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (2)
	CreateDynamicObject(646,2809.35351562,-1176.26977539,25.75416756,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (3)
	CreateDynamicObject(3471,2829.26489258,-1162.81469727,25.24328995,0.00000000,0.00000000,4.00000000); //object(vgschinalion1) (1)
	CreateDynamicObject(3471,2831.44824219,-1193.10351562,24.93947411,0.00000000,0.00000000,7.99804688); //object(vgschinalion1) (2)
	CreateDynamicObject(638,2802.05761719,-1187.10253906,25.20798492,0.00000000,0.00000000,357.98950195); //object(kb_planter_bush) (5)
	CreateDynamicObject(638,2827.07226562,-1204.94824219,24.61380386,0.00000000,0.00000000,272.73559570); //object(kb_planter_bush) (5)
	CreateDynamicObject(638,2826.51489258,-1162.68811035,24.93692970,0.00000000,0.00000000,269.48559570); //object(kb_planter_bush) (5)
	CreateDynamicObject(3594,2830.89379883,-1213.08178711,24.26021957,0.00000000,0.00000000,180.00000000); //object(la_fuckcar1) (1)
//Aztecas

	CreateDynamicObject(2001,2787.17138672,-1924.80163574,12.54687500,0.00000000,0.00000000,0.00000000); //object(nu_plant_ofc) (1)
	CreateDynamicObject(2001,2787.24414062,-1927.43200684,12.54687500,0.00000000,0.00000000,0.00000000); //object(nu_plant_ofc) (2)
	CreateDynamicObject(3593,2729.10449219,-1969.99243164,13.25704288,0.00000000,0.00000000,70.00000000); //object(la_fuckcar2) (1)
	CreateDynamicObject(3594,2731.55859375,-1914.12072754,13.17054081,0.00000000,0.00000000,30.00000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(3461,2779.54345703,-1926.69091797,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,2779.68945312,-1922.38635254,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(2057,2787.38134766,-1928.89465332,12.71732903,0.00000000,0.00000000,313.50000000); //object(flame_tins) (1)

//***********************************Mafien Bases************************************************
//Rifa
	CreateDynamicObject(638,2188.75146500,-2249.72534200,14.44929600,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2186.59741200,-2247.74218800,14.47232400,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2185.99853500,-2256.57446300,14.47047100,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(638,2185.37793000,-2252.98803700,14.46703800,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2183.53320300,-2250.94580100,14.47187000,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2179.39038100,-2263.03515600,14.47047100,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(638,2176.82812500,-2260.40087900,14.47047100,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(638,2187.34252900,-2308.45434600,14.46169400,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2191.08862300,-2304.77807600,14.46169400,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2194.74560500,-2301.32128900,14.46170300,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2198.58960000,-2297.59106400,14.46170300,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(638,2202.13916000,-2294.16455100,14.46170300,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(1215,2178.07763700,-2261.74804700,14.33776100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2184.26025400,-2254.56713900,14.33432800,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2187.12841800,-2251.34936500,14.32227900,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2185.03540000,-2249.34472700,14.33935400,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1223,2200.52539100,-2295.80029300,13.75245500,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(1223,2196.80908200,-2299.08007800,13.75245500,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(1223,2192.88647500,-2303.12744100,13.75244500,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(1223,2189.18798800,-2306.99804700,13.75244500,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(640,2176.84619100,-2264.24560500,13.07555300,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(640,2171.07592800,-2271.06591800,13.08452800,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(640,2163.61181600,-2278.33886700,13.08289500,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(638,2150.89624000,-2290.71142600,13.06736700,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(638,2154.93115200,-2286.60278300,13.06820300,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(3666,2149.35522500,-2289.15356400,12.88145300,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3666,2153.30004900,-2285.06762700,12.85678700,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(970,2186.27710000,-2255.77734400,14.27232700,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(970,2186.25415000,-2252.83422900,14.25796500,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(970,2188.78637700,-2250.25244100,14.25144600,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(970,2177.55029300,-2264.17773400,14.32491900,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(970,2174.55078100,-2261.23168900,14.27492000,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(970,2180.19921900,-2261.49145500,14.30632700,0.00000000,0.00000000,314.99990000); //
	CreateDynamicObject(1508,2178.32153300,-2254.72338900,15.42831400,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(16500,2178.88696300,-2254.07592800,19.06612600,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(16500,2177.26416000,-2255.67871100,19.08244900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(16500,2174.29052700,-2258.62011700,15.76764700,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(2816,2122.38989300,-2274.65161100,20.48942400,0.00000000,0.00000000,67.50000000); //
	CreateDynamicObject(2142,2118.70459000,-2272.23901400,19.67083700,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(2142,2119.68090800,-2271.28271500,19.67083700,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(2142,2134.82397500,-2281.33960000,19.67083700,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(2142,2133.89526400,-2282.27197300,19.67083700,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(2142,2132.93139600,-2283.25683600,19.67083700,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(2142,2131.94897500,-2284.22705100,19.67083700,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(1517,2134.13769500,-2281.86303700,20.92384900,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(1517,2133.75073200,-2282.20996100,20.92384900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(1517,2133.35522500,-2282.61889600,20.92384900,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(1517,2132.81835900,-2283.07739300,20.92384900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(1517,2132.28149400,-2283.55395500,20.92384900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(1517,2131.58081100,-2284.31030300,20.92384900,0.00000000,0.00000000,303.75000000); //
	CreateDynamicObject(1829,2134.32080100,-2281.15283200,21.16572400,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(2036,2128.58374000,-2275.84912100,20.52335200,0.00000000,0.00000000,258.75000000); //
	CreateDynamicObject(2035,2127.92187500,-2276.36035200,20.51386300,0.00000000,0.00000000,22.50000000); //
	CreateDynamicObject(2047,2134.58691400,-2281.86547900,22.75500300,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(2047,2132.50683600,-2284.01977500,22.87861100,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(1225,2163.10693400,-2235.12158200,12.69894900,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2149.79736300,-2251.93310500,12.39440000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2161.93847700,-2259.09472700,12.70751100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2154.82739300,-2254.53466800,15.08969300,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2153.79980500,-2252.69604500,15.08188100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2154.58007800,-2253.40600600,14.96837600,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1225,2158.76586900,-2232.65576200,12.71434900,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1791,2118.84350600,-2272.07080100,20.72295800,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(1495,2118.56079100,-2274.20752000,19.66571800,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3749,2235.12573200,-2214.53344700,18.40528900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3095,2183.41381800,-2268.57690400,20.02474600,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2177.04809600,-2262.21923800,20.10478400,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2177.08837900,-2274.91333000,20.02589000,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2170.77343800,-2268.55835000,20.10267100,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2170.80883800,-2281.18481400,20.04494900,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2164.44506800,-2274.89917000,20.11307300,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2158.35546900,-2281.11181600,20.09635500,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2164.54174800,-2287.43994100,20.03135100,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2160.44799800,-2291.53442400,19.97404700,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(3095,2154.26342800,-2285.26001000,20.07395200,0.00000000,180.48200000,315.00000000); //
	CreateDynamicObject(5821,2167.98559600,-2292.69726600,15.98921800,0.00000000,0.00000000,132.42170000); //
	CreateDynamicObject(3934,2178.01806600,-2265.84936500,20.08350000,0.00000000,0.85940000,315.00000000); //
	CreateDynamicObject(3934,2158.74218800,-2286.09692400,20.09303700,0.00000000,0.85940000,315.00000000); //
	CreateDynamicObject(3934,2168.22241200,-2276.27465800,20.11776700,0.00000000,0.85940000,315.00000000); //
	CreateDynamicObject(3850,2178.65405300,-2257.66772500,20.66484800,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(3850,2181.06201200,-2260.09228500,20.63610500,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(3850,2183.46997100,-2262.54052700,20.60285900,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(3850,2185.87475600,-2264.99169900,20.57397500,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(3850,2188.27856400,-2267.42724600,20.54519300,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(3850,2188.24145500,-2269.82617200,20.53114300,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2185.77441400,-2272.27710000,20.53123900,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2183.33447300,-2274.70874000,20.53128800,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2180.87866200,-2277.14697300,20.53260000,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2178.45752000,-2279.55737300,20.53236800,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2176.01538100,-2281.99487300,20.55170400,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2173.55688500,-2284.43750000,20.55179600,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2171.13574200,-2286.85937500,20.55179200,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2166.73901400,-2291.28955100,20.53792600,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2164.31103500,-2293.72607400,20.51075700,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2161.88842800,-2296.17260700,20.51061200,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(3850,2159.44140600,-2296.22290000,20.49469000,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(3850,2157.02832000,-2293.76977500,20.52363600,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(3850,2154.64917000,-2291.32666000,20.55231900,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(3850,2152.24487300,-2288.86547900,20.60705600,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(3850,2149.91235400,-2286.45996100,20.63523900,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(640,2150.90771500,-2287.06933600,20.77681700,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(640,2156.49902300,-2292.82006800,20.68355600,0.00000000,0.00000000,45.00000000); //
	CreateDynamicObject(640,2158.45092800,-2275.71264600,20.82157100,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(640,2168.53466800,-2265.80102500,20.82605600,0.00000000,0.00000000,315.00000000); //
	CreateDynamicObject(640,2164.88867200,-2292.52148400,20.69272800,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(640,2172.72705100,-2284.71289100,20.70621900,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(640,2178.67504900,-2278.82299800,20.68686500,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(640,2184.66210900,-2272.71948200,20.68634600,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(640,2185.21899400,-2264.84521500,20.72987200,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(640,2178.86010700,-2258.61669900,20.80910100,0.00000000,0.00000000,225.00000000); //
	CreateDynamicObject(1215,2160.70825200,-2296.20947300,20.50564800,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2154.04516600,-2290.17578100,20.60696800,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2155.80273400,-2278.72363300,20.68670300,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2161.18774400,-2273.09814500,20.70412100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2165.93920900,-2268.70556600,20.69150700,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2171.13134800,-2263.28784200,20.69285200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2181.90893600,-2261.57153300,20.64068000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2188.20214800,-2268.77807600,20.55602500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2181.53051800,-2275.72192400,20.55561400,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1215,2175.64794900,-2281.76586900,20.57366600,0.00000000,0.00000000,0.00000000); //

	rifastor =  CreateObject(980, 2234.3999023438, -2215.6000976563, 15.300000190735, 0, 0, 315);

//Fuegos
	CreateDynamicObject(987, -2095.8383789063, -115.6976776123, 40.737964630127, 0, 0, 90.25);
	CreateDynamicObject(987, -2095.9877929688, -103.71340179443, 40.737964630127, 0, 0, 90.25);
	CreateDynamicObject(987, -2096.0375976563, -92.188125610352, 40.737964630127, 0, 0, 91.247192382813);
	CreateDynamicObject(987, -2095.8334960938, -127.51152038574, 40.737964630127, 0, 0, 90.247192382813);
	CreateDynamicObject(5822, -2098.3237304688, -176.18788146973, 40.569755554199, 0, 0, 274);
	CreateDynamicObject(8841, -2124.6489257813, -132.51913452148, 37.646553039551, 0, 0, 270);
	CreateDynamicObject(2934, -2107.783203125, -83.113868713379, 35.779262542725, 0, 0, 270);
	CreateDynamicObject(2934, -2113.7336425781, -83.111236572266, 35.779262542725, 0, 0, 270);
	CreateDynamicObject(2934, -2107.7333984375, -82.854820251465, 38.684597015381, 0, 0, 270);
	CreateDynamicObject(2934, -2100.7834472656, -83.091186523438, 35.779262542725, 0, 0, 270);
	CreateDynamicObject(2934, -2113.5700683594, -82.961280822754, 38.684597015381, 0, 0, 270);
	CreateDynamicObject(2934, -2100.7709960938, -82.902793884277, 38.684597015381, 0, 0, 270);
	CreateDynamicObject(3934, -2105.2001953125, -187.00361633301, 45.28125, 0, 0, 90.5);
	CreateDynamicObject(3934, -2119.2336425781, -187.12031555176, 45.28125, 0, 0, 90.499877929688);
	CreateDynamicObject(3528, -2127.0649414063, -79.480224609375, 42.607135772705, 0, 0, 88);
	CreateDynamicObject(3749, -2127.3588867188, -82.80004119873, 40.178726196289, 0, 0, 0);
	CreateDynamicObject(2934, -2113.6606445313, -86.036659240723, 35.772232055664, 0, 0, 270);
	CreateDynamicObject(2934, -2106.5261230469, -86.033386230469, 35.779262542725, 0, 0, 270);
	CreateDynamicObject(2934, -2099.4411621094, -86.134155273438, 35.779262542725, 0, 0, 270);
	CreateDynamicObject(12950, -2113.7443847656, -82.755210876465, 40.719203948975, 0, 0, 90);
	CreateDynamicObject(12950, -2141.4123535156, -82.83088684082, 41.527885437012, 0, 0, 270);
	CreateDynamicObject(10841, -2182.3151855469, -226.98332214355, 30.765697479248, 0, 268.75012207031, 180);
	CreateDynamicObject(2395, -2175.0424804688, -209.30583190918, 34.195304870605, 300, 0, 90);
	CreateDynamicObject(2395, -2175.0288085938, -213.02229309082, 34.195304870605, 299.99816894531, 0, 90);
	CreateDynamicObject(17951, -2180.4226074219, -218.0710144043, 37.971904754639, 0, 0, 0);
	CreateDynamicObject(1508, -2161.6184082031, -225.59487915039, 37.124645233154, 0, 0, 90);
	CreateDynamicObject(3471, -2121.6254882813, -79.073822021484, 35.344837188721, 0, 0, 90);
	CreateDynamicObject(3471, -2132.8305664063, -79.260597229004, 35.344837188721, 0, 0, 90);
	CreateDynamicObject(2934, -2143.109375, -98.559959411621, 35.772232055664, 0, 0, 270);

	//Fuegosnotfall = CreateDynamicObject(972, -2140.5568847656, -71.634223937988, 24.171875, 0, 0, 0);
	//Fuegosnotfall2 = CreateDynamicObject(972, -2106.3688964844, -70.095481872559, 24.171875, 0, 0, 0);
	Fuegostor = CreateObject(980, -2127.0151367188, -80.848670959473, 37.093704223633, 0, 0, 0);
	Fuegosleadertor = 	CreateObject(10182, -2180.8002929688, -209.67846679688, 37.223052978516, 0, 0, 0);
	Fuegossperre = CreateObject(984, -2145.6791992188, -127.64067840576, 34.6669921875, 0, 0, 270);

//Brigada
	CreateDynamicObject(987, 2425.2749023438, -2095.3989257813, 12.546875, 0, 0, 358);
	CreateDynamicObject(3749, 2422.9987792969, -2089.4331054688, 18.37181854248, 0, 0, 271);
	CreateDynamicObject(987, 2436.9733886719, -2084.2062988281, 12.733690261841, 0, 0, 178);
	CreateDynamicObject(5822, 2441.4621582031, -2100.2331542969, 19.371425628662, 0, 0, 6);
	CreateDynamicObject(3934, 2509.9426269531, -2121.5151367188, 26.321130752563, 0, 0, 0);
	CreateDynamicObject(3934, 2491.7143554688, -2121.5046386719, 26.320304870605, 0, 0, 0);

	rtor =	CreateObject(980, 2422.7316894531, -2089.4899902344, 15.257606506348, 0, 0, 270);
	rtor2 = CreateObject(980, 2437.0563964844, -2089.9692382813, 15.320266723633, 0, 0, 270);

//YAKUZA
	CreateDynamicObject(3749,-2803.01367188,-329.80957031,11.89747715,0.00000000,0.00000000,84.99572754); //object(clubgate01_lax) (1)
	CreateDynamicObject(4100,-2803.51757812,-314.64941406,7.88916969,0.00000000,0.00000000,45.49987793); //object(meshfence1_lan) (1)
	CreateDynamicObject(4100,-2806.36425781,-344.09179688,7.88916969,0.00000000,0.00000000,42.49511719); //object(meshfence1_lan) (2)
	CreateDynamicObject(4100,-2671.10424805,-220.59478760,5.04471207,0.00000000,0.00000000,320.00000000); //object(meshfence1_lan) (3)
	CreateDynamicObject(3749,-2655.48730469,-222.38574219,9.13244820,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(4100,-2641.25024414,-220.47813416,5.04299927,0.00000000,0.00000000,321.99829102); //object(meshfence1_lan) (4)
	CreateDynamicObject(3525,-2718.60083008,-312.32562256,8.35556793,0.00000000,0.00000000,225.00000000); //object(exbrtorch01) (1)
	CreateDynamicObject(3525,-2726.24780273,-319.89517212,8.35556793,0.00000000,0.00000000,225.00000000); //object(exbrtorch01) (3)
	CreateDynamicObject(3461,-2750.82080078,-313.51513672,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,-2774.94604492,-316.13870239,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(3461,-2728.67651367,-293.68167114,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(3461,-2782.68701172,-278.25140381,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (5)
	CreateDynamicObject(3461,-2748.62524414,-278.29064941,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (6)
	CreateDynamicObject(3461,-2720.46948242,-286.14544678,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (7)
	CreateDynamicObject(3928,-2612.42919922,-243.97673035,18.37186432,0.00000000,0.00000000,20.00000000); //object(helipad) (1)
	CreateDynamicObject(3928,-2611.51000977,-306.51480103,22.22980499,0.00000000,0.00000000,350.00000000); //object(helipad) (2)
	CreateDynamicObject(3461,-2619.30493164,-312.82156372,23.27027702,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(3461,-2616.71362305,-297.59454346,23.26943779,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (8)
	CreateDynamicObject(3461,-2603.34472656,-300.64553833,23.74020958,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (9)
	CreateDynamicObject(3461,-2605.68530273,-315.63961792,23.89440918,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (10)
	CreateDynamicObject(3461,-2616.98901367,-253.42684937,19.59257126,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (11)
	CreateDynamicObject(3461,-2622.41528320,-240.36135864,19.23400497,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (12)
	CreateDynamicObject(3461,-2607.93164062,-235.14263916,19.64953804,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (13)
	CreateDynamicObject(3461,-2602.86206055,-248.06858826,19.80954742,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (14)
	CreateDynamicObject(983,-2657.84277344,-275.75488281,7.17394447,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (1)
	CreateDynamicObject(983,-2665.82128906,-283.76855469,6.99922085,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (2)
	CreateDynamicObject(984,-2663.59570312,-290.56927490,6.99922085,0.00000000,0.00000000,45.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,-2656.79882812,-297.37402344,6.98573303,0.00000000,0.00000000,44.98901367); //object(fenceshit2) (2)
	CreateDynamicObject(984,-2651.10620117,-278.03598022,7.07627487,0.00000000,0.00000000,44.99450684); //object(fenceshit2) (3)
	CreateDynamicObject(984,-2644.33496094,-284.83203125,7.07654762,0.00000000,0.00000000,44.98901367); //object(fenceshit2) (5)
	CreateDynamicObject(3461,-2663.52832031,-281.56231689,8.11407375,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (15)
	CreateDynamicObject(3461,-2660.09570312,-278.02246094,8.10886765,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (16)
	CreateDynamicObject(3461,-2644.36621094,-293.91204834,8.11636448,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (17)
	CreateDynamicObject(3461,-2647.72460938,-297.38757324,8.11407375,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (18)
	CreateDynamicObject(3524,-2663.18359375,-219.27023315,3.97127771,0.00000000,0.00000000,180.00000000); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,-2647.39843750,-219.56164551,3.97127771,0.00000000,0.00000000,179.99450684); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(3524,-2806.85083008,-337.17492676,6.97127771,0.00000000,0.00000000,270.00000000); //object(skullpillar01_lvs) (3)
	CreateDynamicObject(3524,-2805.17285156,-321.65429688,6.97127771,0.00000000,0.00000000,270.00000000); //object(skullpillar01_lvs) (4)
	CreateDynamicObject(1360,-2716.44653320,-311.30166626,6.95088291,0.00000000,0.00000000,315.00000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,-2727.13427734,-321.96337891,6.95481491,0.00000000,0.00000000,314.99450684); //object(cj_bush_prop3) (2)
	CreateDynamicObject(3525,1966.87866211,1061.54797363,995.51141357,0.00000000,0.00000000,332.00000000); //object(exbrtorch01) (2)
	CreateDynamicObject(3525,1960.64404297,1064.80249023,995.51141357,0.00000000,0.00000000,331.99584961); //object(exbrtorch01) (4)
	CreateDynamicObject(983,-2650.01293945,-299.65155029,6.98573303,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (2)
	CreateDynamicObject(983,-2642.07397461,-291.60742188,7.07654762,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (1)

	yaktor =	CreateObject(980,-2803.43945312,-329.79394531,8.81245422,0.00000000,0.00000000,85.49011230); //Tor 1 Zu
	yaktor2 =  	CreateObject(980,-2655.51562500,-222.05761719,6.05807400,0.00000000,0.00000000,0.00000000); //Tor 2 Zu

	fbitor = CreateObject(980, 1729.8000488281, -1141.5, 25.89999961853, 0, 0, 179.49993896484);//Feuerwehr tor

//Red Soldiers
	CreateDynamicObject(3749,1272.36816406,-1651.88769531,18.40528870,0.00000000,0.00000000,269.99951172); //object(clubgate01_lax) (1)
	CreateDynamicObject(3749,1283.64550781,-1652.15600586,18.40528870,0.00000000,0.00000000,269.99450684); //object(clubgate01_lax) (2)
	RS1 = CreateObject(980,1283.94921875,-1652.19042969,15.32026672,0.00000000,0.00000000,270.00000000); //object(airportgate) (1)
	CreateDynamicObject(8613,1263.10400391,-1626.71264648,30.74642181,0.00000000,0.00000000,91.99951172); //object(vgssstairs03_lvs) (1)
	CreateDynamicObject(4874,1246.13183594,-1664.05273438,37.66331863,0.00000000,0.00000000,89.99450684); //object(helipad1_las) (1)
	CreateDynamicObject(11245,1287.46252441,-1644.35693359,19.75335693,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (2)
	CreateDynamicObject(11245,1286.40185547,-1659.74938965,19.76461411,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (3)
	CreateDynamicObject(3461,1280.75000000,-1656.65808105,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(3461,1273.94885254,-1656.62597656,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(3461,1277.04626465,-1659.93933105,21.17745590,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (5)
	CreateDynamicObject(3461,1280.74792480,-1646.75036621,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (6)
	CreateDynamicObject(3461,1273.99145508,-1646.65747070,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (7)
	CreateDynamicObject(3525,1231.70764160,-1661.27233887,12.47603321,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (1)
	CreateDynamicObject(3525,1241.35510254,-1661.44970703,12.60979366,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (2)
	CreateDynamicObject(3525,1251.45056152,-1661.56726074,12.98662186,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (3)
	CreateDynamicObject(3525,1260.82849121,-1661.66162109,14.18535709,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (4)
	CreateDynamicObject(3525,1246.35852051,-1644.61181641,12.53090000,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (5)
	CreateDynamicObject(3525,1230.27319336,-1644.61181641,12.54166126,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (6)
	CreateDynamicObject(3524,1285.68347168,-1618.90173340,29.26033974,0.00000000,0.00000000,132.00000000); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,1287.33203125,-1658.45825195,15.43221474,0.00000000,0.00000000,96.00000000); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(3524,1287.31921387,-1646.60070801,15.43221474,0.00000000,0.00000000,95.99853516); //object(skullpillar01_lvs) (3)
	CreateDynamicObject(3524,1285.38623047,-1645.30859375,36.69002914,0.00000000,0.00000000,93.99523926); //object(skullpillar01_lvs) (4)
	CreateDynamicObject(3524,1288.70837402,-1691.03771973,41.32284164,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (5)
	CreateDynamicObject(3524,1288.57519531,-1703.58081055,41.32284164,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (6)
	CreateDynamicObject(3524,1285.66345215,-1661.49645996,36.69002914,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (7)
	CreateDynamicObject(2238,1259.54418945,-1696.90295410,34.21258545,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (1)
	CreateDynamicObject(3525,1238.37805176,-1633.21984863,36.15187073,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (8)
	CreateDynamicObject(3525,1238.37805176,-1636.55114746,36.17975235,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (9)
	CreateDynamicObject(3525,1238.37805176,-1639.43615723,36.21276855,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (10)
	CreateDynamicObject(3525,1238.37805176,-1642.52136230,36.17672348,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (11)
	CreateDynamicObject(3525,1238.37805176,-1646.22192383,36.16235733,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (12)
	CreateDynamicObject(3525,1238.37792969,-1650.05847168,36.13534927,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (13)
	CreateDynamicObject(3525,1238.37792969,-1653.40942383,36.17725754,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (14)
	CreateDynamicObject(3525,1238.37792969,-1656.49926758,36.21287155,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (15)
	CreateDynamicObject(6865,1287.89916992,-1652.56542969,21.18230629,0.00000000,0.00000000,137.99475098); //object(steerskull) (2)
	CreateDynamicObject(2051,1250.90588379,-1638.18359375,15.20961094,0.00000000,0.00000000,0.00000000); //object(cj_target4) (1)
	CreateDynamicObject(16151,1252.44653320,-1638.76025391,12.54687500,0.00000000,0.00000000,92.00000000); //object(ufo_bar) (2)
	CreateDynamicObject(1668,1249.47778320,-1639.73706055,13.31899643,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (1)
	CreateDynamicObject(1668,1249.86889648,-1639.83020020,13.31899643,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (2)
	CreateDynamicObject(1668,1249.09094238,-1638.62292480,13.33899689,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (3)
	CreateDynamicObject(1951,1250.58728027,-1639.97436523,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (1)
	CreateDynamicObject(1951,1255.83520508,-1638.90075684,13.36046124,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (2)
	CreateDynamicObject(1951,1250.22155762,-1638.15844727,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (3)
	CreateDynamicObject(1951,1251.20068359,-1639.73937988,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (4)
	CreateDynamicObject(1951,1249.99023438,-1638.24511719,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (5)
	CreateDynamicObject(1950,1252.00659180,-1640.03759766,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (1)
	CreateDynamicObject(1950,1252.82727051,-1639.74438477,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (2)
	CreateDynamicObject(1950,1253.38183594,-1639.89379883,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (3)
	CreateDynamicObject(1950,1253.99572754,-1639.68127441,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (4)
	CreateDynamicObject(1950,1254.34423828,-1639.92822266,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (5)
	CreateDynamicObject(1950,1254.93457031,-1639.57482910,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (6)
	CreateDynamicObject(1950,1255.48742676,-1639.62780762,13.30046082,0.00000000,0.00000000,0.00000000); //object(kb_beer) (7)
	CreateDynamicObject(1950,1249.15441895,-1639.19555664,13.36046124,0.00000000,0.00000000,0.00000000); //object(kb_beer) (8)
	CreateDynamicObject(1950,1250.45800781,-1638.10815430,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer) (9)
	CreateDynamicObject(1696,1254.78125000,-1649.92187500,11.53970242,0.00000000,0.00000000,270.00000000); //object(roofstuff15) (1)
	CreateDynamicObject(1696,1244.80664062,-1649.88867188,10.69300461,0.00000000,0.00000000,269.74731445); //object(roofstuff15) (2)
	CreateDynamicObject(1696,1244.78710938,-1654.52539062,10.70672894,0.00000000,0.00000000,269.74182129); //object(roofstuff15) (3)
	CreateDynamicObject(1696,1254.77636719,-1655.31420898,11.53970242,0.00000000,0.00000000,269.99975586); //object(roofstuff15) (4)
	CreateDynamicObject(3472,1197.11401367,-1671.95117188,12.15625000,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(3472,1197.49865723,-1693.86889648,12.15625000,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(7922,1267.31433105,-1693.10705566,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (1)
	CreateDynamicObject(7922,1268.19592285,-1693.99658203,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (2)
	CreateDynamicObject(7922,1269.09472656,-1694.94836426,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (3)
	CreateDynamicObject(7922,1267.24963379,-1694.75085449,35.20202637,0.00000000,0.00000000,87.99993896); //object(vgwstnewall6905) (5)
	CreateDynamicObject(7922,1269.61718750,-1693.07507324,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (6)
	CreateDynamicObject(7922,1269.94470215,-1694.18688965,35.20202637,0.00000000,0.00000000,270.00000000); //object(vgwstnewall6905) (7)
	CreateDynamicObject(7922,1269.95690918,-1694.93872070,35.20202637,0.00000000,0.00000000,179.99444580); //object(vgwstnewall6905) (8)
	CreateDynamicObject(7922,1269.69653320,-1694.56628418,35.20202637,0.00000000,0.00000000,179.98901367); //object(vgwstnewall6905) (9)
	CreateDynamicObject(1696,1268.39245605,-1694.73864746,37.75865936,0.00000000,0.00000000,269.74731445); //object(roofstuff15) (2)

//LCN Base
     CreateDynamicObject(5711, 1654.194580, -1817.560913, 15.868151, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(16095, 1614.206299, -1857.994507, 12.546030, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(16095, 1628.359009, -1857.858032, 12.543768, 0.0000, 0.0000, 90.0000);
     CreateDynamicObject(13817, 1652.329102, -1829.691284, 14.082459, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(8613, 1652.951538, -1799.163574, 15.887943, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(5822, 1655.232422, -1840.034790, 15.497345, 0.0000, 359.1406, 272.5783);
     CreateDynamicObject(8613, 1654.779541, -1856.954590, 23.670254, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(987, 1592.810425, -1773.256714, 12.474807, 0.0000, 0.0000, 179.4904);
     CreateDynamicObject(987, 1660.784058, -1791.437134, 12.554451, 0.0000, 0.0000, 165.0118);
     CreateDynamicObject(3515, 1626.389526, -1820.396851, 11.775993, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1628.354248, -1816.933838, 13.223089, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(638, 1622.555298, -1818.020264, 13.221786, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(638, 1622.567017, -1824.930664, 13.226011, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(970, 1624.880859, -1826.366699, 13.082610, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(970, 1622.350098, -1821.501709, 13.077951, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(970, 1624.929321, -1816.764404, 13.075740, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(638, 1628.307861, -1826.213135, 13.230561, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(970, 1631.729126, -1816.949463, 13.079198, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(970, 1631.748901, -1826.311401, 13.086066, 0.0000, 0.0000, 180.0000);
     CreateDynamicObject(638, 1633.995728, -1818.169922, 13.226623, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1634.200317, -1825.047485, 13.231833, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(970, 1634.117188, -1821.743164, 13.083875, 0.0000, 0.0000, 90.0000);
     CreateDynamicObject(3515, 1630.559570, -1820.260010, 11.802231, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3515, 1628.281006, -1823.788086, 11.751803, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1617.785034, -1859.844360, 13.247252, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1617.728638, -1855.350220, 13.243904, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1624.845459, -1859.900757, 13.247293, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, 1624.905762, -1855.288574, 13.244281, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1223, 1617.873291, -1857.669800, 11.386501, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1223, 1624.874634, -1857.514404, 11.260782, 0.0000, 0.0000, 191.2500);
     CreateDynamicObject(3666, 1626.597168, -1861.213623, 18.528986, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1616.234863, -1861.066895, 18.455406, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(987, 1649.233643, -1788.352539, 12.546410, 0.0000, 0.0000, 165.0118);
     CreateDynamicObject(987, 1637.833008, -1785.260010, 12.537706, 0.0000, 0.0000, 165.0118);
     CreateDynamicObject(987, 1615.963379, -1779.663696, 12.544067, 0.0000, 0.0000, 163.8086);
     CreateDynamicObject(987, 1633.485107, -1784.066040, 12.541039, 0.0000, 0.0000, 165.0118);
     CreateDynamicObject(970, 1619.053223, -1780.218628, 17.051481, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3666, 1616.410767, -1779.619751, 17.013685, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1621.549316, -1780.811890, 17.013685, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(987, 1604.412720, -1776.298096, 12.533195, 0.0000, 0.0000, 165.5275);
     CreateDynamicObject(640, 1604.447998, -1833.606201, 13.196500, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(640, 1604.403931, -1840.889404, 13.200235, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(640, 1604.619263, -1828.527222, 13.182879, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(640, 1604.498413, -1821.577393, 13.149190, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(1231, 1601.131348, -1841.250366, 13.328197, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1608.078247, -1841.138062, 13.393383, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1607.832397, -1833.636475, 13.387346, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1600.620728, -1833.796387, 13.321615, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1608.038330, -1828.627319, 13.380089, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1600.768921, -1828.308594, 13.350206, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1607.985962, -1821.640503, 13.400688, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1601.148071, -1821.683472, 13.344103, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1232, 1628.549438, -1821.278076, 10.093348, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1631.930786, -1824.663086, 13.047150, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1624.401611, -1824.685913, 13.043489, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1623.841187, -1818.084229, 13.038380, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1632.370239, -1817.784180, 13.042325, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(640, 1601.166870, -1788.854980, 13.062032, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(640, 1600.817139, -1796.083008, 13.078872, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(640, 1600.158813, -1817.644897, 13.129148, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(640, 1599.849854, -1810.167114, 13.122074, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(1231, 1603.769775, -1817.518799, 13.378855, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1596.879883, -1817.693359, 13.345333, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1603.228027, -1810.097778, 13.354198, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1596.550659, -1810.180908, 13.282026, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1604.537720, -1796.709961, 13.388309, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, 1597.272217, -1795.469238, 13.336889, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1604.314331, -1789.580078, 13.344858, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, 1597.545532, -1788.094971, 13.337009, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, 1636.251587, -1847.429810, 15.270105, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, 1627.776489, -1847.249512, 15.268080, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(640, 1632.032104, -1847.335815, 13.235740, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(3666, 1648.129395, -1804.290771, 19.278038, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1648.125122, -1827.126831, 19.178040, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1557, 1648.971802, -1816.639038, 12.542532, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(2773, 1647.722168, -1818.759033, 13.051696, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(2773, 1647.751343, -1816.010864, 13.051592, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(631, 1648.656250, -1819.393677, 13.435849, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(631, 1648.599854, -1815.579468, 13.460876, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1215, 1648.776978, -1816.339600, 12.599427, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1215, 1648.841431, -1818.515991, 12.546185, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(8613, 1668.144531, -1827.660278, 31.512302, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(18368, 1677.571045, -1841.841553, 22.766262, 0.0000, 0.0000, 352.1878);
     CreateDynamicObject(3666, 1661.082397, -1823.524780, 34.770779, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1679.328369, -1823.219116, 34.770779, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1679.387329, -1791.477051, 34.820782, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, 1661.673462, -1791.084717, 34.745777, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3934, 1671.418213, -1813.582031, 35.318092, 0.0000, 0.0000, 358.2811);
     CreateDynamicObject(3934, 1671.855103, -1800.817627, 35.318092, 0.0000, 0.0000, 358.2811);

	lcntor =	CreateObject(980, 1621.254883, -1861.278076, 15.249203, 0.0000, 0.0000, 0.0000);

//Hitman

	CreateDynamicObject(8572, 2142.6999511719, -1803.6999511719, 16.700000762939, 0, 0, 180);
	CreateDynamicObject(3749, 2185.1000976563, -1783.9000244141, 18.200000762939, 0, 0, 0);
	CreateDynamicObject(3934, 2142.1000976563, -1823.3000488281, 17.89999961853, 0, 0, 0);
	CreateDynamicObject(3934, 2144.1000976563, -1773.5999755859, 17.60000038147, 0, 0, 0);

	htor = 	CreateObject(980, 2185.1000976563, -1785.9000244141, 15.10000038147, 0, 0, 0);

//Fbi
// 	fbitor	=	CreateObject(980, 1027.220581, 1161.117920, 10.420279, 0.0000, 0.0000, 1.7189);

//RM Tore
	  CreateDynamicObject(2946,2322.43652344,-1256.60888672,21.50000000,0.00000000,0.00000000,0.00000000);
	  CreateDynamicObject(2946,2322.44677734,-1253.43273926,21.50000000,0.00000000,0.24719238,179.64294434);

//=== TOR ===//
	  CreateDynamicObject(980,1818.23059082,-1320.86718750,15.35338593,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
	  CreateDynamicObject(980,1825.05871582,-1320.89331055,15.35341072,0.00000000,0.00000000,0.00000000); //object(airportgate) (2)

//Terrorgate
	  CreateDynamicObject(3749, -489.2790222168, -564.22210693359, 29.88106918335, 0, 0, 0);

//=============================================================================================================================

	zolltor = CreateObject(978,53.61148071,-1525.98864746,4.87745094,0.00000000,0.00000000,83.37002563);
	zolltor1 = CreateObject(978,55.77261353,-1539.03112793,4.95321989,0.00000000,0.50000000,79.91503906); //object(sub_roadright) (2)
	zolltor2 = CreateObject(978,-981.43225098,-381.12454224,36.21669388,0.00000000,0.00000000,350.00000000); //object(sub_roadright) (1)
	zolltor3 = CreateObject(978,-969.41735840,-379.66165161,36.21669388,0.25000000,0.00000000,348.63500977); //object(sub_roadright) (2)
	zolltor4 = CreateObject(978,1754.57714844,523.82324219,27.69068718,0.00000000,0.00000000,339.24133301); //object(sub_roadright)	(4)
	zolltor5 = CreateObject(978,1744.70703125,527.12695312,27.43260956,0.00000000,0.00000000,339.49401855); //object(sub_roadright) (5)
	zolltor6 = CreateObject(978,1736.46093750,530.24609375,27.49927139,0.00000000,0.00000000,340.49377441); //object(sub_roadright) (6)
	zolltor7 = CreateObject(978,1727.59667969,533.24121094,27.49211121,0.00000000,0.00000000,340.99365234); //object(sub_roadright) (8)
	zolltor8 = CreateObject(978,-162.66503906,403.01269531,11.91834545,0.00000000,0.00000000,345.33874512); //object(sub_roadright) (1) blue
	zolltor9 = CreateObject(978,-154.94238281,401.06250000,11.91834545,0.00000000,0.00000000,345.33874512); //object(sub_roadright) (2) lv
	zolltor10 = CreateObject(978,-1230.96582031,994.12304688,43.41479111,0.00000000,0.00000000,315.74707031); //object(sub_roadright) (9)lv
	zolltor11 = CreateObject(978,-1242.07812500,1000.90136719,43.47349930,0.00000000,0.00000000,314.24743652); //object(sub_roadright) (1)sf
	zolltor12 = CreateObject(978,102.20307159,-1270.01013184,14.58920097,0.00000000,359.75000000,304.16998291); //object(sub_roadright) (1)
	zolltor13 = CreateObject(978,112.27465820,-1277.22094727,14.75586414,0.00000000,0.00000000,302.94998169); //object(sub_roadright) (2)
	zolltor14 = CreateObject(978,100.10153198,-1254.57641602,14.75407791,0.00000000,0.00000000,302.71493530); //object(sub_roadright) (3)
	zolltor15 =	CreateObject(978,89.60826111,-1248.17480469,14.42384052,0.00000000,0.00000000,303.44998169); //object(sub_roadright) (4)
	zolltor16 =	CreateObject(978,-2694.72802734,1275.12854004,55.26990891,0.00000000,0.00000000,0.00000000); //object(sub_roadright) (5)
	zolltor17 =	CreateObject(978,-2685.87304688,1275.14294434,55.26990891,0.00000000,0.00000000,0.00000000); //object(sub_roadright) (6)
	zolltor18 =	CreateObject(978,-2677.04370117,1275.15173340,55.26990891,0.00000000,0.00000000,0.00000000); //object(sub_roadright) (7)
	zolltor19 =	CreateObject(978,-2667.32788086,1275.27246094,55.26990891,0.00000000,0.00000000,0.00000000); //object(sub_roadright) (8)

//Präsileviint
	CreateDynamicObject(14404,1261.532,-796.095,1186.609,0.0,0.0,0.0);
	  CreateDynamicObject(2873, 1262.298, -794.677, 1185.981, 0.0, 0.0, -180.000);
	  CreateDynamicObject(2873, 1262.162, -804.213, 1186.031, 0.0, 0.0, -270.000);
	  CreateDynamicObject(1723, 1262.595, -799.911, 1184.757, 0.0, 0.0, -90.077);
	  CreateDynamicObject(2747, 1262.570, -798.632, 1185.222, 0.0, 0.0, -90.000);
	  CreateDynamicObject(1670, 1262.625, -798.756, 1185.654, 0.0, 0.0, 0.0);
	  CreateDynamicObject(1704, 1262.098, -796.868, 1184.813, 0.0, 0.0, -14.610);
	  CreateDynamicObject(1562, 1260.539, -799.577, 1185.439, 0.0, 0.0, -180.000);
	  CreateDynamicObject(1562, 1260.596, -801.793, 1185.489, 0.0, 0.0, -180.000);
	  CreateDynamicObject(1563, 1260.558, -799.904, 1185.964, 0.0, 0.0, 180.000);
	  CreateDynamicObject(1563, 1260.598, -802.131, 1186.002, 0.0, 0.0, 180.000);
	  CreateDynamicObject(1752, 1260.609, -794.519, 1186.640, 12.032, 0.859, 3.438);
	  CreateDynamicObject(2747, 1260.333, -798.326, 1185.072, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2747, 1260.307, -800.633, 1185.072, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2824, 1260.577, -798.378, 1185.493, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2816, 1260.717, -800.669, 1185.493, 0.0, 0.0, -213.750);

//Tore Oamt
	  CreateDynamicObject(8947,883.50549316,-1190.14404297,19.02934265,0.00000000,0.00000000,0.00000000); //object(vgelkup) (1)
	OamtLS3 = CreateObject(980,883.45031738,-1202.21044922,18.74995422,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
	OamtLS4 = CreateObject(971,922.81915283,-1206.31262207,15.80276299,0.00000000,0.00000000,90.00000000); //object(subwaygate) (1)

	//noob spawn info dings
//CreateDynamicObject(6296, 1128.896484, -1445.314087, 16.885954, 0.0000, 0.0000, 270.0000,0);
	//wcc zäune
	  CreateDynamicObject(972, -2220.499512, 1014.103516, 78.394989, 348.8273, 357.4217, 270.0000);

//kleine taxi zeune
	  CreateDynamicObject(982, 1018.734924, -1359.052856, 13.236579, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(983, 1018.745422, -1342.890991, 13.231983, 0.0000, 0.0000, 0.0000);

//kleine taxi zeune
	  CreateDynamicObject(982, 1018.734924, -1359.052856, 13.236579, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(983, 1018.745422, -1342.890991, 13.231983, 0.0000, 0.0000, 0.0000);

	//Tank Schild
	  CreateDynamicObject(11417, 1005.865540, -951.640869, 46.072830, 0.0000, 0.0000, 326.2500);

// Ablieferungs Punkt
	  CreateDynamicObject(3410, 740.089844, -1350.132446, 13.275683, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(12922, 740.814697, -1345.699585, 15.876247, 0.0000, 0.0000, 90.0000);
   LSPDLift =   CreateObject(2957, 1560.1989746094, -1636.033203125, 12.467700004578, 90, 0, 270.67565917969);
//Geheimstützpunkt
	hangar = CreateObject(8378, -2267.1955566406, -1686.7861328125, 483.31539916992, 0, 0, 282);
	hangar2 = CreateObject(8378, -2425.5876464844, -1522.6268310547, 475.77655029297, 0, 0, 12);
//News
	News1 = CreateObject(971,1643.12670898,-1714.77258301,15.86996269,0.00000000,359.50000000,266.80380249); //object(subwaygate) (1)
	News2 = CreateObject(971,1643.59997559,-1696.34716797,15.82934380,0.00000000,0.00000000,270.11499023); //object(subwaygate) (2)

	terrorgate = CreateObject(980, -489.2532043457, -563.72381591797, 26.966348648071, 0, 0, 0);
	f2ftor = CreateObject(980, 2828.286133, -1570.767212, -12.695267, 0.0000, 0.0000, 78.7500);
	atzetor = CreateObject(975, 1841.693604, -2000.929321, 14.221565, 0.0000, 0.0000, 0.0000);
	OamtLS = CreateObject(971, 924.210754, -1216.086304, 16.024687, 0.0000, 0.0000, 90.0000);
	OamtLS2 = CreateObject(971, 924.129578, -1216.344849, 23.140125, 0.0000, 179.5181, 89.1405);
	CarInit();


	//-------------------------------[Häuser]---------------------------------------//
	//SuReal//

	surealtor = CreateObject(969, 324.39999389648, -1185.5999755859, 75.5, 0, 0, 218);
	schokotor = CreateObject(980, 1496.5, -699.90002441406, 96.400001525879, 0, 0, 181.3740234375);

	CreateDynamicObject(3471, 298.20001220703, -1152.6999511719, 81.199996948242, 0, 0, 226);
	CreateDynamicObject(3471, 301.89999389648, -1156.5999755859, 81.199996948242, 0, 0, 225.99426269531);
	CreateDynamicObject(1231, 302.89999389648, -1157.1999511719, 82.599998474121, 0, 0, 314);
	CreateDynamicObject(1231, 297.70001220703, -1151.5999755859, 82.599998474121, 0, 0, 313.9892578125);
	CreateDynamicObject(9833, 314.89999389648, -1190.5999755859, 75.900001525879, 0, 0, 310);
	CreateDynamicObject(9833, 324.39999389648, -1182.0999755859, 76.099998474121, 0, 0, 309.990234375);
	CreateDynamicObject(1231, 278.60000610352, -1161.3000488281, 82.599998474121, 0, 0, 39.9892578125);
	CreateDynamicObject(1231, 288.10000610352, -1152.1999511719, 82.599998474121, 0, 0, 39.984741210938);
	CreateDynamicObject(620, 294.5, -1206.3000488281, 79.900001525879, 0, 0, 0);
	CreateDynamicObject(620, 261, -1180.5, 78.900001525879, 0, 0, 0);
	CreateDynamicObject(3934, 300.8720703125, -1181.7119140625, 79.73104095459, 0, 0, 0);
	CreateDynamicObject(717, 315.89999389648, -1171.9000244141, 80.199996948242, 0, 0, 316);
	CreateDynamicObject(717, 305.89999389648, -1181.0999755859, 80.199996948242, 0, 0, 315.99426269531);


	//-----------------------------------------------------------------------------------
	//-------------------------------  MENÜS --------------------------------------------
	BOMB = CreateMenu("Bombe:",1,200.0,180.0,200.0);
    SetMenuColumnHeader(BOMB, 0, "Waehle einen Draht!");
	AddMenuItem(BOMB,0,">>~r~ Rot");//rot,gelb,grün,blau
	AddMenuItem(BOMB,0,">>~y~ Gelb");
	AddMenuItem(BOMB,0,">>~g~ Gruen");
	AddMenuItem(BOMB,0,">>~b~ Blau");

	BOMBD = CreateMenu("Bombe:",1,200.0,180.0,200.0);
    SetMenuColumnHeader(BOMBD, 0, "Waehle einen Draht!");
	AddMenuItem(BOMBD,0,">>~r~ Rot");//rot,gelb,grün,blau
	AddMenuItem(BOMBD,0,">>~y~ Gelb");
	AddMenuItem(BOMBD,0,">>~g~ Gruen");
	AddMenuItem(BOMBD,0,">>~b~ Blau");

	PruefungMenu = CreateMenu(" ",1, 70.0, 180.0, 30.0);
	AddMenuItem(PruefungMenu,0,"a)");
	AddMenuItem(PruefungMenu,0,"b)");
	AddMenuItem(PruefungMenu,0,"c)");
	AddMenuItem(PruefungMenu,0,"d)");
	
	MotorradMenu = CreateMenu(" ",1,70.0, 180.0, 30.0);
	AddMenuItem(MotorradMenu,0,"a)");
	AddMenuItem(MotorradMenu,0,"b)");
	AddMenuItem(MotorradMenu,0,"c)");
	AddMenuItem(MotorradMenu,0,"d)");

	BSMK = CreateMenu("BSMK", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(BSMK, 0, "3 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "12 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "20 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "Cheesburger");
	AddMenuItem(BSMK, 0, "Chickenburger");
	AddMenuItem(BSMK, 0, "MC CHICKEN");
	AddMenuItem(BSMK, 0, "Pommes");
	AddMenuItem(BSMK, 0, "Big Mac");
	AddMenuItem(BSMK, 0, "Fisch Mac");
	AddMenuItem(BSMK, 0, "Cola");
	AddMenuItem(BSMK, 0, "MENU_VERLASSEN");

	PMK = CreateMenu("PMK", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(PMK, 0, "Pommes mit Ketchup");
	AddMenuItem(PMK, 0, "Toast");
	AddMenuItem(PMK, 0, "Schnitzel mit Salat");
	AddMenuItem(PMK, 0, "Pizza");
	AddMenuItem(PMK, 0, "Kotlett");
	AddMenuItem(PMK, 0, "Gulasch");
	AddMenuItem(PMK, 0, "Grillhuhn");
	AddMenuItem(PMK, 0, "Gemüße Suppe");
	AddMenuItem(PMK, 0, "Cola");
	AddMenuItem(PMK, 0, "Bier");
	AddMenuItem(PMK, 0, "MENU_VERLASSEN");

	CBKM = CreateMenu("CBKM", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(CBKM, 0, "Magerita");
	AddMenuItem(CBKM, 0, "Gemüse Pizza");
	AddMenuItem(CBKM, 0, "Schinken");
	AddMenuItem(CBKM, 0, "Pizza ala Luigi");
	AddMenuItem(CBKM, 0, "Cola");
	AddMenuItem(CBKM, 0, "Sprite");
	AddMenuItem(CBKM, 0, "Fanta");
	AddMenuItem(CBKM, 0, "Red Bull");
	AddMenuItem(CBKM, 0, "Ice Tea");
	AddMenuItem(CBKM, 0, "FoD Spezial Pizza");
	AddMenuItem(CBKM, 0, "MENU_VERLASSEN");

	//Touristenhilfe /guide
 	Navigation = CreateMenu("Navigation", 1, 50.0, 180.0, 200.0, 200.0);
    SetMenuColumnHeader(Navigation, 0, "LS Touristen Guide");
    AddMenuItem(Navigation, 0, "Stadthalle");
    AddMenuItem(Navigation, 0, "Krankenhaus");
    AddMenuItem(Navigation, 0, "Polizei");
    AddMenuItem(Navigation, 0, "Schwarzmarkt");
    AddMenuItem(Navigation, 0, "Arbeitsamt");
    AddMenuItem(Navigation, 0, "City Bank");
    AddMenuItem(Navigation, 0, "Handyladen");
    AddMenuItem(Navigation, 0, "Uhrenladen");
    AddMenuItem(Navigation, 0, "Exit Menu");

	//-----------------------------------------------------------------------------------
	//-------------------------------  TEXTDRAWS ----------------------------------------

	Copyright = TextDrawCreate(27.000000, 424.000000, "Forum:www.gne-life.de");
	TextDrawAlignment(Copyright,0);
	TextDrawBackgroundColor(Copyright,0x000000FF);
	TextDrawFont(Copyright, 3);
	TextDrawLetterSize(Copyright, 0.340000, 1.600000);
	//TextDrawColor(Copyright, 0xEB0000FF);
	TextDrawSetOutline(Copyright, 1);
	TextDrawSetProportional(Copyright, 1);
	TextDrawShowForAll(Copyright);


/*	Forum = TextDrawCreate(4.000000,433.000000, "Forum:www.gne-life.de");
    TextDrawAlignment(Forum,0);
	TextDrawBackgroundColor(Forum,0x000000ff);
	TextDrawFont(Forum,3);
	TextDrawLetterSize(Forum,0.400000,0.999990);
	TextDrawColor(Forum, 0xffffffff);
	TextDrawSetOutline(Forum,1);
	TextDrawSetProportional(Forum,1);
	TextDrawSetShadow(Forum,1);*/

	Ts3 = TextDrawCreate(440.000000,430.000000/*429.000000*/,"TS3:84.200.15.38:7568");
	TextDrawAlignment(Ts3,0);
	TextDrawBackgroundColor(Ts3,0x000000FF);
	TextDrawFont(Copyright,3);
	TextDrawLetterSize(Ts3,0.340000,1.600000);
	//TextDrawColor(Ts3,0xEB0000FF);
	TextDrawSetOutline(Copyright,1);
	TextDrawSetProportional(Copyright,1);
	TextDrawSetShadow(Copyright,1);
	TextDrawShowForAll(Copyright);

	txtAnimHelper = TextDrawCreate(610.0, 400.0,"~r~~k~~Sprinttaste, um abzubrechen");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
    TextDrawSetOutline(txtAnimHelper,1);
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3);

	Uhrzeit = TextDrawCreate(554.000000, 30.000000, " ");
	TextDrawBackgroundColor(Uhrzeit, 255);
	TextDrawFont(Uhrzeit, 2);
	TextDrawLetterSize(Uhrzeit, 0.390000, 1.300000);
	TextDrawColor(Uhrzeit, -1);
	TextDrawSetOutline(Uhrzeit, 1);
	TextDrawSetProportional(Uhrzeit, 1);
	TextDrawShowForAll(Uhrzeit);

/*   	TdSpielerIP = TextDrawCreate(475.000000, 418.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerIP, 255);
	TextDrawFont(TdSpielerIP, 2);
	TextDrawLetterSize(TdSpielerIP, 0.270000, 1.200000);
	TextDrawColor(TdSpielerIP, -1);
	TextDrawSetOutline(TdSpielerIP, 0);
	TextDrawSetProportional(TdSpielerIP, 1);
	TextDrawSetShadow(TdSpielerIP, 1);

	TdSpielerPing = TextDrawCreate(475.000000, 431.000000, "wird geladen...");
	TextDrawBackgroundColor(TdSpielerPing, 255);
	TextDrawFont(TdSpielerPing, 2);
	TextDrawLetterSize(TdSpielerPing, 0.270000, 1.200000);
	TextDrawColor(TdSpielerPing, -1);
	TextDrawSetOutline(TdSpielerPing, 0);
	TextDrawSetProportional(TdSpielerPing, 1);
	TextDrawSetShadow(TdSpielerPing, 1);*/

	//--------------------------------------------------------------------------


	new year;
	new month;
	new day;
	new mtext[20], dtext[20];
	getdate(year, month, day);
	if(month == 1) { mtext = "01"; }
	else if(month == 2) { mtext = "02"; }
	else if(month == 3) { mtext = "03"; }
	else if(month == 4) { mtext = "04"; }
	else if(month == 5) { mtext = "05"; }
	else if(month == 6) { mtext = "06"; }
	else if(month == 7) { mtext = "07"; }
	else if(month == 8) { mtext = "08"; }
	else if(month == 9) { mtext = "09"; }
	else if(month == 10) { mtext = "10"; }
	else if(month == 11) { mtext = "11"; }
	else if(month == 12) { mtext = "12"; }
	if(day == 1) { dtext = "01"; }
	else if(day == 2) { dtext = "02"; }
	else if(day == 3) { dtext = "03"; }
	else if(day == 4) { dtext = "04"; }
	else if(day == 5) { dtext = "05"; }
	else if(day == 6) { dtext = "06"; }
	else if(day == 7) { dtext = "07"; }
	else if(day == 8) { dtext = "08"; }
	else if(day == 9) { dtext = "09"; }
	else if(day == 10) { dtext = "10"; }
	else if(day == 11) { dtext = "11"; }
	else if(day == 12) { dtext = "12"; }
	else if(day == 13) { dtext = "13"; }
	else if(day == 14) { dtext = "14"; }
	else if(day == 15) { dtext = "15"; }
	else if(day == 16) { dtext = "16"; }
	else if(day == 17) { dtext = "17"; }
	else if(day == 18) { dtext = "18"; }
	else if(day == 19) { dtext = "19"; }
	else if(day == 20) { dtext = "20"; }
	else if(day == 21) { dtext = "21"; }
	else if(day == 22) { dtext = "22"; }
	else if(day == 23) { dtext = "23"; }
	else if(day == 24) { dtext = "24"; }
	else if(day == 25) { dtext = "25"; }
	else if(day == 26) { dtext = "26"; }
	else if(day == 27) { dtext = "27"; }
	else if(day == 28) { dtext = "28"; }
	else if(day == 29) { dtext = "29"; }
	else if(day == 30) { dtext = "30"; }
	else if(day == 31) { dtext = "31"; }
	Datum = TextDrawCreate(546.000000, 14.000000, " ");
	TextDrawBackgroundColor(Datum, 255);
	TextDrawFont(Datum, 2);
	TextDrawLetterSize(Datum, 0.300000, 1.200000);
	TextDrawColor(Datum, -1);
	TextDrawSetOutline(Datum, 1);
	TextDrawSetProportional(Datum, 1);
    format(ALLSTRING, sizeof(ALLSTRING), "%s.%s.%d", dtext, mtext, year);
    TextDrawSetString(Datum,ALLSTRING);
    TextDrawShowForAll(Datum);


    for(new pv = 0; pv < sizeof(PraesiVehs); pv++)
	{
		SetVehicleNumberPlate(PraesiVehs[pv], "Regierung");
		SetVehicleToRespawn(PraesiVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(PolizeiVehs); pv++)
	{
		SetVehicleNumberPlate(PolizeiVehs[pv], "LSPD");
		SetVehicleToRespawn(PolizeiVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(FBIVehs); pv++)
	{
		SetVehicleNumberPlate(FBIVehs[pv], "FBI");
		SetVehicleToRespawn(FBIVehs[pv]);
	}
	    for(new pv = 0; pv < sizeof(SWATVehs); pv++)
	{
		SetVehicleNumberPlate(SWATVehs[pv], "SWAT");
		SetVehicleToRespawn(SWATVehs[pv]);
	}
	for(new pv = 0; pv < sizeof(MedicVehs); pv++)
	{
		SetVehicleNumberPlate(MedicVehs[pv], "MEDIC");
		SetVehicleToRespawn(MedicVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(BundeswehrVehs); pv++)
	{
		SetVehicleNumberPlate(BundeswehrVehs[pv], "SA Bundeswehr");
		SetVehicleToRespawn(BundeswehrVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(LCNVehs); pv++)
	{
		SetVehicleNumberPlate(LCNVehs[pv], "LCN");
		SetVehicleToRespawn(LCNVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(YakuzaVehs); pv++)
	{
		SetVehicleNumberPlate(YakuzaVehs[pv], "YAKUZA");
		SetVehicleToRespawn(YakuzaVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(HitmanVehs); pv++)
	{
		SetVehicleNumberPlate(HitmanVehs[pv], "XXXXXX");
		SetVehicleToRespawn(HitmanVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(NewsVehs); pv++)
	{
		SetVehicleNumberPlate(NewsVehs[pv], "SA NEWS");
		SetVehicleToRespawn(NewsVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(TaxiVehs); pv++)
	{
		SetVehicleNumberPlate(TaxiVehs[pv], "TAXI");
		SetVehicleToRespawn(TaxiVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(FahrschulVehs); pv++)
	{
		SetVehicleNumberPlate(FahrschulVehs[pv], "LS-FS");
		SetVehicleToRespawn(FahrschulVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(FuegosVehs); pv++)
	{
		SetVehicleNumberPlate(FuegosVehs[pv], "Fuegos");
		SetVehicleToRespawn(FuegosVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(RifaVehs); pv++)
	{
		SetVehicleNumberPlate(RifaVehs[pv], "RIFA");
		SetVehicleToRespawn(RifaVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(GroveVehs); pv++)
	{
		SetVehicleNumberPlate(GroveVehs[pv], "GROVE");
		SetVehicleToRespawn(GroveVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(BallasVehs); pv++)
	{
		SetVehicleNumberPlate(BallasVehs[pv], "BALLAS");
		SetVehicleToRespawn(BallasVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(VagosVehs); pv++)
	{
		SetVehicleNumberPlate(VagosVehs[pv], "VAGOS");
		SetVehicleToRespawn(VagosVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(AztecasVehs); pv++)
	{
		SetVehicleNumberPlate(AztecasVehs[pv], "AZTECAS");
		SetVehicleToRespawn(AztecasVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(RSVehs); pv++)
	{
		SetVehicleNumberPlate(RSVehs[pv], "RS");
		SetVehicleToRespawn(RSVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(BMXEN); pv++)
	{
		SetVehicleNumberPlate(BMXEN[pv], "MEDIC");
		SetVehicleToRespawn(BMXEN[pv]);
	}
    for(new pv = 0; pv < sizeof(TerrorVehs); pv++)
	{
		SetVehicleNumberPlate(TerrorVehs[pv], "AL-QAIDA");
		SetVehicleToRespawn(TerrorVehs[pv]);
	}
 /*   for(new pv = 0; pv < sizeof(WheelVehs); pv++)
	{
		SetVehicleNumberPlate(WheelVehs[pv], "WHEELMENS");
		SetVehicleToRespawn(WheelVehs[pv]);
	}*/
    for(new pv = 0; pv < sizeof(RMVehs); pv++)
	{
		SetVehicleNumberPlate(RMVehs[pv], "RUSSEN");
		SetVehicleToRespawn(RMVehs[pv]);
	}
    for(new pv = 0; pv < sizeof(oAmtVehs); pv++)
	{
		SetVehicleNumberPlate(oAmtVehs[pv], "OAMT");
		SetVehicleToRespawn(oAmtVehs[pv]);
	}
	return 1;
}

Function OnGameModeExit()
{
	Elevator_Destroy();
	Fight_Close();
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			OnPlayerCarUpdate(i);
			PlayerUpdate(i);
			gPlayerLogged[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}
	for(new i = 0; i < AUTOHAUSER; i++)
	{
	    DestroyPickup(Dtc_Info[i]);
	}

	return 1;
}

Function OnVehicleRespray(playerid,vehicleid,color1,color2)
{
	FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
    for(new x = 0; x < MaxVeh; x++)
	{
		if (vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
		    PlayerCar[playerid][x][CarC1] = color1;
		    PlayerCar[playerid][x][CarC2] = color2;
		}
	}
	return 1;
}

Function LetDoorsLocked()
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    if(IsPlayerConnected(playerid))
		{
		    for(new i = 0; i < 700; i++)
			{
			    if(Dtc_Carlock[i])
			    {
			        SetVehicleParamsForPlayer(i,playerid,0,1);
			    }
			}
		}
	}
}


Function CarTuning(playerid,slot)
{
    ChangeVehicleColor(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarC1],PlayerCar[playerid][slot][CarC2]);
	if(PlayerCar[playerid][slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarPJ]);}
	if(PlayerCar[playerid][slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarNitro]);}
	if(PlayerCar[playerid][slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHyd]);}
	if(PlayerCar[playerid][slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarWheel]);}
	if(PlayerCar[playerid][slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarAusp]);}
	if(PlayerCar[playerid][slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideL]);}
	if(PlayerCar[playerid][slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideR]);}
	if(PlayerCar[playerid][slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarFB]);}
	if(PlayerCar[playerid][slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRB]);}
	if(PlayerCar[playerid][slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSpoiler]);}
	if(PlayerCar[playerid][slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRoof]);}
	if(PlayerCar[playerid][slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHood]);}
	if(PlayerCar[playerid][slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarVents]);}
	if(PlayerCar[playerid][slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarLamps]);}
 	if(Dtc_LockOnSpawn)
	{
	    Dtc_Carlock[PlayerCar[playerid][slot][CarId]] = 1;
		Dtc_LockCar(PlayerCar[playerid][slot][CarId]);
	}
}

Function OnVehiclePaintjob(playerid,vehicleid,paintjobid)
{
    FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	for(new x = 0; x < MaxVeh; x++)
	{
		if (vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
		    PlayerCar[playerid][x][CarPJ] = paintjobid;
		    PlayerCar[playerid][x][CarC1] = 1;
		    PlayerCar[playerid][x][CarC2] = 1;
		}
	}
	return 1;
}
Function OnVehicleSpawn(vehicleid)
{
	Gas[vehicleid] = GetGasMax(vehicleid);
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
    	for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
				if (vehicleid == PlayerCar[playerid][x][CarId])
				{
					SetTimerEx("CarTuning",700,0,"ii",playerid,x);
				}
			}
		}
	}
	return 1;
}

Function OnVehicleDeath(vehicleid, killerid)
{
    FRAC_OnVehicleDeath(vehicleid, killerid);
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
	    	 	if (vehicleid == PlayerCar[playerid][x][CarId])
		     	{
		     		DestroyVehicle(PlayerCar[playerid][x][CarId]);
                    PlayerCarSpawn(playerid,x);
		       	}
			}
		}
	}
	return 1;
}




Function bombexplode(playerid)
{
	DestroyObject(bombe);
	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-10, PlayerExplosionY[1]+10, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-15, PlayerExplosionY[1]+15, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-5, PlayerExplosionY[1]-5, PlayerExplosionZ[1], 10, 0);
 	CreateExplosion(PlayerExplosionX[1]+5, PlayerExplosionY[1]+5, PlayerExplosionZ[1], 10, 0);
 	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-7.5, PlayerExplosionY[1]+7.5, PlayerExplosionZ[1], 10, 0);
   	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-20, PlayerExplosionY[1]+20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-30, PlayerExplosionY[1]+30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+30, PlayerExplosionY[1]-30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-30, PlayerExplosionY[1]+30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-7.5, PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-10, PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-15, PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-20, PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-25, PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1]+7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1]+10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1]+15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1]+20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1]+25, PlayerExplosionZ[1], 10, 0);
	WantedPoints[playerid] += 6;
	SetPlayerCriminal(playerid,255, "BombenAnschlag!");
	GivePlayerMoney(playerid,5000);
	SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe ist explodiert! Du bekommst $5000.");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsACop(i) || IsPlayerInFrac(i, 22))
		{
			GangZoneStopFlashForPlayer(i,bombzone);
			GangZoneHideForPlayer(i,bombzone);
			GangZoneDestroy(bombzone);
			SendClientMessage(i,COLOR_RED," Die Bombe ist explodiert!");
		}
	}
	SetTimer("Abkling",	90000 , 0);
	Bombactivated=0;
}

Function Bombtimer(time,playerid)
{
	new string[8];
	format(string,sizeof(string),"%d",time);
	GameTextForPlayer(playerid,string,1000,4);
	if(time>0)
	{
	    time--;
     	bombtimer = SetTimerEx("Bombtimer",1000,0,"ii",time,playerid);
	}
	else
	{
		DestroyObject(bombe);
		SetTimer("Abkling",	120000 , 0);
		KillTimer(bombtimer);
		KillTimer(bombexplotimer);
 		for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsACop(i))
			{
				GameTextForPlayer(i,"Bombe entschaerft!",1000,4);
				GangZoneStopFlashForPlayer(i,bombzone);
				GangZoneHideForPlayer(i,bombzone);
				GangZoneDestroy(bombzone);
				Bombactivated=0;
			}
		}
	}
}

Function Abkling(playerid)
{
	BombStatus = 0;
}

Function SAbkling(playerid)
{
	SelfStatus = 0;
}

//---------------------------------------------------------
Function SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
  		{
			//SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
		  	SetPlayerColor(playerid,NAMECOLOR_LSCOP); // Copfarbe
  		}
    	else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
  		{
  			//SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	  		SetPlayerColor(playerid,NAMECOLOR_FBI); // Copfarbe
  		}
   		else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
  		{
  			//SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
		  	SetPlayerColor(playerid,NAMECOLOR_Bundeswehr); // Bundeswehrfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
  		{
  			SetPlayerColor(playerid,NAMECOLOR_MEDIC); // white SetPlayerColor(playerid,NAMECOLOR_MEDIC); // Arztfarbe
  		}
	    else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_LCN); // LaCostaNostrafarbe
  		}
	    else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_YAKUZA); // Yakuzafarbe
  		}
  		else if(PlayerInfo[playerid][pLeader] == 7)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_PRAESI); // Präsifarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 7)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_PRAESI_SCHUTZ); // Präsischutzfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
	    else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_CNN); // CNNfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_TAXI); // Taxifarbe
  		}
	    else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_LEHRER); // Fahrlehrerfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Grove); // Grovefarbe
  		}
        else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Ballas); // Ballasfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_FAF); // Ls Biker Club-farbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Vagos); // Vagosfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Aztecas); //Aztecasfarbe
  		}
        else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
  		{
  			SetPlayerColor(playerid,0xff6600); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
  		{
  			SetPlayerColor(playerid,0xFF740000); // OAMT Farbe
  		}
  		else
		{
	    	SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	    }
	}
}

Function IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,35.0,-1706.2054,12.7528,3.5547))
		{
			return 1;
		}
	}
	return 0;
}

Function SyncTime()
{
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "Deine Uhr: Es ist %d:00 Uhr",tmphour+1);
		BroadCast(COLOR_WHITE,string);
		ghour = tmphour;
		if (realtime)
		{
			SetWorldTime(tmphour+1);
		}
	}
}


Function GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

Function DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	return 1;
}

Function Checkprop()
{
	new olddate;
	new string[256];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 5)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmourx] = 0;
				HouseInfo[h][hArmoury] = 0;
				HouseInfo[h][hArmourz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 418;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "The State", 0, strlen("The State"), 255);
				format(string, sizeof(string), "_",HouseInfo[h][hValue]);
				SendClientMessageToAll(TEAM_Ballas_COLOR, string);
				OnPropUpdate();
			}
		}
	}
	return 1;
}

Function split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

Function OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "/Accounts/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[32];
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "Supporter=%d\n",PlayerInfo[playerid][pSupporter]);fwrite(hFile, var);
				format(var, 32, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 32, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 32, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 32, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 32, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 32, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 32, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 32, "Kredit=%d\n",PlayerInfo[playerid][pPlayerKredit]);fwrite(hFile, var);
				format(var, 32, "KreditDauer=%d\n",PlayerInfo[playerid][pPlayerKreditDauer]);fwrite(hFile, var);
				format(var, 32, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 32, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 32, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 32, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 32, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 32, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 32, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 32, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 32, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 32, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 32, "GangJailed=%d\n",PlayerInfo[playerid][pGangJailed]);fwrite(hFile, var);
				format(var, 32, "Mauled=%d\n",PlayerInfo[playerid][pMauled]);fwrite(hFile, var);
				format(var, 32, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 32, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 32, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
 				format(var, 32, "BoxMaterials=%d\n",PlayerInfo[playerid][pBoxMats]);fwrite(hFile, var);
				format(var, 32, "BoxDrugs=%d\n",PlayerInfo[playerid][pBoxDrugs]);fwrite(hFile, var);
				format(var, 32, "FightingStyle=%d\n",GetPlayerFightingStyle(playerid));fwrite(hFile, var);
				format(var, 32, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 32, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 32, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 32, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 32, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 32, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 32, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 32, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 32, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 32, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 32, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 32, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 32, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 32, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 32, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 32, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 32, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 32, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 32, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 32, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 32, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 32, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 32, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 32, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 32, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 32, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				format(var, 32, "GWD=%f\n",PlayerInfo[playerid][pGWD]);fwrite(hFile, var);
				format(var, 32, "HandyGeld=%d\n",PlayerInfo[playerid][pHandyGeld]);fwrite(hFile, var);
				format(var, 32, "HandyVer=%d\n",PlayerInfo[playerid][pHandyVer]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
					PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 32, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 32, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 32, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 32, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
				format(var, 32, "NewLic=%d\n",PlayerInfo[playerid][pNewLic]);fwrite(hFile, var);
                format(var, 32, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 32, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 32, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 32, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);// hier wird der schein in der Spieler .ini gespeichert
				format(var, 32, "LKWLic=%d\n",PlayerInfo[playerid][pLKWLic]);fwrite(hFile, var);
				format(var, 32, "RollerLic=%d\n",PlayerInfo[playerid][pRollerLic]);fwrite(hFile, var);
				format(var, 32, "MotoLic=%d\n",PlayerInfo[playerid][pMotoLic]);fwrite(hFile, var);
				format(var, 32, "Zig=%d\n",PlayerInfo[playerid][pZig]);fwrite(hFile, var);
				format(var, 32, "Kekse=%d\n",PlayerInfo[playerid][pKekse]);fwrite(hFile, var);
				format(var, 32, "ZigSucht=%d\n",PlayerInfo[playerid][pZigSucht]);fwrite(hFile, var);
				format(var, 32, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 32, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 32, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 32, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 32, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 32, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 32, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 32, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 32, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 32, "Mulltime=%d\n",PlayerInfo[playerid][pMulltime]);fwrite(hFile, var);
				format(var, 32, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 32, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 32, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 32, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 32, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 32, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 32, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 32, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 32, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 32, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 32, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 32, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 32, "Adjustable=%d\n",PlayerInfo[playerid][pAdjustable]);fwrite(hFile, var);
				format(var, 32, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 32, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 32, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 32, "SpawnChange=%d\n",SpawnChange[playerid]);fwrite(hFile, var);
				format(var, 32, "WantedLevel=%d\n",WantedLevel[playerid]);fwrite(hFile, var);
				format(var, 32, "WantedPoints=%d\n",WantedPoints[playerid]);fwrite(hFile, var);
				format(var, 32, "PlayMinutes=%d\n",PlayerInfo[playerid][pPlayMinutes]);fwrite(hFile, var);
				format(var, 32, "GesamtMinutes=%d\n",PlayerInfo[playerid][pGesamtMinutes]);fwrite(hFile, var);
				format(var, 32, "MinutesSinceAn=%d\n",PlayerInfo[playerid][pMinutesSinceAn]);fwrite(hFile, var);
				format(var, 32, "SFPASS=%d\n",PlayerInfo[playerid][pSFPASS]);fwrite(hFile, var);
				format(var, 32, "LVPASS=%d\n",PlayerInfo[playerid][pLVPASS]);fwrite(hFile, var);
				format(var, 32, "Offflucht=%d\n",OfflineFlucht[playerid]);fwrite(hFile, var);
				format(var, 32, "Knast=%d\n",Knast[playerid]);fwrite(hFile, var);
                format(var, 32, "Uhr=%d\n",PlayerInfo[playerid][pUhrID]);fwrite(hFile, var);
				format(var, 32, "Handy=%d\n",PlayerInfo[playerid][pHandyID]);fwrite(hFile, var);
				format(var, 32, "KnastTime=%d\n",KnastTime[playerid]);fwrite(hFile, var);
				format(var, 32, "Perso=%d\n",PlayerInfo[playerid][pOwnPerso]);fwrite(hFile, var);
				format(var, 32, "FrakSperre=%d\n",PlayerInfo[playerid][pFrakSperre]);fwrite(hFile, var);
				format(var, 32, "Gehalt=%d\n",PlayerInfo[playerid][pGehalt]);fwrite(hFile, var);
				format(var, 32, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 32, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 32, "InvWeapon2=%d\n",PlayerInfo[playerid][pInvWeapon2]);fwrite(hFile, var);
				format(var, 32, "InvAmmo2=%d\n",PlayerInfo[playerid][pInvAmmo2]);fwrite(hFile, var);
				format(var, 32, "InvMats=%d\n",PlayerInfo[playerid][pInvMats]);fwrite(hFile, var);
				format(var, 32, "InvDrugs=%d\n",PlayerInfo[playerid][pInvDrugs]);fwrite(hFile, var);
				format(var, 32, "FlugTime=%d\n",PlayerInfo[playerid][pFlugTime]);fwrite(hFile, var);
				format(var, 32, "FarmTime=%d\n",PlayerInfo[playerid][pFarmTime]);fwrite(hFile, var);
				format(var, 32, "GDeaths=%d\n",PlayerInfo[playerid][pGDeaths]);fwrite(hFile, var);
				format(var, 32, "GKills=%d\n",PlayerInfo[playerid][pGKills]);fwrite(hFile, var);
				format(var, 32, "Meldung=%d\n",PlayerInfo[playerid][pMeldung]);fwrite(hFile, var);
				format(var, 32, "Tanke=%d\n",PlayerInfo[playerid][pPtankekey]);fwrite(hFile, var);
				format(var, 32, "Zollpass=%d\n",PlayerInfo[playerid][pZollPass]);fwrite(hFile, var);
				format(var, 32, "ZollpassTime=%d\n",PlayerInfo[playerid][pZollPassTime]);fwrite(hFile, var);
				format(var, 32, "Gesperrt=%d\n",PlayerInfo[playerid][pGesperrt]);fwrite(hFile, var);
				//format(var, 32, "Wanteds=%d\n",WantedLevel[playerid]);fwrite(hFile, var);
				fclose(hFile);
                ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_INPUT,"Login","Willkommen auf German Next Era Life,\n\n\n\n Bitte Logge dich nun ein!\n\n\n","Login","Abbrechen");
			}
	}
	return 1;
}


/*Function OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
	{
	 	SpawnPlayer(playerid);
		return 1;
	}
	if(gPlayerAccount[playerid] == 1 && gPlayerLogged[playerid] == 0)
	{
	    ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_INPUT,"Login","Willkommen auf German Next Era Life,\n\n\n\n Bitte Logge dich nun ein!\n\n\n","Login","Abbrechen");
	}
	else if(gPlayerAccount[playerid] == 0 && gPlayerLogged[playerid] == 0)
	{
		ShowPlayerDialog(playerid,DIALOG_REG,DIALOG_STYLE_MSGBOX,"Account","Herzlich Willkommen auf German Next Era Life,\n\n\nWir Freuen uns das du zu uns gejoint bist.\n\n\nDamit du gleich Loslegen kannst,\n\nmusst du dich Registrieren.\n\nViel Spaß.","Erstellen","Abbrechen");
	}

	PlayerPlaySound(playerid, 1176, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pModel] = Peds[classid][0];
	SetPlayerTeamFromClass(playerid,classid);
	SetupPlayerForClassSelection(playerid);
	return 1;
}*/

Function PlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
		    M_OnPlayerUpdate(playerid);
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "/Accounts/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[32];
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "Supporter=%d\n",PlayerInfo[playerid][pSupporter]);fwrite(hFile, var);
				format(var, 32, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 32, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 32, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 32, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 32, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 32, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 32, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 32, "Kredit=%d\n",PlayerInfo[playerid][pPlayerKredit]);fwrite(hFile, var);
				format(var, 32, "KreditDauer=%d\n",PlayerInfo[playerid][pPlayerKreditDauer]);fwrite(hFile, var);
   				format(var, 32, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 32, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 32, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 32, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 32, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 32, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 32, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 32, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 32, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 32, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 32, "GangJailed=%d\n",PlayerInfo[playerid][pGangJailed]);fwrite(hFile, var);
				format(var, 32, "Mauled=%d\n",PlayerInfo[playerid][pMauled]);fwrite(hFile, var);
				format(var, 32, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 32, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 32, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
 				format(var, 32, "BoxMaterials=%d\n",PlayerInfo[playerid][pBoxMats]);fwrite(hFile, var);
				format(var, 32, "BoxDrugs=%d\n",PlayerInfo[playerid][pBoxDrugs]);fwrite(hFile, var);
				format(var, 32, "FightingStyle=%d\n",GetPlayerFightingStyle(playerid));fwrite(hFile,  var);
				format(var, 32, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 32, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 32, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 32, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 32, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 32, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 32, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 32, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 32, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 32, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 32, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 32, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 32, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 32, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 32, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 32, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 32, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 32, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 32, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 32, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 32, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 32, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 32, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
                format(var, 32, "GWD=%f\n",PlayerInfo[playerid][pGWD]);fwrite(hFile, var);
				format(var, 32, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 32, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 32, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				format(var, 32, "HandyGeld=%d\n",PlayerInfo[playerid][pHandyGeld]);fwrite(hFile, var);
				format(var, 32, "HandyVer=%d\n",PlayerInfo[playerid][pHandyVer]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
					PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 32, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 32, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 32, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 32, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
				format(var, 32, "NewLic=%d\n",PlayerInfo[playerid][pNewLic]);fwrite(hFile, var);
                format(var, 32, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 32, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 32, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 32, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);// hier wird aller 30 min alles geupdated und gespeichert
				format(var, 32, "LKWLic=%d\n",PlayerInfo[playerid][pLKWLic]);fwrite(hFile, var);
				format(var, 32, "RollerLic=%d\n",PlayerInfo[playerid][pRollerLic]);fwrite(hFile, var);
				format(var, 32, "MotoLic=%d\n",PlayerInfo[playerid][pMotoLic]);fwrite(hFile, var);
				format(var, 32, "Zig=%d\n",PlayerInfo[playerid][pZig]);fwrite(hFile, var);
				format(var, 32, "Kekse=%d\n",PlayerInfo[playerid][pKekse]);fwrite(hFile, var);
				format(var, 32, "ZigSucht=%d\n",PlayerInfo[playerid][pZigSucht]);fwrite(hFile, var);
				format(var, 32, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 32, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 32, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 32, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 32, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 32, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 32, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 32, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 32, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 32, "Mulltime=%d\n",PlayerInfo[playerid][pMulltime]);fwrite(hFile, var);
				format(var, 32, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 32, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 32, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 32, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 32, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 32, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 32, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 32, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 32, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 32, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 32, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 32, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 32, "Adjustable=%d\n",PlayerInfo[playerid][pAdjustable]);fwrite(hFile, var);
				format(var, 32, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 32, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 32, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 32, "SpawnChange=%d\n",SpawnChange[playerid]);fwrite(hFile, var);
				format(var, 32, "WantedLevel=%d\n",WantedLevel[playerid]);fwrite(hFile, var);
				format(var, 32, "WantedPoints=%d\n",WantedPoints[playerid]);fwrite(hFile, var);
				format(var, 32, "PlayMinutes=%d\n",PlayerInfo[playerid][pPlayMinutes]);fwrite(hFile, var);
				format(var, 32, "GesamtMinutes=%d\n",PlayerInfo[playerid][pGesamtMinutes]);fwrite(hFile, var);
				format(var, 32, "MinutesSinceAn=%d\n",PlayerInfo[playerid][pMinutesSinceAn]);fwrite(hFile, var);
				format(var, 32, "SFPASS=%d\n",PlayerInfo[playerid][pSFPASS]);fwrite(hFile, var);
				format(var, 32, "LVPASS=%d\n",PlayerInfo[playerid][pLVPASS]);fwrite(hFile, var);
				format(var, 32, "Offflucht=%d\n",OfflineFlucht[playerid]);fwrite(hFile, var);
				format(var, 32, "Knast=%d\n",Knast[playerid]);fwrite(hFile, var);
                format(var, 32, "Uhr=%d\n",PlayerInfo[playerid][pUhrID]);fwrite(hFile, var);
				format(var, 32, "Handy=%d\n",PlayerInfo[playerid][pHandyID]);fwrite(hFile, var);
				format(var, 32, "KnastTime=%d\n",KnastTime[playerid]);fwrite(hFile, var);
				format(var, 32, "Perso=%d\n",PlayerInfo[playerid][pOwnPerso]);fwrite(hFile, var);
				format(var, 32, "FrakSperre=%d\n",PlayerInfo[playerid][pFrakSperre]);fwrite(hFile, var);
				format(var, 32, "Gehalt=%d\n",PlayerInfo[playerid][pGehalt]);fwrite(hFile, var);
				format(var, 32, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 32, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 32, "InvWeapon2=%d\n",PlayerInfo[playerid][pInvWeapon2]);fwrite(hFile, var);
				format(var, 32, "InvAmmo2=%d\n",PlayerInfo[playerid][pInvAmmo2]);fwrite(hFile, var);
				format(var, 32, "InvMats=%d\n",PlayerInfo[playerid][pInvMats]);fwrite(hFile, var);
				format(var, 32, "InvDrugs=%d\n",PlayerInfo[playerid][pInvDrugs]);fwrite(hFile, var);
				format(var, 32, "FlugTime=%d\n",PlayerInfo[playerid][pFlugTime]);fwrite(hFile, var);
				format(var, 32, "FarmTime=%d\n",PlayerInfo[playerid][pFarmTime]);fwrite(hFile, var);
				format(var, 32, "GDeaths=%d\n",PlayerInfo[playerid][pGDeaths]);fwrite(hFile, var);
				format(var, 32, "GKills=%d\n",PlayerInfo[playerid][pGKills]);fwrite(hFile, var);
				format(var, 32, "Meldung=%d\n",PlayerInfo[playerid][pMeldung]);fwrite(hFile, var);
				format(var, 32, "Tanke=%d\n",PlayerInfo[playerid][pPtankekey]);fwrite(hFile, var);
				format(var, 32, "Zollpass=%d\n",PlayerInfo[playerid][pZollPass]);fwrite(hFile, var);
				format(var, 32, "ZollpassTime=%d\n",PlayerInfo[playerid][pZollPassTime]);fwrite(hFile, var);
				format(var, 32, "Gesperrt=%d\n",PlayerInfo[playerid][pGesperrt]);fwrite(hFile, var);
				new weapons[13];
				new ammo[13];
				for (new i = 0; i < 13; i++)
				{
				    GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
				}
				format(var, 32, "waffenslot1=%d\n", weapons[0]);fwrite(hFile, var);
				format(var, 32, "ammoslot1=%d\n", ammo[0]);fwrite(hFile, var);
				format(var, 32, "waffenslot2=%d\n", weapons[1]);fwrite(hFile, var);
				format(var, 32, "ammoslot2=%d\n", ammo[1]);fwrite(hFile, var);
				format(var, 32, "waffenslot3=%d\n", weapons[2]);fwrite(hFile, var);
				format(var, 32, "ammoslot3=%d\n", ammo[2]);fwrite(hFile, var);
				format(var, 32, "waffenslot4=%d\n", weapons[3]);fwrite(hFile, var);
				format(var, 32, "ammoslot4=%d\n", ammo[3]);fwrite(hFile, var);
				format(var, 32, "waffenslot5=%d\n", weapons[4]);fwrite(hFile, var);
				format(var, 32, "ammoslot5=%d\n", ammo[4]);fwrite(hFile, var);
				format(var, 32, "waffenslot6=%d\n", weapons[5]);fwrite(hFile, var);
				format(var, 32, "ammoslot6=%d\n", ammo[5]);fwrite(hFile, var);
				format(var, 32, "waffenslot7=%d\n", weapons[6]);fwrite(hFile, var);
				format(var, 32, "ammoslot7=%d\n", ammo[6]);fwrite(hFile, var);
				format(var, 32, "waffenslot8=%d\n", weapons[7]);fwrite(hFile, var);
				format(var, 32, "ammoslot8=%d\n", ammo[7]);fwrite(hFile, var);
				format(var, 32, "waffenslot9=%d\n", weapons[8]);fwrite(hFile, var);
				format(var, 32, "ammoslot9=%d\n", ammo[8]);fwrite(hFile, var);
				format(var, 32,"waffenslot10=%d\n", weapons[9]);fwrite(hFile, var);
				format(var, 32, "ammoslot10=%d\n", ammo[9]);fwrite(hFile, var);
				format(var, 32, "waffenslot11=%d\n", weapons[10]);fwrite(hFile, var);
				format(var, 32, "ammoslot11=%d\n", ammo[10]);fwrite(hFile, var);
				format(var, 32, "waffenslot12=%d\n", weapons[11]);fwrite(hFile, var);
				format(var, 32, "ammoslot12=%d\n", ammo[11]);fwrite(hFile, var);
				format(var, 32, "waffenslot13=%d\n", weapons[12]);fwrite(hFile, var);
				format(var, 32, "ammoslot13=%d\n", ammo[12]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 1;
}

Function OnPlayerLogin(playerid,password[])
{
	new tmp2[256];
    new string2[128];
	new playername2[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), "/Accounts/%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);
	if ( UserFile )
	{
	    new PassData[256];
	    new keytmp[256], valtmp[256];
	    fread( UserFile , PassData , sizeof( PassData ) );
	    keytmp = ini_GetKey( PassData );
	    if( strcmp( keytmp , "Key" , true ) == 0 )
		{
			valtmp = ini_GetValue( PassData );
			strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
		}
  		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			    	if( strcmp( key , "Supporter" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSupporter] = strval( val ); }
			        if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
			        if( strcmp( key , "UpgradePoints" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][gPupgrade] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
			        if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAge] = strval( val ); }
			        if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pOrigin] = strval( val ); }
			        if( strcmp( key , "CK" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCK] = strval( val ); }
			        if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
			        if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAccount] = strval( val ); }
			        if( strcmp( key , "Kredit" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPlayerKredit] = strval( val ); }
			        if( strcmp( key , "KreditDauer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPlayerKreditDauer] = strval( val ); }
				    if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArrested] = strval( val ); }
			        if( strcmp( key , "WantedDeaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWantedDeaths] = strval( val ); }
			        if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhoneBook] = strval( val ); }
			        if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLottoNr] = strval( val ); }
			        if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishes] = strval( val ); }
			        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiggestFish] = strval( val ); }
			        if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob] = strval( val ); }
			        if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayCheck] = strval( val ); }
			        if( strcmp( key , "HeadValue" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValue] = strval( val ); }
			        if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
 			        if( strcmp( key , "GangJailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGangJailed] = strval( val ); }
 			        if( strcmp( key , "Mauled" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMauled] = strval( val ); }
			        if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
			        if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
			        if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugs] = strval( val ); }
			        if( strcmp( key , "BoxMaterials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxMats] = strval( val ); }
			        if( strcmp( key , "BoxDrugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxDrugs] = strval( val ); }
					if( strcmp( key , "FightingStyle" , true ) == 0 ) { val = ini_GetValue( Data ); SetPlayerFightingStyle(playerid,strval(val)); }
			        if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLeader] = strval( val ); }
			        if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMember] = strval( val ); }
			        if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMember] = strval( val ); }
			        if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRank] = strval( val ); }
			        if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pChar] = strval( val ); }
			        if( strcmp( key , "ContractTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pContractTime] = strval( val ); }
			        if( strcmp( key , "DetSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDetSkill] = strval( val ); }
			        if( strcmp( key , "SexSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSexSkill] = strval( val ); }
			        if( strcmp( key , "BoxSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxSkill] = strval( val ); }
			        if( strcmp( key , "LawSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLawSkill] = strval( val ); }
			        if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
			        if( strcmp( key , "JackSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJackSkill] = strval( val ); }
			        if( strcmp( key , "CarSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarSkill] = strval( val ); }
			        if( strcmp( key , "NewsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNewsSkill] = strval( val ); }
			        if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugsSkill] = strval( val ); }
			        if( strcmp( key , "CookSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCookSkill] = strval( val ); }
			        if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishSkill] = strval( val ); }
			        if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
			        if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHealth] = floatstr( val ); }
			        if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInt] = strval( val ); }
			        if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocal] = strval( val ); }
			        if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTeam] = strval( val ); }
			        if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModel] = strval( val ); }
			        if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
			        if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey] = strval( val ); }
			        if( strcmp( key , "Bizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPbiskey] = strval( val ); }
			        if( strcmp( key , "HandyGeld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHandyGeld] = strval( val ); }
					if( strcmp( key , "HandyVer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHandyVer] = strval( val ); }
			        if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
			        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
			        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
			        if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
			        if( strcmp( key , "NewLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNewLic] = strval( val ); }
                    if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
					if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
			        if( strcmp( key , "FishLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLic] = strval( val ); }
			        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic] = strval( val ); }// Laden von schein wenn du /login machst
			        if( strcmp( key , "LKWLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLKWLic] = strval( val ); }
			        if( strcmp( key , "RollerLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRollerLic] = strval( val ); }
			        if( strcmp( key , "MotoLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMotoLic] = strval( val ); }
			        if( strcmp( key , "Zig" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pZig] = strval( val ); }
					if( strcmp( key , "Kekse", true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKekse] = strval( val ); }
					if( strcmp( key , "ZigSucht" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pZigSucht] = strval( val ); }
			        if( strcmp( key , "Gun1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun1] = strval( val ); }
			        if( strcmp( key , "Gun2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun2] = strval( val ); }
			        if( strcmp( key , "Gun3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun3] = strval( val ); }
			        if( strcmp( key , "Gun4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun4] = strval( val ); }
			        if( strcmp( key , "Ammo1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo1] = strval( val ); }
			        if( strcmp( key , "Ammo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo2] = strval( val ); }
			        if( strcmp( key , "Ammo3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo3] = strval( val ); }
			        if( strcmp( key , "Ammo4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo4] = strval( val ); }
			        if( strcmp( key , "CarTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarTime] = strval( val ); }
			        if( strcmp( key , "Mulltime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMulltime] = strval( val ); }
			        if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
			        if( strcmp( key , "PayDayHad" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDayHad] = strval( val ); }
			        if( strcmp( key , "CDPlayer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCDPlayer] = strval( val ); }
			        if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
			        if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
			        if( strcmp( key , "AlcoholPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAlcoholPerk] = strval( val ); }
			        if( strcmp( key , "DrugPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugPerk] = strval( val ); }
			        if( strcmp( key , "MiserPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMiserPerk] = strval( val ); }
			        if( strcmp( key , "PainPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainPerk] = strval( val ); }
			        if( strcmp( key , "TraderPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTraderPerk] = strval( val ); }
			        if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
			        if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
			        if( strcmp( key , "Adjustable" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdjustable] = strval( val ); }
			        if( strcmp( key , "Fuel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFuel] = strval( val ); }
			        if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
			        if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
					if( strcmp( key , "SpawnChange" , true ) == 0 ) { val = ini_GetValue( Data ); SpawnChange[playerid] = strval( val ); }
                    if( strcmp( key , "WantedLevel" , true ) == 0 ) { val = ini_GetValue( Data ); WantedLevel[playerid] = strval( val ); }
                    if( strcmp( key , "WantedPoints" , true ) == 0 ) { val = ini_GetValue( Data ); WantedPoints[playerid] = strval( val ); }
                    if( strcmp( key , "PlayMinutes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPlayMinutes] = strval( val ); }
                    if( strcmp( key , "GesamtMinutes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGesamtMinutes] = strval( val ); }
                    if( strcmp( key , "MinutesSinceAn" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMinutesSinceAn] = strval( val ); }
					if( strcmp( key , "SFPASS" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSFPASS] = strval( val ); }
			        if( strcmp( key , "LVPASS" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLVPASS] = strval( val ); }
			        if( strcmp( key , "Offflucht" , true ) == 0 ) { val = ini_GetValue( Data ); OfflineFlucht[playerid] = strval( val ); }
			        if( strcmp( key , "Knast" , true ) == 0 ) { val = ini_GetValue( Data ); Knast[playerid] = strval( val ); }
					if( strcmp( key , "Handy" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHandyID] = strval( val ); }
					if( strcmp( key , "Uhr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pUhrID] = strval( val ); }
			        if( strcmp( key , "KnastTime" , true ) == 0 ) { val = ini_GetValue( Data ); KnastTime[playerid] = strval( val ); }
					if( strcmp( key , "Perso" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pOwnPerso] = strval( val ); }
					if( strcmp( key , "FrakSperre" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFrakSperre] = strval( val ); }
					if( strcmp( key , "Gehalt" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGehalt] = strval( val ); }
     				if( strcmp( key , "InvWeapon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvWeapon] = strval( val ); }
			        if( strcmp( key , "InvAmmo" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvAmmo] = strval( val ); }
       				if( strcmp( key , "InvWeapon2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvWeapon2] = strval( val ); }
			        if( strcmp( key , "InvAmmo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvAmmo2] = strval( val ); }
			        if( strcmp( key , "InvMats" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvMats] = strval( val ); }
       				if( strcmp( key , "InvDrugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvDrugs] = strval( val ); }
       				if( strcmp( key , "FlugTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlugTime] = strval( val ); }
       				if( strcmp( key , "FarmTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFarmTime] = strval( val ); }
       				if( strcmp( key , "GDeaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGDeaths] = strval( val ); }
       				if( strcmp( key , "GKills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGKills] = strval( val ); }
                    if( strcmp( key , "GWD" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGWD] = floatstr( val ); }
				    if( strcmp( key , "Meldung" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMeldung] = strval( val ); }
				    if( strcmp( key , "Tanke" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPtankekey] = strval( val ); }
				    if( strcmp( key , "Zollpass" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pZollPass] = strval( val ); }
				    if( strcmp( key , "ZollpassTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pZollPassTime] = strval( val ); }
				    if( strcmp( key , "Gesperrt" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGesperrt] = strval( val ); }
       				new weapon[14];
					new ammo[14];
					for(new i = 1;i< 14;i++)
					{
					    new tmpstring[128];
					    format(tmpstring,sizeof tmpstring, "waffenslot%d",i);
					    if( strcmp( key , tmpstring , true ) == 0)weapon[i-1] = strval(ini_GetValue( Data ));
						format(tmpstring,sizeof tmpstring, "ammoslot%d",i);
						if( strcmp( key , tmpstring , true ) == 0)ammo[i-1] = strval(ini_GetValue( Data ));
						GivePlayerWeapon(playerid,weapon[i-1],ammo[i-1]);
					}
                }//end while
                fclose(UserFile);//close the file after everything has been read in the while
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_INPUT,"Login","Das Passwort ist nicht korrekt! Bitte gib nun dein richtiges Passwort ein:","Login","Abbrechen");
	        fclose(UserFile);
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 4) { Ban(playerid); }
	        return 1;
		}
		PlayerInfo[playerid][pAdjustable] = 0;
		ResetPlayerMoney(playerid);
		ConsumingMoney[playerid] = 1;
		GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
		CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
		for(new fs;fs<sizeof(FightSystem);fs++){
  			GangZoneShowForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
		}
		/*if(WantedPoints[playerid] == 2) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; } }
		else if(WantedPoints[playerid] >= 4 && WantedPoints[playerid] <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; } }
		else if(WantedPoints[playerid] >= 6 && WantedPoints[playerid] <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; } }
		else if(WantedPoints[playerid] >= 8 && WantedPoints[playerid] <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; } }
		else if(WantedPoints[playerid] >= 10 && WantedPoints[playerid] <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; } }
		else if(WantedPoints[playerid] >= 12 && WantedPoints[playerid] <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; } }
		else if(WantedPoints[playerid] >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; } }
		SetPlayerWantedLevel(playerid,WantedLevel[playerid]);
		*/
		new pName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,pName,sizeof(pName));
		format(tbDir,sizeof(tbDir),foxBanFile,pName);
		if(dini_Exists(tbDir))
		{
			if(dini_Int(tbDir,"fbTime")+dini_Int(tbDir,"fbDuration") > Time())
			{
				new sekki=(dini_Int(tbDir,"fbTime")+dini_Int(tbDir,"fbDuration"))-Time(),minni=sekki/60;
				sekki=sekki-minni*60;
				format(ALLSTRING,sizeof(ALLSTRING),"Du wurdest für eine Weile vom Server gebannt. Restliche Zeit: %d Minuten %d Sekunden",minni,sekki);
				SendClientMessage(playerid,COLOR_LIGHTRED,ALLSTRING);
				format(ALLSTRING,sizeof(ALLSTRING),"%s hat versucht mit einem Timeban sich einzuloggen.", pName);
   				ABroadCast(COLOR_YELLOW,ALLSTRING,1);
				Kick(playerid);
			} else { dini_Remove(tbDir); }
		}
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pHealth] = 99.0;
			PlayerInfo[playerid][pPos_x] = 2246.6;
			PlayerInfo[playerid][pPos_y] = -1161.9;
			PlayerInfo[playerid][pPos_z] = 1029.7;
			PlayerInfo[playerid][pInt] = 15;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pModel] = 212;
			PlayerInfo[playerid][pPhousekey] = 255;
			PlayerInfo[playerid][pPbiskey] = 255;
			PlayerInfo[playerid][pAccount] = 0;
			PlayerInfo[playerid][pReg] = 1;
			GivePlayerMoney(playerid, 10000);
		}
		if(PlayerInfo[playerid][pGesperrt] == 1)//PlayerInfo[playerid][pLevel] == -999) //autoban
		{
		    format(string2,sizeof(string2)," %s versucht mit seinem gebannten Account online zu kommen und wurde gekickt!",playername2);
		    ABroadCast(COLOR_LIGHTRED,string2,1);
		    SendClientMessage(playerid,COLOR_RED," Du bist hier gebannt.. also mag dich hier keiner");
		    SendClientMessage(playerid,COLOR_RED," und du hast keine Freunde :D  haha NOOB ");
			Kick(playerid);
			return 1;
		}
		else if(PlayerInfo[playerid][pCK] > 0)
		{
		    Kick(playerid);
		}
		format(string2, sizeof(string2), "Erfolgreich eingeloggt, Willkommen %s",playername2);
		SendClientMessage(playerid, COLOR_GREEN,string2);
		printf("%s has logged in.",playername2);
		if(PlayerInfo[playerid][pDonateRank] > 0)
		{
			SendClientMessage(playerid, COLOR_GREEN,"Du bist Premium Nutzer.");
		}
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string2, sizeof(string2), "Willkommen Admin %d.",PlayerInfo[playerid][pAdmin]);
			SendClientMessage(playerid, COLOR_GREEN,string2);
		}
		if(PlayerInfo[playerid][pSupporter] > 0)
		{
			format(string2, sizeof(string2), "Willkommen Supporter %d.",PlayerInfo[playerid][pSupporter]);
			SendClientMessage(playerid, COLOR_GREEN,string2);
		}
		SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		gPlayerLogged[playerid] = 1;
		SpawnPlayer(playerid);
		format(tmp2, sizeof(tmp2), "~w~Willkommen ~n~~y~ %s", playername2);
		DateProp(playerid);
		GameTextForPlayer(playerid, tmp2, 5000, 1);
		SendClientMessage(playerid, COLOR_YELLOW, motd);
	}
	if(OfflineFlucht[playerid] == 1 && WantedLevel[playerid] > 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTRED, "* Du wurdest Eingesperrt weil du Offline-Flucht begangen hast!");
		SendClientMessage(playerid,COLOR_LIGHTRED, "* Pro WantedLevel 5 Minuten + 30 Minuten Strafe!");
		new sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "*[Auto-Jail] %s wurde wegen Offline-Flucht eignesperrt.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsADChatter(i))
	    	{
     			SendClientMessage(i,COLOR_ALLDEPT,string);
	    	}
		}
		OfflineFlucht[playerid] = 0;
		ResetPlayerWeapons(playerid);
		new wlevel = WantedLevel[playerid];
		PlayerInfo[playerid][pJailed] = 1;
		PlayerInfo[playerid][pJailTime] = (wlevel*300)+1800;
		SetPlayerInterior(playerid, 3);
		if(LSPDZellen == 0)//zelle1
		{
			SetPlayerPos(playerid,219.4217,110.5207,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 1)//zelle2
		{
			SetPlayerPos(playerid,223.2922,110.6890,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 2)//zelle3
		{
			SetPlayerPos(playerid,215.0419,110.2922,999.0156);
			LSPDZellen = 0;
		}
		WantedPoints[playerid] = 0;
		SetPlayerWantedLevel(playerid,0);
		WantedLevel[playerid] = 0;
	}
	else if(OfflineFlucht[playerid] == 1 && WantedLevel[playerid] == 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTRED, "* Du wurdest eingesperrt weil du Offline-Flucht begangen hast!");
		new sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "*[Auto-Jail] %s wurde wegen Offline-Flucht eingesperrt.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsADChatter(i))
	    	{
     			SendClientMessage(i,COLOR_ALLDEPT,string);
	    	}
		}
		OfflineFlucht[playerid] = 0;
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pJailed] = 1;
		PlayerInfo[playerid][pJailTime] = 300;
		SetPlayerInterior(playerid, 3);
		if(LSPDZellen == 0)//zelle1
		{
			SetPlayerPos(playerid,215.0419,110.2922,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 1)//zelle2
		{
			SetPlayerPos(playerid,227.8457,110.7000,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 2)//zelle3
		{
			SetPlayerPos(playerid,223.2922,110.6890,999.0156);
			LSPDZellen = 0;
		}
		WantedPoints[playerid] = 0;
		SetPlayerWantedLevel(playerid,0);
		WantedLevel[playerid] = 0;
	}
	else if(OfflineFlucht[playerid] == 2 && WantedLevel[playerid] > 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTRED, "* Du wurdest Eingesperrt weil du Gecuffed einen Crash hattest!");
		SendClientMessage(playerid,COLOR_LIGHTRED, "* Pro WantedLevel 5 Minuten!");
		new sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "*[Auto-Jail] %s wurde wegen Exe-Crash eingesperrt.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsADChatter(i))
	    	{
     			SendClientMessage(i,COLOR_ALLDEPT,string);
	    	}
		}
		OfflineFlucht[playerid] = 0;
		ResetPlayerWeapons(playerid);
		new wlevel = WantedLevel[playerid];
		PlayerInfo[playerid][pJailed] = 1;
		PlayerInfo[playerid][pJailTime] = wlevel*300;
		SetPlayerInterior(playerid, 3);
		if(LSPDZellen == 0)//zelle1
		{
			SetPlayerPos(playerid,223.2922,110.6890,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 1)//zelle2
		{
			SetPlayerPos(playerid,227.8457,110.7000,999.0156);
			LSPDZellen += 1;
		}
		if(LSPDZellen == 2)//zelle3
		{
			SetPlayerPos(playerid,215.0419,110.2922,999.0156);
			LSPDZellen = 0;
		}
		WantedPoints[playerid] = 0;
		SetPlayerWantedLevel(playerid,0);
		WantedLevel[playerid] = 0;
	}
	new stern = WantedLevel[playerid];
	SetPlayerWantedLevel(playerid,stern);
	WantedPoints[playerid] = stern * 2;
	if(PlayerInfo[playerid][pLevel] <= 3)
	{
		Noob[playerid] = Create3DTextLabel("{FFFFFF}*Neuling*",COLOR_WHITE,30.0,40.0,50.0,40.0,0);
		Attach3DTextLabelToPlayer(Noob[playerid], playerid, 0.0, 0.0, 0.4);
		Noobi[playerid] = 1;
	}
	KHSperre[playerid] = 1;
	SetTimerEx("KHSP",60000,0,"i",playerid);
	return 1;
}


stock Log(filename[],write[])
{
	new File:LogFile, str[256], mhour, mminute, msecond, myear, mmonth, mday;
	if(fexist(filename))
	{
		LogFile = fopen(filename,io_append);
	}
	else
	{
		LogFile = fopen(filename,io_write);
	}
	gettime(mhour,mminute,msecond);
	getdate(myear,mmonth,mday);
	format(str,sizeof(str),"%02d.%02d.%d  %02d:%02d:%02d: %s\n",mday,mmonth,myear,mhour,mminute,msecond,write);
	fwrite(LogFile,str);
	fclose(LogFile);
}


stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

Function OnPropUpdate()
{
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmourx],
		HouseInfo[idx][hArmoury],
		HouseInfo[idx][hArmourz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel]);
		if(idx == 0)
		{
			file2 = fopen("property.cfg", io_write);
		}
		else
		{
			file2 = fopen("property.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbMessage],
		SBizzInfo[idx][sbExtortion],
		SBizzInfo[idx][sbEntranceX],
		SBizzInfo[idx][sbEntranceY],
		SBizzInfo[idx][sbEntranceZ],
		SBizzInfo[idx][sbLevelNeeded],
		SBizzInfo[idx][sbBuyPrice],
		SBizzInfo[idx][sbEntranceCost],
		SBizzInfo[idx][sbTill],
		SBizzInfo[idx][sbLocked],
		SBizzInfo[idx][sbInterior],
		SBizzInfo[idx][sbProducts],
		SBizzInfo[idx][sbMaxProducts],
		SBizzInfo[idx][sbPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
 	idx = 0;
	while (idx < sizeof(TankeInfo))
	{
		new coordsstring[256];
		//Kauf/Verkauft|Besitzer|Message|Teilhaber|X|Y|Z|Kauflevel|Kaufpreis|Tankpreis|Tankkasse|OffenZu|Interior|Products|MaxProducts|PriceProd
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		TankeInfo[idx][tOwned],
		TankeInfo[idx][tOwner],
		TankeInfo[idx][tMessage],
		TankeInfo[idx][tExtortion],
		TankeInfo[idx][tEntranceX],
		TankeInfo[idx][tEntranceY],
		TankeInfo[idx][tEntranceZ],
		TankeInfo[idx][tLevelNeeded],
		TankeInfo[idx][tBuyPrice],
		TankeInfo[idx][tEntranceCost],
		TankeInfo[idx][tTill],
		TankeInfo[idx][tLocked],
		TankeInfo[idx][tInterior],
		TankeInfo[idx][tProducts],
		TankeInfo[idx][tMaxProducts],
		TankeInfo[idx][tPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("fuelstations.cfg", io_write);
		}
		else
		{
			file2 = fopen("fuelstations.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
		Update3d();
 	}
	return 1;
}

Function BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}


Function SBroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pSupporter] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

Function ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

Function OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

Function SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendIRCMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendTeamBeepMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

Function SendEnemyMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] >= 3)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function IsALeader(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
		if(leader==1 || leader==2 || leader==3 || leader==4 || leader==7 || leader==12 || leader==15 || leader==18 || leader==19)
		{
		    return 1;
		}
	}
	return 0;
}


Function SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendLeaderMSG(leaderid, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLeader] == leaderid)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

Function StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

Function PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

Function PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

dcmd_gocords(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 9) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin.");
	new Float:coord[3], string[128];
	if(sscanf(params, "p,fff", coord[0],coord[1],coord[2])) return SendClientMessage(playerid, COLOR_GREY, "Befehl: /gocoords [X],[Y],[Z]");
	SetPlayerPos(playerid, coord[0], coord[1],coord[2]);
	format(string, sizeof(string), "X:%f Y:%f Z:%f", coord[0],coord[1],coord[2]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}
// /gocords

dcmd_arb(playerid, params[]) // Erstellen des Objektes
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 2) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerFacingAngle(playerid, pR);
	if(sperrespawned[playerid]==MAX_Objekt)
	{
	    format(stringx, sizeof(stringx), "Du hast bereits %d Sperren erstellt!", MAX_Objekt);
	    SendClientMessage(playerid, COLOR_GREY, stringx);
	    return 1;
	}
	else
	{
		for(new i=0; i<MAX_Objekt; i++)
		{
		    if(Sperre[playerid][i] == 0)
		    {
		        if(Objekt[playerid] == 1) { Sperre[playerid][i] = CreateObject(1225, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+0.5, pZ); } // Explosives Fass
		        else if(Objekt[playerid] == 3) { Sperre[playerid][i] = CreateObject(981, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+2.5, pZ); } // Roadblock
		        else if(Objekt[playerid] == 4) { Sperre[playerid][i] = CreateObject(990, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+1, pZ); } // Zaun
		        else if(Objekt[playerid] == 5) { Sperre[playerid][i] = CreateObject(969, pX, pY, pZ-1.5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+0.5, pZ); } // Tor
		        else if(Objekt[playerid] == 6) { Sperre[playerid][i] = CreateObject(993, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+1, pZ); } // Zaun
		        else if(Objekt[playerid] == 7) { Sperre[playerid][i] = CreateObject(978, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+0.5); } // Planke
		        else if(Objekt[playerid] == 8) { Sperre[playerid][i] = CreateObject(3279, pX-1.500, pY-1, pZ-1, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+18); } // Turm
		        else if(Objekt[playerid] == 9) { Sperre[playerid][i] = CreateObject(18780, pX, pY, pZ+10, 0, 0, pR+180); } // Rampe
		        else if(Objekt[playerid] == 10) { Sperre[playerid][i] = CreateObject(18778, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+2); } // Rampe (Breit)
		        else if(Objekt[playerid] == 11) { Sperre[playerid][i] = CreateObject(18779, pX, pY, pZ+8, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+5, pZ); } // Rampe (Steil)
		        else if(Objekt[playerid] == 12) { Sperre[playerid][i] = CreateObject(13607, pX, pY, pZ+5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+5.5); } // Große Plattform
		        else if(Objekt[playerid] == 13) { Sperre[playerid][i] = CreateObject(18759, pX, pY, pZ-0.75, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // DM Cage 1
		        else if(Objekt[playerid] == 14) { Sperre[playerid][i] = CreateObject(19074, pX, pY, pZ+1.5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // DM cage 2
		        else if(Objekt[playerid] == 15) { Sperre[playerid][i] = CreateObject(18843, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // Glas Kugel
		        else if(Objekt[playerid] == 999999) { Sperre[playerid][i] = CreateObject(ObjektID[playerid], pX, pY, pZ+1, 0, 0, pR+180); } // Objekt ID
 				else Sperre[playerid][i] = CreateObject(973, pX, pY, pZ, 0, 0, pR+180); // Leitplanke
				sperrespawned[playerid] ++;
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid, name, sizeof(name));
				format(stringx, sizeof(stringx), "Admin Objekt %d erstellt von %s", i+1, name);
				SendClientMessage(playerid, COLOR_GREY, stringx);
				SperreLabel[playerid][i] = Create3DTextLabel(stringx, COLOR_WHITE, pX, pY, pZ, 20.0, 0, 1);
		        return 1;
		    }
		}
	}
	return 1;
}

dcmd_deletearb(playerid, params[]) // Eine eigene Sperre zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 2) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	new DSperre;
	if(sscanf(params, "i", DSperre)) return SendClientMessage(playerid, COLOR_GREY, "/deletearb [Barriere]");
	if(Sperre[playerid][DSperre-1] == 0) return SendClientMessage(playerid, COLOR_GREY, "Sperre existiert nicht!");
	DestroyObject(Sperre[playerid][DSperre-1]);
	Delete3DTextLabel(SperreLabel[playerid][DSperre-1]);
	format(stringx, sizeof(stringx), "Barriere %d zerstört!", DSperre);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	Sperre[playerid][DSperre-1] = 0;
	sperrespawned[playerid] --;
	return 1;
}

dcmd_deletearbfor(playerid, params[]) // Sperre eines anderen Spieler's zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	new DSperre, pID, name[MAX_PLAYER_NAME], pname[MAX_PLAYER_NAME];
	if(sscanf(params, "ui",pID, DSperre)) return SendClientMessage(playerid, COLOR_GREY, "/deletearb [NAME/ID] [Barriere]");
	if(Sperre[pID][DSperre-1] == 0) return SendClientMessage(playerid, COLOR_GREY, "Sperre existiert nicht!");
	DestroyObject(Sperre[pID][DSperre-1]);
	Delete3DTextLabel(SperreLabel[pID][DSperre-1]);
	GetPlayerName(playerid, name, sizeof(name));
	GetPlayerName(pID, pname, sizeof(pname));
	format(stringx, sizeof(stringx), "Du hast Barriere %d von %s zerstört.", DSperre, pname);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	format(stringx, sizeof(stringx), "Barriere %d wurde von %s zerstört!", DSperre, name);
	SendClientMessage(pID, COLOR_GREY, stringx);
	Sperre[pID][DSperre-1] = 0;
	sperrespawned[pID] --;
	return 1;
}

dcmd_sirene(playerid,params[])
{
	#pragma unused params
	if(!IsACop(playerid))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(sirenean[vid] == true)
		{
	   		if(sirenean[vid] == false)return SendClientMessage(playerid,0xFF0000,"Dieses Fahrzeug hat keine Sirene");
	   		DestroyDynamicObject(sirene[vid]);
	   		sirenean[vid] =false;
        	SendClientMessage(playerid,0xFF0000,"Du hast die Sirene ausgeschaltet!");
		}
		else// if(sirenean[vid] == true)
	   	{
			if(sirenean[vid] == true)return SendClientMessage(playerid,0xFF0000,"Dieses Fahrzeug hat bereits eine Sirene!");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			sirene[vid] = CreateDynamicObject(18646,x,y,z,0,0,0,100);
			AttachObjectToVehicle(sirene[vid],vid,-0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
			sirenean[vid] = true;
			SendClientMessage(playerid,0xFF0000,"Du hast die Sirene angeschaltet!");
	   	}
	}
	return 1;
}

dcmd_arball(playerid, params[]) // Eigene Sperren zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 2) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
    for(new i=0; i<MAX_Objekt; i++)
	{
		DestroyObject(Sperre[playerid][i]);
		Sperre[playerid][i] = 0;
		Delete3DTextLabel(SperreLabel[playerid][i]);
		sperrespawned[playerid] = 0;
	}
	SendClientMessage(playerid, COLOR_GREY, "Du hast deine Sperren zerstört.");
	return 1;
}

dcmd_arbforall(playerid, params[]) // Bei diesem Command sind alle Sperren weg [ nicht nur eigene ]
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 1337) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	for(new user; user<MAX_PLAYERS; user++)
	{
	    for(new i=0; i<MAX_Objekt; i++)
		{
			DestroyObject(Sperre[user][i]);
			Sperre[user][i] = 0;
			Delete3DTextLabel(SperreLabel[user][i]);
			sperrespawned[i] = 0;
		}
	}
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	format(stringx, sizeof(stringx), "Admin %s hat sämtliche Sperren zerstört.", name);
	ABroadCast(COLOR_RED, stringx, 2);
	return 1;
}

dcmd_arbobj(playerid, params[]) // Objekt auswahl
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	ShowPlayerDialog(playerid, DIALOG_ARBOBJ, DIALOG_STYLE_LIST, "Admin Objekt", "1. Explosives Fass\n2. Leitplanke Grau\n3. Straßensperre\n4. Zaun 1(Geht kaputt)\n5. Tor\n6. Zaun 2(Geht kaputt)\n7. Leitplanke (Links)\n8. Turm\n9. Rampe\n10. Rampe(Breit)\n11. Rampe(Steil)\n12. Große Plattform\n13. DM Käfig 1\n14. DM Käfig 2\n15. Glas Kugel\n16. Objekt wählen", "Auswählen", "Abbrechen");
	return 1;
}


dcmd_arbobjid(playerid, params[])
{
	#pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 1337) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin / nicht eingeloggt.");
	new objid;
	if(sscanf(params, "i", objid)) return SendClientMessage(playerid, COLOR_GREY, "Befehl: /arbobjid [Objekt ID]");
	Objekt[playerid] = 999999;
	ObjektID[playerid] = objid;
	format(stringx, sizeof(stringx), "Du hast nun Objekt %d zum spawnen.", objid);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	return 1;
}


dcmd_zollcontrol(playerid, params[])
{
	#pragma unused params
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Polizist / nicht im FBI.");
	if(PlayerInfo[playerid][pRank] < 2) return SendClientMessage(playerid, COLOR_GREY, "Du hast noch nicht Rank 2 oder höher.");
	ShowPlayerDialog(playerid, DIALOG_ZOLLCONTROL, DIALOG_STYLE_LIST, "Zollkontrolle", "1. Zoll ID eingeben\n2. LS-SF Zölle auf-/abschliessen\n3. LS-LV Zölle auf-/abschliessen\n4. SF-LV Zölle auf-/abschliessen", "Wählen", "Abbrechen");
	return 1;
}

dcmd_givedonator(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2000)
	{
		new pID, Rank;
		if(sscanf(params, "ui", pID, Rank)) return SendClientMessage(playerid, COLOR_WHITE, "Befehl: /givedonator [Spieler-ID/Name] [Donatorrank]");
		if(!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_WHITE, "Der Spieler ist nicht Online.");
		if(Rank==0||Rank >= 5) return SendClientMessage(playerid, COLOR_GREY, "Es gibt nur die Ränge 1-4.");
		if(Rank == 1) {
		    GivePlayerMoney(pID, 50000);
		    PlayerInfo[pID][pExp] += 3;
		}
		else if(Rank == 2) {
		    GivePlayerMoney(pID, 100000);
		    PlayerInfo[pID][pExp] += 6;
		}
		else if(Rank == 3) {
		    GivePlayerMoney(pID, 150000);
		    PlayerInfo[pID][pExp] += 9;
		}
		else if(Rank == 4) {
		    GivePlayerMoney(pID, 350000);
		    PlayerInfo[pID][pExp] += 12;
		}
		PlayerInfo[pID][pDonateRank] = Rank;
		format(stringx, sizeof(stringx), "Herzlichen Glückwunsch! Du hast den Donator-Rang %d! Siehe unter /rechte zu sehen was er dir für Vorteile bringt.", Rank);
		SendClientMessage(pID, COLOR_LIGHTBLUE, stringx);
		format(stringx, sizeof(stringx), "AdmCmd: Admin %s hat %s den Donator-Rang %d gegeben!", MeinName(playerid), MeinName(pID), Rank);
		ABroadCast(COLOR_LIGHTRED, stringx, 1);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Nur für Projektleiter/High Admins!");
	return 1;
}
/*
dcmd_unban(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht eingeloggt.");
	if(PlayerInfo[playerid][pAdmin] <= 1999) return SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Projektleiter/High-Admin.");
	new accname[MAX_PLAYER_NAME];
	if(sscanf(params, "s", accname)) return SendClientMessage(playerid, COLOR_WHITE, "Befehl: /unban [EXAKTER Accountname]");
	new acc[MAX_PLAYER_NAME+20];
	format(acc,sizeof(acc),"/Accounts/%s.ini",accname);
	if(!fexist(acc)) {
		format(stringx,sizeof(stringx)," Der Account %s existiert nicht!",accname);
		SendClientMessage(playerid,COLOR_GRAD2,stringx);
		return 1;
	}
	new File:banaccount = fopen(acc,io_write);
	fwrite(banaccount,"Gesperrt=0\n");
	fclose(banaccount);
	format(stringx, sizeof(stringx), "AdmCmd: Admin %s hat %s entbannt!", MeinName(playerid), accname);
	ABroadCast(COLOR_LIGHTRED, stringx, 1);
	return 1;
}
*/

//---------------------------<[ OnPlayerCommandText ]>-------------------------------------------------------- <mark>

Function OnPlayerCommandText(playerid, cmdtext[])
{
	M_OnPlayerCommandText(playerid,cmdtext);
	new string[256];
	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	new dancestyle;
	cmd = strtok(cmdtext, idx);
    	GetPlayerName(playerid,sendername,sizeof(sendername));
/*	dcmd(tban,4,cmdtext);
	dcmd(tunban,6,cmdtext);
	dcmd(kennzeichenerlauben,19,cmdtext);
	dcmd(kennzeichen,11,cmdtext);
	dcmd(sirene,6,cmdtext);
	dcmd(licht,5,cmdtext);
	dcmd(kofferraum,10,cmdtext);
	dcmd(farbe,5,cmdtext);
	dcmd(efa,3,cmdtext);*/
	dcmd(gocords,7,cmdtext);
	dcmd(zollcontrol,11,cmdtext);
	dcmd(sirene,6,cmdtext);
	dcmd(givedonator,11,cmdtext);
	//dcmd(unban,5,cmdtext);

	dcmd(arbobjid,8,cmdtext);
	dcmd(arb,3,cmdtext);
	dcmd(deletearb,9,cmdtext);
	dcmd(deletearbfor,12,cmdtext);
	dcmd(arball,6,cmdtext);
	dcmd(arbforall,9,cmdtext);
	dcmd(arbobj,6,cmdtext);
    if(strcmp(cmd, "/supmobil", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 1||PlayerInfo[playerid][pSupporter] >= 1)
	        {
				if(supmobil[playerid] != 0)
				{
			  		new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(supmobil[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		    		SetVehicleParamsEx(supmobil[playerid],VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				    DestroyVehicle(supmobil[playerid]);
				    Delete3DTextLabel(suptext[playerid]);
				    SendClientMessage(playerid, COLOR_GREY, "Fahrzeug vernichtet.");
				    supmobil[playerid] = 0;
				}
				else
				{
				    ShowPlayerDialog(playerid, DIALOG_SUPMOBIL, DIALOG_STYLE_LIST, "Fahrzeug Auswahl", "1. Comet\n2. Sultan\n3. Bus\n4. NRG\n5. Boot\n6. Heli\n7. Fahrzeug ID", "Auswahl", "Abbrechen");
				}
	        }
	        else return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin.");
		}
		return 1;
	}
     //=========================================
    //====== GW LALALAL!
    if(strcmp(cmdtext,"/ctf",true)==0)
    {
	    if(IsAFightFaction(GetPlayerFaction(playerid)))
		{
			new TempZone = GetPlayerFightzone(playerid);
			if(TempZone != -14)
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			        return SendClientMessage(playerid,FS_COL_GREY,"** Du darfst das nur zu Fuß machen ...");
				if(!FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] == -255)
				    return SendClientMessage(playerid,FS_COL_GREY,"** Hier gibt es nichts zu erobern.");

				if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid))
				{
				    if(IsPlayerInRangeOfPoint(playerid,5.0,FightSystem[TempZone][fsCTFx],FightSystem[TempZone][fsCTFy],FightSystem[TempZone][fsCTFz]))
					{
				        if(FightSystem[TempZone][fsCTF][0] != -255)
						{
						    if(GetPlayerFaction(FightSystem[TempZone][fsCTF][0]) != GetPlayerFaction(playerid))
						        SendClientMessage(playerid,FS_COL_GREY,"** Die Flagge wird von deinen Feinden erobert, töte sie zuerst!");
							else
						        SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia erobert bereits die Flagge!");
							return 1;
						}
						FightSystem[TempZone][fsCTF][0] = playerid;
						new fsName[MAX_PLAYER_NAME];
						GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
						new fsText[128];
						format(fsText,sizeof(fsText),">>> Fight <<< | %s hat begonnen die Flagge zu erobern!",fsName);
						for(new i;i<MAX_PLAYERS;i++)
						{
							if(IsPlayerConnected(i))
							{
								if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction])
								{
                            		PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,FS_COL_YELLOW,fsText);
								}
							}
						}
				    }
					else
					{
						SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in der nähe der Flagge!");
					}
				}
				else
				{
					SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in diesem Fight verwickelt ...");
				}
			}
			else
			{
				SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
			}
		}
		else
		{
			SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		}
		return 1;
	}
	if(strcmp(cmdtext,"/invade",true)==0){
	    if(IsAFightFaction(GetPlayerFaction(playerid))){
	        for(new fs;fs<sizeof(FightSystem);fs++){
	            if((FightSystem[fs][fsOwnerFaction] == GetPlayerFaction(playerid) && FightSystem[fs][fsFightTime]) || FightSystem[fs][fsAttackFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia ist bereits in einem Fight.");
	        }
	        new on[2];
	        on[0] = 0;
	        on[1] = 0;
			for(new fs;fs<sizeof(FightSystem);fs++){
			    for(new p=0;p<MAX_PLAYERS;p++)
			    {
					if(GetPlayerFaction(p) == FightSystem[fs][fsOwnerFaction]) {
					    on[0]++;
					}
					if(GetPlayerFaction(p) == GetPlayerFaction(playerid))
					{
					    on[1]++;
					}
				}
			}
			if(testphase == 0) {
				if(on[0] <= 2) return SendClientMessage(playerid, COLOR_WHITE, "Es sind nicht genügend Gegner Online (mindestens 3)");
				if(on[1] <= 2) return SendClientMessage(playerid, COLOR_WHITE, "Es sind nicht genügend Mitglieder deiner Fraktion Online (mindestens 3)");
			}
	        new TempZone = GetPlayerFightzone(playerid);
	        if(TempZone != -255){
  	            if(FightSystem[TempZone][fsFightTimeCool] != 0) {
  	                format(stringx, sizeof(stringx), "Das Gebiet kann erst wieder in ca. %d Minuten erobert werden.", FightSystem[TempZone][fsFightTimeCool]);
  	                return SendClientMessage(playerid, FS_COL_GREY,stringx);
				}

	            if(!IsAFightFaction(FightSystem[TempZone][fsOwnerFaction]))
	                return SendClientMessage(playerid,FS_COL_GREY,"Gebiet wurde ausgeschaltet.");
	            if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Man greift nicht seine eigenen Leute an.");
				if(FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] != -255)
				    return SendClientMessage(playerid,FS_COL_GREY,"** In diesem Gebiet wird bereits geschossen.");
				if(FightSystem[TempZone][fsLastFight]){
				    new fsText[178];
				    format(fsText,sizeof(fsText),"Ganggebiet: Dieses Ganggebiet wurde bereits Angegriffen, wartet noch: '%d' Minuten.",FightSystem[TempZone][fsLastFight]);
				    SendClientMessage(playerid,FS_COL_GREY,fsText);
				    return 1;
				}
				for(new fs;fs<sizeof(FightSystem);fs++){
					if(FightSystem[fs][fsOwnerFaction] == FightSystem[TempZone][fsOwnerFaction] && (FightSystem[fs][fsFightTime] || FightSystem[fs][fsAttackFaction] != -255))
						return SendClientMessage(playerid,FS_COL_GREY,"Ganggebiet: Die Gang / Mafia der das Ganggebiet gehört hat bereits ein Kampf.");
				}
                new fsTextToOwner[255];
                format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr werden von: %s angegriffen, setzt euch zur wehr!",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				new fsName[MAX_PLAYER_NAME];
				GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
				new fsTextToAttack[255];
                format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | %s hat ein Kampf mit: %s begonnen, macht sie Platt!",fsName,GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				new fsText[64];
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsWinKills],"~y~00 Kills");
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsLoseKills],"~y~00 Kills");
				TextDrawSetString(FightSystem[TempZone][fsTime],"Verbl. Zeit: 30 Minuten");//ZEIT
				for(new i;i<MAX_PLAYERS;i++){
				    if(IsPlayerConnected(i)){
    					GangZoneFlashForPlayer(i,FightSystem[TempZone][fsZoneID],GetZoneColorOfFaction(GetPlayerFaction(playerid)));
				    	if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction]){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
				    	if(GetPlayerFaction(i) == GetPlayerFaction(playerid)){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
					}
				}
				FightSystem[TempZone][fsAttackFaction] = GetPlayerFaction(playerid);
    			FightSystem[TempZone][fsKillsOfOwner] = 0;
	    	    FightSystem[TempZone][fsKillsOfAttack] = 0;
	    	    FightSystem[TempZone][fsFightTime] = 30;//ZEIT
	    	    FightSystem[TempZone][fsFightTimeCool] = 90;//ZEIT
	    	    FightSystem[TempZone][fsCTF][0] = -255;
	    	    FightSystem[TempZone][fsCTF][1] = 0;
	    	    FightSystem[TempZone][fsCTF][2] = 0;
	    	    return 1;
			}return SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
	    }else SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		return 1;
	}
    //===================================================
	dcmd(efa,3,cmdtext);
	if(strcmp(cmdtext,"/fpark",true)==0){
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
	        new fc;while(fc<sizeof(FactionCars)){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
					if(GetPlayerVehicleID(playerid) == FactionCars[fc][fCarid]){
					    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL || GetPlayerLeader(playerid) == FactionCars[fc][fFaction][0]){
					        GetVehiclePos(FactionCars[fc][fCarid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2]);
							GetVehicleZAngle(FactionCars[fc][fCarid],FactionCars[fc][fPos][3]);
					        SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast das Fraktionsfahrzeug erfolgreich umgeparkt.");
					    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist dazu nicht berechtigt.");
						return true;
					}
	            }fc++;
	        }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
		}else SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fahrzeug oder bist nicht der Fahrer.");
		return true;
	}
	if(strcmp(cmdtext,"/fcarsell",true)==0){
	    if(GetPlayerLeader(playerid)){
	        if(IsAllowedFactionToBuy(GetPlayerFaction(playerid))){
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
					new Carid1 = GetPlayerVehicleID(playerid);
					for(new fc;fc<sizeof(FactionCars);fc++){
	                    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	                        if(Carid1 == FactionCars[fc][fCarid]){
							    if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid)){
							        FactionCars[fc][fVehid] = -255;
							        if(DestroyVehicle(FactionCars[fc][fCarid]))
							            FactionCars[fc][fCarid] = -255;
									new fText[178];
									format(fText,sizeof(fText),"Du hast das Fraktionsfahrzeug erfolgreich für $%d(50%% vom Kaufpreis) verkauft.",(FactionCars[fc][fPrice]/2));
									SendClientMessage(playerid,FACTION_COL_YELLOW,fText);
									CallRemoteFunction("Script_GivePlayerMoney","id",playerid,(FactionCars[fc][fPrice]/2));
							    }
							    else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht der besitzer dieses Fahrzeuges.");
							    return true;
							}
	                    }
	                }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
				}else SendClientMessage(playerid,FACTION_COL_GREY,"Du musst der Fahrer eines Fahrzeuges sein.");
	        }else SendClientMessage(playerid,FACTION_COL_GREY,"Deine Fraktion ist dazu nicht berechtigt.");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	if(strcmp(cmdtext,"/lfa",true)==0){
	    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
			for(new fc;fc<sizeof(FactionCars);fc++){
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
					new Float:fX,Float:fY,Float:fZ;
					GetVehiclePos(FactionCars[fc][fCarid],fX,fY,fZ);
					if(IsPlayerInRangeOfPoint(playerid,4.0,fX,fY,fZ)){
					    FactionCars[fc][fVehid] = -255;
						if(DestroyVehicle(FactionCars[fc][fCarid])){
						    FactionCars[fc][fCarid] = -255;
						}return SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast das Fraktionsfahrzeug entfernt.");
					}
			    }
			}
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
		return true;
	}
	if(strcmp(cmdtext,"/rafa",true)==0){
	    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
	        new fName[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,fName,sizeof(fName));
	        format(string,sizeof(string),"Server: %s hat alle Fraktionsfahrzeuge respawnt.",fName);
	        SendClientMessageToAll(FACTION_COL_YELLOW,string);
	        for(new fc;fc<sizeof(FactionCars);fc++){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					DestroyAndCreateFactionCar(fc);
	        }
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	if(strcmp(cmdtext,"/ramfa",true)==0){
	    if(GetPlayerLeader(playerid)){
	        if(gettime() < LastRespawned[GetPlayerFaction(playerid)-1])
	       		return SendClientMessage(playerid,FACTION_COL_GREY,"Du kannst deine Fahrzeuge nur alle '5' Minuten respawnen.");
			LastRespawned[GetPlayerFaction(playerid)-1] = gettime()+(60*5);
			for(new fc;fc<sizeof(FactionCars);fc++){
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
			        if(FactionCars[fc][fFaction][0] == GetPlayerFaction(playerid)){
			            DestroyAndCreateFactionCar(fc);
			        }
			    }
			}SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast deine Fraktionsfahrzeuge erfolgreich respawnt.");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	#if defined FACTION_CARS_LOCKABLE
	if(strcmp(cmdtext,"/flock",true)==0){
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
	        for(new fc;fc<sizeof(FactionCars);fc++){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	                if(GetPlayerVehicleID(playerid) == FactionCars[fc][fCarid]){
	                    for(new f;f<5;f++){
	                        if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL || GetPlayerFaction(playerid) == FactionCars[fc][fFaction][f]){
	                            PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
	                            if(FactionCars[fc][fLock] == true){
	                                FactionCars[fc][fLock] = false;
									fUnlockCar(FactionCars[fc][fCarid]);
									GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~Aufgeschlossen",5000,3);
	                            }
	                            else if(FactionCars[fc][fLock] == false){
	                                fLockCar(FactionCars[fc][fCarid]);
				    				FactionCars[fc][fLock] = true;
			    					GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~Abgeschlossen",5000,3);
	                            }break;
	                        }
	                    }return true;
	                }
	            }
	        }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug!");
	    }else{
	    	if(GetPlayerState(playerid)==PLAYER_STATE_PASSENGER)
		        SendClientMessage(playerid,FACTION_COL_GREY,"Du musst der Fahrer dieses Fahrzeuges sein.");
			else
				SendClientMessage(playerid,FACTION_COL_GREY,"Du muss in einem Fahrzeug sitzen.");
		}return true;
	}
	#endif
//==============================
	/*
	if(strcmp(cmdtext,"/ctf",true)==0)
	{
	    if(IsAFightFaction(GetPlayerFaction(playerid)))
		{
			new TempZone = GetPlayerFightzone(playerid);
			if(TempZone != -14)
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			        return SendClientMessage(playerid,FS_COL_GREY,"** Du darfst das nur zu Fuß machen ...");
				if(!FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] == -14)
				    return SendClientMessage(playerid,FS_COL_GREY,"** Hier gibt es nichts zu erobern.");

				if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid))
				{
				    if(IsPlayerInRangeOfPoint(playerid,5.0,FightSystem[TempZone][fsCTFx],FightSystem[TempZone][fsCTFy],FightSystem[TempZone][fsCTFz]))
					{
				        if(FightSystem[TempZone][fsCTF][0] != -14)
						{
						    if(GetPlayerFaction(FightSystem[TempZone][fsCTF][0]) != GetPlayerFaction(playerid))
						        SendClientMessage(playerid,FS_COL_GREY,"** Die Flagge wird von deinen Feinden erobert, töte sie zuerst!");
							else
						        SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia erobert bereits die Flagge!");
							return 1;
						}
						FightSystem[TempZone][fsCTF][0] = playerid;
						new fsName[MAX_PLAYER_NAME];
						GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
						new fsText[128];
						format(fsText,sizeof(fsText),">>> Fight <<< | %s hat begonnen die Flagge zu erobern!",fsName);
						for(new i;i<MAX_PLAYERS;i++)
						{
							if(IsPlayerConnected(i))
							{
								if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction])
								{
                            		PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,FS_COL_YELLOW,fsText);
								}
							}
						}
				    }
					else
					{
						SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in der nähe der Flagge!");
					}
				}
				else
				{
					SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in diesem Fight verwickelt ...");
				}
			}
			else
			{
				SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
			}
		}
		else
		{
			SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		}
		return 1;
	}
	if(strcmp(cmdtext,"/invade",true)==0)
	{
	    if(IsAFightFaction(GetPlayerFaction(playerid)))
		{
	        for(new fs;fs<sizeof(FightSystem);fs++)
			{
	            if((FightSystem[fs][fsOwnerFaction] == GetPlayerFaction(playerid) && FightSystem[fs][fsFightTime]) || FightSystem[fs][fsAttackFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia ist bereits in einem Fight.");
	        }
	        new TempZone = GetPlayerFightzone(playerid);
	        if(TempZone != -14)
			{
	            if(!IsAFightFaction(FightSystem[TempZone][fsOwnerFaction]))
	                return SendClientMessage(playerid,FS_COL_GREY,"Gebiet wurde ausgeschaltet.");
	            if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Man greift nicht seine eigenen Leute an.");
				if(FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] != -14)
				    return SendClientMessage(playerid,FS_COL_GREY,"** In diesem Gebiet wird bereits geschossen.");
				if(FightSystem[TempZone][fsLastFight])
				{
				    new fsText[178];
				    format(fsText,sizeof(fsText),"Ganggebiet: Dieses Ganggebiet wurde bereits Angegriffen, wartet noch: '%d' Minuten.",FightSystem[TempZone][fsLastFight]);
				    SendClientMessage(playerid,FS_COL_GREY,fsText);
				    return 1;
				}
				for(new fs;fs<sizeof(FightSystem);fs++)
				{
					if(FightSystem[fs][fsOwnerFaction] == FightSystem[TempZone][fsOwnerFaction] && FightSystem[fs][fsAttackFaction] != -14)
						return SendClientMessage(playerid,FS_COL_GREY,"Ganggebiet: Die Gang / Mafia der das Ganggebiet gehört hat bereits ein Kampf.");
				}
                new fsTextToOwner[255];
                format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr werden von: %s angegriffen, setzt euch zur wehr!",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				new fsName[MAX_PLAYER_NAME];
				GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
				new fsTextToAttack[255];
                format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | %s hat ein Kampf mit: %s begonnen, macht sie Platt!",fsName,GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				new fsText[64];
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsWinKills],"~y~00 Kills");
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsLoseKills],"~y~00 Kills");
				TextDrawSetString(FightSystem[TempZone][fsTime],"Verbl. Zeit: 60 Minuten");//ZEIT
				for(new i;i<MAX_PLAYERS;i++)
				{
				    if(IsPlayerConnected(i))
					{
    					GangZoneFlashForPlayer(i,FightSystem[TempZone][fsZoneID],GetZoneColorOfFaction(GetPlayerFaction(playerid)));
				    	if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction])
						{
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
				    	if(GetPlayerFaction(i) == GetPlayerFaction(playerid))
						{
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
					}
				}
				FightSystem[TempZone][fsAttackFaction] = GetPlayerFaction(playerid);
    			FightSystem[TempZone][fsKillsOfOwner] = 0;
	    	    FightSystem[TempZone][fsKillsOfAttack] = 0;
	    	    FightSystem[TempZone][fsFightTime] = 15;//ZEIT
	    	    FightSystem[TempZone][fsCTF][0] = -14;
	    	    FightSystem[TempZone][fsCTF][1] = 0;
	    	    FightSystem[TempZone][fsCTF][2] = 0;
	    	    return 1;
			}
			return SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
	    }
		else
		{
			SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		}
		return 1;
	}
	*/
//========ADDBAUM==========//
	if(PlayerInfo[playerid][pAdmin] == 2000 || IsPlayerAdmin(playerid))
	{
 	if (strcmp("/addbaum", cmdtext, true) == 0)
	{
  	AddBaum(playerid);
	}
 	if (strcmp("/removebaum", cmdtext, true) == 0)
	{
	 RemoveBaum(playerid);
	}
	}
	
	 //////////////////////////////////////////////////////////////////
	//////////////////// AUS M-BOT ///////////////////////////////////

	new lastidx = (strlen(cmdtext) - 1);
	if(cmdtext[lastidx] == '.')
	    cmdtext[lastidx] = ' ';

	new countit = 0;
	for(new x=0; x<strlen(cmdtext); x++)
	{
		if(cmdtext[x] == '.' && cmdtext[x+1] <= '9' && cmdtext[x+1] >= '0') // Es wurde ein Punkt und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
		else if(cmdtext[x] == '.' && cmdtext[x+2] <= '9' && cmdtext[x+2] >= '0') // Es wurde ein Punkt, Leerzeichen und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
	}
	if(countit >= 3 && PlayerInfo[playerid][pAdmin] <1) // Dreimal und eine IP wird erkannt
	if(strfind(cmdtext,"88.80.216.7:9989",true) != 0) // NICHT die TS-IP
	if(strfind(cmdtext,"88.80.216.7:9989",true) != 0)
	{
		new textstring[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,sizeof(name));
		format(textstring,sizeof(textstring)," [ANTI-IP] %s wird verdächtigt eine IP zu verschicken!",name);
		SendClientMessageToAdmins(M_BOT_COLOR,textstring);
		format(textstring,sizeof(textstring)," [ANTI-IP] %s: %s",name,cmdtext);
		SendClientMessageToAdmins(M_BOT_COLOR,textstring);
		SendClientMessage(playerid,M_BOT_COLOR," [ANTI-IP] Wir dulden kein Abwerben bzw. Serverwerbungen!");
		SendClientMessage(playerid,M_BOT_COLOR," [ANTI-IP] Achtung: Gebe es nicht noch einmal ein!");
		M_Bot[playerid][PIPWarns]++;
		if(M_Bot[playerid][PIPWarns] >= 3)
		{
		    format(textstring,sizeof(textstring)," [ANTI-IP] %s wurde von %s gebannt! (GRUND: Verdacht auf Abwerben)",name,M_Bot_BOT_NAME);
		    SendClientMessageToAll(M_BOT_COLOR,textstring);
		    BanEx(playerid,"Abwerben");
		}
		return 0;
	}
	//=========================================================================
	GetPlayerName(playerid,sendername,sizeof(sendername));
	dcmd(kennzeichenerlauben,19,cmdtext);
	dcmd(kennzeichen,11,cmdtext);
	dcmd(farbe,5,cmdtext);
	dcmd(meldung,7,cmdtext);
	dcmd(frakmats,8,cmdtext);
	if(strcmp(cmd,"/animlist",true)==0)
	{
		SendClientMessage(playerid,COLOR_GRAD1,"Verfügbare Animationen:");
	    SendClientMessage(playerid,COLOR_GRAD1,"/handsup /drunk /bomb /getarrested /laugh /lookout /robman");
        SendClientMessage(playerid,COLOR_GRAD1,"/crossarms /lay /hide /vomit /eat /wave /taichi");
        SendClientMessage(playerid,COLOR_GRAD1,"/deal /smokem /smokef /groundsit /sit /chat /f**ku");
        SendClientMessage(playerid,COLOR_GRAD1,"/handsup /cellin /cellout /pee /dance");
	}
	if(strcmp(cmd, "/handsup", true) == 0)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
        return 1;
    }
 	if(strcmp(cmd, "/cellin", true) == 0)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
    }
 	if(strcmp(cmd, "/cellout", true) == 0)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }
 	if(strcmp(cmd, "/sit", true) == 0)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SITTING);
        return 1;
    }
    if(strcmp(cmd, "/pee", true) == 0)
	{
		SetPlayerSpecialAction(playerid, 68);
		return 1;
	}
    if(strcmp(cmd, "/drunk", true) == 0) {
		LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
		return 1;
    }
    if (strcmp("/bomb", cmdtext, true) == 0)
	{
		ClearAnimations(playerid);
		OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Place Bomb
		return 1;
	}
    if (strcmp("/getarrested", cmdtext, true, 7) == 0)
	{
	      LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
		  return 1;
    }
    if (strcmp("/laugh", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
		  return 1;
	}
    if (strcmp("/lookout", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
		  return 1;
	}
    if (strcmp("/robman", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
		  return 1;
	}
    if (strcmp("/crossarms", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
		  return 1;
	}
    if (strcmp("/lay", cmdtext, true) == 0)
 	{
          LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
		  return 1;
    }
    if (strcmp("/hide", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
		  return 1;
	}
    if (strcmp("/vomit", cmdtext, true) == 0)
	{
	      OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
		  return 1;
	}
    if (strcmp("/eat", cmdtext, true) == 0)
	{
	      OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
		  return 1;
	}
    if (strcmp("/wave", cmdtext, true) == 0)
	{
	      LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
		  return 1;
	}
    if (strcmp("/slapass", cmdtext, true) == 0)
	{
         OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
		  return 1;
	}
    if (strcmp("/deal", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
		  return 1;
	}
    if (strcmp("/sex..", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
		  return 1;
	}
	// Male Smoking
    if (strcmp("/smokem", cmdtext, true) == 0)
	{
          LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Smoke
		  return 1;
	}
	// Female Smoking
    if (strcmp("/smokef", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Female Smoking
		  return 1;
	}
	// Sit
    if (strcmp("/groundsit", cmdtext, true) == 0)
	{
          LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
		  return 1;
    }
    // Idle Chat
    if(strcmp(cmd, "/chat", true) == 0)
	{
		 OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
         return 1;
    }
    // Fucku
    if(strcmp(cmd, "/fucku", true) == 0)
	{
		 OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
         return 1;
    }
    // TaiChi
    if(strcmp(cmd, "/taichi", true) == 0)
	{
		 LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
         return 1;
    }
    // ChairSit
    if(strcmp(cmd, "/chairsit", true) == 0)
	{
		 LoopingAnim(playerid,"BAR","dnk_stndF_loop",4.0,1,0,0,0,0);
         return 1;
    }
 	if(strcmp(cmd, "/dance", true) == 0)
 	{
      		tmp = strtok(cmdtext, idx);
			if(!strlen(tmp) || strlen(tmp) > 2)
			{
				SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /dance [1-4]");
				return 1;
			}

			dancestyle = strval(tmp);
			if(dancestyle < 1 || dancestyle > 4)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /dance [1-4]");
			    return 1;
			}
			if(dancestyle == 1)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			}
			else if(dancestyle == 2)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			}
			else if(dancestyle == 3)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			}
			else if(dancestyle == 4)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			}
 	  		return 1;
	}
 	if(strcmp(cmd, "/explode", true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 1339)
		{
			SendClientMessage(playerid, COLOR_GREY, "/explode [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "FEHLER!");
		    return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 1339)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					format(string, sizeof(string), "AdmCMD: %s wurde gesprengt von  %s",giveplayer, sendername);
					ABroadCast(COLOR_LIGHTRED,string,1);
					//SendClientMessageToAll(COLOR_DBLUE, string);
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
					new PlayerName[30];
					GetPlayerName(playerid, PlayerName, 30);
					printf("[Command] %s has used /explode to explode %s", PlayerName, giveplayer);
				}
				else
				{
					format(string, sizeof(string), "%d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du kannst diesen Befehl nicht benutzen!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du musst eingelogt sein um den Befehl nutzen zu können!");
		}
		return 1;
	}

//Noobhilfe
	if(strcmp(cmd,"/guide",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
 			if(IsPlayerInRangeOfPoint(playerid,2.0,490.7159,-1519.1860,20.3347))
			{
				ShowMenuForPlayer(Navigation, playerid);
				SendClientMessage(playerid, COLOR_GREY, "*Um einen Checkpoint auszuschalten Tippe /chilfe.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du musst am Zivispawn sein.");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/chilfe",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_GREY, "*Touristenhilfe ausgeschaltet!");
		}
		return 1;
	}
//===============
	if(strcmp(cmd, "/schild",true) == 0)
	{
		if(IsACop(playerid))
		{
			PutRiotShieldOnArm(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED,"Du bist kein Cop!!");
		}
	}
	if(strcmp(cmd, "/light",true) == 0)
	{
	    if(IsACop(playerid))
		{
			GiveFlashLight(playerid);
 			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED,"Du bist kein Cop!!");
		}
 	}
 	if(strcmp(cmd,"/remove",true) == 0)
 	{
 	    if(IsACop(playerid))
 	    {
  			RemoveItems(playerid);
  			SendClientMessage(playerid,COLOR_GREEN, "Du hast deine Ausrüstung eingepackt");
        	return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED,"Du bist kein Cop!!");
		}

	}
//Bundestag
	if(strcmp(cmd, "/bundestag",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0,368.3150,194.1578,1008.3828))
		{
			SetPlayerPos(playerid,355.1508,154.5819,1050.2904);
			SetPlayerFacingAngle(playerid,3.0344);
			SetPlayerInterior(playerid,3);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,355.1508,154.5819,1050.2904))
		{
			SetPlayerPos(playerid,368.3150,194.1578,1008.3828);
			SetPlayerFacingAngle(playerid,90.1327);
			SetPlayerInterior(playerid,3);
		}
		return 1;
	}
//ANWALT
	if(strcmp(cmd, "/lawyer", true) == 0 || (strcmp(cmd, "/anwälte", true) == 0))
	{
    	if(IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|____ Anwälte Online ____|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pJob] == 2)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "Anwalt: %s |Tel: %d|", sendername, PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmdtext,"/Klingeln",true) == 0)
	{
    	if(IsPlayerInRangeOfPoint(playerid,3.0,240.9979,112.8959,1003.2188))
    	{
            ShowPlayerDialog(playerid, DIALOG_KLINGEL, DIALOG_STYLE_LIST, "Klingel", "Ich bin Anwalt\nIch möchte mich stellen\nIch brauche Hilfe", "Auswahl", "Abbrechen");
		}
	}
	if(strcmp(cmd, "/Addbaum", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2000)
		{
		    AddBaum(playerid);
		}
	}
	if(strcmp(cmd, "/removeBaum", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2000)
		{
		    RemoveBaum(playerid);
		}
	}
	if(strcmp(cmd, "/erlaubnis", true) == 0)
	{
 		if(IsPlayerInRangeOfPoint(playerid,3.0,222.2276,121.3832,999.0217))
	 	{
   			if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du bist kein Anwalt!");
		        return 1;
		    }
		    if(HatBereitsErlaubnis[playerid] == 1)
	  		{
	  		    SendClientMessage(playerid, COLOR_GREY," Du hast bereits eine Erlaubnis!");
	  		    return 1;
	    	}
	    	SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
    		SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    	SendClientMessage(playerid,COLOR_LIGHTBLUE," Deine Anwalt erlaubnis ist unterwegs!");
	    	SendClientMessage(playerid,COLOR_LIGHTBLUE," Bitte warte einen moment bis dein Antrag bearbeitet wird.");
	    	SendClientMessage(playerid,COLOR_LIGHTBLUE," Preis: 30.000$");
	    	SendClientMessage(playerid,COLOR_WHITE," Hinweis: Du hast die Erlaubnis nur für 5 Minuten!");
	    	GivePlayerMoney(playerid,-30000);
	    	FreezePlayer(playerid);
	    	SetTimerEx("AnwaltErlaubnis",10000,0,"d",playerid);
	    	HatBereitsErlaubnis[playerid] = 1;
			
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GREY,"Du befindest dich nicht im Büro!");
			return 1;
		}
		return 1;
	}
	
//============STARTBONUS===================//
/*	if(strcmp(cmd, "/startbonus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /startbonus [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pLevel] != 1)
   						{
   						    SendClientMessage(playerid, COLOR_GRAD2, " Dieser Spieler ist kein Anfänger mehr!");
   						    return 1;
						}
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Startbonus gegeben (Level: 3, Geld: +$50.000). *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "*Ein Admin hat dir einen Startbonus gegeben. (Level: 3, Geld: +$50.000).");
						GivePlayerMoney(playerid,PlayerInfo[playerid][pCash] = 50000);
						PlayerInfo[giveplayerid][pLevel] = 3;
						PlayerInfo[giveplayerid][gPupgrade] = 30;
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht berechtigt, diesen Befehl zu benutzen !");
			    return 1;
   			}
		}
		return 1;
	}*/
//==========Startbonus by [GnE]Julian================
/*	if(strcmp(cmd, "/givestartbonus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /startbonus [playerid/SpielerName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pLevel] != 1)
   						{
   						    SendClientMessage(playerid, COLOR_GRAD2, "Dieser Spieler ist kein Anfänger mehr!");
   						    return 1;
						}
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Startbonus gegeben (Level: 3, Geld: +$50.000). *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir einen Startbonus gegeben. (Level: 3, Geld: +$50.000).",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Wir wünschen dir weiterhin viel Spaß beim Spielen auf German Next Era Life!",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    GivePlayerMoney(giveplayerid, 50000);  /// Geld was der Spieler bekommt
						PlayerInfo[giveplayerid][pLevel] = 3; // Level was der Spieler bekommt
						*/
						/*     Admin Info */
						/*new admwarnung[256];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s den Startbonus gegeben! (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht berechtigt, diesen Befehl zu benutzen !");
			    return 1;
   			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/startbonus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] == 1 || PlayerInfo[playerid][pLevel] == 2)
			{
				format(string, sizeof(string), "* Du hast den Startbonus bekommen. (Level: 3, Geld: +$50.000).");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Wir wünschen dir weiterhin viel Spaß beim Spielen auf German Next Era Life!",sendername);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			    GivePlayerMoney(playerid, 50000);  /// Geld was der Spieler bekommt
				PlayerInfo[playerid][pLevel] = 3; // Level was der Spieler bekommt
			}
			else {
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist kein Anfänger (Level 1/2) mehr!");
			    return 1;
			}

		}
		return 1;
	}
//============Strtbonus Meldung==========
/*if(strcmp(cmd, "/startbonus", true)== 0)
	{
        GetPlayerName(playerid, sendername, sizeof(sendername));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Eine Nachricht mit deiner bitte, Startbonus wurde an alle");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Administratoren gesendet. Bitte warte einen moment.");
		format(string, sizeof(string), "AdmCmd: Startbonus Meldung von %s: mit der ID %d (/givestartbonus ID)", sendername, playerid);
        ABroadCast(COLOR_LIGHTRED,string,1);
		return 1;
 	}*/
//===========STARTBONUS====================//
	if(strcmp(cmd, "/befreien", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du bist kein Anwalt!");
		        return 1;
		    }
     		/*if(PlayerInfo[playerid][pJailed] != 1 || PlayerInfo[playerid][pArrested] != 1)
			{
		   		SendClientMessage(playerid, COLOR_GREY,"Du bist im Knast, und kannst dich nicht selber befreien!");
		   	 	return 1;
  			}
		    if(PlayerInfo[playerid][pLawSkill] >= 401)
		    {
		        ApprovedLawyer[playerid] = 1;
		    }*/
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /free [SpielerID/SpielerName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid == playerid) return true;
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID || PlayerInfo[giveplayerid][pJailed] != 2)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber befreien!"); return 1; }
					if(PlayerInfo[giveplayerid][pJailed] ==1 && ApprovedLawyer[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s aus dem Knast geholt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du wurdest von Anwalt %s aus dem Knast geholt.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						ApprovedLawyer[playerid] = 0;
						WantLawyer[giveplayerid] = 0;
						CallLawyer[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein anwalt Skill ist nun auf 2.Du kannst jetzt schneller und mehr Geld verdienen."); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein anwalt Skill ist nun auf 3.Du kannst jetzt schneller und mehr Geld verdienen."); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein anwalt Skill ist nun auf 4.Du kannst jetzt schneller und mehr Geld verdienen."); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein anwalt Skill ist nun auf 5.Du kannst jetzt schneller und mehr Geld verdienen."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht im Jail oder braucht keinen Anwalt!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline!");
			}
		}
  		return 1;
	}
//LSPD Trainingsinterrior
	if(strcmp(cmd, "/entertraining",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0,1568.8917,-1690.7363,5.8906))
		{
		    if(IsACop(playerid))
			{
		    	SetPlayerPos(playerid, 2542.8333,-1304.3030,1025.0743);
		    	SetPlayerFacingAngle(playerid, 265.2641);
		    	SetPlayerInterior(playerid, 2);
		    	SetPlayerVirtualWorld(playerid, 100);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/exittraining",true) == 0)
	{
	    if(GetPlayerInterior(playerid) == 2 && GetPlayerVirtualWorld(playerid) == 100)
	    {
	 		if(IsACop(playerid))
			{
	 			SetPlayerPos(playerid, 1568.8917,-1690.7363,5.8906);
	   			SetPlayerInterior(playerid, 0);
	   			SetPlayerVirtualWorld(playerid, 0);
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/meldung", true) == 0)
	{
	    if(PlayerInfo[playerid][pMeldung] == 0)
	    {
	        PlayerInfo[playerid][pMeldung] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, "Verbindungsmeldungen {FF0000}ausgeschaltet.");
		}
		else if(PlayerInfo[playerid][pMeldung] == 1)
		{
		    PlayerInfo[playerid][pMeldung] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, "Verbindungsmeldungen {FF0000}eingeschaltet.");
		}
		return 1;
	}
		*/
//================ SAVEALL FÜR UPDATES (CARSPEICHERN!!) ===============//
if(strcmp(cmd, "/saveall", true) == 0)
	{
	if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					SaveAll();
					SendClientMessage(playerid, COLOR_GREEN, "Alle Account Daten wurden erfolgreich gespeichert.");
					SendClientMessageToAll(COLOR_WHITE, "(( SERVER: Alle Account Daten wurden gespeichert! ))");
					return 1;
				}
		}
	return 1;
	}
	if(strcmp(cmd, "/motor",true) == 0)
	{
	    if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "{FFFFFF}Fahrräder haben {FF0000}keinen{FFFFFF} Motor ...");
		    return 1;
		}
  		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
  		new engine,lights,alarm,doors,bonnet,boot,objective;
    	new vid = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(vid != INVALID_VEHICLE_ID)
		{
			if(engine == VEHICLE_PARAMS_ON)
   			{
	    		SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	    		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~r~aus!", 2000, 5);
			}
			else
			{
  				SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
    			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~g~an!", 2000, 5);
			}
		}
  		return 1;
	}
//==========OLICHT1======//
/*	if(strcmp(cmdtext, "/olicht", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
				{
				    if(Olicht[GetPlayerVehicleID(playerid)] == 0)
				    {
						light1[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light2[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light3[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light4[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light5[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						AttachObjectToVehicle(light1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.0089111328, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light3[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light4[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light5[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid,"~r~Warnlicht Aktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder ausschalten!");
                                                Olicht[GetPlayerVehicleID(playerid)] = 1;
					}
					else if(Olicht[GetPlayerVehicleID(playerid)] == 1)
					{
						DestroyObject(light1[GetPlayerVehicleID(playerid)]);
						DestroyObject(light2[GetPlayerVehicleID(playerid)]);
						DestroyObject(light3[GetPlayerVehicleID(playerid)]);
						DestroyObject(light4[GetPlayerVehicleID(playerid)]);
						DestroyObject(light5[GetPlayerVehicleID(playerid)]);
						GameTextForPlayer(playerid,"~r~Warnlicht Deaktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder anschalten!");
						Olicht[GetPlayerVehicleID(playerid)] = 0;
					}
				}
			}
			return 1;
		}*/
//============LICHT================//
		if(strcmp(cmdtext,"/lights",true)==0)
		 {
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		    new engine,lights,alarm,doors,bonnet,boot,objective;
		     new vid = GetPlayerVehicleID(playerid);
		  GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		  if(vid != INVALID_VEHICLE_ID)
		  {
		     if(lights == VEHICLE_PARAMS_ON)
		      {
		       SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		       SendClientMessage(playerid,COLOR_GREY,"  Licht ausgeschaltet.  ");
		   }
		   else
		   {
		      SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		       SendClientMessage(playerid,COLOR_GREY,"  Licht eingeschaltet..  ");
		   }
		  }
		    return 1;
		 }
//============= STANDARD /SAVEALL ==============//
	if(strcmp(cmd, "/saveallu", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && gPlayerLogged[i])
					{
						PlayerUpdate(i);
						OnPlayerCarUpdate(i);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "Alle Daten wurden gespeichert.");
				return 1;
			}
		}
		return 1;
	}



//============================ SaveBox ===============================//
	if(strcmp(cmd,"/put",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
     		if(PlayerToPoint(10.0,playerid,2133.82666016,-1787.04248047,12.52786732) || PlayerToPoint(10.0,playerid,2805.2058,-1418.9055,16.2500) || PlayerToPoint(10.0,playerid,2808.0295,-1433.0054,40.0473))
    		{
               new x_nr[256];
			   x_nr = strtok(cmdtext, idx);
			   if(!strlen(x_nr)) {
			      SendClientMessage(playerid, COLOR_WHITE, "|__________________ Put __________________|");
				  SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /put [NAME]");
				  SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Mats, Drogen");
				  SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				  return 1;
			   }
	           if(strcmp(x_nr,"Mats",true) == 0)
			   {
			      tmp = strtok(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /put mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Mats bei dir.", PlayerInfo[playerid][pMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new matss;
                  matss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /put mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien bei dir.", PlayerInfo[playerid][pMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(matss > PlayerInfo[playerid][pMats])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Materialien hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pMats] -= matss;
                  PlayerInfo[playerid][pBoxMats] += matss;
                  format(string, sizeof(string), "   %d Materialien in die Savebox gelegt!", matss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
			   }
			   else if(strcmp(x_nr,"Drogen",true) == 0)
		 	   {
                  tmp = strtok(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /put drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen bei dir.", PlayerInfo[playerid][pDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new drugss;
                  drugss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /put drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen bei dir.", PlayerInfo[playerid][pDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(drugss > PlayerInfo[playerid][pDrugs])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Drogen hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pDrugs] -= drugss;
                  PlayerInfo[playerid][pBoxDrugs] += drugss;
                  format(string, sizeof(string), "   %d Drogen in die Savebox gelegt!", drugss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
               }
               }
               else
			   {
				SendClientMessage(playerid, COLOR_RED, "   Du bist an keiner Savebox!");
	            return 1;
 			}
        }
		return 1;
	}
	if(strcmp(cmd,"/stake",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
            if(PlayerToPoint(10.0,playerid,-363.85308838,-1430.48315430,24.72656250) || PlayerToPoint(10.0,playerid,2133.82666016,-1787.04248047,12.52786732) || PlayerToPoint(10.0,playerid,2805.2058,-1418.9055,16.2500) || PlayerToPoint(10.0, playerid, 836.9014,-1853.4141,6.4093))
            {
               new x_nr[256];
			   x_nr = strtok(cmdtext, idx);
			   if(!strlen(x_nr)) {
			      SendClientMessage(playerid, COLOR_WHITE, "|__________________ sTake __________________|");
				  SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /stake [NAME]");
				  SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Mats, Drogen");
				  SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				  return 1;
			   }
	           if(strcmp(x_nr,"Mats",true) == 0)
			   {
                  tmp = strtok(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien in deiner Savebox.", PlayerInfo[playerid][pBoxMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new matss;
                  matss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake Mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien in der Savebox.", PlayerInfo[playerid][pBoxMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(matss > PlayerInfo[playerid][pBoxMats])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Materialien hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pBoxMats] -= matss;
                  PlayerInfo[playerid][pMats] += matss;
                  format(string, sizeof(string), "   %d Materialien genommen!", matss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
			   }
			   else if(strcmp(x_nr,"Drogen",true) == 0)
		 	   {
                  tmp = strtok(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen in deiner Savebox.", PlayerInfo[playerid][pBoxDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new drugss;
                  drugss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen in der Savebox.", PlayerInfo[playerid][pBoxDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(drugss > PlayerInfo[playerid][pBoxDrugs])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Drogen hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pBoxDrugs] -= drugss;
                  PlayerInfo[playerid][pDrugs] += drugss;
                  format(string, sizeof(string), "   %d Drogen aus der Savebox genommen", drugss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
               }
            }
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du bist an keiner Savebox!");
	            return 1;
 			}
        }
		return 1;
	}
//========== ORDNUNGSAMT TOR 2 + 3 ============//
	if(strcmp(cmdtext, "/oamtls2", true) == 0)
	{
	    if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 24)
	    {
	        if(OamtLSS1 == 0)
			{
		        SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet, schließen mit /oamtls2.");
		        MoveObject(OamtLS3,883.45031738,-1202.21044922,3.74995422,3.0);
		        OamtLSS1 = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tor geschlossen.");
			    MoveObject(OamtLS3,883.45031738,-1202.21044922,18.74995422,3.0);
				OamtLSS1 = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Das können nur Ordnungsbeamte!");
		}
		return 1;
	}
//======
	if(strcmp(cmdtext, "/oamtls3", true) == 0)
	{
	    if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 24)
	    {
	        if(OamtLSS2 == 0)
			{
		        SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet, schließen mit /oamtls3.");
		        MoveObject(OamtLS4,922.81915283,-1206.31262207,5,3.0);
		        OamtLSS2 = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tor geschlossen.");
			    MoveObject(OamtLS4,922.81915283,-1206.31262207,15.80276299,3.0);
				OamtLSS2 = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Das können nur Ordnungsbeamte!");
		}
		return 1;
	}
//========= News TOR ==========//
	if (strcmp(cmdtext, "/ntor", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo [playerid] [pMember] == 9)
  		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 1643.12670898,-1714.77258301,15.86996269))
			{
   				if(nstatus1 == false)
			    {
					SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet.");
					MoveObject(News1, 1643.12670898,-1714.77258301,5.86996269, 3.5);
					nstatus1 = true;
				}
				else if(nstatus1 == true)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Tor geschlossen.");
					MoveObject(News1, 1643.12670898,-1714.77258301,15.86996269, 3.5);
					nstatus1 = false;
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1643.59997559,-1696.34716797,15.82934380))
			{
   				if(nstatus2 == false)
		    	{
					SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet.");
					MoveObject(News2, 1643.59997559,-1696.34716797,5.82934380, 3.5);
					nstatus2 = true;
				}
				else if(nstatus2 == true)
				{
    				SendClientMessage(playerid, COLOR_RED, "Tor geschlossen.");
				    MoveObject(News2, 1643.59997559,-1696.34716797,15.82934380, 3.5);
				    nstatus2 = false;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du bist nicht an einer der Tore!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Du bist kein Nachrichtenreporter!");
		}
 		return 1;
	}
//----------------------------------[Mats und Drogen geben als Admin]-----------------------------------------------

    if(strcmp(cmd, "/givedrugs", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givedrugs [playerid/PartOfName] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givedrugs [playerid/PartOfName] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDrugs] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "AdmWarning: %s hat %s %d Drogen gegeben.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givemats", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givemats [playerid/PartOfName] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givemats [playerid/PartOfName] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMats] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "AdmWarning: %s hat %s %d Materialien gegeben.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}

//--------------------------------------------------------Haus interiors erstellen--------------------------------------------------------//

    if(strcmp(cmd, "/sethouseinterior", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] < 4)
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
                return 1;
            }
            new x_job[256];
            new Float:HX, Float:HY, Float:HZ, hInterior;
            x_job = strtok(cmdtext, idx);
            if(!strlen(x_job)) {
                SendClientMessage(playerid, COLOR_WHITE, "=========== [/sethouseinterior] ===========");
                SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /sethouseinterior [1 - 33]");
                SendClientMessage(playerid, COLOR_GREY, "Available names: Trailer, Bedsit, 3 Raum Bungalow");
                SendClientMessage(playerid, COLOR_GREY, "4 Raum Apartment, 5 Raum House, 6 Raum House, 5 Raum Slum");
                SendClientMessage(playerid, COLOR_GREY, "2 Raum Apartment, 3 Raum Apartment, 4 Raum Apartment, 5 Raum Apartment");
                SendClientMessage(playerid, COLOR_GREY, "4 Raum Luxus,5 Raum Luxus,6 Raum Luxus,7 Raum Luxus,8 Raum Luxus");
                return 1;
            }
            for(new i = 0; i < sizeof(HouseInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,1,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
                {
                    	format(string, sizeof(string), "House: %d", i);
                   		SendClientMessage(playerid, COLOR_GRAD2, string);
                        if(strcmp(x_job,"1",true) == 0)
                        {
                            HX = 244.5000; HY = 305.0000; HZ = 999.1484; hInterior = 1;
                        }
                        else if(strcmp(x_job,"2",true) == 0)
                        {
                            HX = 267.1000; HY = 305.0000; HZ = 999.1484; hInterior = 2;
                        }
                        else if(strcmp(x_job,"3",true) == 0)
                        {
                            HX = 301.3000; HY = 306.0000; HZ = 1003.5391; hInterior = 4;
                        }
                        else if(strcmp(x_job,"4",true) == 0)
                        {
                            HX = 344.3000; HY = 305.0000; HZ = 999.1484; hInterior = 6;
                        }
                        else if(strcmp(x_job,"5",true) == 0)
                        {
                            HX = 446.1000; HY = 507.9000; HZ = 1001.4195; hInterior = 12;
                        }
                        else if(strcmp(x_job,"6",true) == 0)
                        {
                            HX = -42.4000; HY = 1408.2000; HZ = 1084.4297; hInterior = 8;
                        }
                        else if(strcmp(x_job,"7",true) == 0)
                        {
                            HX = 2468.2161; HY = -1698.1252; HZ = 1013.5078; hInterior = 2;
                        }
                        else if(strcmp(x_job,"8",true) == 0)
                        {
                            HX = 386.1000; HY = 1471.8000; HZ = 1080.1875; hInterior = 15;
                        }
                        else if(strcmp(x_job,"9",true) == 0)
                        {
                            HX = 221.8930; HY = 1140.8698; HZ = 1082.6094; hInterior = 4;
                        }
                        else if(strcmp(x_job,"10",true) == 0)
                        {
                            HX = 260.6000; HY = 1238.8000; HZ = 1084.2578; hInterior = 9;
                        }
                        else if(strcmp(x_job,"11",true) == 0)
                        {
                            HX = 261.0000; HY = 1286.0000; HZ = 1080.2578; hInterior = 4;
                        }
                        else if(strcmp(x_job,"12",true) == 0)
                        {
                            return 1;
                        }
                        else if(strcmp(x_job,"13",true) == 0)
                        {
                            HX = 376.3000; HY = 1417.2000; HZ = 1081.3281; hInterior = 15;
                        }
                        else if(strcmp(x_job,"14",true) == 0)
                        {
                            HX = 27.1000; HY = 1341.1000; HZ = 1084.3750; hInterior = 10;
                        }
                        else if(strcmp(x_job,"15",true) == 0)
                        {
                            return 1;
                        }
                        else if(strcmp(x_job,"16",true) == 0)
                        {
                            HX = 222.8000; HY = 1288.7000; HZ = 1082.1406; hInterior = 1;
                        }
                        else if(strcmp(x_job,"17",true) == 0)
                        {
                            HX = 23.0000; HY = 1405.6000; HZ = 1084.4297; hInterior = 5;
                        }
                        else if(strcmp(x_job,"18",true) == 0)
                        {
                            HX = 235.3000; HY = 1189.2000; HZ = 1080.2578; hInterior = 3;
                        }
                        else if(strcmp(x_job,"19",true) == 0)
                        {
                            HX = 447.0000; HY = 1400.3000; HZ = 1084.3047; hInterior = 2;
                        }
                        else if(strcmp(x_job,"20",true) == 0)
                        {
                            HX = 234.2000; HY = 1064.9000; HZ = 1084.2106; hInterior = 6;
                        }
                        else if(strcmp(x_job,"21",true) == 0)
                        {
                            HX = 327.9000; HY = 1478.3000; HZ = 1084.4375; hInterior = 15;
                        }
                        else if(strcmp(x_job,"22",true) == 0)
                        {
                            HX = 295.4000; HY = 1473.2000; HZ = 1080.2578; hInterior = 15;
                        }
                        else if(strcmp(x_job,"23",true) == 0)
                        {
                            HX = 140.4000; HY = 1370.3000; HZ = 1083.8656; hInterior = 5;
                        }
                        else if(strcmp(x_job,"24",true) == 0)
                        {
                            HX = 489.7000; HY = 1402.5000; HZ = 1080.2645; hInterior = 2;
                        }
                        HouseInfo[i][hExitx] = HX; HouseInfo[i][hExity] = HY; HouseInfo[i][hExitz] = HZ; HouseInfo[i][hInt] = hInterior;
                }
            }
            OnPropUpdate();
            SendClientMessage(playerid, COLOR_WHITE,"HausInterior erfolgreich geändert!");
            return 1;
		}
    }
//----------------------------------[GWD machen]-----------------------------------------------

    if(strcmp(cmd, "/setgwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Info: /setgwd [SpielerID] [Note]");
                return 1;
            }
            new playa;
            new Float:gwd;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            gwd = strval(tmp);
            if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] == 9)
            {
                if(IsPlayerConnected(playa))
                {
                    if(playa != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[playa][pGWD] = gwd;
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "   Du hast %s die Note %f gegeben.", giveplayer, gwd);
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        format(string, sizeof(string), "   %s hat dir deine GWD-Note gegeben. Note: %f.", sendername, gwd);
                        SendClientMessage(playa, COLOR_GRAD1, string);
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "   Du bist kein Bundeswehrleader!");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/showgwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht eingeloggt !");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_WHITE, "Info: /showgwd [SpielerID]");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                    {
                        if(ProxDetectorS(8.0, playerid, giveplayerid))
                            {
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                                format(string, sizeof(string), "   Du hast %s deine GWD-Note gezeigt.", giveplayer);
                                SendClientMessage(playerid, COLOR_WHITE, string);
                                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "|_______________Grundwehrdienst-Note______________|");
                                format(string, sizeof(string), "   Name: %s   Note: %f", sendername, PlayerInfo[playerid][pGWD]);
                                SendClientMessage(giveplayerid, COLOR_WHITE, string);
                                SendClientMessage(giveplayerid, COLOR_WHITE, "___________________________________________________");
                                format(string, sizeof(string), "   %s zeigt dir seine GWD-Note.", sendername);
                                SendClientMessage(giveplayerid, COLOR_WHITE, string);
                                return 1;
                            }
                    }
                }
        }
        return 1;
    }

    if(strcmp(cmd, "/gwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_______________Grundwehrdienst-Note______________|");
	        format(string, sizeof(string), "  Deine GWD-Note ist %f.",PlayerInfo[playerid][pGWD]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        SendClientMessage(playerid, COLOR_WHITE, "___________________________________________________");
        }
        return 1;
    }
//----------------------------------[Cars respawnen]-----------------------------------------------
	if(strcmp(cmd, "/respawncars", true) == 0 || strcmp(cmd, "/rc", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
	    	if(PlayerInfo[playerid][pAdmin] < 2) // Ersetzt du mir deinem Admin Level das diesen Befehl nutzen Darf.
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
				return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
		 	{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
 			}
			for(new car = 1; car <= 450; car++)
			{
				if(!unwanted[car]) SetVehicleToRespawn(car);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Alle unbesetzten Autos wurden zurückgespawnt von %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}
/*	if(strcmp(cmd, "/deletethiscar", true) == 0 || strcmp(cmd, "/dtc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2000 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "** INFO ** Das ist ein Adminbefehl, du bist kein Admin!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    DestroyVehicle(GetPlayerVehicleID(playerid));
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Du hast dieses Fahrzeug erfolgreich gelöscht.");
   			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/respawncar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du darfst diesen Befehl nicht benutzen!");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Fahrzeug!");
		}
		return 1;
	}
	// ANTI CMD SPAM
	/*CMDSpams[playerid]++;
	if(CMDSpams[playerid] >= 20 && PlayerInfo[playerid][pAdmin] == 0 && PlayerCuffed[playerid] == 0 && PlayerTied[playerid] == 0)
	{
		format(string, sizeof(string), " %s wurde von %s gekickt! (GRUND: Command-Spam)",sendername,M_Bot_BOT_NAME);
		SendClientMessageToAll(M_BOT_COLOR, string);
		Kick(playerid);
	    return 1;
	}*/
	//frakrespawn
    if(strcmp(cmd, "/frakrc", true) == 0 || strcmp(cmd, "/frc", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1)
		{
           for(new pv = 0; pv < sizeof(PolizeiVehs); pv++)
	       {
		       SetVehicleToRespawn(PolizeiVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 2)
		{
           for(new pv = 0; pv < sizeof(FBIVehs); pv++)
	       {
		       SetVehicleToRespawn(FBIVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 3)
		{
           for(new pv = 0; pv < sizeof(BundeswehrVehs); pv++)
	       {
		       SetVehicleToRespawn(BundeswehrVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
 		else if(PlayerInfo[playerid][pLeader] == 4)
		{
           for(new pv = 0; pv < sizeof(MedicVehs); pv++)
	       {
		       SetVehicleToRespawn(MedicVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 22)
		{
           for(new pv = 0; pv < sizeof(SWATVehs); pv++)
	       {
		       SetVehicleToRespawn(SWATVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 5)
		{
           for(new pv = 0; pv < sizeof(LCNVehs); pv++)
	       {
		       SetVehicleToRespawn(LCNVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 6)
		{
           for(new pv = 0; pv < sizeof(YakuzaVehs); pv++)
	       {
		       SetVehicleToRespawn(YakuzaVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 7)
		{
           for(new pv = 0; pv < sizeof(PraesiVehs); pv++)
	       {
		       SetVehicleToRespawn(PraesiVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 8)
		{
           for(new pv = 0; pv < sizeof(HitmanVehs); pv++)
	       {
		       SetVehicleToRespawn(HitmanVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 9)
		{
           for(new pv = 0; pv < sizeof(NewsVehs); pv++)
	       {
		       SetVehicleToRespawn(NewsVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 10)
		{
           for(new pv = 0; pv < sizeof(TaxiVehs); pv++)
	       {
		       SetVehicleToRespawn(TaxiVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 11)
		{
           for(new pv = 0; pv < sizeof(FahrschulVehs); pv++)
	       {
		       SetVehicleToRespawn(FahrschulVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 12)
		{
           for(new pv = 0; pv < sizeof(FuegosVehs); pv++)
	       {
		       SetVehicleToRespawn(FuegosVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 13)
		{
           for(new pv = 0; pv < sizeof(GroveVehs); pv++)
	       {
		       SetVehicleToRespawn(GroveVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 14)
		{
           for(new pv = 0; pv < sizeof(BallasVehs); pv++)
	       {
		       SetVehicleToRespawn(BallasVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 15)
		{
           for(new pv = 0; pv < sizeof(LSBC); pv++)
	       {
		       SetVehicleToRespawn(LSBC[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 16)
		{
           for(new pv = 0; pv < sizeof(VagosVehs); pv++)
	       {
		       SetVehicleToRespawn(VagosVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 17)
		{
           for(new pv = 0; pv < sizeof(AztecasVehs); pv++)
	       {
		       SetVehicleToRespawn(AztecasVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 18)
		{
           for(new pv = 0; pv < sizeof(RifaVehs); pv++)
	       {
		       SetVehicleToRespawn(RifaVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 19)
		{
           for(new pv = 0; pv < sizeof(RSVehs); pv++)
	       {
		       SetVehicleToRespawn(RSVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 20)
		{
           for(new pv = 0; pv < sizeof(TerrorVehs); pv++)
	       {
		       SetVehicleToRespawn(TerrorVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 21)
		{
           for(new pv = 0; pv < sizeof(WheelVehs); pv++)
	       {
		       SetVehicleToRespawn(WheelVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 23)
		{
           for(new pv = 0; pv < sizeof(RMVehs); pv++)
	       {
		       SetVehicleToRespawn(RMVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else if(PlayerInfo[playerid][pLeader] == 24)
		{
           for(new pv = 0; pv < sizeof(oAmtVehs); pv++)
	       {
		       SetVehicleToRespawn(oAmtVehs[pv]);
		       SendClientMessage(playerid, COLOR_GRAD1, "Du hast deine Fraktionsautos erfolgreich zurückgespawnt!");
		   }
		   return 1;
		}
		else
		{
		   SendClientMessage(playerid, COLOR_WHITE, "  Du bist kein Leader einer Fraktion!");
		}
		return 1;
	}
	if(strcmp(cmdtext,"/showme",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1330)
		{
			ShowPlayerDialog(playerid, DIALOG_SHOWME, DIALOG_STYLE_LIST, "Showme Farben", "Gelb\nRot\nGrün\nBlau\nPink\nSchwarz\nUnsichtbar", "Auswählen", "Abbrechen");
			return 1;
		}
		if(ShowMeAllowed == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_SHOWME, DIALOG_STYLE_LIST, "Showme Farben", "Gelb\nRot\nGrün\nBlau\nPink\nSchwarz\nUnsichtbar", "Auswählen", "Abbrechen");
			return 1;
		}
		else
		{
  			SendClientMessage(playerid,COLOR_LIGHTRED,"Der Befehl wurde deaktiviert!");
		    return 1;
		}
	}
	if(strcmp(cmdtext,"/help",true) == 0)
	{
		ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Allgemeine Befehle 1\nAllgemeine Befehle 2\nAllgemeine Befehle 3\nAllgemeine Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges\nDonator\nServer-Informationen\nTeamspeak\nGangfight", "Auswählen", "Abbrechen");
		return 1;
	}
	if(strcmp(cmdtext,"/neuling", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,489.5197,-1511.6572,20.5045))
	    {
	    	ShowPlayerDialog(playerid, DIALOG_NEULING, DIALOG_STYLE_LIST, "{FFFFFF}Neulings Hilfe", "Womit kann ich fahren?\nWas kann ich machen?\nServerinformationen\nTeamspeakip\nHilfe bitte", "Auswählen", "Abbrechen");
		}
	}
	if(strcmp(cmdtext, "/stadthalle", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 365.2113,173.7801,1008.3828))
		{
	    	ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "{FFFF00}Die Stadthalle", "{FFFF00}Führerscheinprüfung (Preis: 750$)\n{FFFF00}Motorradprüfung\n{FFFF00}Personalausweis beantragen (Preis: 500$)", "Auswählen", "Beenden");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der Stadthalle!");
		}
		return 1;
	}
	/*if(strcmp(cmdtext, "/kfz", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 2324.6418,-1135.9731,1051.3047))
		{
		    ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "{FFFF00}KFZ Zulassungsstelle", "{FFFF00}Kennzeichen (Preis: 500$){FFFF00}","Auswählen","Beenden");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der KFZ Zulassungstelle!");
		}
		return 1;
	}*/
	if(strcmp(cmd,"/umbenennen",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1337)
	    {
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /umbennen [playerid/name] [neuer name]    Achtung! Maximale Länge: 16 Zeichen");
		        return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(!IsPlayerConnected(giveplayerid))
		    {
		        SendClientMessage(playerid,COLOR_WHITE," Spieler ist nicht Online!");
		        return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(strlen(result) < 1 || strlen(result) > 16)
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /umbennen [playerid/name] [neuer name]    Achtung! Maximale Länge: 16 Zeichen");
		        return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"/Accounts/%s.ini",giveplayer);
			fremove(string);
			format(string,sizeof(string)," AdmCmd: %s hat %s in %s umbenannt!",sendername,giveplayer,result);
			ABroadCast(COLOR_LIGHTRED,string,1);
			format(string,sizeof(string)," Admin %s hat dich in %s umbenannt!",sendername,result);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			SetPlayerName(giveplayerid,result);
			PlayerUpdate(giveplayerid);
		}
		return 1;
	}
	if(strcmp(cmd,"/knast",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /knast [knastid 1-3] [playerid] [zeit(in Minuten)] [grund]");
		        return 1;
			}
			new knastid = strval(tmp);
			if(knastid < 1 || knastid > 3)
		    {
		        SendClientMessage(playerid,COLOR_WHITE," KnastID nicht höher als 3 oder kleiner als 1!");
		        return 1;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /knast [knastid 1-3] [playerid] [zeit(in Minuten)] [grund]");
		        return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(!IsPlayerConnected(giveplayerid))
		    {
		        SendClientMessage(playerid,COLOR_WHITE," Spieler ist nicht Online!");
		        return 1;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /knast [knastid 1-3] [playerid] [zeit(in Minuten)] [grund]");
		        return 1;
			}
			new zeit = strval(tmp);
			if(zeit < 1 || zeit > 120)
		    {
		        SendClientMessage(playerid,COLOR_WHITE," Zeit nur zwischen 1 und 120 Minuten!");
		        return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
		    {
		        SendClientMessage(playerid,COLOR_WHITE,"Benutzung: /knast [knastid 1-3] [playerid] [zeit(in Minuten)] [grund]");
		        return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string)," AdmCmd: %s hat %s für %d Minuten in Knast%d gesteckt. Grund: %s",sendername,giveplayer,zeit,knastid,result);
			ABroadCast(COLOR_LIGHTRED,string,1);
			format(string,sizeof(string)," Admin %s hat dich für %d Minuten in Knast%d gesteckt. Grund: %s",sendername,zeit,knastid,result);
			SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
			Knast[giveplayerid] = knastid;
			KnastTime[giveplayerid] = zeit;
			SetPlayerToKnast(giveplayerid,knastid);
		}
		return 1;
	}


	if(strcmp(cmd, "/aw", true) == 0 || strcmp(cmd, "/awhisper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht befugt!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/aw)isper [playerid/PartOfName] [whisper text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(HidePM[giveplayerid] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler blockiert Whisper!");
			            return 1;
			        }
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					if(giveplayerid == playerid)
					{
					}
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/aw)isper [playerid/PartOfName] [whisper text]");
						return 1;
					}
					format(string, sizeof(string), "Admin %s(ID: %d) sagt dir: %s", sendername, playerid, (result));
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "Nachricht gesendet an %s(ID: %d).", giveplayer, giveplayerid);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					//format(string, sizeof(string), "Admin %s sagt %s: %s", sendername, playerid, giveplayer,(result));
					//ABroadCast(COLOR_YELLOW,string,1);
					for(new i=0; i<GetMaxPlayers(); i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
					        {
								format(string, sizeof(string), "*Admin %s whispert zu %s", sendername, giveplayer);
								//format(string, sizeof(string), "Nachricht gesendet an %s(ID: %d).", giveplayer, giveplayerid);
								SendClientMessage(i,COLOR_YELLOW,string);
					        }
					    }
					}
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Wisper]-----------------------------------------------
	if(strcmp(cmd, "/wisper", true) == 0 || strcmp(cmd, "/w", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
	    	if(gPlayerLogged[playerid] == 0)
	    	{
	        	SendClientMessage(playerid, COLOR_GREY, "   Du musst eingelogt sein!");
	        	return 1;
	    	}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/w)isper [Spieler ID / Name] [Text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid) && GetDistanceBetweenPlayers(playerid,giveplayerid) < 8)
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
			    	if(HidePM[giveplayerid] > 0)
			    	{
			        	SendClientMessage(playerid, COLOR_GREY, "   Der Spieler erlaubt es nicht, zu flüstern!");
			        	return 1;
			    	}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "BeBenutzung: (/w)isper [playerid/Name] [Text]");
						return 1;
					}
					format(string, sizeof(string), "* %s flüstert etwas zu %s.", sendername,giveplayer);
					ProxDetector(7.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "%s(ID: %d) hat dir etwas zugeflüstert: %s", sendername, playerid, (result));
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "Du hast %s(ID: %d) folgendes zugeflüstert: %s.", giveplayer, giveplayerid, (result));
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "  ID %d ist nicht online / nicht in deiner Nähe!", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//==========================NEUES AWS============================//
	if(strcmp(cmd, "/aws", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingelogt!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pSupporter] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Supporter!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /aws [playerid/Name] [Text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(HidePM[giveplayerid] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler blockiert Whispers!");
			            return 1;
			        }
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					if(giveplayerid == playerid)
					{
					}
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /aws [playerid/PartOfName] [whisper text]");
						return 1;
					}
					format(string, sizeof(string), "Supporter %s(ID: %d) sagt dir: %s", sendername, playerid, (result));
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "Nachricht gesendet an %s(ID: %d).", giveplayer, giveplayerid);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					//format(string, sizeof(string), "Admin %s sagt %s: %s", sendername, playerid, giveplayer,(result));
					//ABroadCast(COLOR_YELLOW,string,1);
					for(new i=0; i<GetMaxPlayers(); i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
					        {
								format(string, sizeof(string), "*Supporter %s whispert zu %s", sendername, giveplayer);
								//format(string, sizeof(string), "Nachricht gesendet an %s(ID: %d).", giveplayer, giveplayerid);
								SendClientMessage(i,COLOR_YELLOW,string);
					        }
					    }
					}
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "   ID %d ist nicht Online.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}


//==========================NEUES AWS ENDE===========================//
 //----------------------------------[AdminWisper]-----------------------------------------------
	/*if(strcmp(cmd, "/awsisper", true) == 0 || strcmp(cmd, "/aws", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/w)isper [playerid/PartOfName] [text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[100];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/aws)isper [playerid/PartOfName] [text]");
						return 1;
					}
					if(PlayerInfo[playerid][pAdmin] >= 1)
					{
						format(string,sizeof(string),"%d Admin %s(%d) sagt dir: %s",PlayerInfo[playerid][pAdmin],sendername,playerid,result);
					}
					else if(PlayerInfo[playerid][pSupporter] >= 1)
		            {
						format(string,sizeof(string),"%d Supporter %s(%d) sagt dir: %s",PlayerInfo[playerid][pSupporter],sendername,playerid,result);
						SendClientMessage(playerid, COLOR_YELLOW, string);
					}
					format(string, sizeof(string), "Du sagts %s(%d):%s",giveplayer,giveplayerid,result);
					SendClientMessage(giveplayerid,  COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD1," Der Spieler ist offline!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/pinfo",true) == 0)
	{
	    SendClientMessage(playerid,COLOR_YELLOW," /pinfo ist nun bei /check dabei, also '/check [id]' ");
	    return 1;
	}*/


	// >>>>>>>>>>>>>>>>>  Fraktionskassen-System <<<<<<<<<<<<<<<<<
	if(strcmp(cmd,"/fkasse",true) == 0)
	{
	    new fraktion = 0;
	    if(PlayerInfo[playerid][pMember] > 0) fraktion = PlayerInfo[playerid][pMember] - 1;
	    if(PlayerInfo[playerid][pLeader] > 0) fraktion = PlayerInfo[playerid][pLeader] - 1;
		if(fraktion >= 0)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
				SendClientMessage(playerid,COLOR_GRAD5," /fkasse [einzahlen/auszahlen] [Betrag]");
				format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_GRAD5,string);
				return 1;
			}
			if(strcmp(tmp,"einzahlen",true) == 0)
			{
			    tmp = strtok(cmdtext,idx);
			    if(!strlen(tmp))
			    {
					SendClientMessage(playerid,COLOR_GRAD5," /fkasse einzahlen [Betrag]");
					format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
					SendClientMessage(playerid,COLOR_GRAD5,string);
					return 1;
				}
				new amount = strval(tmp);
				if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
				if(GetPlayerMoney(playerid) < amount) return SendClientMessage(playerid,COLOR_WHITE," Du hast nicht soviel Geld um es einzuzahlen!");
				FraktionsKasse[fraktion] += amount;
				GivePlayerMoney(playerid,-amount);
				format(string,sizeof(string)," Du hast $%d in die Fraktionskasse eingezahlt! Total: $%d",amount,FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_WHITE,string);
				format(string,sizeof(string)," %s hat $%d in die Fraktionskasse eingezahlt! Total: $%d",sendername,amount,FraktionsKasse[fraktion]);
				SendLeaderMSG(fraktion+1,COLOR_LIGHTBLUE,string);
				SaveFraktionsKassen();
			}
			else if(strcmp(tmp,"auszahlen",true) == 0)
			{
			    tmp = strtok(cmdtext,idx);
			    if(!strlen(tmp))
			    {
					SendClientMessage(playerid,COLOR_GRAD5," /fkasse auszahlen [Betrag]");
					format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
					SendClientMessage(playerid,COLOR_GRAD5,string);
					return 1;
				}
				new amount = strval(tmp);
				if(PlayerInfo[playerid][pLeader] == 0) return SendClientMessage(playerid,COLOR_WHITE," Nur Leader dürfen Geld aus der Fraktionskasse nehmen!");
				if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
				if((FraktionsKasse[fraktion] - amount) < 0) return SendClientMessage(playerid,COLOR_WHITE," Du kannst keine Schulden machen!");
				FraktionsKasse[fraktion] -= amount;
				GivePlayerMoney(playerid,amount);
				format(string,sizeof(string)," Du hast $%d aus der Fraktionskasse genommen! Total: $%d",amount,FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_WHITE,string);
				format(string,sizeof(string)," %s hat $%d aus der Fraktionskasse genommen! Total: $%d",sendername,amount,FraktionsKasse[fraktion]);
				SendLeaderMSG(fraktion+1,COLOR_LIGHTBLUE,string);
				SaveFraktionsKassen();
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD5," /fkasse [einzahlen/auszahlen] [Betrag]");
				format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_GRAD5,string);
			}
		}
		else SendClientMessage(playerid,COLOR_WHITE," Du bist in gar keiner Fraktion!");
		return 1;
	}

	if(strcmp(cmd,"/setfkasse",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1337)
	    {
			tmp = strtok(cmdtext,idx);
	        if(!strlen(tmp))
	        {
				SendClientMessage(playerid,COLOR_GRAD5," /setfkasse [FraktionsID] [Betrag]");
				return 1;
			}
			new fraktion = strval(tmp);
			if(fraktion < 0 || fraktion > 24) return SendClientMessage(playerid,COLOR_WHITE," Diese Fraktion gibt es nicht!");
			tmp = strtok(cmdtext,idx);
	        if(!strlen(tmp))
	        {
	            format(string,sizeof(string)," /setfkasse %d [Betrag]",fraktion);
				SendClientMessage(playerid,COLOR_GRAD5,string);
				return 1;
			}
			new amount = strval(tmp);
			if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
			format(string,sizeof(string)," %s hat die Fraktionskasse von %s auf $%d gesetzt!",sendername,Fracs[(fraktion-1)],amount);
			ABroadCast(COLOR_LIGHTRED,string,1337);
			FraktionsKasse[(fraktion-1)] = amount;
		}
		return 1;
	}
	if(strcmp("/aufbrechen", cmdtext, true , 10) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0, 1424.3881,-1004.1063,1639.7909))//Bank
		{
	 		SetPlayerPos(playerid,2144.1572,1610.6646,993.6882);
			SetPlayerInterior(playerid,1);
			if(IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist in den Tresorraum gegangen.");
			GameTextForPlayer(playerid, "~w~ Du hast den Tresorraum aufgebrochen", 5000, 1);// Text die kommt wenn man zu dem Punkt Teleoprtiert wird
            for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
			    	if(IsACop(i))
			    	{
						SendClientMessage(i,COLOR_RED,"HQ: Achtung! Eine Meldung vom Los Santos Bank Security System!");
						SendClientMessage(i,COLOR_RED,"HQ: Es wurde der Tresorraum aufgebrochen!!");
						SendClientMessage(i,COLOR_RED,"HQ: Überprüfen sie ob jemand die Bank überfallen will!");
				}
			}
		}
		return 1;
		 }
		return 1;
	}
//==================================HACKE FUNCTION
	if(strcmp(cmd, "/einhacken", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
    	{
    	if(PlayerCuffed[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Du kannst ohne Hände nicht Hacken!");
				        return 1;
				    }
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 596)
	     	{
				new cops;
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
    				if(IsPlayerConnected(p))
				    {
        				if(IsACop(p) && OnDuty[p])
				        {
							cops ++;
						}
					}
				}
				if(cops < 2)
				{
				 	SendClientMessage(playerid, COLOR_GREY, "Zum Hacken müssen genügend Cop´s Online sein!");
					return 1;
				}
           		SendClientMessage(playerid, COLOR_ALLDEPT, "Du hast dich Erfolgreich in den Polizei Computer Eingehackt.");
           		TogglePlayerControllable(playerid,0);
				TogglePlayerControllable(playerid, 0);
				PlayerHacked[playerid] = 1;
				SetTimerEx("hack", 36000, 0, "d", playerid);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "HQ: VORSICHT %s versuch sich in ein Polizeit Fahrzeug einzuhacken!", sendername);
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
        	else
        	{
 	           	SendClientMessage(playerid, COLOR_GRAD2, "Du musst dafür in ein LSPD Fahrzeug sitzen!");
            	return 1;
        	}
    	}
    	return 1;
	}
	// >>>>>>>>>>>>>>>>>  BANKÜBERFALL <<<<<<<<<<<<<<<<<
	/*if(strcmp(cmd, "/ueberfall", true) == 0 || strcmp(cmd, "/ausrauben", true) == 0)
	{
    	new Cops = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
		        if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pMember] == 3)
		        {
		            Cops += 3;
		        }
		    }
		}

		if(Cops < 3)
		{
	        SendClientMessage(playerid, COLOR_GREY, "Es ist kein Polizist da und der Tresor versperrt!");
	        return 1;
		}
    	if(rob == 1)
    	{
			SendClientMessage(playerid,0xAA3333AA,"Die Bank wurde schon überfallen!");
			return 1;
		}
		//FreezePlayer(playerid);
		rob = 1;
		SetTimer("Rob_Reset",3600000,0); // Nach 60 Minuten erst wieder ausrauben
		SetTimerEx("Rob_UnFreeze",240000,0,"i",playerid); // Nach 2 minuten Bank überfallen
		OnPlayerCommandText(playerid,"/S Hände hoch das ist ein Überfall!!!");
		SendClientMessage(playerid,0xFF9933FF,"Warte bis die Bankangestellten das Geld eingepackt haben &!");
		SendClientMessage(playerid,0xFF9933FF,"verlasse vorher nicht die Bank!");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					SendClientMessage(i,COLOR_RED,"HQ: Achtung Alle Einheiten! Eine Meldung vom Bank Security System!");
					SendClientMessage(i,COLOR_RED,"HQ: Verbrechen: Banküberfall, Gesuchter: Unbekannt");
					SendClientMessage(i,COLOR_RED,"HQ: Begeben sie sich sofort zur Los Santos Bank!");
				}
			}
		}
		return 1;
	}
	*/
	if(strcmp(cmd, "/givepass", true) == 0)
	{
        if(PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pAdmin] >= 4)
        {
            new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______________ Vergabe von Pässen _______________|");
				SendClientMessage(playerid, COLOR_WHITE, "BEBenutzung: /givepass [passname] [playerid/Name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: sfpass, lvpass");
				SendClientMessage(playerid, COLOR_WHITE, "|_________________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"sfpass",true) == 0)
			{
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /givepass sfpass [playerid/Name]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Du hast %s den SF-Pass gegeben.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den SF-Pass gegeben.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        PlayerInfo[giveplayerid][pSFPASS] = 1;
				        return 1;
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			if(strcmp(x_nr,"lvpass",true) == 0)
			{
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /givepass lvpass [playerid/Name]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Du hast %s den LV-Pass gegeben.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den LV-Pass gegeben.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
          				PlayerInfo[giveplayerid][pLVPASS] = 1;
				        return 1;
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
    	}
     	else
      	{
       		SendClientMessage(playerid, COLOR_GREY, "   Sie sind nicht der San Andreas Präsident !");
       		return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/takepass", true) == 0)
	{
        if(PlayerInfo[playerid][pLeader] == 7)
        {
            new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______________ Entzug von Pässen _______________|");
				SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass [passname] [playerid/Name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: sfpass, lvpass");
				SendClientMessage(playerid, COLOR_WHITE, "|_________________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"sfpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass sfpass [playerid/Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        format(string, sizeof(string), "* Du hast %s den SF-Pass entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den SF-Pass entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pSFPASS] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			if(strcmp(x_nr,"lvpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass lvpass [playerid/Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        format(string, sizeof(string), "* Du hast %s den LV-Pass entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den LV-Pass entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLVPASS] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
	    }
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Sie sind nicht der San Andreas Präsident !");
			return 1;
		}
	    return 1;
	}
	if(strcmp(cmd,"/rep",true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid,4) || IsPlayerInFrac(playerid,7) || IsPlayerInFrac(playerid,3))
	    {
			if(IsAtRep(playerid))
			{
				new veh = GetPlayerVehicleID(playerid);
				if(IsAnAmbulance(veh) || IsACopCar(veh) ||IsABundeswehrCar(veh) || IsAPraesiCar(veh) || IsAFbiCar(veh))
				{
	   				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
        				new Float:vehX, Float:vehY, Float:vehZ, Float:vehA;
				        GetVehiclePos(veh,vehX,vehY,vehZ);
				        GetVehicleZAngle(veh,vehA);
						RemovePlayerFromVehicle(playerid);
						FreezePlayer(playerid);
						SetVehicleToRespawn(veh);
      					SetTimerEx("Rep",5000,0,"iiffff",playerid,veh,vehX,vehY,vehZ,vehA);
			        	GameTextForPlayer(playerid,"~g~Fahrzeugreperatur~n~~y~Bitte warten...",4500,3);
		    		}
			    	else SendClientMessage(playerid,COLOR_RED," Du bist nicht der Fahrer!");
				}
				else SendClientMessage(playerid,COLOR_RED," Du bist in keinem Staatsfahrzeug!");
			}
			else SendClientMessage(playerid,COLOR_RED," Du bist an keinem /rep-Punkt!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht berechtigt, dein Fahrzeug auf Kosten des Staats zu reparieren!");
		return 1;
	}
	if(strcmp(cmd,"/respawnnotused",true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
		    for(new v=0; v<MAX_VEHICLES; v++)
		    {
		        if(GetVehicleDriver(v) == -1)
		        {
                	SetVehicleToRespawn(v);
                }
		    }
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht befugt!");
		return 1;
	}

	if(strcmp(cmd,"/respawnall",true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
		    for(new v=0; v<MAX_VEHICLES; v++)
		    {
                SetVehicleToRespawn(v);
		    }
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht befugt!");
		return 1;
	}


 	if(strcmp(cmdtext, "/NeedHelp", true)==0 || strcmp(cmdtext, "/USGA", true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(IsACop(playerid))
			{
			    if(PlayerInfo[playerid][pGangJailed] == 1 || PlayerTied[playerid] >= 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst jetzt nicht einen Backup rufen!");
					return 1;
				}
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"  HQ: %s braucht dringend Hilfe!",sendername);
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsACop(i))
				    {
						SendClientMessage(i, F_G, "=============================================================");
						SendClientMessage(i, F_O, "  HQ: AN ALLE VERFÜGBAREN EINHEITEN:");
						SendClientMessage(i, F_O, string);
						SendClientMessage(i, F_O, "  HQ: Begeben Sie sich zum Roten Marker auf der Karte!");
						SendClientMessage(i, F_G, "=============================================================");
						SetPlayerCheckpoint(i, X, Y, Z-5, 3.0);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du bist kein Staatsbeamter!");
			}
		}
		return 1;
	}

	if (strcmp("/starten", cmd, true) == 0)
	{
		if(Mullabfuhr[playerid] == 0 && PlayerInfo[playerid][pJob] == 17)
		{
		    if(PlayerInfo[playerid][pMulltime] == 0)
		    {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408 || Mullabfuhr[playerid] == 0)
		    	{
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Du bist nun im Dienst, fahre nun zu den einzelnen Häusern und Geschäften!");
					SetPlayerCheckpoint(playerid, 1355.6742,-1749.4160,13.3807, 5.0);
		        	MullabfuhrCP[playerid] = 1;
		        	Mullabfuhr[playerid] = 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Müllwagen, oder hast bereits eine Runde gestartet!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du musst warten bis du wieder fahren kannst!");
			}
			return 1;
		}
	}
	if(strcmp("/kennzeichenkaufen", cmd, true) == 0)
	{
	    if(PlayerInfo[playerid][pCarSkill] >= 0)
	    {
	        SendClientMessage(playerid, COLOR_RED, "Du brauchst ein Fahrzeug für ein Kennzeichen");
		}
		else
		if(KennzeichenErlaubnis[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits ein Kennzeichen gekauft!");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 2324.6418,-1135.9731,1051.3047))
		{
		    SendClientMessage(playerid, COLOR_YELLOW, "Du hast dir ein Kennzeichen für 500$ gekauft, an Fahrzeug anbringen mit /kennzeichen");
		    KennzeichenErlaubnis[playerid] = 1;
		    GivePlayerMoney(playerid,-500);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der KFZ Zulassungstelle");
		}
		return 1;
	}
	if (strcmp("/persokaufen", cmd, true) == 0)
	{
	    if(PlayerInfo[playerid][pPersoStop] == 1)
		{
  			SendClientMessage(playerid, COLOR_GRAD2,"Dein Antrag auf einen Personalausweis ist nocht nicht fertig. Bitte komm später wieder!");
			return 1;
		}
		if(PlayerInfo[playerid][pOwnPerso] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits einen Personalsausweis!");
		    return 1;
		}
		if(PlayerToPoint(4.0,playerid,365.2113,173.7801,1008.3828))
		{
			if(AllowPerso[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_NEWS, "Dein Personalausweis wurde erstellt.");
				SendClientMessage(playerid, COLOR_GREY, "Tipp /showperso um ihn vorzuzeigen!");
				SendClientMessage(playerid, COLOR_GREY, "Kosten: 500$");
				GivePlayerMoney(playerid,-500);
				PlayerInfo[playerid][pOwnPerso] = 1;
				TogglePlayerControllable(playerid, 1);
				return 1;
			}
			else if(AllowPerso[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"Dein Antrag wurde erfolgreich gestellt. In 15 Minuten wird er fertig sein!");
				SetTimerEx("PersoAntrag", 900000, 0, "d", playerid);
				PlayerInfo[playerid][pPersoStop] = 1;
				TogglePlayerControllable(playerid, 1);
			//SetPlayerPos(playerid, 366.7451,173.8046,1008.3828);
				return 1;
			}
			else
			{
 				SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht in der Stadthalle!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/showperso",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /showperso [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[playerid][pOwnPerso] == 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "**Du besitzt keinen PersonalAusweis**");
						return 1;
					}
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Um deine Stats zu betrachten Tipp /stats!"); return 1; }
				        new jtext[20];
				        if(PlayerInfo[giveplayerid][pJob] == 1) { jtext = "Dedektiv"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 2) { jtext = "Anwalt"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 3) { jtext = "Hure"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 4) { jtext = "Drogen Dealer"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 5) { jtext = "Autodieb"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 6) { jtext = "Farmer"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 7) { jtext = "Mechaniker"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 8) { jtext = "Bodyguard"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 9) { jtext = "Waffendealer"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 10) { jtext = "Autodealer"; }
						else if(PlayerInfo[giveplayerid][pJob] == 12) { jtext = "Boxer"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 14) { jtext = "Busfahrer"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 15) { jtext = "Zeitungs Junge"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 16) { jtext = "Pilot"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 17) { jtext = "Muellmann"; }
				        else if(PlayerInfo[giveplayerid][pJob] == 18) { jtext = "Farmer"; }
				        else { jtext = "None"; }
						new drank[20];
						if(PlayerInfo[giveplayerid][pDonateRank] == 1) { drank = "Buerger von SA"; }
						else if(PlayerInfo[giveplayerid][pDonateRank] >= 2) { drank = "Ehren Buerger"; }
						else { drank = "Einwanderer"; }
						new coordsstring[256];
						new name[MAX_PLAYER_NAME];
						new age = PlayerInfo[playerid][pAge];
						new crimes = PlayerInfo[playerid][pCrimes];
						new level = PlayerInfo[playerid][pLevel];
						GetPlayerName(playerid, name, sizeof(name));
						SendClientMessage(giveplayerid, COLOR_GREEN,"_____________Personal Ausweis_____________");
						format(coordsstring, sizeof(coordsstring),"Name: %s",name);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						format(coordsstring, sizeof(coordsstring),"Alter: %d",age);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						format(coordsstring, sizeof(coordsstring),"Level: %d",level);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						format(coordsstring, sizeof(coordsstring),"Beruf: %s",jtext);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						format(coordsstring, sizeof(coordsstring),"Status: %s",drank);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						format(coordsstring, sizeof(coordsstring),"Verbrechen: %d",crimes);
						SendClientMessage(giveplayerid, COLOR_GRAD5,coordsstring);
						new gname[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, gname, sizeof(gname));
						format(string, sizeof(string), "* %s zeigt %s seinen Personalausweis.", name, gname);
						ProxDetector(7.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht in deiner Naehe !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/rmarker",true) == 0)
	{
		if(IsPlayerInFrac(playerid,4) && MedicCallTime[playerid] > 0)
		{
			MedicCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
        if(IsPlayerInFrac(playerid,1) && CopCallTime[playerid] > 0)
	    {
			CopCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
	    }
		if(IsPlayerInFrac(playerid,22) && FireCallTime[playerid] > 0)
		{
			FireCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		if(IsPlayerInFrac(playerid,24))
		{
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
		{
            MechanicCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		DisablePlayerCheckpoint(playerid);
		return 1;
	}

	//-------------------------------Roadblock----------------------------------------------
	if(strcmp(cmdtext, "/nagelband", true) == 0 || strcmp(cmdtext, "/nb", true) == 0)
	{
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
	    if(PlayerInfo[playerid][pRank] < 3)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Rang 3 haben, um diesen Befehl nutzen zu können!");
	        return 1;
		}
		if(NagelBandErstellt[playerid] == 4)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits ein Nagelband aufgestellt, bau sie erst wieder ab (/nbw)");
		    return 1;
		}
		AddNagelBand(playerid);
		NagelBandErstellt[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nagelband aufgestellt (Abbauen mit /nbw).");
		return 1;
	}
	if(strcmp(cmdtext, "/nagelbandweg", true) == 0 || strcmp(cmdtext, "/nbw", true) == 0)
	{
 		if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		if(NagelBandErstellt[playerid] == 4)
 		{
 		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast kein Nagelband aufgestellt!");
 		    return 1;
		}
		RemoveNagelBand(playerid);
		return 1;
	}
	if(strcmp(cmdtext, "/nagelbandwegall", true) == 0 || strcmp(cmdtext, "/nbwa", true) == 0)
	{
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
		if(PlayerInfo[playerid][pRank] < 3)
		{
	        SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Rang 3 haben, um diesen Befehl nutzen zu können!");
	        return 1;
		}
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Alle Nagelbänder abgebaut.");
        RemoveAllNagelBand();
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(NagelBandErstellt[i] == 1)
            {
                NagelBandErstellt[i] = 0;
                SendClientMessage(playerid, COLOR_LIGHTGREEN, "Alle Nagelbänder wurden abgebaut!");
			}
		}
        return 1;
	}
	if(strcmp(cmdtext, "/roadblock", true)==0 || strcmp(cmdtext, "/rb", true)==0)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
		if (PlayerInfo[playerid][pRank] < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du musst mindestens Rang 1 haben, um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] != 0) return SendClientMessage(playerid, COLOR_GREY, "Du kannst nur eine Straßensperre errichten, gib /rrb ein um eine vorhandene Sperre zu entfernen.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pRoadblock] = CreateDynamicObject(981, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Strassensperre ~r~platziert", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Starßensperre erfolgreich platziert, gib /rrb oder /roadunblock ein um sie zu entfernen.");
		//roadblocktimer = 1;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "HQ: Officer %s hat eine Straßensperre platziert, auf der Karte ist sie als Checkpoint zu sehen.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, COLOR_YELLOW, "Du kannst alle Sperren mit /rrball entfernen");
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/fahrlehrer", true)==0)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "===[FahrLehrer Online: ]===");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s [Nummer:%d]", sendername,PlayerInfo[i][pPnumber]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/members", true)==0)
	{
		if(PlayerInfo[playerid][pMember] > 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "===[Aus deiner Fraktion ist Online: ]===");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					new mymember;
					mymember = PlayerInfo[playerid][pMember];
					new myleader;
					myleader = PlayerInfo[playerid][pMember];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s [ID:%d][Rang:%d]", sendername,i,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			return 1;
		}
		if(PlayerInfo[playerid][pLeader] > 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "===[Aus deiner Fraktion ist Online: ]===");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					new mymember;
					mymember = PlayerInfo[playerid][pLeader];
					new myleader;
					myleader = PlayerInfo[playerid][pLeader];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s [ID:%d][Rang:%d]", sendername,i,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			return 1;
		}
		return 1;
	}
	if(strcmp(cmdtext, "/roadunblock", true)==0 || strcmp(cmdtext, "/rrb", true)==0)
	{
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
			return 1;
		}
		if (PlayerInfo[playerid][pRank] < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du mußt mindestens Rang 2 haben um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du hast keine Straßensperre platziert!");
			return 1;
		}
		RemoveRoadblock(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Straßensperre erfolgreich entfernt.");
		return 1;
	}

	if(strcmp(cmdtext, "/roadunblockall", true)==0 || strcmp(cmdtext, "/rrball", true)==0)
	{
		if (PlayerInfo[playerid][pRank] >= 4 && PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2|| PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pRoadblock] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "HQ: Durch die Anordnung von Officer %s wurden alle Starßensperren entfernt.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Du mußt Rang 2 haben oder Polizeichef sein um alle Straßensperren entfernen zu können!");
		}
		return 1;
	}

	if(strcmp(cmd,"/start",true) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,2.0,364.3931,173.7390,1008.3828))
	    {
	    	SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Stadthalle!");
		}
	    else if(PlayerInfo[playerid][pCarLic] == 1)
        {
            SendClientMessage(playerid,COLOR_RED,"Du hast bereits den Führerschein!");
        }
        else if(GetPlayerMoney(playerid) < 1250)
        {
            SendClientMessage(playerid,COLOR_RED,"Du hast keine 1250$ für die Prüfung!");
        }
        else
        {
			PruefungsSchritt[playerid] = 1;
			UnFreezePlayer(playerid);
			GivePlayerMoney(playerid,-1250);
			SetPlayerPos(playerid,370.8790,172.4316,1019.9844);
		    SetPlayerCameraPos(playerid,370.8790,176.0000,1021.0000);
			SetPlayerCameraLookAt(playerid,370.8790,172.4316,1019.9844);
			SetPlayerFacingAngle(playerid,0.0000);
			PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
        }
		return 1;
	}
/*	if(strcmp(cmd,"/Motorrad",true) == 0)
	{
 		if(!IsPlayerInRangeOfPoint(playerid,2.0,364.3931,173.7390,1008.3828))
	    {
	    	SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Stadthalle!");
		}
	    else if(PlayerInfo[playerid][pMotoLic] == 1)
        {
            SendClientMessage(playerid,COLOR_RED,"Du hast bereits den Führerschein!");
        }
        else if(GetPlayerMoney(playerid) < 1150)
        {
            SendClientMessage(playerid,COLOR_RED,"Du hast keine 1150$ für die Prüfung!");
        }
        else
        {
            MotorradSchritt[playerid] = 1;
			UnfreezePlayer(playerid);
			GivePlayerMoney(playerid, -1150);
			SetPlayerPos(playerid,370.8790,172.4316,1019.9844);
		    SetPlayerCameraPos(playerid,370.8790,176.0000,1021.0000);
			SetPlayerCameraLookAt(playerid,370.8790,172.4316,1019.9844);
			SetPlayerFacingAngle(playerid,0.0000);
			MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		}
		return 1;
	}*/
			

//================ TOR ================//
	if(strcmp(cmd,"/ptor",true) == 0)
	{
		new pName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,pName,sizeof pName);
		if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20.0, 1426.56945801,-1901.34228516,12.76267624) || IsPlayerInRangeOfPoint(playerid, 20.0, 1426.33483887,-1901.32604980,12.75741196))
	        {
	            MoveObject(leo2,1426.33483887,-1901.32604980,2.75741196,3.0);
	            MoveObject(leo1,1426.56945801,-1901.34228516,2.76267624,3.0);
	            SendClientMessage(playerid, COLOR_GREEN, "Du hast das Tor geöffent, es schließt in 10 Sekunden.");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				SetTimer("leozu1",10000,0);
				SetTimer("leozu2",10000,0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 20.0, 1285.7044677734, -2056.2905273438, 60.493286132813))
			{
			    if(TorP == false)
				{
					MoveObject(PTor, 1285.7044677734, -2056.2905273438, 54.938991546631, 3.0);
					SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet");
					TorP = true;
				}
				else if(TorP == true)
				{
				    MoveObject(PTor, 1285.7044677734, -2056.2905273438, 60.493286132813, 3.0);
				    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen");
				    TorP = false;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Du bist zu weit vom Tor entfernt!");
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitglied der Regierung!");
		return 1;
	}
	//______________________:::::::::::::::::PRÄSI_VILLA_INNEN_RAUM_TELEPORT::::::::::::::::::________________________
	if(strcmp(cmd, "/penter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || IsACop(playerid)) //nur Präsi und SS kann in den Teleport
			if(GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1123.2803,-2037.1238,69.8875)) // Wo er stehen soll
			{
				SetPlayerInterior(playerid, 5); //Interior
				SetPlayerVirtualWorld(playerid, 4);
				SetPlayerPos(playerid,1262.4510,-785.2432,1091.9063); // Wo er hinkommt
				SetPlayerFacingAngle(playerid,281.0466);
			 	GameTextForPlayer(playerid, "~G~Sie sind nun in der Praesidenten Villa.", 5000, 1);
			}
		}
		return 1;
	}
//--verlassn
	if(strcmp(cmd, "/pexit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || IsACop(playerid)) //nur Präsi und SS kann in den Teleport
			if(GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1261.5485,-785.3905,1091.9063)) // Wo er stehen soll
			{
				SetPlayerInterior(playerid, 0); //Interior
				SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid, "~G~Sie haben die Praesidenten Villa verlassen.", 5000, 1);
				SetPlayerPos(playerid,1123.2803,-2037.1238,69.8875);
				//SetTimerEx("SetPlayerPosEx",2500,0,"iffff",playerid,1123.9475,-2037.0007,69.8856,269.1399);
			}
		}
		return 1;
	}

//______________________:::::::::::::::::PRÄSI_VILLA_INNEN_RAUM_TELEPORT::::::::::::::::::________________________
	if(strcmp(cmd, "/Dachluke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember]==7||PlayerInfo[playerid][pLeader]==7) //nur Präsi und SS kann in den Teleport
				if (GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1117.8037,-2037.0393,78.7500)) // Wo er stehen soll
				{
						SetPlayerInterior(playerid, 5); //Interior
						SetPlayerPos(playerid, 1299.1400,-796.4503,1084.0078); // Wo er hinkommt
						SetPlayerVirtualWorld(playerid, 4);
					 	GameTextForPlayer(playerid, "~G~Sie sind nun in der San Andreas Präsidenten Villa.", 5000, 1);

}}}
//--verlassn
	if(strcmp(cmd, "/Dachluke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember]==7||PlayerInfo[playerid][pLeader]==7) //nur Präsi und SS kann in den Teleport
				if (GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1299.1400,-796.4503,1084.0078)) // Wo er stehen soll
				{
						SetPlayerInterior(playerid, 0); //Interior
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos(playerid, 1117.8037,-2037.0393,78.7500); // Wo er hinkommt
					 	GameTextForPlayer(playerid, "~G~Sie haben die San Andreas Präsidenten Villa verlassen.", 5000, 1);
				}
		}
	}
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,376.4389,-67.9595,1001.5151))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(BSMK, playerid);
			FreezePlayer(playerid);
			//OnPlayerText(0, "Willkommen bei Burger-Shot,was darfs sein?");
			return 1;
		}
	}

	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,374.7315,-119.5200,1001.4995))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(CBKM, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,369.5129,-6.7848,1001.8589))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(PMK, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,448.4033,-84.3045,999.5547))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(PMK, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}

//==========RM BEFEHLE=====================//
	if(strcmp(cmd,"/renter",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23 || IsACop(playerid))
	    {
			if(IsPlayerInRangeOfPoint(playerid,3.0,2516.8743,-2120.1921,13.5469))
			{
			    SetPlayerPos(playerid,1703.4513,-1668.1116,20.2188);
			    SetPlayerFacingAngle(playerid,276.7126);
				SetPlayerInterior(playerid,18);
			    SetPlayerVirtualWorld(playerid,0);

			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht Mitglied der Brigada!");
		return 1;
	}
	if(strcmp(cmd,"/rexit",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23 || IsACop(playerid))
	    {
			if(IsPlayerInRangeOfPoint(playerid,3.0,1701.3274,-1667.7771,20.2188))
			{
			    SetPlayerPos(playerid,2516.8743,-2120.1921,13.5469);
			    SetPlayerFacingAngle(playerid,309.5732);
				SetPlayerInterior(playerid,0);
   			    SetPlayerVirtualWorld(playerid,0);
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"  Du bist nicht Mitglied der Brigada!");
		return 1;
	}
	if(strcmp(cmdtext, "/maske", true) == 0)
	{
 		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}
/*	if(strcmp(cmdtext, "/hmaske", true) == 0)
	{
 		if(IsPlayerInFrac(playerid, 8) && PlayerInfo[playerid][pRank] >= 1)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}*/
	if(strcmp(cmdtext, "/fbimaske", true) == 0)
	{
 		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/wmaske", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}
	//if(strcmp(cmd, "/gemeindenöttingen11010", true) == 0)
	//{
	  //  Ban(playerid);
        //SendClientMessage(playerid, COLOR_GREEN, "Hurensohn hau rein MFG");
	    //return 1;
	//}
	if(strcmp(cmd, "/ernten", true) == 0)
	{
	    if(PlayerInfo[playerid][pJob] != 6)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Das können nur Farmer!");
	        return 1;
		}
   		new vehicle = GetPlayerVehicleID(playerid);
   		if(AktuellerCP[playerid] != INVALID_FARMER_CP)return SendClientMessage(playerid,COLOR_GRAD1, "Du hast kein Mähdrescher!");
   		if(!FarmerFahrzeug(vehicle))return SendClientMessage(playerid,COLOR_GRAD1, "Du bist in keinem Mähdrescher");
		if(PlayerInfo[playerid][pFarmTime] > 0)return SendClientMessage(playerid, COLOR_GRAD1, "Die Pflanzen sind noch nicht gewachsen!");
		AktuellerCP[playerid]++;
   		SetPlayerCheckpoint(playerid,FarmerCPS[AktuellerCP[playerid]][0],FarmerCPS[AktuellerCP[playerid]][1],FarmerCPS[AktuellerCP[playerid]][2], 8.0);
   		SendClientMessage(playerid,COLOR_LIGHTBLUE, "*Fahre nun die Checkpoints ab, um das Feld abzuernten.");
		return 1;
	}
/*	if(strcmp(cmd, "/arrestALC", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2)
			{
				if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "NICHT IM DIENST!");
				    return 1;
				}
		        if(!IsPlayerInRangeOfPoint(playerid,20.0, 1804.5670,-1580.3859,13.4552))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du bist nicht am Alcatraz!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /arrestalc [Preis] [Zeit (Minuten)] [Kaution (0=nein 1=ja)] [Kautionpreis]");
					SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
					return 1;
				}
				moneys = strval(tmp);
				if(moneys < 1 || moneys > 10000) { SendClientMessage(playerid, COLOR_GREY, "Der Gefängnispreis darf nicht unter $1 oder über $100000 liegen !"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /arrestalc [Preis] [Zeit (Minuten)] [Kaution (0=nein 1=ja)] [Kautionspreis]");
					SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
					return 1;
				}
				new time = strval(tmp);
				if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "Die Minuten der Haftzeit dürfen nicht unter 1 oder über 60 Minuten liegen!"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /arrestALC [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
					return 1;
				}
				new bail = strval(tmp);
				if(bail < 0 || bail > 0) { SendClientMessage(playerid, COLOR_GREY, "Keine Kaution"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /arrestALC [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
					return 1;
				}
				new bailprice = strval(tmp);
				if(bailprice < 0 || bailprice > 50000000) { SendClientMessage(playerid, COLOR_GREY, "Sie können nicht mehr als 5 Millionen einstellen!!"); return 1; }
				new suspect = GetClosestPlayer(playerid);
				if(IsACop(suspect))
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du kannst keinen Beamten einsperren!");
					return 1;
				}
				if(IsPlayerConnected(suspect))
				{
					if(GetDistanceBetweenPlayers(playerid,suspect) < 30)
					{
						GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(WantedLevel[suspect] < 5)
						{
						    SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat kein Wantedlevel 6 oder höher!");
						    return 1;
						}
						GivePlayerMoney(playerid, moneys/2);
						FraktionsKasse[0] += moneys/2;
						format(string, sizeof(string), "* Du hast %s eingesperrt für %d$!", giveplayer, moneys);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(suspect, -moneys);
						format(string, sizeof(string), "Eingesperrt von %s ~n~    fuer $%d", sendername, moneys);
						GameTextForPlayer(suspect, string, 6000, 5);
						ResetPlayerWeapons(suspect);
						if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
						{
							format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
						{
							format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						else if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
						{
							format(string, sizeof(string), "<< Soldat %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						SetPlayerInterior(suspect, 0);
						SetPlayerPos(suspect,-2228.7432,1792.6576,5.0996);
						PlayerInfo[suspect][pJailTime] = time * 60;
						if(bail == 1)
						{
							JailPrice[suspect] = bailprice;
							format(string, sizeof(string), "Du bist für %d Sekunden eingesperrt.   Kaution: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						}
						else
						{
						    JailPrice[suspect] = 0;
							format(string, sizeof(string), "Du bist für %d Sekunden eingesperrt.   Kaution: nicht möglich", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						}
						PlayerInfo[suspect][pJailed] = 2;
				        PlayerInfo[suspect][pArrested] += 1;
						SetPlayerFree(suspect,playerid, "FESTGENOMMEN");
						WantedPoints[suspect] = 0;
						WantedLevel[suspect] = 0;
						SetPlayerVirtualWorld(playerid, 60);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Kein gesuchter in ihrer Nähe.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Sie sind kein Staatsbeamter!");
			    return 1;
			}
		}//not connected
		return 1;
	}*/
 	if(strcmp(cmd,"/preise",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	    	{
		        tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, BLUE_NEW, "Verwende: /preise ID ");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        SendClientMessage(giveplayerid, RED_NEW, "----------[Preise]----------");
					        SendClientMessage(giveplayerid, RED_NEW, "Führerschein: 3000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Flugschein: 8000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Angelschein: 1000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Bootschein: 5000$");
					        SendClientMessage(giveplayerid, RED_NEW, "LKW: 5000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Motorrad: 4000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Waffenschein: 50000$");
							format(string, sizeof(string), "* Du hast %s die Preise für alle Scheine gezeigt", giveplayer);
							SendClientMessage(playerid, BLUE_NEW, string);
						}
						else
						{
						    SendClientMessage(playerid, BLUE_NEW, "Spieler nicht in ihrer Nähe!");
						    return 1;
						}
					}
				}
		        else
		        {
		            SendClientMessage(playerid, BLUE_NEW, "Spieler Offline");
		            return 1;
		        }
			}
		}
	    return 1;
 	}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// BANKAUTOMATEN /////////////////////////////////////////////



//-------------------------------[ ATM ]---------------------------------------------------
//------------------------------------------------------------------------------
	if(strcmp(cmd, "/iatm", true) == 0)
	{
		if(AtATM(playerid))
 		{
			SendClientMessage(playerid, COLOR_RED, "Die Bankautomaten sind vorübergehend geschlossen!");
			return 1;
 		}
	}
	if(strcmp(cmd, "/atm", true) == 0)
	{
		if(!AtATM(playerid))
 		{
			SendClientMessage(playerid, COLOR_GREY, "Du bist an keinem Bankautomat!");
			return 1;
 		}
 		ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST,"Menü", "Kontostand\nEinzahlen\nAuszahlen\nÜberweisen", "Auswählen", "Beenden");
 		return 1;
	}
	if(strcmp(cmd, "/bank",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,7.0,1421.3022,-981.7219,1639.7843))
		{
		    ShowPlayerDialog(playerid, BANK,DIALOG_STYLE_LIST,"Bank", "Kontostadt\nEinzahlen\nAuszahlen\nÜberweisen", "Auswählen", "Beenden");
		}
		else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Bank"); }
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// TORBEFEHLE und Aufzüge /////////////////////////////////////////

//Geheimstützpunkt
	if(strcmp(cmd,"/hangar",true) == 0)
	{
   		if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 3)
   		{
	        if(hangarvar == 0)
	        {
	            MoveObject(hangar,-2267.1955566406, -1686.7861328125, 478.41624145508,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				hangarvar = 1;
			}
			else
			{
			    MoveObject(hangar,-2267.1955566406, -1686.7861328125, 483.31539916992,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    hangarvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Polizist");
		return 1;
	}
	if(strcmp(cmd,"/hangar2",true) == 0)
	{
   		if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 3)
   		{
	        if(hangar2var == 0)
	        {
	            MoveObject(hangar2,-2425.5876464844, -1522.6268310547, 468.47655029297,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				hangar2var = 1;
			}
			else
			{
			    MoveObject(hangar2,-2425.5876464844, -1522.6268310547, 475.77655029297,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    hangar2var = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Polizist");
		return 1;
	}
//LCN Tore

	if(strcmp(cmd,"/gstor",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,1621.254883, -1861.278076, 15.249203))
		{
			if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
		    {
		        if(lcntorvar == 0)
		        {

		            MoveObject(lcntor,1621.254883, -1861.278076, 5.249203,3.0);
					PlaySoundForPlayer(playerid,1035);
					SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
					lcntorvar = 1;
				}
				else
				{
				    MoveObject(lcntor,1621.254883, -1861.278076, 15.249203 ,3.0);
					PlaySoundForPlayer(playerid,1035);
					SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				    lcntorvar = 0;
				}
			}
			else SendClientMessage(playerid,COLOR_RED," Du bist kein Grove Street Mitglied");
			return 1;
		}
	}


//MEdictor
    if(strcmp(cmd,"/medictor", true) == 0)
    {
   		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
     		MoveObject(Medictor,1997.1999511719, -1434.4000244141, 15.300000190735,3.0);
			MoveObject(Medictor2,2014.4000244141, -1450.8000488281, 15.300000190735,3.0);
   			SetTimer("CloseMedictor", 5000, 0);
   			SendClientMessage(playerid, COLOR_YELLOW,"Die Tore sind offen! Sie schließen in 5sek!");
		}
 		else SendClientMessage(playerid, 0xFF6347AA, "Du bist kein Sanitäter!");
 		return 1;
	}
	if(strcmp(cmd,"/zivileingang", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
		    MoveObject(ziviltor,2095.3999023438, -1445.6999511719, 21.200000762939,3.0);
			SendClientMessage(playerid, COLOR_YELLOW, "Die Schranke ist offen! Sie schließt in 5sek!");
			SetTimer("Closeziviltor", 5000, 0);
			PlaySoundForPlayer(playerid,1035);
			SetTimerEx("PlaySoundForPlayer",1000,0,"id",playerid,1036);
		}
		else SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter!");
		return 1;
	}
	if(strcmp(cmd,"/zivileingang2", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
		    MoveObject(ziviltor2,2002.0999755859, -1358.5999755859, 20.5,3.0);
			SendClientMessage(playerid, COLOR_YELLOW, "Die Schranke ist offen! Sie schließt in 5sek!");
			SetTimer("Closeziviltor2", 5000, 0);
			PlaySoundForPlayer(playerid,1035);
			SetTimerEx("PlaySoundForPlayer",1000,0,"id",playerid,1036);
		}
		else SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter!");
		return 1;
	}

//FBI Tor
	if(strcmp(cmd,"/fbitor",true) == 0)
	{
	    if(IsACop(playerid))
	    {
	        if(fbitorvar == 0)
	        {
	            MoveObject(fbitor, 1729.9000244141, -1141.5, 19.799999237061,5.0); //1729.9000244141, -1141.5, 19.799999237061
	            SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				fbitorvar = 1;
			}
			else
			{
			    MoveObject(fbitor, 1729.8000488281, -1141.5, 25.89999961853,5.0);//1729.8000488281, -1141.5, 25.89999961853
			    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    fbitorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Beamter");
		return 1;
	}
//Hitmantor
	if(strcmp(cmd,"/htor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	    {
	        if(htorvar == 0)
	        {
	            MoveObject(htor, 2185.1000976563, -1785.9000244141, 8.6000003814697,5.0);
	            SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				htorvar = 1;
			}
			else
			{
			    MoveObject(htor, 2185.1000976563, -1785.9000244141, 15.10000038147,5.0);
			    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    htorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Hitman");
		return 1;
	}
//ARMY LIFT
if(strcmp(cmd,"/armylift1",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
	        if(armylift123var == 0)
	        {
				MoveObject(armylift1,135.239868,1941.596191,25.319401,2.0);
				MoveObject(armylift2,135.249451,1948.701782,25.366772,2.0);
				MoveObject(armylift3,135.242264,1934.456055,25.236771,2.0);
	            armylift123var = 1;
			}
			else
			{
				MoveObject(armylift1,135.239868,1941.596191,18.319401,2.5);
				MoveObject(armylift2,135.249451,1948.701782,18.366772,2.5);
				MoveObject(armylift3,135.242264,1934.456055,18.236771,2.5);
				armylift123var = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Dies darf nur die Army!");
		return 1;
	}
	if(strcmp(cmd,"/armylift2",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
	        if(armylift45var == 0)
	        {
				MoveObject(armylift4,282.634491,1821.245972,24.023870,2.0);
				MoveObject(armylift5,289.555176,1821.240967,24.023870,2.0);
	            armylift45var = 1;
			}
			else
			{
				MoveObject(armylift4,282.634491,1821.245972,16.593493,2.5);
				MoveObject(armylift5,289.555176,1821.240967,16.593493,2.5);
				armylift45var = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du bist nicht befugt den Lift zu betätigen!");
		return 1;
	}
//FuegosTor
	if(strcmp(cmd,"/ctor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	    {
	        if(Fuegostorvar == 0)
	        {
	            MoveObject(Fuegostor, -2127.0151367188, -80.848670959473, 28.093704223633,5.0);
	            SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				Fuegostorvar = 1;
			}
			else
			{
			    MoveObject(Fuegostor, -2127.0151367188, -80.848670959473, 37.093704223633,5.0);
			    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    Fuegostorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Cripz");
		return 1;
	}
	if(strcmp(cmd,"/cgarage",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	    {
	        if(Fuegosleadertorvar == 0)
	        {
	            MoveObject(Fuegosleadertor,  -2180.8002929688, -209.67846679688, 30.223052978516,5.0);
	            SendClientMessage(playerid, COLOR_GREEN, "Garage geöffnet");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				Fuegosleadertorvar = 1;
			}
			else
			{
			    MoveObject(Fuegosleadertor,  -2180.8002929688, -209.67846679688, 37.223052978516,5.0);
	            SendClientMessage(playerid, COLOR_RED, "Garage geschlossen");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    Fuegosleadertorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Cripz");
		return 1;
	}
	if(strcmp(cmd,"/trsperre",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	    {
	        if(Fuegossperrevar == 0)
	        {
	            MoveObject(Fuegossperre, -2145.6791992188, -127.64067840576, 36.0669921875,10.0);
	            SendClientMessage(playerid, COLOR_GREEN, "Sperre oben");

				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				Fuegossperrevar = 1;
			}
			else
			{
			    MoveObject(Fuegossperre, -2145.6791992188, -127.64067840576, 34.6669921875,10.0);
	            SendClientMessage(playerid, COLOR_RED, "Sperre unten");
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    Fuegossperrevar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Cripz");
		return 1;
	}
	//if(strcmp(cmd,"/trfalle",true) == 0)
//	{
//		if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
//		{
//			if (PlayerInfo[playerid][pRank] >= 4)
//			{
//				if(Fuegosnotfallvar == 0)
//				{
//					MoveObject(Fuegosnotfall,  -2140.5568847656, -71.634223937988, 34.171875,10.0);
//					MoveObject(Fuegosnotfall2,-2106.3688964844, -70.095481872559, 34.171875,10.0);
//					SendClientMessage(playerid, COLOR_GREEN, "Falle aktiviert");
//					PlaySoundForPlayer(playerid,1035);
//					SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
//					Fuegosnotfallvar = 1;
//				}
//				else
//				{
//					MoveObject(Fuegosnotfall, -2140.5568847656, -71.634223937988, 24.171875,10.0);
//					MoveObject(Fuegosnotfall2,-2106.3688964844, -70.095481872559, 24.171875,10.0);
//					SendClientMessage(playerid, COLOR_RED, "Falle deaktiviert");
//					PlaySoundForPlayer(playerid,1035);
//					SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
//					Fuegosnotfallvar = 0;
//	 			}
//			}
//			else SendClientMessage(playerid,COLOR_RED,"Dein Rang ist zu niedrig!");
//	 	}
//	 	else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Fuegos");
//  		return 1;
//	}
//Brigada
	if(strcmp(cmd,"/rtor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
	    {
	        if(rtorvar == 0)
	        {
	            MoveObject(rtor,2422.7316894531, -2089.4899902344, 8.257606506348,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				rtorvar = 1;
			}
			else
			{
			    MoveObject(rtor,2422.7316894531, -2089.4899902344, 15.257606506348,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    rtorvar = 0;
			}
		}
  		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Brigada");
		return 1;
	}
/*	if(strcmp(cmd,"/parktor",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,1811.5, -1889.5999755859, 13.199999809265))
		{
			MoveObject(zivitor,1811.1999511719, -1889.4000244141, 11.699999809265,3.0);
			PlaySoundForPlayer(playerid,1035);
			SetTimer("Closezivitor", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
   			GameTextForPlayer(playerid, "~r~Das Tor ist Offen!\n Kosten: 125$", 5000,3);
   			SendClientMessage(playerid,COLOR_YELLOW, "Viel Spaß, aber Fahr Vorsichtig!");
   			GivePlayerMoney(playerid, -125);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED, "Du bist nicht am Tor beim Ziviparkplatz!");
		}
	}*/
	if(strcmp(cmd,"/btor",true) == 0)
 	{
 	   if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
 		{
   			MoveObject(ballastor,1141.0999755859, -1206.5, 14.89999961853,3.0);
			PlaySoundForPlayer(playerid,1035);
			SetTimer("CloseBallasTor", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_RED, "Beeil dich das Tor schließt in 5sec!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Ballas Homie");
		return 1;
	}
/*	if(strcmp(cmd,"/shop",true) == 0)
	{
	    if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Du besitzt keinen Waffenschein.");
	    if(IsPlayerInRangeOfPoint(playerid,3.0,290.2523,-106.7863,1001.5156)||IsPlayerInRangeOfPoint(playerid,3.0,295.4237,-38.1667,1001.5156))
		{
		        ShowPlayerDialog(playerid, DIALOG_SHOP, DIALOG_STYLE_LIST, "Waffenshop", "8000$\nDeagle : 8000$\nM4 : 8000$\nAk47 : 8000$\nMP5 : 8000$\nKnife : 9000$\nArmour : 8000$\nSchrotflinte", "Auswählen", "Abbruch");
		}
		else//Deagle :
		{
		//	SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Waffenshop bei der Bank!");
		}
	}*/
 	if(strcmp(cmd, "/tutorialabbruch", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(TutTime[playerid] >= 1)
			{
				TutTime[playerid] = 120;
			    TutTime[playerid] = 0; PlayerInfo[playerid][pTut] = 1;
				gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
				TogglePlayerControllable(playerid, 1);
				UnFreezePlayer(playerid);
				SetCameraBehindPlayer(playerid);
				MedicBill[playerid] = 0;
				AfterTutorial[playerid] = 1;
				SetPlayerSpawn(playerid);
				SetPlayerPos(playerid,1133.0924,-2037.1101,69.0078);
				SetTimerEx("UnsetAffterTutorial", 2500, false, "i", playerid);
				SetTimerEx("UnsetFirstSpawn", 20000, false, "i", playerid);
				SetPlayerSpawn(playerid);
				SetPlayerInterior(playerid,0);
				SetPlayerHealth(playerid,100);
				PlayerInfo[playerid][pLevel] = 1;
				PlayerInfo[playerid][pSHealth] = 0.0;
				PlayerInfo[playerid][pHealth] = 100.0;
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				PlayerInfo[playerid][pTeam] = 3;
				PlayerInfo[playerid][pModel] = 101;
				PlayerInfo[playerid][pPhousekey] = 255;
				PlayerInfo[playerid][pPbiskey] = 255;
				PlayerInfo[playerid][pAccount] = 50000;
				PlayerInfo[playerid][pMuted] = 0;
				GivePlayerMoney(playerid, 50000+random(1000));
				SendClientMessage(playerid,COLOR_GRAD1,"Du hast das Tutorial abgebrochen. Wir wünschen dir viel Spaß am spielen!");
		  		SendClientMessage(playerid, COLOR_WHITE, "Dir wurde auf der Karte eine Position Markiert, was du als");
				SendClientMessage(playerid, COLOR_WHITE, "nächstes erledigen kannst, begieb dich zum Marker!");
				SendClientMessage(playerid, COLOR_WHITE, "Ziel: Besorge dir einen Personalausweis & suche nach einem Job!");
				return 1;
			}
			else
			{
            	SendClientMessage(playerid,COLOR_GRAD1,"Du befindest dich nicht im Tutorial!");
				return 1;
			}
  		}
		return 1;
	}
/*	if(strcmp(cmd,"/wtor",true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 21))
	    {
			MoveObject(wheeltor,1812.9000244141, -2071.8999023438, 9.1000003814697,3.0);
			PlaySoundForPlayer(playerid, 1035);
			SetTimer("Closewheeltor", 7000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_YELLOW, "Beeil dich das Tor schließ in 7Sek!");
	    }
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
		}
	}*/
	if(strcmp(cmd,"/closemarkt",true) == 0)
	{
	    if(IsACop(playerid))
	    {
	        if(schwarzgatevar == 0)
			{
				MoveObject(schwarztor,2804.8999023438, -1449.5999755859, 41.5,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				SendClientMessage(playerid, COLOR_GREEN, "Du hast den Schwarzmarkt geschlossen!");
				schwarzgatevar = 1;
			}
		    else
		    {
		        MoveObject(schwarztor,2804.8999023438, -1449.5999755859, 46,3.0);
				SendClientMessage(playerid, COLOR_GREEN, "Du hast den schwarzmarkt geöffnet!");
				schwarzgatevar = 0;
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Du bist kein Staatsbeamter!");
		}
	    
	}
	if(strcmp(cmd,"/vtor",true) == 0)
	{
	    if(PlayerInfo[playerid][pDonateRank] >= 3)
	    {
	        MoveObject(extrontor,1245.6999511719, -767.20001220703, 87.800003051758,3.0);
	        PlaySoundForPlayer(playerid,1035);
	        SetTimer("Closeextrontor", 5000, 0);
	        SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid,COLOR_GREEN, "Willkommen zu Hause!");
	    }
	    else
		{
		    SendClientMessage(playerid,COLOR_RED, "Du bist kein Premium User und nicht befugt!");
		}
	}
	if(strcmp(cmd, "/vvtor",true) == 0)
	{
	    if(PlayerInfo[playerid][pDonateRank] >= 2)
	    {
			if(PlayerInfo[playerid][pLevel] >= 5)
			{
				MoveObject(surealtor,318.5, -1190.4000244141, 75.300003051758,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimer("Closesurealtor", 10000, 0);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				SendClientMessage(playerid, COLOR_GREEN, "Beeil dich das Tor schließt in 10 sek!");
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED, "Du bist nicht LvL 5!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Du bist kein Premium User und nicht befugt!");
		}
	}
   	if(strcmp(cmd, "/schokotor",true) == 0)
	{
		new pName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,pName,sizeof pName);
		if(!strcmp(pName,"SchokoBong",true))
	    //if(PlayerInfo[playerid][pDonateRank] >= 2)
	    {
			if(PlayerInfo[playerid][pLevel] >= 1)
			{
				MoveObject(schokotor,1496.5, -699.90002441406, 96.400001525879-7, 3.0);//1496.5, -699.90002441406, 90.599998474121,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimer("Closeschokotor", 10000, 0);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				SendClientMessage(playerid, COLOR_GREEN, "Beeil dich das Tor schließt in 10 sek!");
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED, "Du bist nicht Schokobong!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Du bist kein Premium User und nicht befugt!");
		}
	}
	if(strcmp(cmd, "/rftor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
	    {
	        MoveObject(rifastor,2234.3999023438, -2215.6000976563, 9.1000003814697,3.0);
	        PlaySoundForPlayer(playerid, 1035);
	        SetTimer("CloseRifasTor", 5000,0);
	        SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
	        SendClientMessage(playerid,COLOR_RED,"Beeil dich das Tor schließt in 5sek!");
	    }
	    else SendClientMessage(playerid, COLOR_RED," Du bist kein Mitglied der L.S Rifas");
	}
/*	if(strcmp(cmd,"/Bundeswehr1",true) == 0)
 	{
 	   if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
   			MoveObject(Bundeswehrtor1,2473.3999023438, -2270.3999023438, 21,3.0);//tor unten
			PlaySoundForPlayer(playerid,1035);
			SetTimer("CloseBundeswehr1", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_RED, "Beeil dich das Tor schließt in 5sek!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht in der Bundeswehr");
		return 1;
	}
	if(strcmp(cmd,"/Bundeswehr2",true) == 0)
 	{
 	   if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
   			MoveObject(Bundeswehrtor2,2366.6999511719, -2382.6000976563, 9.5,3.0); //tor unten
			PlaySoundForPlayer(playerid,1035);
			SetTimer("CloseBundeswehr2", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_RED, "Beeil dich das Tor schließt in 5sek!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht in der Bundeswehr");
		return 1;
	}
		if(strcmp(cmd,"/Bundeswehr3",true) == 0)
 	{
 	   if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
   			MoveObject(Bundeswehrtor3,2301.5, -2663.3999023438, 9.3000001907349,3.0); //tor unten
			PlaySoundForPlayer(playerid,1035);
			SetTimer("CloseBundeswehr3", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_RED, "Beeil dich das Tor schließt in 5sek!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist nicht in der Bundeswehr");
		return 1;
	}*/
	if(strcmp(cmd,"/vator",true) == 0)
 	{
 	   if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
 		{
   			MoveObject(vagostor,2800.6000976563, -1585.5, 6.1999998092651,3.0);
			PlaySoundForPlayer(playerid,1035);
			SetTimer("CloseVagosTor", 5000, 0);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			SendClientMessage(playerid, COLOR_RED, "Beeil dich das Tor schließt in 5 sek!");
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Vagos Member");
		return 1;
	}
	if(strcmp(cmd,"/rtor2",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
	    {
	        if(rtor2var == 0)
	        {
	            MoveObject(rtor2,2437.0563964844, -2089.9692382813, 8.320266723633,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				rtor2var = 1;
			}
			else
			{
			    MoveObject(rtor2,2437.0563964844, -2089.9692382813, 15.320266723633,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    rtor2var = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Brigada");
		return 1;
	}
//_____________________________________________
	if(strcmp(cmd,"/whtor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	    {
	        if(terrorgatevar == 0)
	        {
	            MoveObject(terrorgate,-489.2532043457, -563.72381591797, 20.966348648071,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				terrorgatevar = 1;
			}
			else
			{
			    MoveObject(terrorgate,-489.2532043457, -563.72381591797, 26.966348648071,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    terrorgatevar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Terrorist");
		return 1;
	}
	if(strcmp(cmd,"/2ft",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	    {
	        if(f2ftorvar == 0)
	        {
	            MoveObject(f2ftor,2828.286133, -1570.767212, 2.695267,4.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				f2ftorvar = 1;
			}
			else
			{
			    MoveObject(f2ftor,2828.286133, -1570.767212, 12.695267,4.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    f2ftorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du gehörst nicht zu den Sf Biker Club!");
		return 1;
	}
	if(strcmp(cmd,"/Aztecastor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
	    {
	        if(aztetorvar == 0)
	        {
	            MoveObject(atzetor,1841.693604, -2000.929321,4.221565,4.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				aztetorvar = 1;
			}
			else
			{
			    MoveObject(atzetor,1841.693604, -2000.929321, 14.221565,4.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    aztetorvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Aztecas Member oder Leader !");
		return 1;
	}
	if(strcmp(cmd,"/oamtls",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
	    {
	        if(Oamtvar == 0)
	        {
	            MoveObject(OamtLS,924.214294, -1224.909790, 16.021503,3.0);
	            MoveObject(OamtLS2,924.175110, -1224.971680, 23.121490,3.0);
				Oamtvar = 1;
			}
			else
			{
	            MoveObject(OamtLS,924.210754, -1216.086304, 16.024687,3.0);
	            MoveObject(OamtLS2,924.129578, -1216.344849, 23.140125,3.0);
			    Oamtvar = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_RED," Du bist kein Ordnungsamt Mitglied!");
		return 1;
	}
	if(strcmp(cmd,"/khtele",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	    {
			if(IsPlayerInRangeOfPoint(playerid,3.0,2034.0126,-1403.0018,17.2933))
			{
			    SetPlayerPos(playerid,2051.0828,-1407.7554,48.3359);
			    SetPlayerFacingAngle(playerid,250.0012);
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,2051.0828,-1407.7554,48.3359))
			{
				SetPlayerPos(playerid,2034.0126,-1403.0018,17.2933);
				SetPlayerFacingAngle(playerid,181.8619);
			}
			else SendClientMessage(playerid,COLOR_RED," Du bist nicht am Teleport-Punkt!");
	    }
	    else SendClientMessage(playerid,COLOR_RED," Du bist kein Sanitäter!");
	    return 1;
	}
	if(strcmp(cmd,"/präsibüro",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
	    {
	        if(PresiBurovar == 0)
	        {
	    		MoveObject(PresiBuro,367.344512, 193.513122, 1003.382812,2.5);
	    		PresiBurovar = 1;
	    		PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
	    	}
	    	else
		    {
		    	MoveObject(PresiBuro,367.344512, 193.513122, 1008.382812,2.5);
		    	PresiBurovar = 0;
		    	PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
		    }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/pdd", true) == 0)
    {
   		if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 1)
		{
			if (IsPlayerInRangeOfPoint(playerid,3.0,  239.60000610352, 118.30000305176, 1004.9000244141)) // LSPD DOOR 1
		    {
				if(lspdvar1 == 0)
				{
					MoveObject (lspdinside, 239.69999694824, 116.59999847412, 1004.9000244141,3);
					lspdvar1 = 1;
				}
				else if(lspdvar1 == 1)
				{
					MoveObject (lspdinside,239.60000610352, 118.30000305176, 1004.9000244141,3);
					lspdvar1 = 0;
				}
		    }
		    else if (IsPlayerInRangeOfPoint(playerid,3.0, 253.19999694824, 110.09999847412, 1004.9000244141)) // LSPD DOOR 2
		    {
				if(lspdvar2 == 0)
				{
		        	MoveObject (lspdinside2,253.30000305176, 112, 1004.9000244141,3);
					lspdvar2 = 1;
				}
				else if(lspdvar2 == 1)
				{
					MoveObject (lspdinside2,253.19999694824, 110.09999847412, 1004.9000244141,3);
					lspdvar2 = 0;
				}
		    }
			else if (IsPlayerInRangeOfPoint(playerid,3.0, 239.69999694824, 125.80000305176, 1004.9000244141))
			{
			    if(lspdvar3 == 0)
			    {
			        MoveObject (lspdinside3,239.60000610352, 124.30000305176, 1004.9000244141,3);
			        lspdvar3 = 1;
			    }
			    else if(lspdvar3 == 1)
			    {
			        MoveObject (lspdinside3,239.69999694824, 125.80000305176, 1004.9000244141,3);
					lspdvar3 = 0;
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,3.0, 253.19999694824, 126, 1004.9000244141))
			{
			    if(lspdvar4 == 0)
			    {
					MoveObject (lspdinside4,253.39999389648, 123.80000305176, 1004.9000244141,3);
					lspdvar4 = 1;
			    }
			    else if(lspdvar4 == 1)
			    {
			        MoveObject (lspdinside4,253.19999694824, 126, 1004.9000244141,3);
			        lspdvar4 = 0;
			    }
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFF6347AA, "Du hast nicht die Erlaubnis dazu!.");
			return 1;
		}
		return 1;
	}
/*	if(strcmp(cmd,"/pd1", true) == 0)
    {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
     		MoveObject(MVTor,1596.853027, -1638.482666, 15.300621,3);
   			SetTimer("CloseMVTor", 5000, 0);
   			SendClientMessage(playerid, COLOR_YELLOW,"Das Garagentor ist offen. Beeil dich es schließt in 5 Sekunden");
		}
 		else SendClientMessage(playerid, 0xFF6347AA, "Du hast nicht die Erlaubnis dazu!");
 		return 1;
	}*/
	if(strcmp(cmd,"/swat1", true) == 0)
    {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
     		MoveObject(MVTor4,309.39999389648, -1554.8000488281, 28, 3.0);
   			SetTimer("CloseMVTor4", 5000, 0);
   			SendClientMessage(playerid, COLOR_YELLOW,"Das Tor ist offen. Beeil dich es schließt in 5 Sekunden");
		}
 		else SendClientMessage(playerid, COLOR_RED, "Du hast nicht die Erlaubnis dazu!");
 		return 1;
	}
	if(strcmp(cmd,"/swat2", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
	        MoveObject(MVTor5,363.29998779297, -1469.3000488281, 27.10000038147, 3.0);
	        SetTimer("CloseMVTor5", 5000, 0);
	        SendClientMessage(playerid, COLOR_YELLOW,"Das Tor ist offen. Beeil dich es schließt in 5 Sekunden");
	    }
	    else SendClientMessage(playerid, COLOR_RED, "Du hast nicht die Erlaubnis dazu!");
	}
	if(strcmp(cmd,"/pd1", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
	        MoveObject(MVTor2, 1588.5999755859, -1638, 7.6999998092651, 3.0);
	        SetTimer("CloseMVTor2", 5000, 0);
	        SendClientMessage(playerid, COLOR_YELLOW,"Das Hoftor ist offen. Beeil dich es schließt in 5 Sekunden");
		}
		else SendClientMessage(playerid, COLOR_RED, "Du hast nicht die Erlaubnis dazu!");
		return 1;
	}
	if(strcmp(cmd,"/pd2", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
	        MoveObject(MVTor3, 1539.8000488281, -1627.6999511719, 9, 3.0);
	        SetTimer("CloseMVTor3", 5000, 0);
	        SendClientMessage(playerid, COLOR_YELLOW, "Das Hoftor ist offen. Beeil dich es schließt in 5 Sekunden");
		}
		else SendClientMessage(playerid, COLOR_RED, "Du hast nicht die Erlaubnis dazu!");
		return 1;
	}
	if(strcmp(cmd, "/mlift", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 4))
	    {
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 992.7688,-1460.1172,13.5469))
			{
			    SetPlayerPos(playerid, 990.2078,-1461.0585,21.2656);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, 990.2078,-1461.0585,21.2656))
			{
			    SetPlayerPos(playerid, 992.7688,-1460.1172,13.5469);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist Medic!");
		}
		return 1;
	}
	if(strcmp(cmd, "/yaktor", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 6))
	    {
			if(yak == false)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet!");
			    MoveObject(yaktor, -2803.43945312,-329.79394531,-2.81245422, 4.0),
			    yak = true;
			}
			else if(yak == true)
			{
			    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen!");
			    MoveObject(yaktor, -2803.43945312,-329.79394531,8.81245422, 4.0);
			    yak = false;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Yakuza!");
		}
		return 1;
	}
	if(strcmp(cmd, "/yaktor2", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 6))
	    {
			if(yak2 == false)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet!");
			    MoveObject(yaktor2, -2655.51562500,-222.05761719,-2.05807400, 4.0),
			    yak2 = true;
			}
			else if(yak2 == true)
			{
			    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen!");
			    MoveObject(yaktor2, -2655.51562500,-222.05761719,6.05807400, 4.0);
			    yak2 = false;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Yakuza!");
		}
		return 1;
	}
	if(strcmp(cmd, "/mwlift", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 19))
	    {
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1281.1855,-1641.1213,27.3750))
			{
			    SetPlayerPos(playerid, 1213.8599,-1638.5707,11.7969);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1213.8599,-1638.5707,11.7969))
			{
			    SetPlayerPos(playerid, 1281.1855,-1641.1213,27.3750);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Red Soldiers!");
		}
		return 1;
	}
	if(strcmp(cmd,"/mwtor", true) == 0)
	{
	    if(!IsPlayerInFrac(playerid, 19))
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Red Soldiers!");
	        return 1;
		}
		if(RSTor1 == false)
		{
			MoveObject(RS1, 1283.94921875,-1652.19042969,5.32026672, 5.0);
			SendClientMessage(playerid, COLOR_GREEN, "Tor geöffnet.");
			RSTor1 = true;
		}
		else if(RSTor1 == true)
		{
		    MoveObject(RS1, 1283.94921875,-1652.19042969,15.32026672, 5.0);
		    SendClientMessage(playerid, COLOR_RED, "Tor geschlossen.");
		    RSTor1 = false;
		}
		return 1;
	}
	/*
	if(strcmp(cmd,"/pd2",true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
	        if(pdtorvar == 0)
	        {
				MoveObjektRot(pdtor, 0.0000, 269.7592, 270.0000,10);
				pdtorvar = 1;
				//PlaySoundForPlayer(playerid,1035);
				//SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			}
			else
			{
				MoveObjektRot(pdtor, 0.0000, 359.1406, 270.0000,10);
				pdtorvar = 0;
				//PlaySoundForPlayer(playerid,1035);
				//SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist/Soldat/FBI!");
		return 1;
	}*/
	if (strcmp("/pdlift", cmdtext, true) == 0)
	{
		if(IsACop(playerid))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 226.0206,183.8430,1003.0313))
		    {
		        SetPlayerPos(playerid, 1557.1471,-1675.6034,28.3955,101.4593);
		        GameTextForPlayer(playerid, "~g~LSPD Dach", 5000, 1);
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1557.1471,-1675.6034,28.3955))
			{
			    SetPlayerPos(playerid, 226.0206,183.8430,1003.0313);
			    SetPlayerInterior(playerid, 3);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 20.0, 1560.1989746094, -1636.033203125, 12.467700004578) || IsPlayerInRangeOfPoint(playerid, 20.0, 1560.1989746094, -1636.033203125, 12.467700004578))
			{
			    if(LSLift == false)
			    {
			        SendClientMessage(playerid, COLOR_GREEN, "Bitte warten...");
					MoveObject(LSPDLift, 1560.1989746094, -1636.033203125, 27.297700881958, 1.5);
					LSLift = true;
				}
				else if(LSLift == true)
				{
				    SendClientMessage(playerid, COLOR_RED, "Bitte warten...");
				    MoveObject(LSPDLift, 1560.1989746094, -1636.033203125, 12.467700004578, 1.5);
				    LSLift = false;
				}
			}
		}
	}
	if (strcmp("/aufzug",cmdtext,true) == 0)
	{
	    if(IsACop(playerid))
	    {
			if(IsPlayerInRangeOfPoint(playerid,3.0,226.0206,183.8430,1003.0313))//1838.6667,-1143.1451,51.8640
			{
				SetPlayerPos(playerid,1528.4549,-1677.8899,5.8906);
				SetPlayerInterior(playerid,0);
				return 1;
			}
  		}
  		if(IsPlayerInFrac(playerid, 9))
  		{
  		    if(IsPlayerInRangeOfPoint(playerid,3.0, 1654.1954,-1654.9637,22.5156) || IsPlayerInRangeOfPoint(playerid, 3.0, 1658.7493,-1691.7506,15.6094) || IsPlayerInRangeOfPoint(playerid, 3.0, 1649.4564,-1641.6837,83.7813))
  		    {
				ShowPlayerDialog(playerid, NEWS, DIALOG_STYLE_LIST, "News Reporter Fahrstuhl", "Dach / Helilandeplatz\nParkgarage\nNewsstand", "Auswählen", "Beenden");
				return 1;
			}
		}
//Geheimstützpunkt
		if(IsPlayerInRangeOfPoint(playerid,3.0,-2328.2183,-1704.1105,487.3547))
		{
			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,-2329.1199,-1708.0713,501.0656);
			    return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0, -2329.1199,-1708.0713,501.0656))
		{
			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,-2328.2183,-1704.1105,487.3547);
			    return 1;
			}
		}

		if(IsPlayerInRangeOfPoint(playerid,3.0,1833.1556,-1125.7290,24.6721))//Fbi
		{
			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,1838.6667,-1143.1451,51.8640);
			    SetPlayerFacingAngle(playerid,1);
			    return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0, 1838.6667,-1143.1451,51.8640))//Fbi
		{
			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,1833.1556,-1125.7290,24.6721);
			    SetPlayerFacingAngle(playerid,199);
			    return 1;
			}
		}
		return 1;
	}
	if (strcmp("/lift",cmdtext,true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,1906.0333,994.9215,52.7387))
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1921.9103,963.3838,10.8203);
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid,3.0,1921.9103,963.3838,10.8203))
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1906.0333,994.9215,52.7387);
				return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/undercover", true) == 0)
	{
 		if(IsPlayerInFrac(playerid, 8))
	    {
           	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2328.1360,569.7377,7.7813))
			{
       			tmp = strtok(cmdtext, idx);
          		if(!strlen(tmp))
            	{
             		SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /undercover [Skin Nummer]");
               		SendClientMessage(playerid, COLOR_GRAD1, "*Es gibt 6 Skins (Nummer 1-6");
					return 1;
				}
				new skin = strval(tmp);
				if(skin == 1)
				{
				    SetPlayerSkin(playerid, 127);
				    return 1;
				}
				if(skin == 2)
				{
					SetPlayerSkin(playerid, 28);
				    return 1;
				}
				if(skin == 3)
				{
				    SetPlayerSkin(playerid, 10);
					return 1;
				}
				if(skin == 4)
				{
				    SetPlayerSkin(playerid, 122);
					return 1;
				}
				if(skin == 5)
				{
				    SetPlayerSkin(playerid, 27);
					return 1;
				}
				if(skin == 6)
				{
				    SetPlayerSkin(playerid, 181);
					return 1;
				}
				if(skin <= 0 || skin > 6)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Skin nicht vorhanden!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Bestellen-Punkt!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	if(strcmp(cmd,"/undercovercar",true) == 0)
	{
		if(IsACop(playerid))
		{
			if(PlayerInfo[playerid][pRank] > 3)
			{
	    		if(IsPlayerInRangeOfPoint(playerid,5.0,1582.9969,-1683.3392,6.2252))
	    		{
					ShowPlayerDialog(playerid,DIALOG_UNDERCOVER_LS,DIALOG_STYLE_LIST,"Undercover Wagen","Sultan\nKick\nBan\nHealth\nSlap\nTV\nInterior","OK","Abbrechen");
				}
	    		else if(IsPlayerInRangeOfPoint(playerid,5.0,-1591.8799,712.6600,-5.2422))
				{
					ShowPlayerDialog(playerid,DIALOG_UNDERCOVER_SF,DIALOG_STYLE_LIST,"Undercover Wagen","Sultan\nKick\nBan\nHealth\nSlap\nTV\nInterior","OK","Abbrechen");
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Dein Rang ist nicht hoch genug!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_RED,"Du bist kein Cop!");
			return 1;
		}
		return 1;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	if(strcmp(cmd,"/zivil",true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,217.5230,184.4352,1003.0313))
	    {
		    if(IsPlayerInFrac(playerid,1))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,188);
                    SetPlayerColor(playerid,TEAM_HIT_COLOR);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich vom Dienst abgemeldet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerColor(playerid,NAMECOLOR_LSCOP);
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zum Dienst gemeldet!");
                }
		    }
		    else if(IsPlayerInFrac(playerid,2))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,186);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
			else if(IsPlayerInFrac(playerid,3))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,299);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
	        else if(IsPlayerInFrac(playerid,21))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,217);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
		    else
		    {
		        SendClientMessage(playerid,COLOR_WHITE," Du bist nicht berechtigt diesen Befehl zu nutzen!");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_WHITE," Du bist nicht am Kleidungspunkt!");
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/treppe", true) == 0)
	{
	    if(IsAbf(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3.0,-2461.0659,516.2196,51.0638))
	        {
	            SetPlayerPos(playerid,234.7277,72.4368,1005.0391);
	            SetPlayerInterior(playerid,6);
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,234.7277,72.4368,1005.0391))
	        {
	            SetPlayerPos(playerid,-2461.0659,516.2196,51.0638);
	            SetPlayerInterior(playerid,0);
			}
		}
	}*/
	if(strcmp(cmd,"/coords",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1330)
	    {
	        new Float:xcoord, Float:ycoord, Float:zcoord, Float:angle;
	        GetPlayerPos(playerid,xcoord,ycoord,zcoord);
	        GetPlayerFacingAngle(playerid,angle);
			format(string,sizeof(string)," Dein Koordinaten:  X %f   Y %f   Z %f   A %f ",xcoord,ycoord,zcoord,angle);
			SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		return 1;
	}

	if(strcmp(cmd,"/gotocoords",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1330)
	    {
			new coordstr[3][24], Float:coords[3];
			tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) return SendClientMessage(playerid,COLOR_WHITE," /gotocoords X,Y,Z");
	        //if(strfind(tmp,",",true) != 0) return SendClientMessage(playerid,COLOR_WHITE," Koordinaten mit Kommata trennen und ohne Leerzeichen!");
			split(tmp,coordstr,',');
			coords[0] = floatstr(coordstr[0]);
			coords[1] = floatstr(coordstr[1]);
			coords[2] = floatstr(coordstr[2]);
			SetPlayerPos(playerid,coords[0],coords[1],coords[2]);
			format(string,sizeof(string)," Erfolgreich teleportiert:  X %f   Y %f   Z %f",coords[0],coords[1],coords[2]);
			SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		return 1;
	}
	//-----------------------------GET-IP-------------------------------------------
	if(strcmp(cmd, "/getip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid,COLOR_GRAD1,"FEHLER: /getip [playerid]");
		        return 1;
			}
 			giveplayerid = ReturnUser(tmp);
 			new playersip[16];
			GetPlayerIp(giveplayerid,playersip,sizeof(playersip));
 			format(string,sizeof(string),"IP: %s",playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
	}

	//-------------------------------Jailtime-------------------------------------
	if(strcmp(cmd, "/jailtime", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJailed] >= 1)
			{
				new chat[128];
    			new mini;
				mini = PlayerInfo[playerid][pJailTime]/60;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du musst noch für folgende Zeit im Gefängniss bleiben:");
				format(chat, sizeof(chat), "Für %d Sekunden.", PlayerInfo[playerid][pJailTime]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, chat);
				format(chat, sizeof(chat), "bzw. für %d Minuten.", mini);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, chat);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht im Gefängnis!");
			}
		}
		return 1;
	}

	//----------------------------- Fraktionshilfe------------------------------------
	if(strcmp(cmd, "/fractionlist", true) == 0 || strcmp(cmd, "/fl", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 1: LSPD || Fraktion 2: FBI || Fraktion 3: Bundeswehr");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 4: Los Santos Notdienst || Fraktion 5: LCN || Fraktion 6: Yakuza");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 7: San Andreas Präsident || Fraktion 8: Hitmen || 9: CNN");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 10: Taxi Company || Fraktion 11: Fahrschule || Fraktion 12: Fuegos");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 13: Grove || Fraktion 14: Ballas || Fraktion 15: Ls Biker Club");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 16: Vagos || Fraktion 17: Aztecas || Fraktion 18: Rifa");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 19: Red Soldiers || Fraktion 20: Terroristen || Fraktion 21: Wheelmen");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 22: - || Fraktion 23: Ruskja Bratwa || Fraktion 24: Ordnungsamt");
			}
		}
		return 1;
	}

//============
	if(strcmp(cmd,"/dc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Checkpoint gelöscht!");
		}
		return 1;
	}
	//-------------------------------------Rüstung im Waffenladen kaufen------------
	if(strcmp(cmd,"/buyarmor",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] <= 4)
	        {
	            SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 5 sein um hier einzukaufen");
	            return 1;
			}
   			if(GetPlayerMoney(playerid) < 1000)
			{
			    SendClientMessage(playerid, COLOR_GREY, "*Nicht genug Geld,du brauchst 1000$!");
			    return 1;
			}
		    if(PlayerInfo[playerid][pGunLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "*Du brauchst einen Waffenschein!");
		  		return 1;
			}
			//new location = PlayerInfo[playerid][pLocal];
			if(IsPlayerInRangeOfPoint(playerid,3.0,290.2523,-106.7863,1001.5156)||IsPlayerInRangeOfPoint(playerid,3.0,295.4237,-38.1667,1001.5156))//location == 101 || location == 102 || location == 103)
			{
			    if(GetPlayerInterior(playerid) == 1 || GetPlayerInterior(playerid) == 6)
			    {
					GivePlayerMoney(playerid,-1000);
					SetPlayerArmour(playerid, 100);
					SendClientMessage(playerid, COLOR_GREEN, "Schutzweste für 1000$ gekauft.");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Du bist in keinem Geschäft.");
			}
		}
		return 1;
	}
/*	if(strcmp(cmdtext, "/sperre2", true) == 0)
	{
	    if(!IsACop(playerid))
	    {
	        SendClientMessage(playerid, COLOR_YELLOW, "Du darfst das nicht!");
	        return 1;
		}
		if(Pylonenbit[playerid]==0)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new Float:x,Float:y,Float:z,Float:a;
				GetPlayerPos(playerid,x,y,z);
				GetPlayerFacingAngle(playerid,a);
				GetXYInFrontOfPlayer(playerid,x,y,2.0);
				Pylone[playerid][0] = CreateDynamicObject(1238,x,y,z-0.5,0,0,a+90);
				Pylone[playerid][1] = CreateDynamicObject(1238,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Pylone[playerid][2] = CreateDynamicObject(1238,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Pylone[playerid][3] = CreateDynamicObject(1238,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Pylone[playerid][4] = CreateDynamicObject(1238,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Pylonenbit[playerid]=1;
				SendClientMessage(playerid, COLOR_YELLOW,"Pylonensperre erstellt!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED,"Du kannst keine Pylonensperre erstellen, wenn du in einem Auto bist!");
			}
		}
		else
		{
			DestroyDynamicObject(Pylone[playerid][0]);
			DestroyDynamicObject(Pylone[playerid][1]);
			DestroyDynamicObject(Pylone[playerid][2]);
			DestroyDynamicObject(Pylone[playerid][3]);
			DestroyDynamicObject(Pylone[playerid][4]);
			Pylonenbit[playerid]=0;
			SendClientMessage(playerid, COLOR_YELLOW,"Pylonensperre abgebaut!");
		}
		return 1;
	}*/
	if (strcmp( cmdtext,"/sperre", true )==0)
	{
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Sie Haben keine Berechtigung");
			return 1;
		}
		if(Sperrebit[playerid]==0)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new Float:x,Float:y,Float:z,Float:a;
				GetPlayerPos(playerid,x,y,z);
				GetPlayerFacingAngle(playerid,a);
				GetXYInFrontOfPlayer(playerid,x,y,2.0);
				sSperre[playerid][0] = CreateDynamicObject(1228,x,y,z-0.5,0,0,a+90);
				sSperre[playerid][1] = CreateDynamicObject(1228,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][2] = CreateDynamicObject(1228,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][3] = CreateDynamicObject(1228,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][4] = CreateDynamicObject(1228,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Sperrebit[playerid]=4;
				SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre erstellt!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED,"Du kannst keine Straßensperre erstellen wenn du in einem Auto bist!");
			}
		}
		else
		{
			DestroyDynamicObject(sSperre[playerid][0]);
			DestroyDynamicObject(sSperre[playerid][1]);
			DestroyDynamicObject(sSperre[playerid][2]);
			DestroyDynamicObject(sSperre[playerid][3]);
			DestroyDynamicObject(sSperre[playerid][4]);
			Sperrebit[playerid]=0;
			SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre abgebaut!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/sperrewegall", true) == 0)
	{
		if (PlayerInfo[playerid][pRank] >= 2 && PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsACop(i) && IsPlayerConnected(i))
				{
					DestroyDynamicObject(sSperre[i][0]);
					DestroyDynamicObject(sSperre[i][1]);
					DestroyDynamicObject(sSperre[i][2]);
					DestroyDynamicObject(sSperre[i][3]);
					DestroyDynamicObject(sSperre[i][4]);
					Sperrebit[playerid]=0;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "HQ: Durch die Anordnung von Officer %s wurden alle Starßensperren entfernt.", sendername);
				if(IsACop(i) && IsPlayerConnected(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Du musst Rang 2 haben oder Polizeichef sein um alle Straßensperren entfernen zu können!");
		}
		return 1;
	}
	/*if (strcmp( cmdtext,"/fsperre", true )==0)
	{
		if(PlayerInfo[playerid][pLeader]==22 || PlayerInfo[playerid][pMember]==22)
		{
		    ShowPlayerDialog(playerid,DIALOG_FWSPERREN, DIALOG_STYLE_LIST,"Sperren","Barriere\nPylonen\nAbsperrung", "Auswählen", "Abbrechen");
		    return 1;
		}
		else
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Du bist nicht berechtigt!");
		}
	}*/
//=======================/sdpistol [ID]====================//
	if(strcmp(cmd, "/wsp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /wsp [playerid] (Den Befehl nicht ausnutzen!!!)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GivePlayerWeapon(giveplayerid, 23, 20);
						SendClientMessage(playerid, COLOR_GREEN, "Die Prüfung kann beginnen, 2000$ Waffengebühr bezahlt.");
						GivePlayerMoney(playerid,-2000);
						SendClientMessage(giveplayerid, COLOR_GREEN, "Dir wurde eine Silenced Pistol mit 20 Munition gegeben, viel Glück.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Du bist kein Fahrlehrer!");
			}
		}
		return 1;
	}


//======================================
	if(strcmp(cmd, "/gskin", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,2489.5862,-1691.1185,14.7656))
			{
		    	ShowPlayerDialog(playerid, DIALOG_GS, DIALOG_STYLE_LIST, "Kleiderschrank", " Skin1\n Skin2\n Skin3\n Smoke\n Sweet \n Ryder \n Frauenskin ","Anziehen", "ABBRUCH");
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Kleiderschrank in der Grove!");
			}
		}
	}
	if(strcmp(cmd, "/lcnskin", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,1274.7148,-800.4757,1089.9327))
			{
			    ShowPlayerDialog(playerid, DIALOG_LCN, DIALOG_STYLE_LIST, "Kleiderschrank", " Skin1\n Skin2\n Skin3\n FrauenSkin\n Co-LeaderSkin\n LeaderSkin\n","Anziehen","Abbrechen");
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Kleiderschrank der LCN!");
			}
		}
	}
	if(strcmp(cmd, "/vaskin", true) == 0)
 	{
		if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,2527.5437,-1060.7488,69.5687))
		  	{
		  	    ShowPlayerDialog(playerid, DIALOG_Vagos, DIALOG_STYLE_LIST,"Kleiderschrank", " Vagos1\n Vagos2\n Vagos3\n Vagos4\n Vagos5","Anziehen", "ABBRUCH");
		  	}
		  	else
	 		{
				SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Kleiderschrank der Vagos!");
			}
		}
	}
	if(strcmp(cmd, "/bskin", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,1083.6311,-1223.3904,15.8203))
			{
		    	ShowPlayerDialog(playerid, DIALOG_BAL, DIALOG_STYLE_LIST, "Kleiderschrank", " Skin1\n Skin2\n Skin3\n Skin4\n Frauenskin \n Leader","Anziehen", "ABBRUCH");
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Kleiderschrank in der Grove!");
  			}
		}
	}
	if(strcmp(cmd, "/Fuegosskin", true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,-2646.6782,1423.5521,906.4609))
			{
		    	ShowPlayerDialog(playerid, DIALOG_MUCHACHO, DIALOG_STYLE_LIST, "Kleiderschrank", " Fuegos1\n Fuegos2\n Fuegos3\n Fuegos-Leader\n Fuegos-Frau\n Fuegos-Frau2","Anziehen", "ABBRUCH");
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Kleiderschrank in der  Muchacho Base!");
  			}
		}
	}
//=====================/FSPERRE=============================//
	//-----------------------------------------Grab----------------------------------
	if(strcmp(cmd, "/grab", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
  			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /grab [ID]");
				return 1;
			}
 			if(IsACop(playerid))
			{
				new person = strval(tmp);
				new playerVehicle = GetPlayerVehicleID(playerid);
			    if(IsPlayerConnected(person))
				{
					if(person != INVALID_PLAYER_ID)
					{
					    if(GetDistanceBetweenPlayers(playerid,person) <= 8)
						{
						    if(!IsPlayerInAnyVehicle(playerid))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du kannst nur in Fahrzeugen grabben!");
						        return 1;
						    }
						    if(PlayerCuffed[person] != 1)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Spieler muss getazert sein!");
						        return 1;
						    }
						    if(IsACop(person))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Du kannst keinen Cop grabben!");
						        return 1;
						    }
						    if(IsPlayerInAnyVehicle(person))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Ziel ist in einem Auto!");
						        return 1;
						    }
						    if(person == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst grabben!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
						    {
							    new car = GetPlayerVehicleID(playerid);
								if(IsA2Turer(car))
								{
		    						SendClientMessage(playerid, COLOR_GRAD1, "Mit dem Auto kannst du keine Leute grabben!");
						    		return 1;
								}
      							GetPlayerName(person, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du wurdest von %s ins Farzeug gezogen.", sendername);
								SendClientMessage(person, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s ins  Fahrzeug gezogen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s ins Fahrzeug gezogen", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Festgenommen", 2500, 3);
								PutPlayerInVehicle(person,playerVehicle,3);
								FreezePlayer(person);
								PlayerCuffed[person] = 2;
								PlayerCuffedTime[person] = (180 + random(180));
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Du fährst kein Auto!");
								return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Spieler ist nicht in deine Nähe!");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
			}
		}
	    return 1;
	}

	if(strcmp(cmd, "/ungrab", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /ungrab [ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst freilassen!"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s freigelassen.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s freigelassen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s freigelassen.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~g~Freiheit", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 0;
        						//RemovePlayerFromVehicle(giveplayerid);
								new Float:X, Float:Y, Float:Z;
								GetPlayerPos(playerid,X,Y,Z);
								SetPlayerPos(playerid,X,Y+1,Z);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Person hat keine Handschellen!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht bei dir!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Offline!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Soldat / GSG !");
			}
		}//not connected
		return 1;
	}

	//------------------------------------WARNS-Checken-----------------------------
    if(strcmp(cmd,"/checkwarns",true)==0)
	{
    	new warnstring[128];
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /checkwarns [ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				new warns = PlayerInfo[giveplayerid][pWarns];
				format(warnstring, sizeof(warnstring), "ACHTUNG! Der Spieler hat %d Warns",warns);
				SendClientMessage(playerid, COLOR_GRAD5,warnstring);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/defuse", true) == 0)
    {
  		if(IsPlayerInRangeOfPoint(playerid,10.0,PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]))
  		{
  		    if(IsACop(playerid))
			{
			    if(Bombactivated==1)
			    {
	  				//Bombtimer(10,playerid);
					ShowMenuForPlayer(Menu:BOMBD,playerid);
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Du bist nicht befugt!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"Du bist nicht bei der Bombe!");
		}
	}



	if(strcmp(cmd, "/legbombe", true) == 0 || strcmp(cmd, "/bombelegen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pRank] == 3)
	    {
	    	if(BombStatus == 1)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Du kannst nur alle 15 min eine Bombe legen.");
			}
			else if(PlayerInfo[playerid][pJailed] > 0)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich nicht im Gefängnis hochjagen.");
			}
			else if(GetPlayerInterior(playerid) > 0)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Das ist ein schlechter Ort für eine Bombe...");
			}
			else
			{
				ShowMenuForPlayer(Menu:BOMB,playerid);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "*Du bist kein Terrorist.");
		}
		return 1;
	}
//================= HANDYLADEN ====================/
	if(strcmp(cmd, "/handyladen", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, -2237.0981,130.4937,1035.4141))
	    {
			ShowPlayerDialog(playerid,DIALOG_HANDY,DIALOG_STYLE_LIST,"Handy Laden","Handy kaufen\nHandy aufladen\nHandyvertrag kaufen\nHandyvertrag kündigen","OK","Abbrechen");
		}
		return 1;
	}
//////////////////////////////////// UHREN /////////////////////////////////////
	if(strcmp(cmd, "/uhren", true) == 0 || strcmp(cmd, "/watches", true) == 0)
	{
		if (IsPlayerInRangeOfPoint(playerid,3.0,823.4207,3.3140,1004.1797))
		{
			    ShowPlayerDialog(playerid, DIALOG_UHREN, DIALOG_STYLE_LIST, "Uhrenladen", "Rolex (100.000$)\nBreitling (10.000$)\nJunghans (55.000$)\nZeiss (35.000$)\nSwatch (1000$)", "Kaufen", "Abbrechen");
		}
		return 1;
	}
	//------------------------------Selbstmord-Attentat-----------------------------
	if(strcmp(cmd, "/selbstmord", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pRank] == 2)
	    {
	    	if(SelfStatus == 1)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich nur alle 30 Minuten selber Hochjagen.");
			}
			else
   			{
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z );
				SetTimer("SAbkling", 1800, 0);
				GameTextForPlayer(playerid, "~r~ B.o.o.o.o.m", 5000, 3);
		    	SendClientMessage(playerid, COLOR_LIGHTRED, ".:Selbstmord ist keine Lösung:.");
				WantedPoints[playerid] += 2;
				SetPlayerCriminal(playerid,255, "Selbstmord");
				GivePlayerMoney(playerid,5000);
				SelfStatus = 1;
				if (IsPlayerInAnyVehicle(playerid))
				{
					GetPlayerVehicleID(playerid);
					SetVehicleHealth(playerid,0);
					CreateExplosion(x,y,z,6,2);
					CreateExplosion(x,y,z,7,2);
				}
				else
				{
					SetPlayerHealth(playerid,10);
					CreateExplosion(x,y,z,6,2);
					CreateExplosion(x,y,z,7,2);
				}
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Selbstmord Anschlag!");
					}
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "*Du bist kein Terrorist.");
		}
		return 1;
	}


	//-------------------------------------COUNTDOWN-----------------------------------
	if(strcmp("/countdown",cmdtext,true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1)
		{
			SetTimer("CountDown4",1000,0);
		}
		else SendClientMessage(playerid, COLOR_RED, "Du bist nicht befugt!");
	    return 1;
	}

	//---------------------------------/clearchat--------------------------------------------

	if(strcmp(cmd, "/cleartext", true) == 0 || strcmp(cmd, "/ct", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
		{
			for (new MSG=0; MSG<=80; MSG++) SendClientMessageToAll(0," ");
			for (new MSG=0; MSG<=80; MSG++) SendClientMessageToAll(0," ");
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "*** Administrator %s hat den Chat gelöscht ***",sendername);
			SendClientMessageToAll(COLOR_LIGHTBLUE,string);
			printf(string);
		}
		else SendClientMessage(playerid,0, "Du bist nicht befugt !");
		return 1;
	}

	//---------------------------------------SERVER Status--------------------------------------------
   	if (strcmp("/serverinfo", cmdtext, true, 10) == 0)
	{
       new string1[200],string2[200],string3[200],string4[200],string5[200],string6[200],rest[1500];
       format(string1, sizeof string1, "{FFFFFF}Projektleiter: [GnE]xRage");
       format(stringx, sizeof(stringx),"{FFFFFF}stelv.Projektleiter: [GnE]Julian / [GnE]Saphire");
       format(string2, sizeof string2, "{FFFFFF}Teamspeak Inhaber: [GnE]xRage");
       format(string3, sizeof string3, "{FFFFFF}Forum Inhaber: [GnE]xRage");
	   format(string3, sizeof string3, "{FFFFFF}Scripter: [GnE]Julian");
       format(string4, sizeof string4, "{FFFFFF}Script Version: {FF00FF}v%s {FFFFFF}", VERSION);
       format(string5, sizeof string5, "Forumsadresse: %s", FORUMURL);
       format(string6, sizeof string6, "TeamSpeak³ Ip : %s", TEAMSPEAKIP);
	   format(rest, sizeof rest, "%s\n%s\n%s\n%s\n\n%s\n%s\n", string1,stringx,string2,string3,string4,string5,string6);
	   ShowPlayerDialog(playerid,108,DIALOG_STYLE_MSGBOX, "Serverinformation",rest,"Fertig","");
	   return 1;
    }
    if (strcmp("/Teamspeakip", cmdtext, true) == 0)
    {
		SendClientMessage(playerid,COLOR_YELLOW, "==========[TEAMSPEAK]==========");
		SendClientMessage(playerid,COLOR_ORANGE, "Teamspeak Ip:84.200.15.38:7568");
		SendClientMessage(playerid,COLOR_ORANGE, "");
		SendClientMessage(playerid,COLOR_ORANGE, "");
		SendClientMessage(playerid,COLOR_ORANGE, "Weitere Informationen unter /serverinfo .");
		SendClientMessage(playerid,COLOR_YELLOW,"==============================");
		
    }
    if (strcmp("/donatorhelp", cmdtext, true) == 0)
	{
		SendClientMessage(playerid,COLOR_YELLOW, "===============[DONATOR]===============");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 1 [Preis 3] ");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 2 [Preis 5]");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 3 [Preis 8]");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 4 [Preis 10] ");
        SendClientMessage(playerid,COLOR_ORANGE, "Was die Donator Ranks können findest du unter /rechte ");
		SendClientMessage(playerid,COLOR_YELLOW, "====================================");
	}
	if(strcmp("/rechte", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid,COLOR_YELLOW, "==============[RECHTE]===============");
	    SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 1 50k + 3 Respektpunkte + 3 Respektpunkte pro Payday + /togphone");
	    SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 2 100k + 6 Respektpunkte + 3 Respektpunkte pro Payday + /togphone + Nr ändern!");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 3 150k + 9 Respektpunkte + 3 Respecktpunkte pro Payday + /togphone");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 3 + Teamspeak Rechte + Forum Rechte");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 4 200k + 12 Respektpunkte + 3 Respektpunkte pro Payday + /togphone!");
		SendClientMessage(playerid,COLOR_ORANGE, "Donator Rank 4 + Teamspeak Rechte + Forum Rechte,");
		SendClientMessage(playerid,COLOR_ORANGE, "Mehr Informationen bei Admins!");
		SendClientMessage(playerid,COLOR_YELLOW, "==================================");
	}
	//-------------------------------[Pay]--------------------------------------------------------------------------
	if(strcmp(cmd, "/pay", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /pay [Spieler ID / Name] [Menge]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /pay [Spieler ID / Name] [Menge]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Level 2 sein, um über $1000 abgeben zu können.");
				return 1;
			}
			if(moneys < 1 || moneys > 10000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Der Betrag muss zwischen $1 und $10000 sein!");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Der Befehl ist in dieser Lage nicht erlaubt.");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetPlayerMoney(playerid);
     					if (moneys > 0 && playermoney >= moneys)
						{
						    ConsumingMoney[giveplayerid] = 1;
							GivePlayerMoney(playerid, (0 - moneys));
							GivePlayerMoney(giveplayerid, moneys);
							format(string, sizeof(string), "   Du hast %s(Spieler ID: %d), $%d gegeben.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Du hast $%d von %s(Spieler ID: %d) bekommen.", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s hat $%d dem Spieler %s gegeben.", sendername, moneys, giveplayer);
							PayLog(string);
							if(moneys >= 1000000)
							{
								ABroadCast(COLOR_YELLOW,string,1);
							}
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s nimmt Geld aus seiner Tasche und gibt es %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Betrag.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du musst näher an dem Spieler sein!");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/charity", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /charity [betrag]");
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] == 106)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Der Befehl ist in dieser Lage nicht erlaubt");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Der Betrag ist ungültig!");
				return 1;
			}
			if(GetPlayerMoney(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viel Geld bei dir.");
				return 1;
			}
			GivePlayerMoney(playerid, -moneys);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s danke für die Spende von, $%d.",sendername, moneys);
			printf("%s", string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			PayLog(string);
		}
		return 1;
	}
//================ SETLOHN =====================//
if(strcmp(cmd, "/setlohn", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /setlohn [Spieler ID / Name] [Lohn / Payday]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new gehalt;
			tmp = strtok(cmdtext, idx);
			gehalt = strval(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
				if(IsPlayerConnected(playa))
				{
					if(PlayerInfo[playerid][pLeader] == PlayerInfo[playa][pMember] || PlayerInfo[playerid][pLeader] == PlayerInfo[playa][pLeader])
					{
					    if(gehalt > 0)
         				{
							PlayerInfo[playa][pGehalt] = gehalt;
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "*Du hast %s Gehalt geändert in %d$.", giveplayer, gehalt);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "*%s hat dein Gehalt geändert in %d$.", sendername, gehalt);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							return 1;
						}
						else SendClientMessage(playerid, COLOR_RED," Du kannst keinen Lohn ins Minus setzen!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Dieser Befehl ist nur für Leader einer Fraktion!");
			}
		}
		return 1;
	}
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/stats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				Stats(playerid,playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht eingeloggt !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/fly", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
				}
				if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
				}
				if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
				}
				if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
				}
				if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
				}
				if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
				}
				if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
//-------------------------------[Check]--------------------------------------------------------------------------
	if(strcmp(cmd, "/checkip", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 3)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /checkip [Spieler ID]");
	            return 1;
			}
			giveplayerid = ReturnUser(tmp);
			new plIP[25];
			GetPlayerIp(giveplayerid,plIP,sizeof(plIP));
			format(string, sizeof(string), "Spieler IP: %d", plIP);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Das können nur Admins!");
		}
		return 1;
	}
	if(strcmp(cmd, "/checkwaffen", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /checkwaffen [Spieler ID]");
	            return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid != INVALID_PLAYER_ID)
			{
 				new bullets[12], weapons[12], weapname[12][50], coordsstring[256];
				GetPlayerWeaponData(giveplayerid,1,weapons[0],bullets[0]); GetPlayerWeaponData(giveplayerid,2,weapons[1],bullets[1]);
				GetPlayerWeaponData(giveplayerid,3,weapons[2],bullets[2]); GetPlayerWeaponData(giveplayerid,4,weapons[3],bullets[3]);
				GetPlayerWeaponData(giveplayerid,5,weapons[4],bullets[4]); GetPlayerWeaponData(giveplayerid,6,weapons[5],bullets[5]);
				GetPlayerWeaponData(giveplayerid,7,weapons[6],bullets[6]); GetPlayerWeaponData(giveplayerid,8,weapons[7],bullets[7]);
				GetPlayerWeaponData(giveplayerid,9,weapons[8],bullets[8]); GetPlayerWeaponData(giveplayerid,10,weapons[9],bullets[9]);
				GetPlayerWeaponData(giveplayerid,11,weapons[10],bullets[10]); GetPlayerWeaponData(giveplayerid,12,weapons[11],bullets[11]);
				GetWeaponName(weapons[0],weapname[0],50); GetWeaponName(weapons[1],weapname[1],50); GetWeaponName(weapons[2],weapname[2],50);
				GetWeaponName(weapons[3],weapname[3],50); GetWeaponName(weapons[4],weapname[4],50); GetWeaponName(weapons[5],weapname[5],50);
				GetWeaponName(weapons[6],weapname[6],50); GetWeaponName(weapons[7],weapname[7],50); GetWeaponName(weapons[8],weapname[8],50);
				GetWeaponName(weapons[9],weapname[9],50); GetWeaponName(weapons[10],weapname[10],50); GetWeaponName(weapons[11],weapname[11],50);
				format(coordsstring,sizeof(coordsstring),"Waffen: %s[0]   %s[%d]   %s[%d]   %s[%d]   %s[%d]   %s[%d]",weapname[0],weapname[1],bullets[1],weapname[2],bullets[2],weapname[3],bullets[3],weapname[4],bullets[4],weapname[5],bullets[5]);
				SendClientMessage(playerid,COLOR_GRAD6,coordsstring);
				format(coordsstring,sizeof(coordsstring),"Waffen: %s[%d]   %s[%d]   %s[%d]   %s[0]   %s[0]   %s[0]",weapname[6],bullets[6],weapname[7],bullets[7],weapname[8],bullets[8],weapname[9],weapname[10],weapname[11]);
				SendClientMessage(playerid,COLOR_GRAD6,coordsstring);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin 1450!");
		}
		return 1;
	}
	if (strcmp(cmd, "/check", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /check [Spieler ID]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						Stats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Der Spieler wurde nicht gefunden!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/number", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /number [playerid/Spielername]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						format(string, 256, "Name: %s, TelefonNummer: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht gefunden !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast noch kein Telefonbuch!");
			}
		}
		return 1;
	}
//-------------------------------[BuyLevel]--------------------------------------------------------------------------
	if (strcmp(cmd, "/buylevel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					new costlevel = nxtlevel*levelcost;//10k for testing purposes
					new expamount = nxtlevel*levelexp;
					new infostring[256];
					if(GetPlayerMoney(playerid) < costlevel)
					{
						format(infostring, 256, "   Du hast nicht genug Geld ($%d) !",costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else if (PlayerInfo[playerid][pExp] < expamount)
					{
						format(infostring, 256, "    Du brauchst mindestens %d Respekt Punkte, du hast [%d] !",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~g~LEVEL UP~n~~w~Du bist jetzt Level %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						GivePlayerMoney(playerid, (-costlevel));
						PlayerInfo[playerid][pLevel]++;
						if(PlayerInfo[playerid][pDonateRank] > 0)
						{
						    PlayerInfo[playerid][pExp] -= expamount;
						    new total = PlayerInfo[playerid][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[playerid][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[playerid][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[playerid][pExp] = 0;
						}
						if(PlayerInfo[playerid][pLevel] == 3)
						{
							Delete3DTextLabel(Noob[playerid]);
							Noobi[playerid] = 0;
						}
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, string, 5000, 1);
						format(infostring, 256, "   Du hast dir Level %d für ($%d) gekauft. Tipp /upgrade ein.", nxtlevel, costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						format(infostring, 256, "   Du hast %d unspent Upgrade Punkte",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, infostring);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht eingeloggt !");
			}
		}
		return 1;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	if (strcmp(cmd, "/abccarcolor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD3,"($5000) Nutze: /carcolor [Farbe 1 - 2] [Farben number]");
					return 1;
				}
				new colornum = strval(tmp);
				if(colornum > 2 || colornum < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"Nur: 1 oder 2");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD3,"($5000) Nutze:: /carcolor [Farbe 1 - 2] [farben nummer]");
				}
				new color = strval(tmp);
				if(color > 126)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"Maximum ist 126");
					return 1;
				}
				if (GetPlayerMoney(playerid) < 5000)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"Du kannst es für ($5000) tun");
				}
				if(colornum == 1)
				{
					HouseInfo[house][hVcol1] = color;
					format(string, sizeof(string), "Auto Farbe 1 wurde für %d -$5000 gesezt",color);
					SendClientMessage(playerid, COLOR_GRAD3,string);
				}
				else
				{
					HouseInfo[house][hVcol2] = color;
					format(string, sizeof(string), "Auto Farbe 2 wurde für %d -$5000 gesezt",color);
					SendClientMessage(playerid, COLOR_GRAD3,string);
				}
				SendClientMessage(playerid, COLOR_GRAD6, "Deine neue Lakierung wird in den nächsten 24 Stunden aktiv");
				GivePlayerMoney(playerid,-5000);
				SBizzInfo[4][sbTill] += 5000;
				ExtortionSBiz(4, 5000);
				PlayerPlaySound(giveplayerid, 1134, 0.0, 0.0, 0.0);
				OnPropUpdate();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du hast kein Haus");
				return 1;
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/resetupgrades", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht eingeloggt !");
				return 1;
			}
			if (GetPlayerMoney(playerid) < 100000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Kostet: $100000 !");
				return 1;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du brauchst Level 2 !");
				return 1;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			GivePlayerMoney(playerid,-100000);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 256, "   Du hast %d unbenutzte Upgrade Punkte !",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return 1;
	}
	/*if (strcmp("/buyneon", cmdtext, true, 10) == 0)
	{
        if(IsPlayerConnected(playerid))
        {
        SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein PremiumUser");
        return 1;
	    }
	        if(!PlayerToPoint(20.0,playerid,93.4003,-164.7377,2.5938))
 		    {
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht beim Neonshop!"); //jeremy95
	        return 1;
			}
				if(PlayerInfo[playerid][pDonateRank] >= 1)
				{

                    if(GetPlayerMoney(playerid) < 1)
	                {
                    SendClientMessage(playerid, 0xAA3333AA, "Du hast nicht genug Geld !");
			        return 1;
			        }
		                if(IsPlayerInAnyVehicle(playerid))
 		                {
  		                	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			                {
			             	SendClientMessage(playerid, COLOR_WHITE, "      Du bist nicht der Fahrer");
			            	return 1;
		                	}
	 	                 	ShowPlayerDialog(playerid, NEON, DIALOG_STYLE_LIST, "Choose your neon colour","Blau\nGrün\nGelb\nWeiß\nPink\nNeon entfernen","OK","Schließen");
	                	}
	                	else
	                	{
		                SendClientMessage(playerid, COLOR_WHITE, " Du Bist nicht in einem Auto");
	                	}
	                	return 1;
     	}
    }*/
	if (strcmp(cmd, "/buygun", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3.0,290.2523,-106.7863,1001.5156)||
			IsPlayerInRangeOfPoint(playerid,3.0,295.4237,-38.1667,1001.5156))
			//IsPlayerInRangeOfPoint(playerid,10.0,295.1371,-80.8117,1001.5156))
			{
   				if(PlayerInfo[playerid][pLevel] <= 4)
       			{
	            	SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 5 sein um hier einzukaufen");
	            	return 1;
				}
				if(GetPlayerMoney(playerid) < 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast nicht genug Geld !");
				    return 1;
				}
				if(PlayerInfo[playerid][pGunLic] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Du hast kein Waffenschein !");
				    return 1;
				}
				new gun;
				new gunid[16];
				new gunstring1[256];
				new gunstring2[256];
				new gunstring3[256];
				new gunstring4[256];
				new gunstring5[256];
				new infostring[256];
				new guncharge;
				new ammocharge;
				new local = PlayerInfo[playerid][pLocal];
				if(GetPlayerInterior(playerid) == 1||GetPlayerInterior(playerid) == 6)
				//PlayerInfo[playerid][pLocal] == 101 || PlayerInfo[playerid][pLocal] == 102 || PlayerInfo[playerid][pLocal] == 103)
				{
				  /*  if(BizzInfo[location-99][bProducts] <= 0)
				    {
				        GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
						return 1;
				    }*/
					new modsss = 200;
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						format(string, sizeof(string), "Benutzung: /buygun [waffenname] [munition]");
						SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
						SendClientMessage(playerid, COLOR_WHITE,"*** Waffen & Munition ***");
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(gunstring1, 256, "Waffen: Fallschirm ($%d) Golfschläger ($%d) Schlagstock ($%d) Baseballschläger ($%d) Schaufel ($%d) PoolCue ($%d)",
						GunPrice[0][0]/100*modsss,GunPrice[1][0]/100*modsss,GunPrice[2][0]/100*modsss,GunPrice[3][0]/100*modsss,GunPrice[4][0]/100*modsss,GunPrice[5][0]/100*modsss,GunPrice[6][0]/100*modsss);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
						format(gunstring2, 256, "Waffen: VioletterDildo ($%d) WeißerDildo ($%d) LangerweißerDildo ($%d) WeißerDildo2 ($%d) Blumen ($%d) cane",
						GunPrice[7][0]/100*modsss,GunPrice[8][0]/100*modsss,GunPrice[9][0]/100*modsss,GunPrice[10][0]/100*modsss,GunPrice[11][0]/100*modsss,GunPrice[12][0]/100*modsss);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
						format(gunstring3, 256, "Waffen: SD-Pistole ($%d) DesertEagle ($%d) MP5 ($%d)",
						GunPrice[13][0]/100*modsss,GunPrice[14][0]/100*modsss,GunPrice[15][0]/100*modsss,GunPrice[16][0]/100*modsss,GunPrice[17][0]/100*modsss,GunPrice[18][0]/100*modsss);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
						format(gunstring4, 256, "Waffen: Shotgun ($%d) AK47 ($%d) M4 ($%d) Sniper ($%d)",
						GunPrice[19][0]/100*modsss,GunPrice[20][0]/100*modsss,GunPrice[21][0]/100*modsss,GunPrice[22][0]/100*modsss,GunPrice[23][0]/100*modsss,GunPrice[24][0]/100*modsss);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
						format(gunstring5, 256, "Waffen: Pistolen Munition ($%d) Shotgun Munition ($%d) MP5 Munition ($%d) AK47/M4 Munition ($%d) Sniper Munition ($%d)",
						GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
						SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
						return 1;
					}
					strmid(gunid, tmp, 0, strlen(cmdtext), 255);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						format(string, sizeof(string), "BENUTZUNG: /buygun [Waffe] [Munition]");
						return 1;
					}
					new ammo = strval(tmp);
					if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "   Die Munition muss zwischen 1 und 999 sein !"); return 1; }
					if (strcmp(gunid, "Fallschirm", true, strlen(gunid)) == 0)
					{
						gun = 46;
						guncharge = GunPrice[0][0]/100*modsss;
						ammocharge = 0;
					}
					else if (strcmp(gunid, "Golfschläger", true, strlen(gunid)) == 0)
					{
						gun = 2; guncharge = GunPrice[1][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Schlagstock", true, strlen(gunid)) == 0)
					{
						gun = 3; guncharge = GunPrice[2][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Baseballschläger", true, strlen(gunid)) == 0)
					{
						gun = 5; guncharge = GunPrice[4][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Schaufel", true, strlen(gunid)) == 0)
					{
						gun = 6; guncharge = GunPrice[5][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
					{
						gun = 7; guncharge = GunPrice[6][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "VioletterDildo", true, strlen(gunid)) == 0)
					{
						gun = 10; guncharge = GunPrice[7][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Weißerdildo", true, strlen(gunid)) == 0)
					{
						gun = 11; guncharge = GunPrice[8][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "langerweißerdildo", true, strlen(gunid)) == 0)
					{
						gun = 12; guncharge = GunPrice[9][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "weißerdildo2", true, strlen(gunid)) == 0)
					{
						gun = 13; guncharge = GunPrice[10][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Blumen", true, strlen(gunid)) == 0)
					{
						gun = 14; guncharge = GunPrice[11][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
					{
						gun = 15; guncharge = GunPrice[12][0]/100*modsss; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "SD-Pistole", true, strlen(gunid)) == 0)
					{
						gun = 23; guncharge = GunPrice[13][0]/100*modsss; ammocharge = GunPrice[25][0]*ammo;
						PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
					}
					else if (strcmp(gunid, "DesertEagle", true, strlen(gunid)) == 0)
					{
						gun = 24; guncharge = GunPrice[15][0]/100*modsss; ammocharge = GunPrice[25][0]*ammo;
						PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
					}
					else if (strcmp(gunid, "MP5", true, strlen(gunid)) == 0)
					{
						gun = 29; guncharge = GunPrice[18][0]/100*modsss; ammocharge = GunPrice[27][0]*ammo;
						PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
					}
					else if (strcmp(gunid, "Shotgun", true, strlen(gunid)) == 0)
					{
						gun = 25; guncharge = GunPrice[19][0]/100*modsss; ammocharge = GunPrice[26][0]*ammo;
						PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
					}
					else if (strcmp(gunid, "AK47", true, strlen(gunid)) == 0)
					{
						gun = 30; guncharge = GunPrice[22][0]/100*modsss; ammocharge = GunPrice[28][0]*ammo;
						PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else if (strcmp(gunid, "M4", true, strlen(gunid)) == 0)
					{
						gun = 31; guncharge = GunPrice[23][0]/100*modsss; ammocharge = GunPrice[28][0]*ammo;
						PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else if (strcmp(gunid, "Sniper", true, strlen(gunid)) == 0)
					{
						gun = 34; guncharge = GunPrice[24][0]/100*modsss; ammocharge = GunPrice[29][0]*ammo;
						PlayerInfo[playerid][pGun4] = 34; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Ladenbesitzer: Ich habe noch nie von dieser Waffe gehört.");
						return 1;
					}
					if((guncharge+ammocharge) > GetPlayerMoney(playerid))
					{
						format(infostring, 256, "   Du hast keine $%d !",guncharge+ammocharge);
						SendClientMessage(playerid, COLOR_GRAD3, infostring);
						return 1;
					}
					if(GetPlayerMoney(playerid) < (guncharge+ammocharge))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Geht nicht !");
					    return 1;
					}
					new payout = guncharge + ammocharge;
					format(infostring, 256, "Du hast eine %s mit %d Munition für $%d erworben",gunid,ammo,payout);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					GivePlayerMoney(playerid, -payout);
					BizzInfo[local-99][bTill] += payout/3;
					ExtortionBiz(local-99, payout);
					BizzInfo[local-99][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					GivePlayerWeapon(playerid, gun, ammo);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s hat Waffen für $%d eingekauft im BIZ: %d", sendername, payout, local-99);
					printf("%s", string);
					PayLog(string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE,"Du bist in keinem Laden.");
					return 1;
				}
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/upgrade", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "NUTZUNG: /upgrade [Upgradename] (Du hast %d Upgrade Punkte)",PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 2 Vergünstigung: Alcoholic, DrugAddict");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Vergünstigung: Alcoholic, DrugAddict, Miser");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 4 Vergünstigung: Alcoholic, DrugAddict, Miser, Trader");
				}
				else if(PlayerInfo[playerid][pLevel] >= 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 5 Vergünstigung: Alcoholic, DrugAddict, Miser, Trader, PainKillers");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Extra Energie: health");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "health", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(infostring, 256, "Neues Upgrade: Du spawnst nun mit %.2f Energie (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   You Have Maximum Spawn Health");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "alcoholic", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Alkoholikerlevel ist nun %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Alkoholikerlevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "drugaddict", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Drogensuchtlevel ist %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Drogensuchtlevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "miser", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 3)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Geizhalslevel ist nun %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Geizhalslevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "trader", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 3)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Händlerlevel ist nun %d.",PlayerInfo[playerid][pTraderPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Händlerlevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "painkillers", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 3)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Schmerzmittellevel ist nun %d.",PlayerInfo[playerid][pPainPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Schmerzmittellevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Unbekanntes Upgrade");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   Du hast 0 Upgrade Punkte");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}
	if(strcmp(cmdtext, "/rauchen", true) == 0)
	{
		if(PlayerInfo[playerid][pZig] > 0)
		{
			PlayerInfo[playerid][pZig] -= 1;
			PlayerInfo[playerid][pZigSucht] += 1;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			SendClientMessage(playerid, COLOR_GRAD6, "Du rauchst dir eine Zigarette!");
			new Float:health;
			GetPlayerHealth(playerid,health);
			if(PlayerInfo[playerid][pZigSucht] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Das war deine erste Zigarette,dir ist ein wenig Schlecht");
				SetPlayerHealth(playerid, health - 5);
			}
			if(PlayerInfo[playerid][pZigSucht] >= 5)
			{
				if(health < 95)
				{
					SetPlayerHealth(playerid, health + 2);
				}
			}
			if(PlayerInfo[playerid][pZigSucht] >= 50)
			{
				if(health < 95)
				{
					SetPlayerHealth(playerid, health + 4);
				}
			}
			if(PlayerInfo[playerid][pZigSucht] >= 50)
			{
				if(health < 95)
				{
					SetPlayerHealth(playerid, health + 3);
				}
			}
			if(PlayerInfo[playerid][pZigSucht] >= 100)
			{
				if(health < 95)
				{
					SetPlayerHealth(playerid, health + 5);
				}
			}
			if(PlayerInfo[playerid][pZig] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Das war deine letzte Zigarette!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "Du hast keine Zigaretten mehr!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/wegwerfen", true) == 0)
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
		{
   			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, COLOR_GRAD6, "Du hast deine Kippe weggeschnippt");
			return 1;
		}
		else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
		{
   			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, COLOR_GRAD6, "Du hast deine Flasche weggeworfen");
			return 1;
		}
    	return 1;
	}
	if(strcmp(cmdtext, "/testbox", true) == 0)
	{
	    new s[128];
	    new loginname[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	    format(s,sizeof(s),"Welcome back, %s!\n\nPlease login to continue!",loginname);
	    ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"Login to your account",s,"Login","Cancel");
	    return 1;
	}

//----------------------------------[ooc]-----------------------------------------------
//==================================OOC=========================================
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht Eingeloggt !");
		            return 1;
		        }
				if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Du kannst nicht sprechen, du bist gemutet !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: (/o)oc [ooc chat]");
					return 1;
				}
				if(PlayerInfo[playerid][pAdmin] == 1)
				{
					format(string, sizeof(string), "(( *Moderator %s: %s))", sendername, result);
				}
                if(PlayerInfo[playerid][pAdmin] == 2)
				{
					format(string, sizeof(string), "(( *Super-Moderator %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 3)
				{
					format(string, sizeof(string), "(( *Administrator %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1337)
				{
					format(string, sizeof(string), "(( *Administrator %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1338)
				{
					format(string, sizeof(string), "(( *Administrator %s: %s))", sendername, result);
				}
			    else if(PlayerInfo[playerid][pAdmin] == 2000)
				{
					format(string, sizeof(string), "(( *High-Admin %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 2001)
				{
					format(string, sizeof(string), "(( *stelv.Projektleiter %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] >= 2002)
				{
					format(string, sizeof(string), "(( *Projektleiter %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pSupporter] >= 1)
	            {
					format(string, sizeof(string), "(( *Supporter %s: %s))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 0 && (noooc))
				{
				    format(string, sizeof(string), "(( %s: %s))", sendername, result);
				}
				else return 1;
				OOCOff(COLOR_OOC,string);
				Log("OA-Chat.txt",string);
		}
		return 1;
	}
	if(strcmp(cmd, "/noshowme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3 && ShowMeAllowed == 1)
			{
				ShowMeAllowed = 0;
				BroadCast(COLOR_GRAD2, "Showmes können benutzt werden (/showme).");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 3 && ShowMeAllowed == 0)
			{
				ShowMeAllowed = 1;
				BroadCast(COLOR_GRAD2, "Showmes können nicht mehr benutzt werden.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Tu das Lieber nicht!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "Der öffentliche Chat wurde eingeschaltet.");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 1337 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "Der öffentliche Chat wurde ausgeschaltet.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Tu das Lieber nicht!");
			}
		}
		return 1;
	}

//----------------------------------[advertise]-----------------------------------------------
	if(strcmp(cmd, "/advertise", true) == 0 || strcmp(cmd, "/ad", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 4)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
		            return 1;
		        }
		        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1188.4054,-912.0315,48.0625) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1207.2928,-917.7825,43.0665))
		        {
		            SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am BSN am /ad point.");
		            return 1;
				}
			    if(PlayerInfo[playerid][pGangJailed] == 1 || PlayerTied[playerid] >= 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst jetzt keine Werbung schreiben!");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/ad)vertise [text]");
					return 1;
				}
				if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
				{
					format(string, sizeof(string), "Bitte Versuch es Später wieder %d sekunden zwischen einer Werbung!",  (addtimer/1000));
					SendClientMessage(playerid, COLOR_GRAD2, string);
					return 1;

				}
				new payout = idx * SBizzInfo[5][sbEntranceCost];
				if(GetPlayerMoney(playerid) < payout)
		        {
		            format(string, sizeof(string), "* Du hast %d Zeichen benutzt, das kostet $%d, du hast nicht genug dabei.", offset, payout);
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            return 1;
		        }
				GivePlayerMoney(playerid, - payout);
				SBizzInfo[5][sbTill] += payout/3;
				ExtortionSBiz(5, payout);
				format(string, sizeof(string), "Werbung: %s, Kontakt: %s, Telefonnummer: %d",  result, sendername,PlayerInfo[playerid][pPnumber]);
				OOCNews(TEAM_Grove_COLOR,string);
				format(string, sizeof(string), "~r~Rechnung: $%d~n~~w~Nachricht hatte: %d Zeichen.", payout, idx);
				GameTextForPlayer(playerid, string, 5000, 5);
				if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du brauchst Level 4 um eine Werbung zu schreiben.");
		return 1;
	}
	if(strcmp(cmd, "/sadvertise", true) == 0 || strcmp(cmd, "/sad", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 4)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
		            return 1;
		        }
			    if(GetPlayerFaction(playerid) == 21||GetPlayerFaction(playerid) == 8)
			    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/sad)vertise [text]");
						return 1;
					}
					if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
					{
						format(string, sizeof(string), "Bitte Versuch es Später wieder %d sekunden zwischen einer Werbung!",  (addtimer/1000));
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;

					}
					new payout = idx * SBizzInfo[5][sbEntranceCost];
					if(GetPlayerMoney(playerid) < payout)
			        {
			            format(string, sizeof(string), "* Du hast %d Zeichen benutzt, das kostet $%d, du hast nicht genug dabei.", offset, payout);
			            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            return 1;
			        }
					GivePlayerMoney(playerid, - payout);
					SBizzInfo[5][sbTill] += payout/3;
					ExtortionSBiz(5, payout);
					format(stringx, sizeof(stringx), "%s hat eine Hitman/Wheelman Werbung geschrieben.", sendername);
					ABroadCast(TEAM_Grove_COLOR, stringx, 1);
					SBroadCast(TEAM_Grove_COLOR, stringx, 1);
					format(string, sizeof(string), "Werbung: %s, Kontakt: Unbekannt, Telefonnummer: -",  result);
					OOCNews(TEAM_Grove_COLOR,string);
					format(string, sizeof(string), "~r~Rechnung: $%d~n~~w~Nachricht hatte: %d Zeichen.", payout, idx);
					GameTextForPlayer(playerid, string, 5000, 5);
					if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
				}
				else {
			        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst mich mal am Arsch lecken!");
					return 1;
				}

			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du brauchst Level 4 um eine Werbung zu schreiben.");
		return 1;
	}


//----------------------------------[government]-----------------------------------------------
if(strcmp(cmd, "/government", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] != 2 && !IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Du bist kein Staatsbeamter!");
			    return 1;
			}
			if(PlayerInfo[playerid][pRank] < 5)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Du benötigst mindestens Rang 5!");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /gov(ernment) [Nachricht]");
				return 1;
			}
			SendClientMessageToAll(COLOR_WHITE, "|================= {FF0000}Staatsnachricht {FFFFFF}=================|");
			if(PlayerInfo[playerid][pLeader] == 7)
			{
				format(string, sizeof(string), "San Andreas Präsident %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 11)
			{
			    format(string, sizeof(string), "Kanzler %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 10)
			{
			    format(string, sizeof(string), "Staatsminister %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 9)
			{
			    format(string, sizeof(string), "Finanzminister %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 8)
			{
			    format(string, sizeof(string), "Innenminister %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 7)
			{
			    format(string, sizeof(string), "Vorsitzender %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] == 6)
			{
			    format(string, sizeof(string), "Leitender Geheimdienst %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pLeader] == 1)
			{
				format(string, sizeof(string), "Polizeipräsident %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pLeader] == 2)
			{
				format(string, sizeof(string), "FBI Präsident %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pLeader] == 3)
			{
				format(string, sizeof(string), "General %s: %s", sendername, result);
			}
			else format(string, sizeof(string), "Staatsbeamter %s: %s", sendername, result);
			SendClientMessageToAll(COLOR_DBLUE, string);
		}
		return 1;
	}
//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/togooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gOoc[playerid])
			{
				gOoc[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "OOC ausgeschaltet!");
			}
			else if (gOoc[playerid])
			{
				gOoc[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "OOC eingeschaltet");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tognews", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Nachrichten ausgeschaltet!");
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Nachrichten eingeschaltet.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togreport", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 1338)
	        {
				if (!oocon[playerid])
				{
					oocon[playerid] = 1;
					SendClientMessageToAll(COLOR_RED, "Der /report wurde ausgeschaltet, es können keine Reports mehr geschrieben werden!");
				}
				else if(oocon[playerid])
				{
					oocon[playerid] = 0;
					SendClientMessageToAll(COLOR_GREEN, "Der /report wurde wieder eingeschaltet.");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togfam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gFam[playerid])
			{
				gFam[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Familien Chat ausgeschaltet.");
			}
			else if (gFam[playerid])
			{
				gFam[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Familien Chat eingeschaltet");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togphone", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] >= 3 || (PlayerInfo[playerid][pAdmin] >= 1))
	        {
				if (!PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 1;
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dein Telefon ausgeschaltet.");
				}
				else if (PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dein Telefon eingeschaltet.!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Dafür benötigst du einen Premium Account!");
	            return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/togwindow", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new vehicle = GetPlayerVehicleID(playerid);
	    	GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(IsPlayerInAnyVehicle(playerid) && !IsABoat(vehicle) && !IsAPlane(vehicle))
	        {
				if (FensterStatus[playerid] == 1)
				{
					FensterStatus[playerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD2, "  Du hast das Fenster von deinem Fahrzeug geschlossen.");
					format(string, sizeof(string), "* %s schließt das Fenster seines Fahrzeuges.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else if (FensterStatus[playerid] == 0)
				{
					FensterStatus[playerid] = 1;
					SendClientMessage(playerid, COLOR_GRAD2, "  Du hast das Fenster von deinem Fahrzeug geöffnet.");
					format(string, sizeof(string), "* %s öffnet das Fenster seines Fahrzeuges.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht in einem Auto !");
	            return 1;
			}
		}
		return 1;
	}


//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht reden , da du Verletzt bist!");
				return 1;
		    }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /me [aktion]");
				return 1;
			}
			format(string, sizeof(string), "* %s %s", sendername, result);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmdtext, "/essen", true) == 0)
	{
	    new result[64];
		if(PlayerInfo[playerid][pKekse] > 0)
		{
			PlayerInfo[playerid][pKekse] -= 1;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			SendClientMessage(playerid, COLOR_GRAD6, "Du isst einen Keks!");
			format(string, sizeof(string), "* %s %s", sendername, result);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du hast keine Kekse mehr!");
		}
	}
//----------------------------------[Local]-----------------------------------------------
	if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /(c)lose [close chat text]");
				return 1;
			}
			format(string, sizeof(string), "%s sagt: %s", sendername, result);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/shout", true) == 0 || strcmp(cmd, "/s", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du liegst unter der Erde und dich hört Keiner");
		        return 1;
		    }
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: (/s)hout [local chat]");
				return 1;
			}
			format(string, sizeof(string), "%s schreit: %s!!", sendername, result);
			ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst im GangJail kein Megephone benutzen!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst gefesselt kein Megaphone benutzen!");
				return 1;
			}
			//new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/m)egaphone [megaphone chat]");
				return 1;
			}
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 24||PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
			{
				/*if(!IsACopCar(tmpcar))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a Police Vehicle !");
					return 1;
				}*/
				if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				{
					format(string, sizeof(string), "[Officer %s:o< %s]", sendername, result);
					ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
				{
					format(string, sizeof(string), "[Officer %s:o< %s]", sendername, result);
					ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
				{
				    format(string, sizeof(string), "[Soldat %s:o< %s]", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
				{
				    format(string, sizeof(string), "[Soldat %s:o< %s]", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 24||PlayerInfo[playerid][pLeader] == 24)
				{
				    format(string, sizeof(string), "[O-Amt %s:o< %s]", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
				{
				    format(string, sizeof(string), "[Medic %s:o< %s]", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22)
				{
				    format(string, sizeof(string), "[S.W.A.T.-Officer %s:o< %s]", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Du musst bei der Polizei/Bundeswehr sein, um diesen Befehl benutzen zu können !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/radio", true) == 0)
	{
        if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "{FFFFFF}Fahrräder haben {FF0000}keinen{FFFFFF} Motor ...");
		    return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
	 		ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "German Next Era Life Radio","Technobase.FM\nHardbase.FM\nHousetime.FM\nTrancebase.FM\nCoretime.FM\nClubtime.FM\nPlanet Radio\nYouFM\nYouFM Rock\nYouFM Club\nYouFM Black\n89.0RTL\nRadio Ausschalten","Auswählen","Abbrechen");
		}
		else
		{
			SendClientMessage(playerid, COLOR_ORANGE, "Um Radio zuhören musst du in einem Fahrzeug sitzen!");
		}
	}
//----------------------------------[Team]-----------------------------------------------
	if(strcmp(cmd, "/r", true) == 0 || strcmp(cmd, "/r", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/r)adio [radio chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
				if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Polizeipräsident %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** S.W.A.T. Dirketor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** S.W.A.T. Einsatzleiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** S.W.A.T. Eliteeinheit %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** S.W.A.T. Sturmtruppleiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** S.W.A.T. Sturmtrupp %s: %s, over. **", sendername, result); }
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Oberkomissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Komissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Kommissar Anwärter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Polizeiobermeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Hauptwachtmeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Polizeimeister %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Kadett %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** FBI Direktor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** FBI stelv. Direktor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** FBI Ausbilder %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** FBI stelv. Aulsbilder %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** FBI Agend %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** FBIOberkommissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** FBIhauptwachmeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** FBIwachmeister %s: %s, over. **", sendername, result); }
  				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** FBI Agend %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** FBI Officer %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Praktikant %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Azubi %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Intern %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
			{
			    if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** S.W.A.T Elite Troop %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** S.W.A.T.-Chef  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** S.W.A.T.-Einsatzleiter  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** S.W.A.T.-Ausbilder  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** S.W.A.T.-Spezialist %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** S.W.A.T.-Spezialeinheit %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** S.W.A.T. %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** S.W.A.T.-Meister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** S.W.A.T.-Ausgebildeter  %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** S.W.A.T.-Angestellter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** S.W.A.T.-Neuling %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** S.W.A.T.-Anwärter %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 22 || PlayerInfo[i][pLeader] == 22))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** General %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** Oberst BT %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** Oberst LW %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** Oberst GWD %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** Hauptmann GWD %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Hauptmann BT %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Hauptmann LW %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Feldwebel %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Soldat BT %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Soldat LW %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rekrut %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
			{
				if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Rang 6 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rang 5  5 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Rang 4  4 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Rang 3 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rang 2 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Rang 1 %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Rang ~ %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(gTeam[playerid] == 1 || PlayerInfo[playerid][pMember] == 4|| PlayerInfo[playerid][pLeader] == 4)
			{
			    if(PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pRank] <= 12) { format(string, sizeof(string), "** Chef Arzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Leitender Notarzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Notarzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Arzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rettungssanitäter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Samariter %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Auszubildener %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Bundespräsident %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** Bundeskanzler %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** Staatsminister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** Finanz-Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** San Fiero Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Los Santos Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Geheimdienst-Leiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Geheimdienst %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Geheimdienst-Azubi %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Personenschutz-Leiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Personenschutz %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Personenschutz-Azubi %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Bodyguard Level 1 %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && (PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7))
				    {
				        SendClientMessage(i,TEAM_BLUE_COLOR,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du bist in keinem Team!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/equip", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerFaction(playerid) == 21)
	        {
	 	        if(!IsPlayerInRangeOfPoint(playerid,3.0,-510.2045,-505.2142,25.5234)||!IsPlayerInRangeOfPoint(playerid,3.0,-510.2045,-505.2142,25.5234)) {
		            return SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich hier nicht ausrüsten.");
				}
				ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST, "Wheelman Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
	        }
	        if(GetPlayerFaction(playerid) == 2)
	        {
		        if(!IsPlayerInRangeOfPoint(playerid,3.0,257.8690,77.2030,1003.6406)||!IsPlayerInRangeOfPoint(playerid,3.0,257.8690,77.2030,1003.6406)) {
		            return SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich hier nicht ausrüsten.");
		        }
				ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
				return 1;
	        }
	        if(IsACop(playerid))
	        {
	            if(IsPlayerInRangeOfPoint(playerid,2.0,211.7037,185.3334,1003.0313)||
				IsPlayerInRangeOfPoint(playerid,2.0,254.2355,76.5149,1003.6406)||
				IsPlayerInRangeOfPoint(playerid,2.0,260.8033,102.8064,1030.2539)||
				IsPlayerInRangeOfPoint(playerid,2.0,211.7037,185.3334,1003.0313)||
				IsPlayerInRangeOfPoint(playerid,2.0,1277.3894,-797.1385,1089.9375)||
				IsPlayerInRangeOfPoint(playerid,2.0,230.6416,113.6176,1003.2188))
				{
					ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
					return 1;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich hier nicht ausrüsten.");
	        }
	    }
	    return 1;
	}
   	if(strcmp(cmd, "/fbiuniform", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid,3.0,217.4833,78.8462,1005.0391)||!IsPlayerInRangeOfPoint(playerid,3.0,217.4833,78.8462,1005.0391)) {
	            return SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich hier nicht umziehen.");
	        }
	        if(GetPlayerFaction(playerid) == 2)
	        {
			ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/modetest", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 2000)
	    {
	        if(testphase == 0)
	        {
	            testphase = 1;
	            ABroadCast(COLOR_GREY, "Testphase"#COL_GREEN" aktiviert", 1);
	        }
	        else {
	            testphase = 0;
	            ABroadCast(COLOR_GREY, "Testphase"#COL_RED" deaktiviert", 1);
	        }
	    }
	    return 1;
	}
	//============================= Undercover Lights ======================//

	if(!strcmp("/ucl",cmdtext,true))
	{
		if(IsACop(playerid))
	    {
	       	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
	     	{
	     	if(UCL[playerid] == 0)
	    	{
					SetPVarInt(playerid, "Status", 1);
	        		SetPVarInt(playerid, "undercover", CreateObject(18646,0,0,0,0,0,0));
	        		AttachObjectToVehicle(GetPVarInt(playerid, "undercover"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
					SendClientMessage(playerid, 0xFFFFFFAA, "Undercover Lichter Installiert. Lösch sie wieder mit /ucldel");
					UCL[playerid] = 1;
				}
			}
			else
			{
		    	SendClientMessage(playerid,COLOR_GRAD1,"* Du musst in einem Undercovercar(Sultan) sitzen!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"* Du bist kein Polizist!");
		}
		return 1;
	}

	if(!strcmp("/ucldel",cmdtext,true))
	{
 			if(IsACop(playerid))
	    	{
	        	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
	        	{
	        		if(UCL[playerid] == 1)
 					{
 					DeletePVar(playerid, "Status");
            		DestroyObject(GetPVarInt(playerid, "undercover"));
            		SendClientMessage(playerid,COLOR_GRAD1,"* Undercover Lichter entfernt.");
            		UCL[playerid] = 0;
				}
  		 	}
			else
			{
		    	SendClientMessage(playerid,COLOR_GRAD1,"* Du musst in einem Undercovercar(Sultan) sitzen!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"* Du bist kein Polizist!");
		}
		return 1;
	}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/duty", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsACop(playerid))
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,227.6519,111.8072,1003.2188) ||IsPlayerInRangeOfPoint(playerid,3.0,255.3,77.4,1003.6)
				|| IsPlayerInRangeOfPoint(playerid,3.0,-1616.1294,681.1594,7.1875) || IsPlayerInRangeOfPoint(playerid,3.0, 217.5230,184.4352,1003.0313)
				|| IsPlayerInRangeOfPoint(playerid,3.0, 217.8921,78.9727,1005.0391)
				|| PlayerInfo[playerid][pLocal] != 255)
				{
					if(OnDuty[playerid]==0)
			        {
				    	format(string, sizeof(string), "* Officer %s nimmt seine Marke aus dem Schrank und meldet sich zum Dienst.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeapon(playerid, 41, 500); //spray
						GivePlayerWeapon(playerid, 3, 1); //Nightstick
						GivePlayerWeapon(playerid, 25, 100); //Shotgun
						GivePlayerWeapon(playerid, 24, 500); //Desert Eagle
						GivePlayerWeapon(playerid, 29, 500); //MP5
						OnDuty[playerid] = 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Officer %s legt seine Marke in den Schrank und macht Feierabend.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      					ResetPlayerWeapons(giveplayerid);
						PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
      					PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
      					PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
      					PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
						OnDuty[playerid] = 0;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist in keiner Umkleide !");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du bist nun ausser Dienst und empfängst keine Notrufe mehr.");
			        JobDuty[playerid] = 0;
			        Medics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun im Dienst und wirst Notrufe empfangen.");
			        JobDuty[playerid] = 1;
			        Medics += 1;
			    }
			}
			else if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun ausser Dienst als Automechaniker und empfängst keine Anrufe mehr.");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun im Dienst als Automechaniker und wirst Notrufe empfangen..");
			        JobDuty[playerid] = 1;
			        Mechanics += 1;
			    }
			}
			else if(PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 22)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,1496.1060,1309.2910,1093.2869))
				{
			    	if(FWDuty[playerid] == 0)
					{
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dich für den Dienst ausgerüstet!");
				    	FWDuty[playerid] = 1;
				    	GivePlayerWeapon(playerid,42,10000);
				    	if(PlayerInfo[playerid][pRank] >= 10)
				    	{
							SetPlayerSkin(playerid,279);
						}
						else
						{
						    SetPlayerSkin(playerid,278);
						}
					}
					else
					{
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist wieder außer Dienst.");
				    	FWDuty[playerid] = 0;
						ResetPlayerWeapons(playerid);
						SetPlayerSkin(playerid, 274);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst nicht in den Dienst gehen!");
			}
		}
		return 1;
	}
//============================= FahrlehrerDuty ===================================//
	if(strcmp(cmd, "/fduty", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(FonDuty[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREEN, "Du bist nun als Fahrlehrer im Dienst und markiert!");
					SetPlayerColor(playerid,COLOR_LEHRER);
					FonDuty[playerid] = 1;
				}
				else if(FonDuty[playerid] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun wieder vom Dienst draußen.");
				    SetPlayerColor(playerid,TEAM_HIT_COLOR);
				    FonDuty[playerid] = 0;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer!.");
			}
		}
		return 1;
	}

//----------------------------------[departments]-----------------------------------------------
	if(strcmp(cmd, "/departments", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/d)epartments [department chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)// mach mal net so viele ränge von lspd
			{
				if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Polizeipräsident %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** Dirketor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** Einsatzleiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** Eliteeinheit %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** Sturmtruppleiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Sturmtrupp %s: %s, over. **", sendername, result); }
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Oberkomissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Komissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Kommissar Anwärter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Polizeiobermeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Hauptwachtmeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Polizeimeister %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Kadett %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** FBI Direktor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** FBI stelv. Direktor %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** FBI Ausbilder %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** FBI stelv. Aulsbilder %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** FBI Agend %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** FBIOberkommissar %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** FBIhauptwachmeister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** FBIwachmeister %s: %s, over. **", sendername, result); }
  				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** FBI Agend %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** FBI Officer %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Praktikant %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Azubi %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Intern %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** General %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** Oberst BT %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** Oberst LW %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** Oberst GWD %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** Hauptmann GWD %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Hauptmann BT %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Hauptmann LW %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Feldwebel %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Soldat BT %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Soldat LW %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rekrut %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
			{
                if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** S.W.A.T Elite Troop %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** S.W.A.T.-Chef  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** S.W.A.T.-Einsatzleiter  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** S.W.A.T.-Ausbilder  %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** S.W.A.T.-Spezialist %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** S.W.A.T.-Spezialeinheit %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** S.W.A.T. %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** S.W.A.T.-Meister %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** S.W.A.T.-Ausgebildeter  %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** S.W.A.T.-Angestellter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** S.W.A.T.-Neuling %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** S.W.A.T.-Anwärter %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Wehrdienstler %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
			{
				if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** O-Amt Rang 6 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** O-Amt Rang 5 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** O-Amt Rang 4 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** O-Amt Rang 3 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** O-Amt Rang 2 %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** O-Amt Rang 1 %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** O-Amt Rang 1 %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(gTeam[playerid] == 1 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			{
			    if(PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pRank] <= 12) { format(string, sizeof(string), "** Chef Arzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Leitender Notarzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Notarzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Arzt %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rettungssanitäter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Samariter %s: %s, over. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Samariter %s: %s, over. **", sendername, result);
				}
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Bundespräsident %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 11) { format(string, sizeof(string), "** Bundeskanzler %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 10) { format(string, sizeof(string), "** Staats-Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** Finanz-Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** San Fierro Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Los Santos Minister %s: %s, over. **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Geheimdienst Leiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Geheimdienst %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Geheimdienst-Azubi %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Personenschutz-Leiter %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Personenschutz %s: %s, over. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Personenschutz-Azubi %s: %s, over. **", sendername, result); }
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du bist in keinem befugten Team!");
				return 1;
			}
		}
		return 1;
	}
//===========================================Leaderchat===========================================================
	if(strcmp(cmd, "/ld", true) == 0 || strcmp(cmd, "/leaderchat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Verwendung: (/ld)(Leader-Chat) [TEXT]");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] >=1)
			{
				if(PlayerInfo[playerid][pLeader] == 1) { format(string, sizeof(string), "** LSPD-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 2) { format(string, sizeof(string), "** FBI-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 3) { format(string, sizeof(string), "** Bundeswehr-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 4) { format(string, sizeof(string), "** Medic-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 5) { format(string, sizeof(string), "** LCN-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 6) { format(string, sizeof(string), "** Yakuza-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 7) { format(string, sizeof(string), "** San Andreas Präsident %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 8) { format(string, sizeof(string), "** Unknown %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 9) { format(string, sizeof(string), "** NR-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 10) { format(string, sizeof(string), "** Taxi Company-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 11) { format(string, sizeof(string), "** Fahrschul-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 12) { format(string, sizeof(string), "** Fuegos-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 13) { format(string, sizeof(string), "** Grove-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 14) { format(string, sizeof(string), "** Ballas-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 15) { format(string, sizeof(string), "** Ls Biker Club-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 16) { format(string, sizeof(string), "** Vagos-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 17) { format(string, sizeof(string), "** Aztecas-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 18) { format(string, sizeof(string), "** LSRifa-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 19) { format(string, sizeof(string), "** RS-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 20) { format(string, sizeof(string), "** Terror-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 21) { format(string, sizeof(string), "** Wheelmen Leader %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 22) { format(string, sizeof(string), "** S.W.A.T Elite Troop Leader %s: %s **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 23) { format(string, sizeof(string), "** Russkaja Bratwa %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 24) { format(string, sizeof(string), "** OAmt-Leader %s: %s  **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Noob %s: %s, Ende. **", sendername, result);
				}
				SendLeaderMessage(1, 0xD7AD62FF, string);
				SendLeaderMessage(2, 0xD7AD62FF, string);
				SendLeaderMessage(3, 0xD7AD62FF, string);
				SendLeaderMessage(4, 0xD7AD62FF, string);
				SendLeaderMessage(5, 0xD7AD62FF, string);
				SendLeaderMessage(6, 0xD7AD62FF, string);
				SendLeaderMessage(7, 0xD7AD62FF, string);
				SendLeaderMessage(8, 0xD7AD62FF, string);
				SendLeaderMessage(9, 0xD7AD62FF, string);
				SendLeaderMessage(10, 0xD7AD62FF, string);
				SendLeaderMessage(11, 0xD7AD62FF, string);
				SendLeaderMessage(12, 0xD7AD62FF, string);
				SendLeaderMessage(13, 0xD7AD62FF, string);
				SendLeaderMessage(14, 0xD7AD62FF, string);
				SendLeaderMessage(15, 0xD7AD62FF, string);
				SendLeaderMessage(16, 0xD7AD62FF, string);
				SendLeaderMessage(17, 0xD7AD62FF, string);
				SendLeaderMessage(18, 0xD7AD62FF, string);
				SendLeaderMessage(19, 0xD7AD62FF, string);
				SendLeaderMessage(20, 0xD7AD62FF, string);
				SendLeaderMessage(21, 0xD7AD62FF, string);
				SendLeaderMessage(22, 0xD7AD62FF, string);
				SendLeaderMessage(23, 0xD7AD62FF, string);
				SendLeaderMessage(24, 0xD7AD62FF, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "   Du bist kein Leader!.");
				return 1;
			}
		}
		return 1;
	}

//----------------------------------[SetCrim]-----------------------------------------------
	if(strcmp(cmd, "/suspect", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(OnDuty[playerid] != 1  && PlayerInfo[playerid][pMember] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist nicht im Dienst!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /su [Spieler ID/ Name] [Anzahl] [Verbrechen]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /su [Spieler ID] [Anzahl] [Verbrechen]");
				return 1;
			}
			new WantedAnzahl;
			WantedAnzahl = strval(tmp);
			if (gTeam[playerid] == 2 || IsACop(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pJailed] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist im Gefängnis!");
				            return 1;
						}
						if (gTeam[giveplayerid] != 2 && !IsACop(giveplayerid))
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /su [Spieler ID / Name] [Anzahl] [Verbrechen]");
								return 1;
							}
							WantedLevel[giveplayerid] += WantedAnzahl;
							format(string, sizeof(string), "Du hast ein Verbrechen begangen ( %s ). Zeuge: %s.",result,sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "Vergebene Wanteds: %d. Neues Wantedlevel: %d", WantedAnzahl, WantedLevel[giveplayerid]);
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
							for(new i = 0; i < MAX_PLAYERS; i++)
							{
							    if(IsACop(i))
							    {
									format(string, sizeof(string), "HQ: Alle Einheiten: Reporter: %s, Vergebene Wanteds: %d",sendername, WantedAnzahl);
									SendClientMessage(i, TEAM_BLUE_COLOR, string);
									format(string, sizeof(string), "HQ: Verbrechen: %s, Gesuchter: %s, Aktuelle Wanteds: %d",result,giveplayer, WantedLevel[giveplayerid]);
									SendClientMessage(i, TEAM_BLUE_COLOR, string);
								}
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Du kannst keinen Polizisten anklagen!");
						}
					}
				}
				else
				{
					format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du bist kein Polizist!");
			}
		}
		return 1;
	}

//----------------------------------[LOCK]-----------------------------------------------
	if(strcmp(cmd, "/lock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
			{
				if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du hast kein Auto.");
					return 1;
				}
				else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPhousekey]+1)
				{
					if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] != 299)
					{
						gLastDriver[HireCar[playerid]] = 300;
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
					}
					HireCar[playerid] = gLastCar[playerid];
				}
			}
			if (PlayerInfo[playerid][pPhousekey] == 255)
			{
				if(HireCar[playerid] == 299)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast kein Auto.");
					return 1;
				}
			}
			carid = PlayerInfo[playerid][pPhousekey]+1;
			if(HireCar[playerid] != 299 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Du hast kein Auto");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Mietfahrzeug ~r~abgeschlossen", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~HausCar ~r~abgeschlossen", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   Du besitz kein Fahrzeug.");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Mietfahrzeug ~r~aufgeschlossen", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~HausCar ~r~aufgeschlossen", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Nicht möglich");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du besitz kein Fahrzeug !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/open", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Tuer ~g~Auf", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Tuer ~g~Zu", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~geoeffnet", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
							SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~geoeffnet", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					if(PlayerInfo[playerid][pPtankekey] == i+100)
					{
						if(TankeInfo[i][tLocked] == 1)
						{
							TankeInfo[i][tLocked] = 0;
							GameTextForPlayer(playerid, "~w~Tankstelle ~g~Offen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(TankeInfo[i][tLocked] == 0)
						{
							TankeInfo[i][tLocked] = 1;
							GameTextForPlayer(playerid, "~w~Tankstelle ~r~Geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/aebank", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0,246.4201,118.1929,1003.2188) || IsPlayerInRangeOfPoint(playerid, 5.0, 250.3927,118.3187,1003.2188) || IsPlayerInRangeOfPoint(playerid, 5.0, 242.1908,118.3741,1003.2188))
	    {
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST,"Menü", "Kontostand\nEinzahlen\nAuszahlen\nÜberweisen", "Auswählen", "Beenden");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Bank!");
		}
		return 1;
	}
	if(strcmp(cmd, "/hskin", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if (PlayerToPoint(3, playerid,2149.6309,-1805.6676,16.1474))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /skin [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ Hitman skins _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Skin 1 (220)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 2: Skin 2 (22)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Skin 3 (142)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 4: Skin 4 (221)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: Skin 5 (238)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 6: Skin 6 (272)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Skin 7 (285)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 8: Zivi Skin");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 8 ||PlayerInfo[playerid][pLeader] == 8)
                    {
                        SetPlayerSkin(playerid, 21);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
                    {
                        SetPlayerSkin(playerid, 29);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 8 ||PlayerInfo[playerid][pLeader] == 8)
                    {
                        SetPlayerSkin(playerid, 121);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
                    {
                        SetPlayerSkin(playerid, 126);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
                    {
                        SetPlayerSkin(playerid, 188);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
    	}
		return 1;
  	}
	if(strcmp(cmd, "/uniform", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if (PlayerToPoint(3, playerid,219.7271,109.9598,1003.2188))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /uniform [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ LSPD Uniform _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Rang 1");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 2: Rang 2");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Rang 3");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 4: Co Leader");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: Leader");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 6: Motorrad");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: S.W.A.T.");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 8: Zivil Uniform");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 9: Frauen Uniform");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 282);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 280);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 281);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 288);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 283);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 6)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerSkin(playerid, 284);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 7)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
						if(PlayerInfo[playerid][pRank] >= 3)
						{
                    		SetPlayerSkin(playerid, 285);
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
                    }
                }
                else if (item == 8)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                    	SetPlayerSkin(playerid, 188);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 9)
                {
                    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
                    {
                    	SetPlayerSkin(playerid, 211);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
            else if (PlayerToPoint(3, playerid,223.8316,185.8333,1003.0313))//SWAT
		    {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /uniform [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|================= SWAT Uniform =================|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| S.W.A.T-Uniform (/uniform 1)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Undercover Leader (/uniform 2)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Undercover (/uniform 3)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Undercover (/uniform 4)");
				    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22)
                    {
                        SetPlayerSkin(playerid, 285);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht die S.W.A.T-Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                 if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22)
                    {
                        SetPlayerSkin(playerid, 93);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht die Undercover-Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22)
                    {
                        SetPlayerSkin(playerid, 23);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht die Undercover-Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
			    else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22)
                    {
                        SetPlayerSkin(playerid, 60);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht die Undercover-Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
    /*       	else if (PlayerToPoint(3, playerid,217.8921,78.9727,1005.0391))//FBI
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /uniform [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ FBI Uniform _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Leader Agent");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Agent 1");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Agent 2");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Agent 3");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| Agent 4");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
                    {
                        SetPlayerSkin(playerid, 165);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
                    {
                        SetPlayerSkin(playerid, 166);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
                    {
                        SetPlayerSkin(playerid, 286);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
                    {
                        SetPlayerSkin(playerid, 163);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
                    {
                        SetPlayerSkin(playerid, 164);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Zieht eine Uniform an.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
            else
            {
            	SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht in einer umkleide!");
                return 1;
          	}*/
    	}
		return 1;
  	}
//=============HITMAN UNIFORM====================
	if(strcmp(cmd, "/skin", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if (PlayerToPoint(3, playerid,1712.4611,-1640.0770,20.2239))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /skin [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ Bridgan Uniform _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Skin 1 (Normaler Skin)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 2: Skin 2 (Normaler Skin)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Skin 3 (Normaler Skin)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 4: Skin 4 (Normaler Skin)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: Skin 5 (Normaler Skin)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 6: Skin 6 (Normaler Skin)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 8: Zivi Skin");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 113);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 126);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 23 ||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 125);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 124);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 112);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 6)
                {
                    if(PlayerInfo[playerid][pMember] == 23||PlayerInfo[playerid][pLeader] == 23)
                    {
                        SetPlayerSkin(playerid, 111);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung.", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
				}
				else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
			}
           	if (PlayerToPoint(3, playerid,-2719.0527,-315.4308,7.8438))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /skin [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ Yakuza skins _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Skin 1 (220)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 2: Skin 2 (22)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Skin 3 (142)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 4: Skin 4 (221)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: Skin 5 (238)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 6: Skin 6 (272)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Skin 7 (285)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 8: Zivi Skin");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6)
                    {
                        SetPlayerSkin(playerid, 121);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6 )
                    {
                        SetPlayerSkin(playerid, 122);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6)
                    {
                        SetPlayerSkin(playerid, 123);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6)
                    {
                        SetPlayerSkin(playerid, 120);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6)
                    {
                        SetPlayerSkin(playerid, 124);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
			if (PlayerToPoint(3, playerid,-310.2000,1762.5668,43.6406))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /skin [item number]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______ Terror skins _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Skin 1 (220)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 2: Skin 2 (22)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Skin 3 (142)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 4: Skin 4 (221)");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: Skin 5 (238)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 6: Skin 6 (272)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Skin 7 (285)");
                    //SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 8: Zivi Skin");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 20||PlayerInfo[playerid][pLeader] == 20)
                    {
                        SetPlayerSkin(playerid, 220);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
               	}
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 20||PlayerInfo[playerid][pLeader] == 20)
                    {
                        SetPlayerSkin(playerid, 222);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 20||PlayerInfo[playerid][pLeader] == 20)
                    {
                        SetPlayerSkin(playerid, 142);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 20||PlayerInfo[playerid][pLeader] == 20)
                    {
                        SetPlayerSkin(playerid, 221);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 20||PlayerInfo[playerid][pLeader] == 20)
                    {
                        SetPlayerSkin(playerid, 238);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s wechselt seine Kleidung..", sendername);
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt/Nicht Verfügbar   ");
                    return 1;
                }
            }
    	}
		return 1;
  	}
 //===============================HITMAN UNIFORM ENDE================================
	if(strcmp(cmd, "/bwequip", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsPlayerInRangeOfPoint(playerid,3.0,201.8244,1865.1124,13.1406))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /bwequip [item nummer]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______  Ausrüstung _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Alle Waffen weglegen    2: Messer");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Deagle					4: MP5");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: M4					    6: Combat-Schrotflinte");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Scharfschützengewehr    8: Falschirm");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 9: Ausrüstung d. Luftwaffe    10: Boden Trupp ausrüstung");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 11: Wehrdienst Ausrüstung 12: Standart Ausrüstung");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ResetPlayerWeapons(playerid);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 4, 1);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)                    {
                        GivePlayerWeapon(playerid, 24, 150);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 29, 8000);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 31, 800);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 6)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 27, 700);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 7)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 34, 50);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 8)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 46, 1);
					}
                }
                else if (item == 9)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GivePlayerWeapon(playerid, 46, 1); //Fallschirm
                        GivePlayerWeapon(playerid, 31, 1500);//M4
                        GivePlayerWeapon(playerid, 24, 1500);//Deagle
                        GivePlayerWeapon(playerid, 29, 1500);//Mp5
						SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 10)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
	                    if(PlayerInfo[playerid][pRank] < 3)
	                    {
		                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt!");
		                    return 1;
		                }
		                else
    		            {
	                        ResetPlayerWeapons(playerid);
	                        GivePlayerWeapon(playerid, 4, 1);//Messer
	                        GivePlayerWeapon(playerid, 16, 5);//Granaten
	                        GivePlayerWeapon(playerid, 17, 50);//tränengas
	                        GivePlayerWeapon(playerid, 31, 1500);//M4
	                        GivePlayerWeapon(playerid, 24, 1500);//Deagle
	                        GivePlayerWeapon(playerid, 29, 1500);//Mp5
	                        SetPlayerArmour(playerid, 100);
	                        SetPlayerHealth(playerid, 100);
						}
                    }
                    else if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 11)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GivePlayerWeapon(playerid, 24, 100);//Deagle
                        GivePlayerWeapon(playerid, 41, 1500);//Spray
					}
	            }
                else if (item == 12)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GivePlayerWeapon(playerid, 24, 100);//Deagle
                        GivePlayerWeapon(playerid, 41, 1500);//Spray
                        GivePlayerWeapon(playerid, 31, 2500);//M4
                        GivePlayerWeapon(playerid, 29, 2500);//Mp5

					}
                }
            }
            return 1;
        }
    }
//========================SWAT EQUIP================================
	if(strcmp(cmd, "/sequip", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsPlayerInRangeOfPoint(playerid,3.0,211.9880,186.2876,1003.0313))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /bwequip [item nummer]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______  Ausrüstung _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Alle Waffen weglegen    2: Spray/Messer");//: 1=keine waffen 2=Spray+Knife 3=Deagle 4=M4 5=Mp5 6=Sniper 7=Sniper 8=AK47 9=Weste+Leben 10=rauch
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Deagle					4: M4");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: MP5				        6: Sniper");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Ak47                    8: Combat-Shotgun");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 9: Armor + Heal           10: Rauch Granate");
               //   SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 11: Wehrdienst Ausrüstung 12: Standart Ausrüstung");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        ResetPlayerWeapons(playerid);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 4, 9999);
                        GivePlayerWeapon(playerid, 41,9999);
						GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)                    {
                        GivePlayerWeapon(playerid, 24, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 31, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 29, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 6)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 34, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 7)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 30, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 8)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        GivePlayerWeapon(playerid, 27, 9999);
					}
                }
                else if (item == 9)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 10)
                {
                    if(PlayerInfo[playerid][pMember] == 22||PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 22)
                    {
						GivePlayerWeapon(playerid, 17, 9999);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
			/*   else if (item == 111)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {

	                        ResetPlayerWeapons(playerid);
	                        GivePlayerWeapon(playerid, 4, 1);//Messer
	                        GivePlayerWeapon(playerid, 16, 5);//Granaten
	                        GivePlayerWeapon(playerid, 17, 50);//tränengas
	                        GivePlayerWeapon(playerid, 31, 1500);//M4
	                        GivePlayerWeapon(playerid, 24, 1500);//Deagle
	                        GivePlayerWeapon(playerid, 29, 1500);//Mp5
	                        SetPlayerArmour(playerid, 100);
	                        SetPlayerHealth(playerid, 100);
						}
                    }
                    else if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }*/
                else if (item == 11111)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GivePlayerWeapon(playerid, 24, 100);//Deagle
                        GivePlayerWeapon(playerid, 41, 1500);//Spray
					}
	            }
                else if (item == 11112)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GivePlayerWeapon(playerid, 24, 100);//Deagle
                        GivePlayerWeapon(playerid, 41, 1500);//Spray
                        GivePlayerWeapon(playerid, 31, 2500);//M4
                        GivePlayerWeapon(playerid, 29, 2500);//Mp5

					}
                }
            }
            return 1;
        }
    }
//=========================SWAT EQUIP ENDE================================

    if(strcmp(cmd, "/allowswat", true) == 0)
    {
        if(PlayerInfo[playerid][pLeader] == 22)
        {
            if(Allowswat == false)
			{
			    Allowswat = true;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsACop(i))
					{
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "S.W.A.T. Ausrüstung wurde von %s freigegeben!", sendername);
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
			else if(Allowswat == true)
			{
			    Allowswat = false;
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsACop(i))
			        {
						SendClientMessage(i, TEAM_BLUE_COLOR, "S.W.A.T. Ausrüstung ist nicht mehr freigegeben!");
					}
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Das darf nur der SWAT Leader!");
		}
		return 1;
	}
/*	if(strcmp(cmd, "/equip", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsPlayerInRangeOfPoint(playerid,2.0,211.7037,185.3334,1003.0313) || IsPlayerInRangeOfPoint(playerid,2.0,254.2355,76.5149,1003.6406) || IsPlayerInRangeOfPoint(playerid,2.0,260.8033,102.8064,1030.2539) || IsPlayerInRangeOfPoint(playerid,2.0,211.7037,185.3334,1003.0313) || IsPlayerInRangeOfPoint(playerid,2.0,1277.3894,-797.1385,1089.9375) || IsPlayerInRangeOfPoint(playerid,2.0,230.6416,113.6176,1003.2188))
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /equip [Item Nummer]");
                    SendClientMessage(playerid, COLOR_GREEN, "|=================  Ausrüstung =================|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Alle Waffen weglegen    2: Knüppel+Spray");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Deagle					4: MP5");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: M4					    6: FBI Ausrüstung");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: S.W.A.T. Ausrüstung     8: Standart Ausrüstung");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 9: Schutzweste + Leben    10: Präsidenten Ausrüstung");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(IsACop(playerid))
                    {
                        ResetPlayerWeapons(playerid);
                    }
                }
                else if (item == 2)
                {
                    if(IsACop(playerid))
                    {
                        GivePlayerWeapon(playerid, 3, 1);
                        GivePlayerWeapon(playerid, 41, 500);
                    }
                }
                else if (item == 3)
                {
                    if(IsACop(playerid))
                    {
                        GivePlayerWeapon(playerid, 24, 150);
                    }
                }
                else if (item == 4)
                {
                    if(IsACop(playerid))
                    {
                        GivePlayerWeapon(playerid, 29, 800);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 5)
                {
                    if(IsACop(playerid))
                    {
                        GivePlayerWeapon(playerid, 31, 800);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 6)
                {
					if(PlayerInfo[playerid][pMember] == 2  || PlayerInfo[playerid][pLeader] == 2)
                    {
                        GivePlayerWeapon(playerid, 24, 500);
                        GivePlayerWeapon(playerid, 29, 800);
                        GivePlayerWeapon(playerid, 31, 500);
                        GivePlayerWeapon(playerid, 34, 500);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                    else SendClientMessage(playerid,COLOR_RED,"Du bist kein FBI-Agent");
                }
                else if (item == 7)
                {
                    if(PlayerInfo[playerid][pMember] == 1  || PlayerInfo[playerid][pLeader] == 1)
                    {
                        SetPlayerHealth(playerid,100.0);
                        SetPlayerArmour(playerid,100.0);
	                    SetPlayerSkin(playerid,285);
	                    GivePlayerWeapon(playerid, 29, 10000);
	                    GivePlayerWeapon(playerid, 17, 1000);
                        GivePlayerWeapon(playerid, 24, 10000);
   	                    GivePlayerWeapon(playerid, 29, 10000);
					    GivePlayerWeapon(playerid, 31, 50000);
						GivePlayerWeapon(playerid, 34, 50000);
						GivePlayerWeapon(playerid, 46, 1);
                        GivePlayerWeapon(playerid, 3, 1);
                       	GivePlayerWeapon(playerid, 41, 10000);
	   					GetPlayerName(playerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgerüstet!");
		  		    }
		  		    else
		  		    {
  			        SendClientMessage(playerid, COLOR_RED, "Du musst ein S.W.A.T Elite Troop Mitglied");
                    }
                }
                else if (item == 8)
                {
                    if(IsACop(playerid))
                    {
                        ResetPlayerWeapons(playerid);
                        GivePlayerWeapon(playerid, 3, 1);//schlagstock
                        GivePlayerWeapon(playerid, 41, 5000);//spray
                        GivePlayerWeapon(playerid, 25, 5000);//Shotgun
                        GivePlayerWeapon(playerid, 31, 15000);//M4
                        GivePlayerWeapon(playerid, 24, 15000);//Deagle
                        GivePlayerWeapon(playerid, 29, 50000);//Mp5
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                    }
                }
                else if (item == 9)
                {
                    if(IsACop(playerid))
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 10)
                {
                    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ResetPlayerWeapons(playerid);
                        GivePlayerWeapon(playerid, 3, 1);//schlagstock
                        GivePlayerWeapon(playerid, 41, 500);//spray
                        GivePlayerWeapon(playerid, 25, 500);//Shotgun
                        GivePlayerWeapon(playerid, 31, 1500);//M4
                        GivePlayerWeapon(playerid, 24, 150);//Deagle
                        GivePlayerWeapon(playerid, 29, 500);//Mp5
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                    }
                }
                else if (item == 11210)
                {
                    if(IsACop(playerid))
                    {
           	         	new originalskin = PlayerInfo[playerid][pModel];
     		         	SetPlayerSkin(playerid, originalskin);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 11121)
                {
                    if(IsACop(playerid))
                    {
	                    new originalskin = PlayerInfo[playerid][pModel];
	                    SetPlayerSkin(playerid, originalskin);
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Falsches Item oder du bist nicht dazu befugt!");
                    return 1;
                }
            }
            return 1;
        }
      	return 1;
    }*/
	if(strcmp(cmd, "/dice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s wirft einen Würfel der auf %d landet.", sendername,dice);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du hast keinen Würfel.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buy", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!IsPlayerInRangeOfPoint(playerid,100.0,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du bist nicht im 24-7 !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /buy [Itemnummer]");
				SendClientMessage(playerid, COLOR_GREEN, "_________ 24-7 _________");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Telefon $100			    2: Rubbellos $5");
				SendClientMessage(playerid, COLOR_GRAD2, "| 3: Telefon Buch $50		    4: Würfel $5");
				SendClientMessage(playerid, COLOR_GRAD4, "| 5: Kondom $8                6: CD-Player $50");
				SendClientMessage(playerid, COLOR_GRAD5, "| 7: Chicken $5				8: Hamburger $3	");
				SendClientMessage(playerid, COLOR_GRAD5, "| 9: Kekse $10			   10: Zigaretten 50$");
				SendClientMessage(playerid, COLOR_GRAD5, "| 11: Angelschein 450$       12: Zollpass 7500$");
				return 1;
			}
			new item = strval(tmp);
			if (item == 1 && GetPlayerMoney(playerid) > 100)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new payout = 50;
			        format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerMoney(playerid,- payout);
					SBizzInfo[8][sbTill] += payout;
					SBizzInfo[8][sbProducts] -= 1;
					ExtortionSBiz(8, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerMoney(playerid,-100);
					SBizzInfo[8][sbTill] += 100;
					SBizzInfo[8][sbProducts] -= 1;
					ExtortionSBiz(8, 100);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 1000 + random(8999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				SBizzInfo[8][sbProducts] -= 1;
				format(string, sizeof(string), "   Telefon gekauft! Deine Telefonnummer lautet %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Du kannst sie jederzeit mit /stats nachgucken.");
				SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst /help eingeben um die Befehle zu sehen.");
				return 1;
			}
			else if (item == 12 && GetPlayerMoney(playerid) > 7499)
			{
			    if(PlayerInfo[playerid][pZollPass] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "* Du hast bereits einen Zollpass! Er läuft nach 25 PayDays ab.");
			        return 1;
			    }
			    GivePlayerMoney(playerid, -7500);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* Du hast dir einen Zollpass gekauft. Dieser läuft nach 25 PayDays ab.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "~r~-$7500");
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerInfo[playerid][pZollPass] = 1;
				PlayerInfo[playerid][pZollPassTime] += 1;
     	     	PlayerUpdate(playerid);
				return 1;
			}
			else if (item == 2 && GetPlayerMoney(playerid) > 5)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new payout = 2;
					GivePlayerMoney(playerid,- payout);
					SBizzInfo[8][sbTill] += payout;
					SBizzInfo[8][sbProducts] -= 1;
					ExtortionSBiz(8, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-5);
					SBizzInfo[8][sbTill] += 5;
					SBizzInfo[8][sbProducts] -= 1;
					ExtortionSBiz(8, 5);
					format(string, sizeof(string), "~r~-$%d", 1000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 100;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 50;
					}
					if(randcard1 < 2)
					{
						prize = 10;
					}
					GivePlayerMoney(playerid,prize);
					SBizzInfo[8][sbTill] -= prize;
					ExtortionSBiz(8, prize);
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return 1;
			}
			else if (item == 3 && GetPlayerMoney(playerid) > 40)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 40 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 40 - price;
					GivePlayerMoney(playerid,- payout);
					SBizzInfo[8][sbTill] += payout;
					ExtortionSBiz(8, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-50);
					SBizzInfo[8][sbTill] += 50;
					ExtortionSBiz(8, 50);
					format(string, sizeof(string), "~r~-$%d", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "   Telefonbuch gekauft! Du kannst damit die Telefonnummern von anderen Spielern nachgucken.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HILFE: Gib /number [id] ein um die Nummer zu sehen.");
				return 1;
			}
			else if (item == 4 && GetPlayerMoney(playerid) > 5)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 1 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 1 - price;
					GivePlayerMoney(playerid,- payout);
					SBizzInfo[8][sbProducts] -= 1;
					SBizzInfo[8][sbTill] += payout;
					ExtortionSBiz(8, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-5);
					SBizzInfo[8][sbTill] += 5;
					SBizzInfo[8][sbProducts] -= 1;
					ExtortionSBiz(8, 5);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				format(string, sizeof(string), "   Würfel gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HILFE: Gib /dice um den Würfel zu werfen. ");
				return 1;
			}
			else if (item == 5 && GetPlayerMoney(playerid) > 8)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 50 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 50 - price;
					GivePlayerMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					SBizzInfo[8][sbProducts] -= 1;
				}
				else
				{
				    GivePlayerMoney(playerid,-50);
					format(string, sizeof(string), "~r~-$%d", 50);
					GameTextForPlayer(playerid, string, 5000, 1);
					SBizzInfo[8][sbProducts] -= 1;
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Kondom Gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}
			else if (item == 6 && GetPlayerMoney(playerid) > 50)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 25 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2500 - price;
					GivePlayerMoney(playerid, - payout);
					SBizzInfo[8][sbProducts] -= 1;
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 25);
				    SBizzInfo[8][sbProducts] -= 1;
					format(string, sizeof(string), "~r~-$%d", 2500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "CD-Player gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Hilfe: Tipp: /music");
				PlayerInfo[playerid][pCDPlayer] = 1;
				return 1;
			}
			else if (item == 7 && GetPlayerMoney(playerid) > 3)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du hast zu viele Chicken, Brate zuerst ein paar !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 3 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 3 - price;
					SBizzInfo[8][sbProducts] -= 1;
					GivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 3);
				    SBizzInfo[8][sbProducts] -= 1;
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Chicken gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return 1;
			}
			else if (item == 8 && GetPlayerMoney(playerid) > 3)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du hast zu viele Hamburger, Koche zuerst ein paar !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 1 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 1 - price;
					GivePlayerMoney(playerid, - payout);
					SBizzInfo[8][sbProducts] -= 1;
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 1);
				    SBizzInfo[8][sbProducts] -= 1;
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Hamburger gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return 1;
			}
			else if (item == 9 && GetPlayerMoney(playerid) > 10)
			{
			    GivePlayerMoney(playerid, - 10);
				format(string, sizeof(string), "~r~-$%d", 10);
				SBizzInfo[8][sbProducts] -= 1;
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Schachtel Kekse Gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				PlayerInfo[playerid][pKekse] = 10;
				return 1;
			}
			else if (item == 10 && GetPlayerMoney(playerid) > 50)
			{
			    GivePlayerMoney(playerid, - 50);
			    SBizzInfo[8][sbProducts] -= 1;
				format(string, sizeof(string), "~r~-$%d", 50);
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Schachtel Zigaretten Gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				PlayerInfo[playerid][pZig] = 5;
				return 1;
			}
			else if (item == 11 && GetPlayerMoney(playerid) > 450)
			{
				GivePlayerMoney(playerid, -450);
				format(string, sizeof(string), "~r~-$%d", 50);
				GameTextForPlayer(playerid, string, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Angelschein Gekauft.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				PlayerInfo[playerid][pFishLic] = 1;
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bewohner", true) == 0)
	{
 		new x;
   		SendClientMessage(playerid, COLOR_YELLOW, "====[Bewohner]====");
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
     		if(PlayerInfo[playerid][pPhousekey] != 255)
       		{
         		if(PlayerInfo[playerid][pPhousekey] == PlayerInfo[i][pPhousekey] && i != playerid)
           		{
             		GetPlayerName(i, giveplayer, sizeof(giveplayer));
               		format(string, sizeof(string), "%s%s", string, giveplayer);
	                x++;
	                if(x > 2)
	                {
                 		SendClientMessage(playerid, COLOR_YELLOW, string);
              			x = 0;
                 		format(string, sizeof(string), "");
					}
					else
					{
	    				format(string, sizeof(string), "%s, ", string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du hast kein Haus!");
			}
		}
		if(x <= 2 && x > 0)
		{
			string[strlen(string)-2] = '.';
  			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/buyhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
				    if(PlayerInfo[playerid][pOwnPerso] == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du benötigst einen PerosnalAusweis");
						return 1;
					}
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
					{
						format(string, sizeof(string), "   Du must mindestens Level %d um es zu kaufen !", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Dir gehört bereits ein Haus, gib /sellhouse ein um dein altes zu verkaufen !");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						new string2[128];
						format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
						Update3DTextLabelText(HouseInfo[h][Text],COLOR_BUYED,string2);
						HouseInfo[h][hRentabil] = 0;
						GivePlayerMoney(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Willkommen zu Hause~n~Du kannst das Haus an deiner Haustür mit /exit verlassen.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Gratlation zu deinem neuen Kauf !");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /help um Hilfe zu bekommen !");
                        DateProp(playerid);
						OnPropUpdate();
						PlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht genug Geld !");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setteiler", true) == 0)
	{
		new sstring[50];
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /setteiler [zahl]");
					return 1;
				}
				new neuerteiler = strval(tmp);
				PayDayTeiler = neuerteiler;
				format(sstring, sizeof(sstring), "Teiler auf %d gesetzt", PayDayTeiler);
				SendClientMessage(playerid, COLOR_GRAD2, sstring);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rentroom", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
				    if(PlayerInfo[playerid][pOwnPerso] == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du benötigst einen PerosnalAusweis");
						return 1;
					}
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Die gehört bereits ein Haus, gib /sellhouse ein um dein altes zu verkaufen.");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						GivePlayerMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Willkommen zu Hause~n~Du kannst das Haus an deiner Haustür mit /exit verlassen", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Gratulation zu deiner neuen Miete !");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /help um Hilfe zu bekommen !");
						PlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, " Du hast nicht genug Geld !");
						return 1;
					}
				}
			}
		}
		return 1;
	}




//=============== RENTCAR =================//
	if(strcmp(cmd, "/hirecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "NUTZE: /hirecar [key id]");
					return 1;
				}
				new car = strval(tmp);
				HireCar[playerid] = car;
				format(string, sizeof(string), "Schlüssel hergestellt Du kannst dein Auto Abschließen: %d",car);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/switchkey", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(!SwitchKey[playerid])
			{
				if(HireCar[playerid] != 299)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~w~Du kontrollierst jetzt dein Hausfahrzeug.", 5000, 6);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Du hast kein Auto gemietet!", 5000, 6);
				}
				return 1;
			}
			else
			{
				SwitchKey[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Du kontrollierst jetzt das gemietete Auto!", 5000, 6);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abcgivekey", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			new car;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZE: /givekey [playerid/PartOfName]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Du hast kein Schlüssel den du vergeben kannst.");
				return 1;
			}
			else
			{
				if(HireCar[playerid] != 299 && SwitchKey[playerid] == 0)
				{
					car = HireCar[playerid];
					gCarLock[car] = 0;
					UnLockCar(car);
					HireCar[playerid] = 299;
				}
				else
				{
					car = PlayerInfo[playerid][pPhousekey]+1;
				}
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
						if(HireCar[giveplayerid] != 299)
						{
							gCarLock[HireCar[giveplayerid]] = 0;
							UnLockCar(HireCar[giveplayerid]);
						}
						HireCar[giveplayerid] = car;
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "   Du hast %s den Schlüssel zu deinem Fahrzeug gegeben", giveplayer);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Du hast einen Fahrzeugschlüssel von %s bekommen", sendername);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "* %s takes out a set of keys, and tosses them to %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrentcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Fahrzeug abgegeben.", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Dir gehört dieses Haus !");
				return 1;
			}
			PlayerInfo[playerid][pPhousekey] = 255;
			SendClientMessage(playerid, COLOR_WHITE, "Du bist jetzt Obdachlos.");
		}
		return 1;
	}
	if(strcmp(cmd, "/housewithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /housewithdraw [betrag]");
					format(string, sizeof(string), "  Du hast $%d in deiner cashbox.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /housewithdraw [betrag]");
					format(string, sizeof(string), "  Du hast $%d in deiner cashbox.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du hast nicht so viel !");
					return 1;
				}
				if (!IsPlayerInRangeOfPoint(playerid,100.0,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Dein Haus ist zuweit weg ! !");
					return 1;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
					format(string, sizeof(string), "   Du hast $%d von Zuhause abgeholt Kasse: $%d ", cashdeposit,HouseInfo[bouse][hTakings]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Haus.");
			}
		}
		return 1;

	}
	if(strcmp(cmd, "/asellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /asellbiz [Business ID]");
				return 1;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[biz][bExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Du hast das Geschäft verkauft");
				GameTextForPlayer(playerid, string, 10000, 3);
				new string3[128];
				format(string3, sizeof(string3), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", BizzInfo[biz][bMessage],BizzInfo[biz][bBuyPrice],BizzInfo[biz][bLevelNeeded]);
  				Update3DTextLabelText(BizzInfo[biz][bText], COLOR_FORSELL, string3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht befugt.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellsbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /asellsbiz [sbizid]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Du hast das Geschäft verkauft");
				GameTextForPlayer(playerid, string, 10000, 3);
				new string4[160];
				format(string4, sizeof(string4), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", SBizzInfo[sbiz][sbMessage],SBizzInfo[sbiz][sbBuyPrice],SBizzInfo[sbiz][sbLevelNeeded]);
  				Update3DTextLabelText(SBizzInfo[sbiz][sbText], COLOR_FORSELL, string4);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht befugt.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /asellhouse [houseid]");
				return 1;
			}
			new house = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Du hast dieses Geschaeft verkauft", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht befugt.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/sellhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Haus.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist verheiratet, also kannst du das Haus nicht verkaufen !");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				ConsumingMoney[playerid] = 1;
				GivePlayerMoney(playerid,HouseInfo[house][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Gratulation~n~ Du hast das Haus fuer:~n~~g~$%d verkauft", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = 255;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				new string2[128];
				format(string2, sizeof(string2), "[Haus zu verkaufen - %s]\nPreis: $%d\nLevel: %d\n/buyhouse zum kaufen",HouseInfo[house][hDiscription],HouseInfo[house][hValue],HouseInfo[house][hLevel]);
				Update3DTextLabelText(HouseInfo[house][Text], COLOR_FORSELL, string2);
				OnPropUpdate();
				PlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Haus.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/houseupgrade", true) == 0 || strcmp(cmd, "/hu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /houseupgrade [item number]");
					SendClientMessage(playerid, COLOR_GRAD1, "|_______ Haus Upgrades _______|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Health Upgrade $5000 (Level 3)");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Fernseher $1000 (Admin)");
					return 1;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(SBizzInfo[4][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
							return 1;
						}
						if(PlayerInfo[playerid][pLevel] < 2)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Du musst Level 2 sein um das tun zu Können");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 5000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Du hast nicht genug Geld dafür.");
							return 1;
						}
						HouseInfo[house][hHel] = 1;
						GivePlayerMoney(playerid,-5000);
						SBizzInfo[5][sbTill] += 5000;//heal buisness
						ExtortionSBiz(5, 5000);
						SBizzInfo[5][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Du kannst deine Energie im haus mit /heal auffüllen.");
					}
					case 2:
					{
						if(SBizzInfo[5][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pAdmin] < 3)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Das Upgrade ist nur für Admins verfügbar");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 1000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Du hast nicht ausreichend Geld dafür.");
							return 1;
						}
						HouseInfo[house][hHealthx] = 1;
						GivePlayerMoney(playerid,-1000);
						SBizzInfo[5][sbTill] += 1000;
						ExtortionSBiz(5, 1000);
						SBizzInfo[5][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Du kanst nun Tv gucken!");
					}
				}
				OnPropUpdate();
				PlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du hast kein Haus");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setrent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /setrent [RentFee]");
					return 1;
				}
				if(strval(tmp) < 1 || strval(tmp) > 10000)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Minimale miete ist $1, Maximale miete ist $10000.");
					return 1;
				}
				HouseInfo[bouse][hRent] = strval(tmp);
				new string2[128];
				if(HouseInfo[bouse][hRentabil] == 0)
				{
					format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d",HouseInfo[bouse][hOwner],HouseInfo[bouse][hLevel]);
		 			Update3DTextLabelText(HouseInfo[bouse][Text], COLOR_BUYED, string2);
				}
				else
				{
					format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d\nMiete: $%d\nEinmieten mit /rentroom",HouseInfo[bouse][hOwner],HouseInfo[bouse][hLevel],HouseInfo[bouse][hRent]);
					Update3DTextLabelText(HouseInfo[bouse][Text], COLOR_BUYED, string2);
				}
				OnPropUpdate();
				format(string, sizeof(string), "Hausmiete auf $%d gesetzt.", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört kein Haus");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evictall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey] )
							{
								SendClientMessage(i, COLOR_WHITE, "Du wurdest aus dem Ahus geschmissen.");
								SendClientMessage(playerid, COLOR_WHITE, "Jeder wurde aus seinem Haus geschmissen.");
								PlayerInfo[i][pPhousekey] = 255;
								return 1;
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evict", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /evict [playerid]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "Du kannst dich nicht selber rausschmeißen.");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "Du wurdest rausgeschmissen!");
							SendClientMessage(playerid, COLOR_WHITE, "Spieler wurde rausgeschmissen!");
							PlayerInfo[target][pPhousekey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Der Spieler hat dein Haus nicht gemietet !");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setrentable", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /setrentable [0/1]");
				}
				HouseInfo[bouse][hRentabil] = strval(tmp);
				new string2[128];
				if(HouseInfo[bouse][hRentabil] == 0)
				{
					format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d",HouseInfo[bouse][hOwner],HouseInfo[bouse][hLevel]);
		 			Update3DTextLabelText(HouseInfo[bouse][Text], COLOR_BUYED, string2);
				}
				else
				{
					format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d\nMiete: $%d\nEinmieten mit /rentroom",HouseInfo[bouse][hOwner],HouseInfo[bouse][hLevel],HouseInfo[bouse][hRent]);
					Update3DTextLabelText(HouseInfo[bouse][Text], COLOR_BUYED, string2);
				}
				OnPropUpdate();
				format(string, sizeof(string), "Haus mietbar auf %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/call", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /call [/telefonnummer]");
				return 1;
			}
			if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du wirst behandelt und kannst nicht telefonieren!");
		        return 1;
		    }
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen anrufen, während du gefesselt bist!");
			    return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du hast kein Telefon !");
				return 1;
			}
			if(PlayerInfo[playerid][pHandyGeld] <= 4 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	ShowPlayerDialog(playerid, KEINGUTHABEN, DIALOG_STYLE_MSGBOX, "Hany Guthaben", "Hallo Lieber User,\nMomentan hast du kein Geld auf deinem Handy\nDas kann daran liegen das du es aufgebraucht hast oder\nDas du noch kein Geld drauf hattest!\nTippe /navi und suche den Handyladen!", "Auswählen", "Abbrechen");
				return 1;
	    	}
			//GetPlayerName(playerid, sendername, sizeof(sendername));
			//format(string, sizeof(string), "* %s nimmt sein Handy raus.", sendername);
			//ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			//new handyname[20];
			if(PlayerInfo[playerid][pHandyID] == 7) { format(handyname, sizeof(handyname), "Google HTC Magic"); }
			else if(PlayerInfo[playerid][pHandyID] == 6) { format(handyname, sizeof(handyname), "iPhone"); }
			else if(PlayerInfo[playerid][pHandyID] == 5) { format(handyname, sizeof(handyname), "BlackBerry BOLD"); }
			else if(PlayerInfo[playerid][pHandyID] == 4) { format(handyname, sizeof(handyname), "Motorola Q9h"); }
  			else if(PlayerInfo[playerid][pHandyID] == 3) { format(handyname, sizeof(handyname), "Sony Ericsson C905"); }
  			else if(PlayerInfo[playerid][pHandyID] == 2) { format(handyname, sizeof(handyname), "Nokia N95"); }
            else if(PlayerInfo[playerid][pHandyID] == 1) { format(handyname, sizeof(handyname), "Nokia 6500"); }
			else { format(handyname, sizeof(handyname), "Nokia 3330"); }
			format(string, sizeof(string), "* %s nimmt sein %s raus.", sendername, handyname);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst jetzt mit \"T\" über das Telefon reden. Gib /hangup ein um aufzulegen.");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Zentrale: Guten Tag, wenn sie mit der Polizei sprechen wollen, schreiben sie Polizei.");
				Mobile[playerid] = 911;
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du kannst nicht dich selber anrufen!");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du bist schon am Telefonieren...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
					    if(Mobile[giveplayerid] == 255)
         {
							giveplayerid = i;
							Mobile[playerid] = giveplayerid; //caller connecting
							if(IsPlayerConnected(giveplayerid))
							{
							    if(giveplayerid != INVALID_PLAYER_ID)
							    {
							        if(PhoneOnline[giveplayerid] > 0)
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Das Handy von diesem Spieler ist ausgeschalten!");
							            return 1;
							        }
									format(string, sizeof(string), "Dein Handy klingelt. (/Pickup) Anrufer: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									RingTone[giveplayerid] = 10;
									//new handyname[20];
									if(PlayerInfo[playerid][pHandyID] == 7) { format(handyname, sizeof(handyname), "Google HTC Magic"); }
									else if(PlayerInfo[playerid][pHandyID] == 6) { format(handyname, sizeof(handyname), "iPhone"); }
									else if(PlayerInfo[playerid][pHandyID] == 5) { format(handyname, sizeof(handyname), "BlackBerry BOLD"); }
									else if(PlayerInfo[playerid][pHandyID] == 4) { format(handyname, sizeof(handyname), "Motorola Q9h"); }
						  			else if(PlayerInfo[playerid][pHandyID] == 3) { format(handyname, sizeof(handyname), "Sony Ericsson C905"); }
						  			else if(PlayerInfo[playerid][pHandyID] == 2) { format(handyname, sizeof(handyname), "Nokia N95"); }
						            else if(PlayerInfo[playerid][pHandyID] == 1) { format(handyname, sizeof(handyname), "Nokia 6500"); }
									else { format(handyname, sizeof(handyname), "Nokia 3330"); }
									format(string, sizeof(string), "* %s nimmt sein %s raus.", sendername, handyname);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst jetzt mit \"T\" über das Telefon reden. Gib /hangup ein um aufzulegen.");
									CellTime[playerid] = 1;
									if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 4;
									return 1;
								}
							}
						}
						else
						{
						    SendClientMessage(playerid,COLOR_GREY," Die Leitung ist besetzt...");
						    format(string,sizeof(string)," Anruf von %s geblockt. Du bist noch in einem Gespräch!",sendername);
						    SendClientMessage(giveplayerid,COLOR_PURPLE,string);
						    return 1;
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  *TUT TUT TUT*  Kein Anschluss unter dieser Nummer. *TUT TUT TUT*");
		}
		return 1;
	}
	if(strcmp(cmd, "/sms", true) == 0 || strcmp(cmd, "/t", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Tote können nicht Reden!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pHandyGeld] <= 0 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	SendClientMessage(playerid, COLOR_GREY, "  Du hast nicht genug Guthaben um den Anruf zu Bezahlen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Geh zum Handyladen dort kannst du dir Prepaid Karten kaufen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Es gibt 30$, 60$, und 90$ Guthabenkarten.");
				return 1;
	    	}
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Du hast im Gangjail kein Empfang!");
		        return 0;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinem eine SMS schreiben, während du gefesselt bist!");
			    return 0;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /sms [Telefonnummer] [TEXT]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du hast kein Handy.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			//new handyname[20];
			if(PlayerInfo[playerid][pHandyID] == 7) { format(handyname, sizeof(handyname), "Google HTC Magic"); }
			else if(PlayerInfo[playerid][pHandyID] == 6) { format(handyname, sizeof(handyname), "iPhone"); }
			else if(PlayerInfo[playerid][pHandyID] == 5) { format(handyname, sizeof(handyname), "BlackBerry BOLD"); }
			else if(PlayerInfo[playerid][pHandyID] == 4) { format(handyname, sizeof(handyname), "Motorola Q9h"); }
  			else if(PlayerInfo[playerid][pHandyID] == 3) { format(handyname, sizeof(handyname), "Sony Ericsson C905"); }
  			else if(PlayerInfo[playerid][pHandyID] == 2) { format(handyname, sizeof(handyname), "Nokia N95"); }
            else if(PlayerInfo[playerid][pHandyID] == 1) { format(handyname, sizeof(handyname), "Nokia 6500"); }
			else { format(handyname, sizeof(handyname), "Nokia 3330"); }
			format(string, sizeof(string), "* %s nimmt sein %s raus.", sendername, handyname);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
 			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /sms [Telefonnummer] [TEXT]");
				return 1;
			}
			if(phonenumb == 555)
			{
				if ((strcmp("ja", result, true, strlen(result)) == 0) && (strlen(result) == strlen("ja")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Gesendet.");
					if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "SMS: Worüber redest du, Sender: MOLE (555)");
						RingTone[playerid] = 20;
						return 1;
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "SMS: Sag einfach ja, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 1;
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
							if(giveplayerid != INVALID_PLAYER_ID)
							{
						    	if(PhoneOnline[giveplayerid] > 0)
						    	{
						        	SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline !");
						        	return 1;
						    	}
								format(string, sizeof(string), "SMS: %s, von: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), "* %s's phone beeps.", sendername);
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "Gesendet");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								//PlayerInfo[playerid][pHandyGeld] -= txtcost;
       							if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 1;
								SBizzInfo[1][sbTill] += 10;
								ExtortionSBiz(1, txtcost);
					       		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					       		Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Senden Fehlgeschlagen");
		}
		return 1;
	}
//----------------------------------[pickup]-----------------------------------------------
	if(strcmp(cmd, "/pickup", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du bist gerade am Telefonieren...");
				return 1;
			}
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen Anruf annehmen, während du im GangJail bist!");
		        return 0;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen Anruf annehmen, während du gefesselt bist!");
			    return 0;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i;
						SendClientMessage(i,  COLOR_GRAD2, "Spieler hat abgenommen.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s geht an sein Handy.", sendername);
						SetPlayerSpecialAction(playerid,11);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangup", true) == 0 || strcmp(cmd, "/h", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Aufgelegt.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Du hast aufgelegt.");
							Mobile[caller] = 255;
							SetPlayerSpecialAction(playerid,13);
							SetPlayerSpecialAction(caller,13);
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return 1;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Dein Handy ist in deiner Tasche.");
		}
		return 1;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			PlayerFixRadio(playerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/time", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new mtext[20];
			new year, month,day;
			new uhrname[20];
			if(PlayerInfo[playerid][pUhrID] == 5) { format(uhrname, sizeof(uhrname), "Rolex"); }
			else if(PlayerInfo[playerid][pUhrID] == 4) { format(uhrname, sizeof(uhrname), "Breitling"); }
  			else if(PlayerInfo[playerid][pUhrID] == 3) { format(uhrname, sizeof(uhrname), "Junghans"); }
  			else if(PlayerInfo[playerid][pUhrID] == 2) { format(uhrname, sizeof(uhrname), "Zeiss"); }
            else if(PlayerInfo[playerid][pUhrID] == 1) { format(uhrname, sizeof(uhrname), "Swatch"); }
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Du hast noch keine Uhr geh in den Uhrenladen und Kauf dir eine!");
				return 1;
			}
			new plname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plname, sizeof(plname));
			format(string, sizeof(string), "%s schaut auf seine %s.", plname, uhrname);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			getdate(year, month, day);
			if(month == 1) { mtext = "Januar"; }
			else if(month == 2) { mtext = "Februar"; }
			else if(month == 3) { mtext = "Marz"; }
			else if(month == 4) { mtext = "April"; }
			else if(month == 5) { mtext = "Mai"; }
			else if(month == 6) { mtext = "Juni"; }
			else if(month == 7) { mtext = "Juli"; }
			else if(month == 8) { mtext = "August"; }
			else if(month == 9) { mtext = "September"; }
			else if(month == 10) { mtext = "Oktober"; }
			else if(month == 11) { mtext = "November"; }
			else if(month == 12) { mtext = "Dezember"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if (minuite < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Restliche Haftstrafe: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
				}
				else
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Restliche Haftstrafe: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
				}
				else
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour+1, minuite);
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		return 1;
	}
//----------------------{HOUSES}-------------------
	if(strcmp(cmd, "/house", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nutze: /house [hausnummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
				SetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInt];
				PlayerInfo[playerid][pLocal] = housenum;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/houseo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /houseo [hausnummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tanke [Tankennummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,TankeInfo[housenum][tEntranceX],TankeInfo[housenum][tEntranceY],TankeInfo[housenum][tEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /biz [biznummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
				PlayerInfo[playerid][pLocal] = housenum+99;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /sbiz [biznummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,SBizzInfo[housenum][sbInterior]);
				SetPlayerPos(playerid,SBizzInfo[housenum][sbEntranceX],SBizzInfo[housenum][sbEntranceY],SBizzInfo[housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aselltanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /aselltanke [sbizid]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
				TankeInfo[sbiz][tLocked] = 1;
				TankeInfo[sbiz][tOwned] = 0;
				strmid(TankeInfo[sbiz][tOwner], "The State", 0, strlen("The State"), 255);
				strmid(TankeInfo[sbiz][tExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Du hast das Geschäft verkauft");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Administrator.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tedit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 2000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "** INFO ** Das ist ein Adminbefehl, Du bist kein Admin!");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_GREEN, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "/tedit [name] [ammount] (Used for Fuelstations)");
				SendClientMessage(playerid, COLOR_WHITE, "TANKSTELLEN: Level, Price, Name");
				SendClientMessage(playerid, COLOR_GREEN, "|____________________________________________|");
				return 1;
			}
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					format(string, sizeof(string), "Tankstellen ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
				    	tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tLevelNeeded] = proplev;
					}
					else if(strcmp(x_job,"price",true) == 0)
				    {
				    	tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tBuyPrice] = proplev;
					}
					else if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit name [text]");
							return 1;
						}
						strmid(TankeInfo[i][tMessage], result, 0, strlen(result), 255);
					}
				}
			}
			format(string, sizeof(string), "Du hast die/den %s eingestellt.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropUpdate();
			return 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/edit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du bist nicht befugt !");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /edit [Name] [Menge] (Für Häuser und Businesses)");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Level, Price, Funds, Products");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [Name] [Menge]");
				return 1;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_job,"car",true) == 0)
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Haus ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
						}
					}
	    			new string2[128];
					if(HouseInfo[i][hOwned] == 0)
					{
						format(string2, sizeof(string2), "[Haus zu verkaufen - %s]\nPreis: $%d\nLevel: %d\n/buyhouse zum kaufen",HouseInfo[i][hDiscription],HouseInfo[i][hValue],HouseInfo[i][hLevel]);
						Update3DTextLabelText(HouseInfo[i][Text],COLOR_FORSELL,string2);
					}
					else if(HouseInfo[i][hOwned] == 1 || HouseInfo[i][hRentabil] == 0)
					{
						format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d",HouseInfo[i][hOwner],HouseInfo[i][hLevel]);
						Update3DTextLabelText(HouseInfo[i][Text],COLOR_BUYED,string2);
					}
					else if(HouseInfo[i][hOwned] == 1 || HouseInfo[i][hRentabil] >= 1)
					{
						format(string2, sizeof(string2), "[Haus]\nBesitzer: %s\nLevel: %d\nMiete: $%d\nEinmieten mit /rentroom",HouseInfo[i][hOwner],HouseInfo[i][hLevel],HouseInfo[i][hRent]);
						Update3DTextLabelText(HouseInfo[i][Text],COLOR_BUYED,string2);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Biz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"funds",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
						}
						else if(strcmp(x_job,"products",true) == 0)
					    {
							BizzInfo[i][bProducts] = proplev;
						}
					}
					new string3[160];
					if(BizzInfo[i][bOwned] == 0)
					{
	    				format(string3, sizeof(string3), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", BizzInfo[i][bMessage],BizzInfo[i][bBuyPrice],BizzInfo[i][bLevelNeeded]);
				    	Update3DTextLabelText(BizzInfo[i][bText],COLOR_FORSELL,string3);
					}
					else if(BizzInfo[i][bOwned] == 1)
					{
   						format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[i][bMessage],BizzInfo[i][bOwner],BizzInfo[i][bExtortion],BizzInfo[i][bEntranceCost],BizzInfo[i][bLevelNeeded],BizzInfo[i][bProducts],BizzInfo[i][bMaxProducts],BizzInfo[i][bPriceProd]);
				    	Update3DTextLabelText(BizzInfo[i][bText],COLOR_BUYED,string3);
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SBiz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"funds",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
						}
						else if(strcmp(x_job,"products",true) == 0)
					    {
							SBizzInfo[i][sbProducts] = proplev;
						}
					}
					new string4[160];
					if(SBizzInfo[i][sbOwned] == 0)
					{
						format(string4, sizeof(string4), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", SBizzInfo[i][sbMessage],SBizzInfo[i][sbBuyPrice],SBizzInfo[i][sbLevelNeeded]);
	    				Update3DTextLabelText(SBizzInfo[i][sbText],COLOR_FORSELL,string4);
					}
					else if(SBizzInfo[i][sbOwned] == 1)
					{
						format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[i][sbMessage],SBizzInfo[i][sbOwner],SBizzInfo[i][sbExtortion],SBizzInfo[i][sbEntranceCost],SBizzInfo[i][sbLevelNeeded],SBizzInfo[i][sbProducts],SBizzInfo[i][sbMaxProducts], SBizzInfo[i][sbPriceProd]);
	    				Update3DTextLabelText(SBizzInfo[i][sbText],COLOR_BUYED,string4);
					}
				}
			}
			format(string, sizeof(string), "Du hast die/den %s eingestellt.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropUpdate();
		}
		return 1;
	}
	if(strcmp(cmd, "/enter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Willkommen zu Hause", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						SetPlayerVirtualWorld(playerid,i);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Verschlossen", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nur für Beamte !");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Verschlossen", 5000, 1);
								return 1;
							}
							if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
								return 1;
							}
							GivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~gib /exit ein~n~um das Gebeude zu verlassen.", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bProducts]--;
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						PlayerInfo[playerid][pLocal] = i+99;
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s bezahlte $%d um das Gebeude zu betreten %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						PayLog(string);
						//PlayerInfo[playerid][pLocal] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du hast nicht genug Geld", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Geschlossen", 5000, 1);
								return 1;
							}
							if(SBizzInfo[i][sbProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
								return 1;
							}
							if(i == 6)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								ResetPlayerWeapons(playerid);
								SetPlayerArmour(playerid, 0);
								SetPlayerHealth(playerid, 100);
							}
							else
							{
							    return 1;
							}
							GivePlayerMoney(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoney(playerid);
							SBizzInfo[i][sbProducts]--;
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s bezahlt $%d um das sbiz %d zu betreten", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							OnPropUpdate();
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du hast nicht genug Geld", 5000, 1);
					}
				}
			}
			if (IsPlayerInRangeOfPoint(playerid,3.0,1073.0619,-344.5148,73.9922))
			{
			    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
			    {
				    SetPlayerInterior(playerid,2);
					SetPlayerPos(playerid,1205.0947,-10.1685,1000.9219);
					PlayerInfo[playerid][pInt] = 2;
					PlayerInfo[playerid][pLocal] = 242;
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,3.0,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen in der 8Ball Arena", 5000, 1);
			    SetPlayerInterior(playerid,7);
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen in der Dirt Arena", 5000, 1);
			    SetPlayerInterior(playerid,4);
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen im der Stunt Arena", 5000, 1);
			    SetPlayerInterior(playerid,14);
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,254.8123,1802.1803,7.4448))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen im Bunker", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,198.1085,1780.7993,7.5693);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,21.2708,-5.8263,3.1172))//Etage1 Knast
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,13.5072,3.8645,11.6806);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1274.1163,-1641.3193,27.3750))
			{
				if(IsACop(playerid) || IsPlayerInFrac(playerid, 19))
				{
			    	SetPlayerInterior(playerid, 6);
			    	SetPlayerVirtualWorld(playerid, 5);
			    	SetPlayerPos(playerid, 234.199996,1064.900024,1084.199951);
					GameTextForPlayer(playerid, "Red Soldiers Base", 5000, 3);
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,2.0,15.0589,4.0301,11.6809))//Etage1 Knast
			{
			    SetPlayerInterior(playerid,10);
				SetPlayerPos(playerid,21.2708,-5.8263,3.1172);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,278.0632,114.2558,1008.8130))
			{
			    SetPlayerInterior(playerid,0);
			    GameTextForPlayer(playerid, "~w~Willkommen auf dem Dach", 5000, 1);
				SetPlayerPos(playerid,-14.6560,6.7657,30.2214);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,-14.7645,7.0996,27.7117))
			{
			    SetPlayerInterior(playerid,10);
				SetPlayerPos(playerid,278.0632,114.2558,1008.8130);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,15.0589,4.0301,11.6809))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,238.0855,114.7665,1010.2188);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2119.3745,-178.4758,35.3203)) //Fuegos
			{
			    if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,3);
					SetPlayerPos(playerid,-2637.1277,1403.7910,906.4609);
					SetPlayerFacingAngle(playerid,14.5216);
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2034.1775,148.5470,28.8359)) //Biker
			{
			    if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,11);
					SetPlayerPos(playerid,502.1796,-67.9925,998.7578);
					SetPlayerFacingAngle(playerid,180.8316);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,2232.1707,-1159.8075,25.8906))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen im Arbeitsamt~n~ benutze ~r~/job", 5000, 1);
			    SetPlayerInterior(playerid, 15);
				SetPlayerPos(playerid,2216.3401,-1150.5100,1025.7969,270.0000);
			}
			else if (PlayerToPoint(2.0, playerid, 1788.1333,-1298.1036,13.3750)) // Hitman // kleiner gelber Trichter
			{
				if(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8 || IsACop(playerid))
				{
    				SetPlayerPos(playerid, 1825.5352,-1305.2288,120.3046); //Hitman oben // Weißer Pfeil
			    	SetPlayerFacingAngle(playerid, 180.0);
			    	SetPlayerInterior(playerid, 0);
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Fraktion!");
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2720.8020,-320.6040,7.8438))
			{
			    if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6 || IsACop(playerid))
			    {
			        SetPlayerPos(playerid, 2018.5990,1017.7141,996.8750); //Spawn der Typen
			        SetPlayerFacingAngle(playerid, 356.1003);
			        SetPlayerInterior(playerid, 10); // Interior
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Fraktion!");
				}
			}
			else if (PlayerToPoint(2.0, playerid,2786.4897,-1926.2115,13.5469))
			{
				if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17 || IsACop(playerid))
				{
    				SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
			    	SetPlayerFacingAngle(playerid, 180.0);
			    	SetPlayerInterior(playerid, 8);
			    	SetPlayerVirtualWorld(playerid,9);
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Fraktion!");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fenter", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1220.0658,-1813.3065,16.5938))
		    {
			    SetPlayerPos(playerid,-2029.798339,-106.675910,1035.171875);
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/fexit", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,-2029.7687,-118.9294,1035.1719))
		    {
			    SetPlayerPos(playerid,1220.0658,-1813.3065,16.5938);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/menter", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1008.7658,-2303.2424,13.3025))
		    {
			    SetPlayerPos(playerid,1494.325195,1304.942871,1093.289062);
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid,1);
			}
		}
	}
	if(strcmp(cmd, "/mexit", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1494.3556,1303.7893,1093.2891))
		    {
			    SetPlayerPos(playerid,1008.7704,-2302.1389,13.3025);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/Lenter", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2495.3865,-1690.6353,14.7656))
		    {
			    SetPlayerPos(playerid,1261.5701,-785.4479,1091.9063);
			    SetPlayerInterior(playerid,5);
			    SetPlayerVirtualWorld(playerid,1);
			}
		}
	}//LCN
	if(strcmp(cmd, "/Lexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1261.5701,-785.4479,1091.9063))
		    {
			    SetPlayerPos(playerid,2495.3865,-1690.6353,14.7656);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/yaklift", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
 		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
		    if(IsPlayerInRangeOfPoint(playerid,5.0,1925.7356,959.8880,52.7387))
		    {
				SetPlayerPos(playerid,1924.2145,960.0609,10.8203);
				SetPlayerFacingAngle(playerid,243.1635);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else if(IsPlayerInRangeOfPoint(playerid,5.0,1924.2145,960.0609,10.8203))
		    {
				SetPlayerPos(playerid,1925.7356,959.8880,52.7387);
				SetPlayerFacingAngle(playerid,46.1635);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/Henter", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2146.7241,-1808.6066,16.1406))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,3);
			}
		}
	}//hitman
	if(strcmp(cmd, "/Hexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,2148.3230,-1807.4741,16.1429);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/benter", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)//ballas
	{
	    if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1084.1470,-1227.1428,15.8203))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,6);
			}
		}
	}
	if(strcmp(cmd, "/bexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)// Ballas
		{
	    if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,1084.1470,-1227.1428,15.8203);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/wexit", true ) == 0)
	{
	    if(IsPlayerInFrac(playerid, 21))
	    {
			if(IsPlayerInRangeOfPoint(playerid,3.0,2548.8479,-1295.0243,1060.9844))
			{
			    SetPlayerPos(playerid,-516.1633,-506.0980,25.5234);
			    SetPlayerInterior(playerid, 0);
				SendClientMessage(playerid, COLOR_GREEN, "Du hast die Wheelman Fraktion verlassen!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du bist zuweit von der Tür entfernt!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
		}
	}
	if(strcmp(cmd, "/wenter", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 21))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3.0,-516.1633,-506.0980,25.5234))
			{
			    SetPlayerPos(playerid,2548.8479,-1295.0243,1060.9844);
			    SetPlayerInterior(playerid, 2);
				SendClientMessage(playerid, COLOR_GREEN, "Du hast die Wheelman Base betreten!");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "Du bist zuweit von der Eingangs Tür entfernt!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
		}
	}

/*	if(strcmp(cmd, "/Terenter", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,-516.1633,-506.0980,25.5234))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,12);
			}
		}
	}
	if(strcmp(cmd, "/Terexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,-516.1633,-506.0980,25.5234);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
*/
	if(strcmp(cmd, "/Genter", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,1647.9086,-1817.2784,13.5346))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,5);
			}
		}
	}//groove
	if(strcmp(cmd, "/Gexit", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,1647.9086,-1817.2784,13.5346);
				SetPlayerFacingAngle(playerid,222.1635);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}//Ballas
	if(strcmp(cmd, "/2Fenter", true) == 0 || strcmp(cmd, "/ram", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2852.1570,-1532.4482,11.0938))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,7);
			}
		}
	}
	if(strcmp(cmd, "/2Fexit", true || strcmp(cmd, "/ram", true) == 0) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,2852.1570,-1532.4482,11.0938);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/vaenter", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2534.0344,-1063.5658,69.5653))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,8);
			}
		}
	}
	if(strcmp(cmd, "/vaexit", true) == 0)
		{
	    if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,2534.0344,-1063.5658,69.5653);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/Rienter", true) == 0 || strcmp(cmd, "/ram", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2179.6458,-2256.0725,14.7734))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,10);
			}
		}
	}
	if(strcmp(cmd, "/Riexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
		{
	    if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,2179.6458,-2256.0725,14.7734);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/Terenter", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,-314.1271,1774.8267,43.6406))
		    {
			    SetPlayerPos(playerid,2807.619873,-1171.899902,1025.570312);
			    SetPlayerInterior(playerid,8);
			    SetPlayerVirtualWorld(playerid,12);
			}
		}
	}
	if(strcmp(cmd, "/Terexit", true) == 0 || strcmp(cmd, "/aufbrechen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2807.619873,-1171.899902,1025.570312))
		    {
			    SetPlayerPos(playerid,-314.1271,1774.8267,43.6406);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
		}
	}
	if(strcmp(cmd, "/pevent", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(PlayerInfo[playerid][pAdmin] >= 4)
				{
				    if(EventAktiv == false)
				    {
					 	GetPlayerPos(playerid, EventPos[0], EventPos[1], EventPos[2]);
					 	EventInt = GetPlayerInterior(playerid);
					 	EventVW = GetPlayerVirtualWorld(playerid);
						EventAktiv = true;
						SendClientMessage(playerid, COLOR_GRAD1, "Du hast ein Event an dieser Position gesetzt!");
						SendClientMessageToAll(TEAM_Grove_COLOR, "Ein Event ist aktiv! Benutze /event um dich hinzuteleportieren.");
					}
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD1, "Dir ist es nicht erlaubt, diesen Befehl zu benutzen!");
				}
			}
			return 1;
		}
	if(strcmp(cmd, "/event", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(EventAktiv == true)
				{
				 	SetPlayerPos(playerid, EventPos[0], EventPos[1], EventPos[2]);
	     			SetPlayerInterior(playerid, EventInt);
	                SetPlayerVirtualWorld(playerid, EventVW);
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dich zum Event telepotiert!");
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s hat sich zum Event geportet!", sendername);
					ABroadCast(COLOR_YELLOW, string, 1);
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_RED, "Es ist kein Event aktiv!");
				}
			}
			return 1;
		}
	if(strcmp(cmd, "/delevent", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
				    if(EventAktiv == true)
				    {
				 		SendClientMessage(playerid, COLOR_GRAD2, "Event ausgeschaltet!");
						SendClientMessageToAll(TEAM_Grove_COLOR, "Das Event ist vorbei.");
				 		EventAktiv = false;
			 		}
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD2, "Dir ist nicht erlaubt diesen Befehl zu benutzen! ");
				}
			}
			return 1;
		}
	if(strcmp(cmd, "/exit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i <  sizeof(HouseInfo); i++)
			{
				//printf("House :%d",i);
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && PlayerInfo[playerid][pLocal] == i)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
					PlayerInfo[playerid][pLocal] = 255;
					SetPlayerVirtualWorld(playerid,0);
					if(HouseInfo[i][hHel] == 1)
					{
						new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if(tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
						}
					}
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
				}
			}
			if (IsPlayerInRangeOfPoint(playerid,6.0,-1404.5299,-259.0602,1043.6563))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-1443.0554,-581.1879,1055.0472))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,198.1085,1780.7993,7.5693))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,254.8123,1802.1803,7.4448);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-1464.7732,1557.5533,1052.5313))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
			}
			else if(IsPlayerInRangeOfPoint(playerid,5.0, 234.199996,1064.900024,1084.199951))
			{
				if(GetPlayerVirtualWorld(playerid) == 5)
				{
				    SetPlayerPos(playerid, 1274.1163,-1641.3193,27.3750);
				    SetPlayerInterior(playerid, 0);
				    SetPlayerVirtualWorld(playerid, 0);
				}
			}
			else if(NoFuel[playerid] == 1)
			{
			    UnFreezePlayer(playerid);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,2216.3401,-1150.5100,1025.7969))
			{
			    GameTextForPlayer(playerid, "~w~Auf wiedersehen!", 5000, 1);
			    SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,2232.1707,-1159.8075,25.8906,89.1050);
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,833.269775,10.588416,1004.179687))
			{
			    GameTextForPlayer(playerid, "~w~Auf wiedersehen!", 5000, 1);
			    SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,1847.3645,-1871.6908,13.5781);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,502.1796,-67.9925,998.7578)) //Biker
			{
			    if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,-2034.1775,148.5470,28.8359);
					SetPlayerFacingAngle(playerid,276.5632);
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2637.1277,1403.7910,906.4609)) //Fuegos
			{
			    if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,-2119.3745,-178.4758,35.3203);
					SetPlayerFacingAngle(playerid,0.0974);
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid, 3.0,1825.5352,-1305.2288,120.3046)) //Hitman ausgang
		 	{
		 	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || IsACop(playerid))
		 	    {
	     			SetPlayerInterior(playerid,0);
	    			SetPlayerPos(playerid,1788.1333,-1298.1036,13.3750);
	    			PlayerInfo[playerid][pInt] = 0;
    			}
    			else
    			{
    			    SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Hitmen!");
				}
			}
//Bank /exit
			else if	(IsPlayerInRangeOfPoint(playerid,3.0, 2144.1050,1608.3209,993.6882))//Bank
			{
			 		SetPlayerPos(playerid,1424.2955,-1002.9601,1639.7843);
			 		SetPlayerFacingAngle(playerid,173.7840);
			 		SetPlayerInterior(playerid,10);
 			}
			else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2018.5990,1017.7141,996.8750))
			{
			    if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || IsACop(playerid))
			    {
			        SetPlayerPos(playerid, -2721.9905,-319.7708,7.8438);
			        SetPlayerFacingAngle(playerid,42.8977);
			        SetPlayerInterior(playerid, 0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Yakuza Mitglied!");
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2807.8218,-1173.5619,1025.5703))
			{
			    if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17 || IsACop(playerid))
			    {
			        SetPlayerPos(playerid, 2786.4897,-1926.2115,13.5469);
			        SetPlayerFacingAngle(playerid,42.8977);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerVirtualWorld(playerid,0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Aztecas");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/home", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPhousekey] != 255)
			{
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~w~Zuhause auf ~r~der Map", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Du hast kein Zuhause", 5000, 1);
			}
		}
		return 1;
	}
//----------------------------------[BIZZ]-----------------------------------------------
	if(strcmp(cmd, "/buybiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Du besitzt schon ein Business, tipp /sellbiz wenn du dieses willst.");
				return 1;
			}
			for(new b = 0; b < sizeof(SBizzInfo); b++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevelNeeded])
					{
						format(string, sizeof(string), "Du benötigst Level %d um es erwerben zu können",SBizzInfo[b][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[b][sbBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b+100;
						SBizzInfo[b][sbOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-SBizzInfo[b][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Gratulation für dein neues Gewerbe.");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /help ein, um Hilfe für dein neues Gewerbe zu bekommen.");
                        DateProp(playerid);
		    			new string4[200];
    					format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[b][sbMessage],SBizzInfo[b][sbOwner],SBizzInfo[b][sbExtortion],SBizzInfo[b][sbEntranceCost],SBizzInfo[b][sbLevelNeeded],SBizzInfo[b][sbProducts],SBizzInfo[b][sbMaxProducts], SBizzInfo[b][sbPriceProd]);
				    	Update3DTextLabelText(SBizzInfo[b][sbText],COLOR_BUYED,string4);
						OnPropUpdate();
						PlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um das Gewerbe kaufen zu können.");
						return 1;
					}
				}
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "Du benötigst mindestens Level %d, um es kaufen zu können",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						GameTextForPlayer(playerid, "~w~Willkommen~n~Um es zu Verlassen tipp /exit (An der Tuer) ein", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						SendClientMessage(playerid, COLOR_WHITE, "Gratulation für dein neues Gewerbe.");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /help ein, um Hilfe für dein neues Gewerbe zu bekommen.");
                        DateProp(playerid);
                        //Label Update
                        new string3[128];
    					format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[b][bMessage],BizzInfo[b][bOwner],BizzInfo[b][bExtortion],BizzInfo[b][bEntranceCost],BizzInfo[b][bLevelNeeded],BizzInfo[b][bProducts],BizzInfo[b][bMaxProducts],BizzInfo[b][bPriceProd]);
			   			Update3DTextLabelText(BizzInfo[b][bText],COLOR_BUYED,string3);
		    			//Speichern
						OnPropUpdate();
						PlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um das Gewerbe kaufen zu können.");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du besitzt kein Gewerbe.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist Verheiratet, also kannst du dein Haus nicht verkaufen !");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey]-100;
				GivePlayerMoney(playerid,SBizzInfo[bouse][sbTill]);
				SBizzInfo[bouse][sbLocked] = 1;
				SBizzInfo[bouse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[bouse][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[bouse][sbExtortion], "No-one", 0, strlen("No-one"), 255);
				ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast dein Geschaeft verkauft. Premie ~n~~g~$%d", SBizzInfo[bouse][sbTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				SBizzInfo[bouse][sbTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				//Labe Update
				new string4[160];
   				format(string4, sizeof(string4), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", SBizzInfo[bouse][sbMessage],SBizzInfo[bouse][sbBuyPrice],SBizzInfo[bouse][sbLevelNeeded]);
		    	Update3DTextLabelText(SBizzInfo[bouse][sbText],COLOR_FORSELL,string4);
				//Speichern
				OnPropUpdate();
				PlayerUpdate(playerid);
				return 1;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[bouse][bLocked] = 1;
				BizzInfo[bouse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[bouse][bExtortion], "No-one", 0, strlen("No-one"), 255);
				ConsumingMoney[playerid] = 1;
				GivePlayerMoney(playerid,BizzInfo[bouse][bTill]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast dein Geschaeft verkauft. Premie ~n~~g~$%d", BizzInfo[bouse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				BizzInfo[bouse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				//Labe Update
				new string3[160];
   				format(string3, sizeof(string3), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", BizzInfo[bouse][bMessage],BizzInfo[bouse][bBuyPrice],BizzInfo[bouse][bLevelNeeded]);
		    	Update3DTextLabelText(BizzInfo[bouse][bText],COLOR_FORSELL,string3);
				//Speichern
				OnPropUpdate();
				PlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Geschäfft.");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Geschäfft.");
				return 1;
			}
			if (bouse >= 100)
			{

				PrintSBizInfo(playerid,bouse-100);
			}
			else
			{
				PrintBizInfo(playerid,bouse);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prodprice", true) == 0)
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört kein Geschäfft");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /prodprice [kosten pro Produkt]");
		}
		if(strval(tmp) < 10 || strval(tmp) > 5000)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Der Prodpreis muss mindestens 10$ sein und kann höchsten 5000$ sein.");
			return 1;
		}
		if (bouse >= 100)
		{
			if(strval(tmp) > SBizzInfo[bouse-100][sbTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nicht genug Geld in der Businesskasse");
				return 1;
			}
			SBizzInfo[bouse-100][sbPriceProd] = strval(tmp);
			format(string, sizeof(string), "Produkte werden nun für %d$ / Produkt gekauft.", SBizzInfo[bouse-100][sbPriceProd]);
			new string4[160];
			if(SBizzInfo[bouse-100][sbOwned] == 1)
			{
				format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[bouse-100][sbMessage],SBizzInfo[bouse-100][sbOwner],SBizzInfo[bouse-100][sbExtortion],SBizzInfo[bouse-100][sbEntranceCost],SBizzInfo[bouse-100][sbLevelNeeded],SBizzInfo[bouse-100][sbProducts],SBizzInfo[bouse-100][sbMaxProducts], SBizzInfo[bouse-100][sbPriceProd]);
				Update3DTextLabelText(SBizzInfo[bouse-100][sbText],COLOR_BUYED,string4);
			}
		}
		else
		{
			if(strval(tmp) > BizzInfo[bouse][bTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nicht genug Geld inder Businesskasse");
				return 1;
			}
			BizzInfo[bouse][bPriceProd] = strval(tmp);
			format(string, sizeof(string), "Produkte werden nun für %d$ / Produkt gekauft.", BizzInfo[bouse][bPriceProd]);
			new string3[200];
			if(BizzInfo[bouse][bOwned] == 1)
			{
 				format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[bouse][bMessage],BizzInfo[bouse][bOwner],BizzInfo[bouse][bExtortion],BizzInfo[bouse][bEntranceCost],BizzInfo[bouse][bLevelNeeded],BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts],BizzInfo[bouse][bPriceProd]);
	    		Update3DTextLabelText(BizzInfo[bouse][bText],COLOR_BUYED,string3);
			}
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/bizfee", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört kein Geschäfft!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /bizfee [Preis]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 250 && bouse != 102 && bouse != 105)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Minimaler eintritt ist $0, Maximaler eintritt ist $250.");
				return 1;
			}
			if(bouse == 102)
			{
				if(strval(tmp) < 0 || strval(tmp) > 50)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Minimaler Spritpreis ist 0$, Maximaler Sprittpreis 50$.");

				}
			}
			if(bouse == 105)
			{
			    if(strval(tmp) < 0 || strval(tmp) > 50)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Maximaler Preis pro Buchstabe: 50$, Minimaler Preis: 0$!");
			        return 1;
				}
			}
			if (bouse >= 100)
			{
				SBizzInfo[bouse-100][sbEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Eintritts Preis wurde auf $%d gesetzt.", SBizzInfo[bouse-100][sbEntranceCost]);
				SendClientMessage(playerid, COLOR_GREEN, "Eintritts Preis wurde auf $%d gesetzt!");
			}
			else
			{
				BizzInfo[bouse][bEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Eintritts Preis wurde auf $%d gesetzt.", BizzInfo[bouse][bEntranceCost]);
				SendClientMessage(playerid, COLOR_GREEN, "Eintritts Preis wurde auf $%d gesetzt!");
			}
			new string3[160];
			if(BizzInfo[bouse][bOwned] == 1)
			{
 				format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[bouse][bMessage],BizzInfo[bouse][bOwner],BizzInfo[bouse][bExtortion],BizzInfo[bouse][bEntranceCost],BizzInfo[bouse][bLevelNeeded],BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts],BizzInfo[bouse][bPriceProd]);
    			Update3DTextLabelText(BizzInfo[bouse][bText],COLOR_BUYED,string3);
			}
			new string4[160];
			if(SBizzInfo[bouse-100][sbOwned] == 1)
			{
				format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[bouse-100][sbMessage],SBizzInfo[bouse-100][sbOwner],SBizzInfo[bouse-100][sbExtortion],SBizzInfo[bouse-100][sbEntranceCost],SBizzInfo[bouse-100][sbLevelNeeded],SBizzInfo[bouse-100][sbProducts],SBizzInfo[bouse-100][sbMaxProducts], SBizzInfo[bouse-100][sbPriceProd]);
				Update3DTextLabelText(SBizzInfo[bouse-100][sbText],COLOR_BUYED,string4);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/teilhaber", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäfft");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /teilhaber [playerid] (oder 555 für keinen)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s ist nun Teilhaber.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* %s hat sein Business geteilt, nun bist du Teilhaber.",sendername);
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse-100][sbExtortion]);
						format(ALLSTRING, sizeof(ALLSTRING), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", SBizzInfo[bouse-100][sbMessage],SBizzInfo[bouse-100][sbBuyPrice],SBizzInfo[bouse-100][sbLevelNeeded]);
						Update3DTextLabelText(SBizzInfo[bouse-100][sbText], COLOR_FORSELL, ALLSTRING);

					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Business Teilhaber Name = %s",BizzInfo[bouse][bExtortion]);
						format(ALLSTRING, sizeof(ALLSTRING), "[Business zu Verkaufen - %s]\nPreis: %d$\nLevel: %d", BizzInfo[bouse][bMessage],BizzInfo[bouse][bBuyPrice],BizzInfo[bouse][bLevelNeeded]);
  						Update3DTextLabelText(BizzInfo[bouse][bText], COLOR_FORSELL, ALLSTRING);
					}
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "Niemand");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "Niemand");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",BizzInfo[bouse][bExtortion]);
				}
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/tankteilhaber", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /tankteilhaber [playerid] (oder 555 für keinen)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s ist nun Teilhaber.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* %s hat seine Tankstelle geteilt, nun bist du Teilhaber.",sendername);
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						//strmid(TankeInfo[bouse-100][tExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Tankstellen Teilhaber Name = %s",TankeInfo[bouse-100][tExtortion]);
					}
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "Niemand");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "Niemand");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",BizzInfo[bouse][bExtortion]);
				}
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}

		}
		return 1;
	}
	if(strcmp(cmd, "/tankpreis", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /tankpreis [Preis pro Liter]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 100)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Minimaler Preis pro Liter ist $0, Maximaler Preis pro Liter ist $100.");
				return 1;
			}
			if (bouse >= 100)
			{
				TankeInfo[bouse-100][tEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Preis pro Liter wurde auf $%d gesetzt.", TankeInfo[bouse-100][tEntranceCost]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/tankwithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Du hast $%d in deiner Tankstellenkasse.", TankeInfo[bouse-100][tTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankwithdraw [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankwithdraw [Betrag]");
				return 1;
			}
			if (bouse >= 100)
			{
				if(cashdeposit > TankeInfo[bouse-100][tTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "So viel Geld besitzt du nicht!");
					return 1;
				}
			}
			if (bouse >= 100)
			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,TankeInfo[bouse-100][tEntranceX],TankeInfo[bouse-100][tEntranceY],TankeInfo[bouse-100][tEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist zu weit von deiner Tankstelle entfernt!");
					return 1;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					TankeInfo[bouse-100][tTill] -= cashdeposit;
					ExtortionTanke(bouse-100, TankeInfo[bouse-100][tTill]);
					format(string, sizeof(string), "* Du hast $%d aus deiner Tankstellenkasse genommen. Total: $%d ", cashdeposit,TankeInfo[bouse-100][tTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/tankbank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Du hast $%d in deiner Tankstellenkasse.", TankeInfo[bouse-100][tTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Du hast $%d in deiner Tankstellenkasse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankbank [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /tankbank [Betrag]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "So viel Geld hast du nicht auf deiner Hand!");
				return 1;
			}
			if (bouse >= 100)
			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,TankeInfo[bouse-100][tEntranceX],TankeInfo[bouse-100][tEntranceY],TankeInfo[bouse-100][tEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist zu weit von deiner Tankstelle entfernt!");
					return 1;
				}
				else
				{
					TankeInfo[bouse-100][tTill] += cashdeposit;
					ExtortionTanke(bouse-100, TankeInfo[bouse-100][tTill]);
					GivePlayerMoney(playerid,-cashdeposit);
					format(string, sizeof(string), "* Du hast $%d in die Tankstellenkasse eingezahlt. Total: $%d ", cashdeposit,TankeInfo[bouse-100][tTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/buytanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pPtankekey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du besitzt schon eine Tankstelle, tippe /selltanke wenn du diese willst.");
				return 1;
			}
			for(new b = 0; b < sizeof(TankeInfo); b++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]) && TankeInfo[b][tOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < TankeInfo[b][tLevelNeeded])
					{
						format(string, sizeof(string), "Du benötigst Level %d um es erwerben zu können",TankeInfo[b][tLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > TankeInfo[b][tBuyPrice])
					{
						PlayerInfo[playerid][pPtankekey] = b+100;
						TankeInfo[b][tOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(TankeInfo[b][tOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-TankeInfo[b][tBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch zu deiner neuen Tankstelle!");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /tankhelp ein um Hilfe für deine Tankstelle zu bekommen.");
                        DateProp(playerid);
						OnPropUpdate();
						PlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um diese Tankstelle kaufen zu können.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/selltanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPtankekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du besitzt keine Tankstelle!");
				return 1;
			}
			if(PlayerInfo[playerid][pPtankekey] >= 100 && strcmp(playername, TankeInfo[PlayerInfo[playerid][pPtankekey]-100][tOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPtankekey]-100;
				GivePlayerMoney(playerid,TankeInfo[bouse][tTill]);
				TankeInfo[bouse][tLocked] = 1;
				TankeInfo[bouse][tOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(TankeInfo[bouse][tOwner], "The State", 0, strlen("The State"), 255);
				strmid(TankeInfo[bouse][tExtortion], "No-one", 0, strlen("No-one"), 255);
				ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast deine Tankstelle verkauft. Premie ~n~~g~$%d", TankeInfo[bouse][tTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				TankeInfo[bouse][tTill] = 0;
				PlayerInfo[playerid][pPtankekey] = 255;
				OnPropUpdate();
				PlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört keine Tankstelle!");
			}
		}
		return 1;
	}

	if (strcmp(cmd, "/tankinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört keine Tankstelle!");
				return 1;
			}
			if (bouse >= 100)
			{
				PrintFuelstationInfo(playerid,bouse-100);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bizname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäfft");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /bizname [Name]");
			}
			if (bouse >= 100)
			{
				strmid(SBizzInfo[bouse-100][sbMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Businessname wurde auf %s geändert",SBizzInfo[bouse-100][sbMessage]);
			}
			else
			{
				strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Businessname wurde auf %s geändert",BizzInfo[bouse][bMessage]);
			}
			new string3[160];
			if(BizzInfo[bouse][bOwned] == 1)
			{
  				format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[bouse][bMessage],BizzInfo[bouse][bOwner],BizzInfo[bouse][bExtortion],BizzInfo[bouse][bEntranceCost],BizzInfo[bouse][bLevelNeeded],BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts],BizzInfo[bouse][bPriceProd]);
		    	Update3DTextLabelText(BizzInfo[bouse][bText],COLOR_BUYED,string3);
			}
			new string4[160];
			if(SBizzInfo[bouse-100][sbOwned] == 1)
			{
				format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[bouse-100][sbMessage],SBizzInfo[bouse-100][sbOwner],SBizzInfo[bouse-100][sbExtortion],SBizzInfo[bouse-100][sbEntranceCost],SBizzInfo[bouse-100][sbLevelNeeded],SBizzInfo[bouse-100][sbProducts],SBizzInfo[bouse-100][sbMaxProducts], SBizzInfo[bouse-100][sbPriceProd]);
   				Update3DTextLabelText(SBizzInfo[bouse-100][sbText],COLOR_BUYED,string4);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/bizkasse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäfft");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /bizkasse [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /bizkasse [Betrag]");
				return 1;
			}
			if (bouse >= 100)
			{
				if(cashdeposit > SBizzInfo[bouse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du hast nicht so viel Geld");
					return 1;
				}
			}
			else
			{
				if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du hast nicht so viel Geld");
					return 1;
				}
			}
			if (bouse >= 100)
			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäfft entfernt");
					return 1;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					SBizzInfo[bouse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "  Du hast $%d aus deiner Kasse genommen Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!IsPlayerInRangeOfPoint(playerid,100.0,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäfft entfernt");
					return 1;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					BizzInfo[bouse][bTill] -= cashdeposit;
					format(string, sizeof(string), "  Du hast $%d aus deiner Kasse genommen Total: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bizbank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäfft");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZER: /bizbank [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /bizbank [nutze]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du hast nicht so viel");
				return 1;
			}
			if (bouse >= 100)
			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäfft entfernt");
					return 1;
				}
				else
				{
					GivePlayerMoney(playerid,-cashdeposit);
					SBizzInfo[bouse-100][sbTill] += cashdeposit;
					ExtortionSBiz(bouse-100, cashdeposit);
					format(string, sizeof(string), "  Du hast $%d in die Kasse getan Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!IsPlayerInRangeOfPoint(playerid,100.0,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäfft entfernt");
					return 1;
				}
				else
				{
					GivePlayerMoney(playerid,-cashdeposit);
					BizzInfo[bouse][bTill] += cashdeposit;
					ExtortionBiz(bouse, cashdeposit);
					format(string, sizeof(string), "  Du hast $%d in die Kasse getan Total: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/heal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 255)
				{
					if(location < 255)
					{
						if(HouseInfo[location][hArm] == 1)
						{
							format(string, sizeof(string), "* %s legt die Schutzweste an.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							FreezePlayer(playerid);
							GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
							Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
							Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
							SetPlayerPos(playerid,1527.5,-12.1,1002.0);
							PlayerInfo[playerid][pLocal] = 255;
							SetPlayerInterior(playerid,99);
							Spectate[playerid] = 257;
						}
						else
						{
							format(string, sizeof(string), "Dieser Ort hat keine Upgrades.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						if(HouseInfo[location][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if ( tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Du wurdest wieder zu 100% geheilt.");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
							else
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"Du wurdest wieder zu 100% geheilt.");
							}
						}
						else
						{
							format(string, sizeof(string), "Dieser Ort ist nicht zum Healing Upgrade.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						return 1;
					}
					else if(location == 101)//Restaurant
					{
					    new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if ( tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Du wurdest wieder zu 100% geheilt.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						else
						{
							SendClientMessage(playerid, TEAM_GREEN_COLOR,"You are already healed to 100.");
						}
					}
					else if(location == 102 && IsACop(playerid))//Police Armoury
					{
					    SetPlayerHealth(playerid,100.0);
					    SetPlayerArmour(playerid,100.0);
					    format(string, sizeof(string), "* %s legt die Schutzweste an.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						FreezePlayer(playerid);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /heal [ID/NAME] [Preis]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /heal [ID/NAME] [Preis]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Behandlungspreis nicht weniger als: 1$ und höher als 3000$ !"); return 1; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dich leider nicht selber Heilen!");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new giveambu = GetPlayerVehicleID(giveplayerid);
					new playambu = GetPlayerVehicleID(playerid);
					if(gTeam[playerid] == TEAM_CYAN || PlayerInfo[playerid][pMember]== 4||PlayerInfo[playerid][pLeader] == 4 )//model
					{
						if (IsAnAmbulance(playambu) && playambu == giveambu)
						{
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= 160)
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"   Diese Person ist schon Geheilt.");
								return 1;
							}
							format(string, sizeof(string), "~y~Du heilst: ~n~~w~%s~n~~g~$%d", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							GivePlayerMoney(playerid,moneys);
							GivePlayerMoney(giveplayerid,-moneys);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk];
								hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Du wurdest für $%d geheilt.",moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
							if(STDPlayer[giveplayerid] > 0)
				            {
								STDPlayer[giveplayerid] = 0;
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Du bist nun nicht mehr an STD erkrankt. Die Ärzte konnten dich retten! !");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Nicht im Rettungswagen / Rettungshelikopter!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen !");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[ADMINADMIN]-----------------------------------------------
//----------------------------------[mole]-----------------------------------------------
	if(strcmp(cmd, "/mole", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /mole [mole text]");
				return 1;
			}
			format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",result);
			if (gTeam[playerid] < 3){SendClientMessage(playerid, COLOR_YELLOW, string);}
			SendEnemyMessage(COLOR_YELLOW, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(gTeam[i] >= 3 && gPlayerSpawned[i])
					{
						RingTone[i] =20;
					}
				}
			}
			printf("MOLE: %s", result);
		}
		return 1;
	}
//----------------------------------[HQ]-----------------------------------------------
	if(strcmp(cmd, "/hq", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /hq [hq text]");
				return 1;
			}
			format(string, sizeof(string), "HQ: %s, over", result);
			if (gTeam[playerid] != 2 ){SendClientMessage(playerid, COLOR_DBLUE, string);}
			SendTeamBeepMessage(2, COLOR_DBLUE, string);
			printf("HQ: %s", result);
		}
		return 1;
	}
//----------------------------------[RECON]-----------------------------------------------
	if(strcmp(cmd, "/bigears", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 2)
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Deine Ohren sind gewachsen");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "    Deine Ohren sind wieder geschrumpft");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /id [Spieler ID]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "Name: %s, ID: %d, Level: %d",giveplayer,target,PlayerInfo[target][pLevel]);
					SendClientMessage(playerid, COLOR_GRAD1, sstring);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/recon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pSupporter] > 0)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != 255 || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Aus", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Mit dem Befehl schaltest du den Fernseher aus [Einschalten mit /tv [ID]!");
				    return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pSupporter] > 0)
			{
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "Recon: (%d) %s $%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						else
						{
							format(string, sizeof(string), "UAV: (%d) %s",Spectate[playerid],giveplayer);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "Ziel ist nicht verfügbar.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du bist nicht befugt!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[UNCON]-----------------------------------------------

	if(strcmp(cmd, "/uncon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetCamBack(playerid);
		}
		return 1;
	}

//----------------------------------[AdminChat]-----------------------------------------------
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: (/a)dmin [admin chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				format(string, sizeof(string), "*%d Admin %s[%d]: %s", PlayerInfo[playerid][pAdmin], sendername, playerid, result);
			}
			else if(PlayerInfo[playerid][pSupporter] >= 1)
            {
				format(string, sizeof(string), "*%d Supporter %s[%d]: %s", PlayerInfo[playerid][pSupporter], sendername, playerid, result);
			}
			else if(PlayerInfo[playerid][pSupporter] == 6)
            {
				format(string, sizeof(string), "*%d Admin %s[%d]: %s", PlayerInfo[playerid][pSupporter], sendername, playerid, result);
			}

			else return 1;
			for(new i=0; i<GetMaxPlayers(); i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			        {
			            SendClientMessage(i,COLOR_YELLOW,string);
			        }
			    }
			}
			Log("OA-Chat.txt",string);
		}
		return 1;
	}
//-------------------------------[Logout]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logout", true) ==0 )
	{
        if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				PlayerUpdate(playerid);
				gPlayerLogged[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD1, "   Sicher ausgeloggt, du kannst das Spiel nun beenden.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " ** INFO: Das ist ein Adminbefehl, Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/logoutpl", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /logoutpl [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid)&&giveplayerid != INVALID_PLAYER_ID)
			    {
					PlayerUpdate(giveplayerid);
					gPlayerLogged[giveplayerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD1, "   Spieler ist ausgeloggt.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Diesen Befehl darfst du nicht benutzen!");
			}
		}
		return 1;
	}
//-------------------------------[Logoutall]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logoutall", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						PlayerUpdate(i);
						gPlayerLogged[i] = 0;
					}
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Alle Spieler wurden Ausgeloggt.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;
	}
//--------------------------------------------------------------------------------------
//----------------------------------[cnn]-----------------------------------------------
	if(strcmp(cmd, "/cnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /cnn [cnn textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
					return 1;
				}
				format(string, sizeof(string), "~b~%s: ~w~%s",sendername,result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						GameTextForPlayer(i, string, 5000, 6);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cnnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_RED, "Benutzung: /cnnn <type> ");
					return 1;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_RED, "Du kannst nicht 2 aussuchen");
					return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /cnnn <type> [cnnc textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
					return 1;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
						GameTextForPlayer(i, string, 5000, txtid);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
				return 1;
			}
		}
		return 1;
	}
//[ADMIN]______________________________________________________________________________
	if(strcmp(cmd, "/prison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /prison [Spieler ID / Name] [Zeit in Minuten]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(playa == playerid)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht dich selber einsperren!");
			    return 1;
			}
			if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playa][pAdmin])
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinen höherrangigen Admin einsperren!");
			    return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s eingesperrt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "* Du wurdest von Admin %s in den Knast gesteckt.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						ResetPlayerWeapons(playa);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 1;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 3);
						SetPlayerPos(playa, 197.8290,161.8141,1003.0300);
						format(string, sizeof(string), "Du wurdest für %d Minuten eingesperrt.  Kaution: Nein", money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/tod", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /tod [Zeit] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "Uhrzeit: %d Uhr.", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du darfst diesen Befehl nicht benutzen !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1337)
	        {
	            LottoTimer = 180;
	            OOCOff(COLOR_WHITE, "[Lotto]: Die Lotto Losziehung wurde automatisch gestartet!(3 Minuten)");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du bist nicht befugt !");
	            return 1;
	        }
	    }
		return 1;
	}
//-----------------------------------editstat---------------------------------------
	if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 SpawnHealth  |3 UpgradePoints  |4 Model ");
				SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount  |6 PhoneNumber  |7 RespektPunkte ");
				SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseKey  |9 BizKey  |10 PremiumAcc  |11 Fishskill");
				SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack  |17 Drug");
				SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Box  |20 Job  |21 Jobzeit  |22 HouseID  |23 BizzID |24 Fisch");
				SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
				SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: HouseID bzw BizzID auf 255 setzen");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 SpawnHealth  |3 UpgradePoints  |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount  |6 PhoneNumber  |7 RespektPunkte ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseKey  |9 BizKey  |10 PremiumAcc  |11 Fishskill");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack  |17 Drug");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Box  |20 Job  |21 Jobzeit  |22 HouseID  |23 BizzID |24 Fisch |25 Tanke");
						SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
						SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: HouseID bzw BizzID auf 255 setzen");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 SpawnHealth  |3 UpgradePoints  |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 BankAccount  |6 PhoneNumber  |7 RespektPunkte ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseID  |9 BizzID  |10 PremiumAcc  |11 Fishskill");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Box  |20 Job  |21 Jobzeit |24 Fisch |25 Tanke");
						SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
						SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: HouseID bzw BizzID auf 255 setzen");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= 1338)
					{
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf Level %d gesetzt", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf %d Spawnhealth gesetzt ", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf %d Upgrade Points gesetzt", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "Dem Spieler wurde das Model %d zugeordnet", amount);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pAccount] = amount;
								format(string, sizeof(string), "Das Bankkonto des Spielers wurde auf $%d gesetzt", amount);
								SperreLog(string);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "Die Handynummer des Spielers wurde auf %d gesetzt", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "Die Respektpunkte des Spielers wurden auf %d gesetzt", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPhousekey] = amount;
								format(string, sizeof(string), "Der Hausschlüssel des Spielers wurde auf %d gesetzt", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "Der Geschäftsschlüssel des Spielers wurde auf %d gesetzt", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "Der Premiumrang des Spielers wurde auf %d gesetzt", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFishSkill] = amount;
								format(string, sizeof(string), "Der Fischerskill wurde auf %d gesetzt", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "Der Dedektivskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "Der Anwaltsskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "Der Mechanikerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = amount;
								format(string, sizeof(string), "Der Reporterskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "Der Carjackerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "Der Drogendealerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSexSkill] = amount;
								format(string, sizeof(string), "Der Sexskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = amount;
								format(string, sizeof(string), "Der Boxerskill des Spielers wurde auf %d geändert", amount);
							}
							case 20:
							{
								PlayerInfo[giveplayerid][pJob] = amount;
								format(string, sizeof(string), "Der Job des Spielers wurde auf %d geändert", amount);
							}
							case 21:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "Die Jobzeit des Spielers wurde auf %d geändert", amount);
							}
							case 24:
							{
							    PlayerInfo[giveplayerid][pFishSkill] = amount;
							    format(string, sizeof(string), "Der Fischerskill des Spielers wurde auf %d gesetzt.", amount);
							}
							case 25:
							{
								PlayerInfo[giveplayerid][pPtankekey] = amount;
								format(string, sizeof(string), "Der Tankstellenschlüssel des Spielers ist jetzt %d.", amount);
							}
							default:
							{
								format(string, sizeof(string), "Ungültiger Statcode", amount);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
					}
				}//not valid id
			}//not connected
		}
		return 1;
	}
//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setint [interiorid]");
				return 1;
			}
			new intid;
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				SetPlayerInterior(playerid,intid);
				PlayerInfo[playerid][pInt] = intid;
				format(string, sizeof(string), "   Interiorid %d.", intid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}

	//-------------------------------------Setplayerint-----------------------------
	if(strcmp(cmd, "/setplayerint", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /setplayerint [playerid] [interiorid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new intid;
			tmp = strtok(cmdtext, idx);
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						PlayerInfo[playa][pInt] = intid;
						format(string, sizeof(string), " Du hast %s den interior auf %d gesetzt.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), " %s hat deinen Interior auf %d gesetzt.", sendername, intid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt diesen Befehl zu nutzen!");
			}
		}
		return 1;
	}

	//----------------------------------[SKYDIVE]------------------------------------------------
	/*if(strcmp(cmd, "/skydive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				GetPlayerPos(playerid, rx, ry, rz);
				if (IsPlayerConnected(playerid))
				{
					GivePlayerWeapon(playerid, 46, 0);
					SetPlayerPos(playerid,rx, ry, rz+1500);
					SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/fourdive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /fourdive [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				if (IsPlayerConnected(para1)){ GivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para2)) && (para2>0)) { GivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para3)) && (para3>0)) { GivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para4)) && (para4>0)) { GivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}*/
//----------------------------------[INVITE]------------------------------------------------
	/*if(strcmp(cmd, "/invite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /invite [playerid/Name]");
				return 1;
			}
			new para1;
			new ftext[24];
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {
					        if(PlayerInfo[playerid][pLeader] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Polizei LS"; ChosenSkin[para1] = 280; SetPlayerSkin(para1, 280); }
					        else if(PlayerInfo[playerid][pLeader] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Polizei SF"; ChosenSkin[para1] = 280; SetPlayerSkin(para1, 280); }
					        else if(PlayerInfo[playerid][pLeader] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Armee"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(PlayerInfo[playerid][pLeader] == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "Ambulance"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(PlayerInfo[playerid][pLeader] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 258; SetPlayerSkin(para1, 120); }
					        else if(PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Yakuza"; ChosenSkin[para1] = 294; SetPlayerSkin(para1, 294); }
					        else if(PlayerInfo[playerid][pLeader] == 7) { PlayerInfo[para1][pTeam] = 7; gTeam[para1] = 7; ftext = "Präsident"; ChosenSkin[para1] = 164; SetPlayerSkin(para1, 164); }
					        else if(PlayerInfo[playerid][pLeader] == 8) { PlayerInfo[para1][pTeam] = 8; gTeam[para1] = 8; ftext = "Hitman Agency"; ChosenSkin[para1] = 250; SetPlayerSkin(para1, 250); }
					        else if(PlayerInfo[playerid][pLeader] == 9) { PlayerInfo[para1][pTeam] = 9; gTeam[para1] = 9; ftext = "CNN"; ChosenSkin[para1] = 187; SetPlayerSkin(para1, 187); }
					        else if(PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 10; ftext = "Taxigesellschaft"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
					        else if(PlayerInfo[playerid][pLeader] == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Fahrlehrerorganisation"; ChosenSkin[para1] = 240; SetPlayerSkin(para1, 240); }
					        else if(PlayerInfo[playerid][pLeader] == 12) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Fuegos"; ChosenSkin[para1] = 247; SetPlayerSkin(para1, 247); }//Fuegos
					        else if(PlayerInfo[playerid][pLeader] == 13) { PlayerInfo[para1][pTeam] = 13; gTeam[para1] = 13; ftext = "Grove Family"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }//Grove
					        else if(PlayerInfo[playerid][pLeader] == 14) { PlayerInfo[para1][pTeam] = 14; gTeam[para1] = 14; ftext = "Ballas"; ChosenSkin[para1] = 102; SetPlayerSkin(para1, 102); }//Ballas
                            else if(PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Fast and Furios"; ChosenSkin[para1] = 185; SetPlayerSkin(para1, 185); }//Sf Biker Club
                            else if(PlayerInfo[playerid][pLeader] == 16) { PlayerInfo[para1][pTeam] = 16; gTeam[para1] = 16; ftext = "L.S.Vagos"; ChosenSkin[para1] = 108; SetPlayerSkin(para1, 108); }//Los Santos Vagos
					        else if(PlayerInfo[playerid][pLeader] == 17) { PlayerInfo[para1][pTeam] = 17; gTeam[para1] = 17; ftext = "V.L.Aztecas"; ChosenSkin[para1] = 114; SetPlayerSkin(para1, 114); }//Varios Los Aztecas
					        else if(PlayerInfo[playerid][pLeader] == 18) { PlayerInfo[para1][pTeam] = 18; gTeam[para1] = 18; ftext = "S.F.Rifa"; ChosenSkin[para1] = 173; SetPlayerSkin(para1, 173); }//San Fiero Rifa
					        else if(PlayerInfo[playerid][pLeader] == 19) { PlayerInfo[para1][pTeam] = 19; gTeam[para1] = 19; ftext = "W.C.Customs"; ChosenSkin[para1] = 234; SetPlayerSkin(para1, 234); }//West Coust Customs
					        else if(PlayerInfo[playerid][pLeader] == 20) { PlayerInfo[para1][pTeam] = 20; gTeam[para1] = 20; ftext = "Terror"; ChosenSkin[para1] = 221; SetPlayerSkin(para1, 221); }
					        else if(PlayerInfo[playerid][pLeader] == 21) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 286); }
					        else if(PlayerInfo[playerid][pLeader] == 22) { PlayerInfo[para1][pTeam] = 22; gTeam[para1] = 22; ftext = "Feuerwehr"; ChosenSkin[para1] = 277; SetPlayerSkin(para1, 277); }
					        else if(PlayerInfo[playerid][pLeader] == 23) { PlayerInfo[para1][pTeam] = 23; gTeam[para1] = 23; ftext = "Grundwehrdienst"; ChosenSkin[para1] = 133; SetPlayerSkin(para1, 133); }
							else if(PlayerInfo[playerid][pLeader] == 24) { PlayerInfo[para1][pTeam] = 24; gTeam[para1] = 24; ftext = "Ordnungsamt"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
							else { return 1; }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 1;
							printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer, ftext);
							format(string, sizeof(string), "   Du wurdest in die Fraktion %s von Leader %s eingeladen.", ftext, sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
							format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SetPlayerInterior(para1,0);
							new rand = random(sizeof(gInviteSpawns));
							SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
							SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
							SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							FreezePlayer(para1);
						    SelectChar[para1] = 255;
						    SelectCharID[para1] = PlayerInfo[para1][pMember];
						    SelectCharPlace[para1] = 1;
						    PlayerInfo[para1][pModel] = ChosenSkin[para1];
					    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Benutze 'next' um dir den Charakter auszusuchen den du gerne benutzen möchtest.");
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Wenn du den richtigen gefunden hast, gib 'done' ein.");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler ist in einer anderen Farktion oder bereits ein Fraktionsmitglied.");
						    return 1;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nur der Leader kann diesen Befehl nutzen!");
			}
		}
		return 1;
	}*/

	if(strcmp(cmd, "/invite", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /invite [playerid/Name]");
			return 1;
		}
		new leader = PlayerInfo[playerid][pLeader];
		new para1 = ReturnUser(tmp);
		if (PlayerInfo[playerid][pLeader] >= 1)
		{
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
				    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
				    {
						if(PlayerInfo[para1][pFrakSperre] == 0)
						{
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer,Fracs[leader-1]);
							format(string, sizeof(string), "   Du wurdest in die Fraktion %s von Leader %s eingeladen.",Fracs[leader-1], sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_GRAD2, " Um die Einladung anzunehmen: /einladung annehmen");
							//SendClientMessage(para1, COLOR_GRAD2, " Um die Einladung abzulehnen: /einladung ablehnen");
							format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,Fracs[leader-1]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_GRAD2, " Der Spieler muss nun deine Einladung annehmen oder ablehnen.");
							new iyear, imonth,iday;
							getdate(iyear, imonth, iday);
							format(string, sizeof(string), "%s[Level:%d] wurde von %s in die Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,Fracs[leader-1],imonth,iday,iyear);
							MemberLog(string);
							Eingeladen[para1] = leader;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat eine Fraktions-Sperre");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler ist in einer anderen Fraktion oder bereits ein Fraktionsmitglied.");
					    return 1;
					}
				}
			}//not connected
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   Nur der Leader kann diesen Befehl nutzen!");
		}
		return 1;
	}

	if(strcmp(cmd,"/einladung",true) == 0)
	{
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /einladung [annehmen/ablehnen]");
			return 1;
		}
		if(Eingeladen[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Du wurdest in keine Fraktion eingeladen!");
			return 1;
		}
		if(strcmp(tmp,"annehmen",true) == 0)
		{
		    if(Eingeladen[playerid] == 1) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
		    else if(Eingeladen[playerid] == 2) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
		    else if(Eingeladen[playerid] == 3) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
		    else if(Eingeladen[playerid] == 4) { PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
		    else if(Eingeladen[playerid] == 5) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 258; SetPlayerSkin(playerid, 120); }
		    else if(Eingeladen[playerid] == 6) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 294; SetPlayerSkin(playerid, 294); }
		    else if(Eingeladen[playerid] == 7) { PlayerInfo[playerid][pTeam] = 7; gTeam[playerid] = 7; ChosenSkin[playerid] = 164; SetPlayerSkin(playerid, 164); }
		    else if(Eingeladen[playerid] == 8) { PlayerInfo[playerid][pTeam] = 8; gTeam[playerid] = 8; ChosenSkin[playerid] = 250; SetPlayerSkin(playerid, 250); }
		    else if(Eingeladen[playerid] == 9) { PlayerInfo[playerid][pTeam] = 9; gTeam[playerid] = 9; ChosenSkin[playerid] = 187; SetPlayerSkin(playerid, 187); }
		    else if(Eingeladen[playerid] == 10) { PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
		    else if(Eingeladen[playerid] == 11) { PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; ChosenSkin[playerid] = 240; SetPlayerSkin(playerid, 240); }
		    else if(Eingeladen[playerid] == 12) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 118; SetPlayerSkin(playerid, 118); }//Fuegos
		    else if(Eingeladen[playerid] == 13) { PlayerInfo[playerid][pTeam] = 13; gTeam[playerid] = 13; ChosenSkin[playerid] = 105; SetPlayerSkin(playerid, 105); }//Grove
		    else if(Eingeladen[playerid] == 14) { PlayerInfo[playerid][pTeam] = 14; gTeam[playerid] = 14; ChosenSkin[playerid] = 102; SetPlayerSkin(playerid, 102); }//Ballas
		    else if(Eingeladen[playerid] == 15) { PlayerInfo[playerid][pTeam] = 15; gTeam[playerid] = 15; ChosenSkin[playerid] = 185; SetPlayerSkin(playerid, 185); }//Sf Biker Club
		    else if(Eingeladen[playerid] == 16) { PlayerInfo[playerid][pTeam] = 16; gTeam[playerid] = 16; ChosenSkin[playerid] = 108; SetPlayerSkin(playerid, 108); }//Los Santos Vagos
		    else if(Eingeladen[playerid] == 17) { PlayerInfo[playerid][pTeam] = 17; gTeam[playerid] = 17; ChosenSkin[playerid] = 114; SetPlayerSkin(playerid, 114); }//Varios Los Aztecas
		    else if(Eingeladen[playerid] == 18) { PlayerInfo[playerid][pTeam] = 18; gTeam[playerid] = 18; ChosenSkin[playerid] = 173; SetPlayerSkin(playerid, 173); }//Los Santos Rifa
		    else if(Eingeladen[playerid] == 19) { PlayerInfo[playerid][pTeam] = 19; gTeam[playerid] = 19; ChosenSkin[playerid] = 234; SetPlayerSkin(playerid, 234); }//West Coust Customs
		    else if(Eingeladen[playerid] == 20) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 20; ChosenSkin[playerid] = 220; SetPlayerSkin(playerid, 220); }
		    else if(Eingeladen[playerid] == 21) { PlayerInfo[playerid][pTeam] = 21; gTeam[playerid] = 21; ChosenSkin[playerid] = 28; SetPlayerSkin(playerid, 28); }             else if(Eingeladen[playerid] == 22) { PlayerInfo[playerid][pTeam] = 22; gTeam[playerid] = 22; ChosenSkin[playerid] = 274; SetPlayerSkin(playerid, 274); }
		    else if(Eingeladen[playerid] == 23) { PlayerInfo[playerid][pTeam] = 23; gTeam[playerid] = 23; ChosenSkin[playerid] = 133; SetPlayerSkin(playerid, 133); }
			else if(Eingeladen[playerid] == 24) { PlayerInfo[playerid][pTeam] = 24; gTeam[playerid] = 24; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
			else { return 1; }
			GetPlayerName(playerid,sendername,sizeof(sendername));
			PlayerInfo[playerid][pMember] = Eingeladen[playerid];
			PlayerInfo[playerid][pRank] = 1;
			format(string,sizeof(string)," %s hat die Einladung in die Fraktion %s angenommen!",sendername,Fracs[Eingeladen[playerid]-1]);
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pLeader] == Eingeladen[playerid])
				    {
				        SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    }
				}
			}
			SetPlayerInterior(playerid,0);
			new rand = random(sizeof(gInviteSpawns));
			SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
			SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
			SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
			FreezePlayer(playerid);
		    SelectChar[playerid] = 255;
		    Eingeladen[playerid] = 0;
		    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
		    SelectCharPlace[playerid] = 1;
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			SendClientMessage(playerid, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "* Benutze 'weiter' um dir den Charakter auszusuchen den du gerne benutzen möchtest.");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "* Wenn du den richtigen gefunden hast, gib 'fertig' ein.");
		}
		else if(strcmp(tmp,"ablehnen",true) == 0)
		{
			format(string,sizeof(string)," %s hat die Einladung in die Fraktion %s abgelehnt!",sendername,Fracs[Eingeladen[playerid]-1]);
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pLeader] == Eingeladen[playerid])
				    {
				        SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    }
				}
			}
			Eingeladen[playerid] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /einladung [annehmen/ablehnen]");
		}
	    return 1;
	}
//----------------------------------------[AFK-CMD]-------------------------------------
	if(strcmp("/afk",cmdtext,true) == 0)
	{
		if(PlayerCuffed[playerid] >= 1 || PlayerTied[playerid] >= 1)
		{
			SendClientMessage(playerid,COLOR_GREY,"Du kannst jetzt nicht AFK gehen!");
			return 1;
		}
		if(!M_Bot[playerid][PAFK])
		{
			SendClientMessage(playerid,0x33AA33AA,"In 10 Sekunden wirst du in den AFK-Modus gebracht!");
			KillTimer(M_Bot[playerid][PAFKTimer]);
			M_Bot[playerid][PAFKTimer] = SetTimerEx("AFKOn",10000,0,"i",playerid);
			Create3DTextLabel("*Dieser Spieler ist AFK*",COLOR_YELLOW,30.0,40.0,50.0,40.0,0);

		}
		else SendClientMessage(playerid,0xAA3333AA,"Du bist schon AFK!");
		return 1;
	}
//----------------------------------[UNINVITE]------------------------------------------------
	if(strcmp(cmd, "/uninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /uninvite [Spieler ID / Name]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0 && PlayerInfo[para1][pMember] == PlayerInfo[playerid][pLeader])
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("AdmCmd: %s hat %s rausgeschmissen.", sendername, giveplayer);
							format(string, sizeof(string), "* Du wurdest aus deiner Fraktion %s vom Leader %s gekickt.",Fracs[PlayerInfo[para1][pMember]-1],sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Du bist nun wieder ein Zivilist.");
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Dein Gehalt wurde wieder auf 0$ gesetzt.");
							PlayerInfo[para1][pGehalt] = 0;
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 0;
							new rand = random(sizeof(CIV));
							SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
							PlayerInfo[para1][pModel] = CIV[rand];
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
							format(string, sizeof(string), "   Du hast %s aus der Fraktion gekickt.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "  Du kannst nur die Member deiner Fraktion uninviten!");
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nur der Leader kann diesen Befehl nutzen!");
			}
		}
		return 1;
	}
//----------------------------------[AINVITE]------------------------------------------------
	if(strcmp(cmd, "/ainvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ainvite [Spieler ID / Name] [FraktionsNummer]");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr, 4 Medic, 5 LCN, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 9 CNN, 10 Taxi Company, 11 Fahrlehrer, 12 Cripz, 13 Gs, 14 Ballas, 15 Ls Biker Club, 16 Vagos");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 17 Aztecas, 18 Rifas, 19 Wcc, 20 Terror, 22 SWAT, 23 Russkaja Bratwa, 24 O-Amt");
				return 1;
			}
			new para1, fraktion, ftext[20];
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ainvite [Spieler ID / Name] [FraktionsNummer]");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr, 4 Medic, 5 LCN, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 9 CNN, 10 Taxi Company, 11 Fahrlehrer, 12 Cripz, 13 Gs, 14 Ballas, 15 Ls Biker Club, 16 Vagos");
				SendClientMessage(playerid, COLOR_GRAD2, "Fraktionen: 17 Aztecas, 18 Rifas, 19 Wcc, 20 Terror, 22 SWAT, 23 Russkaja Bratwa, 24 O-Amt");
				return 1;
			}
			fraktion = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (gTeam[para1] == TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {
					        if(fraktion == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 280; SetPlayerSkin(para1, 280); }
					        else if(fraktion == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 280; SetPlayerSkin(para1, 280); }
					        else if(fraktion == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "National Guard"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(fraktion == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "Firemen/Ambulance"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(fraktion == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 258; SetPlayerSkin(para1, 120); }
					        else if(fraktion == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Yakuza"; ChosenSkin[para1] = 294; SetPlayerSkin(para1, 294); }
					        else if(fraktion == 7) { PlayerInfo[para1][pTeam] = 7; gTeam[para1] = 7; ftext = "Bodyguards"; ChosenSkin[para1] = 164; SetPlayerSkin(para1, 164); }
					        else if(fraktion == 8) { PlayerInfo[para1][pTeam] = 8; gTeam[para1] = 8; ftext = "Hitman Agency"; ChosenSkin[para1] = 250; SetPlayerSkin(para1, 250); }
					        else if(fraktion == 9) { PlayerInfo[para1][pTeam] = 9; gTeam[para1] = 9; ftext = "CNN Studio"; ChosenSkin[para1] = 187; SetPlayerSkin(para1, 187); }
					        else if(fraktion == 10) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 10; ftext = "Taxi Cab Company"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
					        else if(fraktion == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "School Instructors"; ChosenSkin[para1] = 240; SetPlayerSkin(para1, 240); }
					        else if(fraktion == 12) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Fuegos"; ChosenSkin[para1] = 118; SetPlayerSkin(para1, 118); }//Fuegos
					        else if(fraktion == 13) { PlayerInfo[para1][pTeam] = 13; gTeam[para1] = 13; ftext = "Grove Street Family"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }//Grove Street
					        else if(fraktion == 14) { PlayerInfo[para1][pTeam] = 14; gTeam[para1] = 14; ftext = "Ballas"; ChosenSkin[para1] = 102; SetPlayerSkin(para1, 102); }//Ballas
                            else if(fraktion == 15) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Sf Biker Club"; ChosenSkin[para1] = 185; SetPlayerSkin(para1, 185); }//Sf Biker Club
                            else if(fraktion == 16) { PlayerInfo[para1][pTeam] = 16; gTeam[para1] = 16; ftext = "L.S.Vagos"; ChosenSkin[para1] = 108; SetPlayerSkin(para1, 108); }//Los Santos Vagos
					        else if(fraktion == 17) { PlayerInfo[para1][pTeam] = 17; gTeam[para1] = 17; ftext = "V.L.Aztecas"; ChosenSkin[para1] = 114; SetPlayerSkin(para1, 114); }//Varios Los Aztecas
					        else if(fraktion == 18) { PlayerInfo[para1][pTeam] = 18; gTeam[para1] = 18; ftext = "L.S.Rifa"; ChosenSkin[para1] = 173; SetPlayerSkin(para1, 173); }//Los Santos Rifa
					        else if(fraktion == 19) { PlayerInfo[para1][pTeam] = 19; gTeam[para1] = 19; ftext = "W.C.Customs"; ChosenSkin[para1] = 66; SetPlayerSkin(para1, 66); }//West Coust Customs
					        else if(fraktion == 20) { PlayerInfo[para1][pTeam] = 20; gTeam[para1] = 20; ftext = "Terror"; ChosenSkin[para1] = 220; SetPlayerSkin(para1, 220); }
					        else if(fraktion == 21) { PlayerInfo[para1][pTeam] = 21; gTeam[para1] = 21; ftext = "Wheelmen Agency"; ChosenSkin[para1] = 28; SetPlayerSkin(para1, 28); }
					        else if(fraktion == 22) { PlayerInfo[para1][pTeam] = 22; gTeam[para1] = 22; ftext = "S.W.A.T Elite Troop"; ChosenSkin[para1] = 285; SetPlayerSkin(para1, 285); }
					        else if(fraktion == 23) { PlayerInfo[para1][pTeam] = 23; gTeam[para1] = 23; ftext = "Russkaja Bratwa"; ChosenSkin[para1] = 133; SetPlayerSkin(para1, 133); }
							else if(fraktion == 24) { PlayerInfo[para1][pTeam] = 24; gTeam[para1] = 24; ftext = "Ordnungsamt"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
							else
							{
								SendClientMessage(playerid, COLOR_GRAD2, " FraktionsNummer ungültig! 1-24");
								return 1;
							}
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = fraktion;
							PlayerInfo[para1][pRank] = 1;
							printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer, ftext);
							format(string, sizeof(string), " Du wurdest in die Fraktion %s von Admin %s eingeladen.", ftext, sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
							format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SetPlayerInterior(para1,0);
							new rand = random(sizeof(gInviteSpawns));
							SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
							SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
							SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
							FreezePlayer(para1);
						    SelectChar[para1] = 255;
						    SelectCharID[para1] = PlayerInfo[para1][pMember];
						    SelectCharPlace[para1] = 1;
						    PlayerInfo[para1][pModel] = ChosenSkin[para1];
					    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Benutze 'weiter' um dir den Charakter auszusuchen den du gerne benutzen möchtest.");
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Wenn du den richtigen gefunden hast gib 'fertig' ein.");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat zur Zeit ein Wanted / ist in einer anderen Fraktion / oder bereits ein Fraktionsmitglied.");
						    return 1;
						}
					}
				}//not connected
			}//not admin
		}
		return 1;
	}
//----------------------------------[AUNINVITE]------------------------------------------------
	if(strcmp(cmd, "/auninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /auninvite [playerid/Name]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
		    if(IsPlayerConnected(para1) && para1 != INVALID_PLAYER_ID)
		    {
			    if (PlayerInfo[para1][pMember] > 0)
			    {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					printf("AdmCmd: %s has uninvited %s.", sendername, giveplayer);
					format(string, sizeof(string), "* Du wurdest aus deiner Fraktion von Admin %s gekickt.", sendername);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					SendClientMessage(para1, COLOR_LIGHTBLUE, "* Du bist nun wieder ein Zivilist.");
	                gTeam[para1] = 3;
					PlayerInfo[para1][pTeam] = 3;
					PlayerInfo[para1][pMember] = 0;
					PlayerInfo[para1][pRank] = 0;
					PlayerInfo[para1][pChar] = 0;
					PlayerInfo[para1][pGehalt] = 0;
					new rand = random(sizeof(CIV));
					SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
					PlayerInfo[para1][pModel] = CIV[rand];
					MedicBill[para1] = 0;
					SpawnPlayer(para1);
					format(string, sizeof(string), "   Du hast %s aus seiner Fraktion gekickt.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "  Spieler ist in keiner Fraktion!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Spieler ist nicht verfügbar!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/makeadmin", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] == 2002 || IsPlayerAdmin(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeadmin [ID] [Level]");
				return 1;
			}
			new para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			new level = strval(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[para1][pAdmin] < level)
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin befördert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin befördert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin befördert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin degradiert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin degradiert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin degradiert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					PlayerInfo[para1][pAdmin] = level;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Das vergeben von Admin rängen ist nur xRage erlaubt!");
			SendClientMessage(playerid, COLOR_RED, "Lass es lieber, den mann kann es in der Server Log lesen.");
		}
		return 1;
	}
	if(strcmp(cmd, "/makesupp", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2002 || IsPlayerAdmin(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makesupp [ID] [Level]");
				return 1;
			}
			new para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			new level = strval(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pSupporter] = level;
					printf("AdmCmd: %s hat %s zu einem Level %d Supporter befördert.", sendername, giveplayer, level);
					format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Supporter befördert", sendername, level);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "Du hast %s zu einem Level %d Supporter befördert.", giveplayer,level);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt diesen Befehl zu nutzen! ");
		}
		return 1;
	}
//----------------------------------[MAKEIRCADMIN]----------------------------------------------
    if(strcmp(cmd, "/makeircadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeircadmin [playerid] [ChannelNr]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /makeircadmin [playerid] [ChannelNr]");
				return 1;
			}
			new channel = strval(tmp);
			if(channel > 10 || channel < 0) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 0, oder mehr als 10!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s zum IRC Admin über Channel %d gemacht.", giveplayer, channel);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat dich zum IRC Admin über channel %d gemacht.", sendername, channel);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s", giveplayer);
						switch(channel)
						{
						    case 1:
						    {
						        strmid(IRCInfo[0][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[0][iNeedPass] = 0; IRCInfo[0][iLock] = 0;
						    }
						    case 2:
						    {
						        strmid(IRCInfo[1][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[1][iNeedPass] = 0; IRCInfo[1][iLock] = 0;
						    }
						    case 3:
						    {
						        strmid(IRCInfo[2][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[2][iNeedPass] = 0; IRCInfo[2][iLock] = 0;
						    }
						    case 4:
						    {
						        strmid(IRCInfo[3][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[3][iNeedPass] = 0; IRCInfo[3][iLock] = 0;
						    }
						    case 5:
						    {
						        strmid(IRCInfo[4][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[4][iNeedPass] = 0; IRCInfo[4][iLock] = 0;
						    }
						    case 6:
						    {
						        strmid(IRCInfo[5][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[5][iNeedPass] = 0; IRCInfo[5][iLock] = 0;
						    }
						    case 7:
						    {
						        strmid(IRCInfo[6][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[6][iNeedPass] = 0; IRCInfo[6][iLock] = 0;
						    }
						    case 8:
						    {
						        strmid(IRCInfo[7][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[7][iNeedPass] = 0; IRCInfo[7][iLock] = 0;
						    }
						    case 9:
						    {
						        strmid(IRCInfo[8][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[8][iNeedPass] = 0; IRCInfo[8][iLock] = 0;
						    }
						    case 10:
						    {
						        strmid(IRCInfo[9][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[9][iNeedPass] = 0; IRCInfo[9][iLock] = 0;
						    }
						}
						SaveIRC();
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht befugt !");
			    return 1;
			}
		}
		return 1;
	}
//----------------------------------[MAKELEADER]------------------------------------------------
	if(strcmp(cmd, "/makeleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Dazu bist du nicht befugt!");
	            return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Benutze: /makeleader [playerid/Name] [Nummer(1-24)]");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr, 4 Medic, 5 LCN, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 9 CNN, 10 Taxi Company, 11 Fahrlehrer, 12 Fuegos, 13 Gs, 14 Ballas, 15 SF Biker Club, 16 Vagos");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 17 Aztecas, 18 Rifas, 19 RS, 20 Terror, 21 Wheelmen, 22 S.W.A.T Elite Troop, 23 Brigada, 24 O-Amt");
				return 1;
			}
			new para1;
		 	new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 24 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "   Geh nicht tiefer als Nummer 0, oder höher als Nummer 24!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Dieser Player ist bereits/noch in einer Fraktion!");
			                return 1;
			            }
			            if(PlayerInfo[para1][pFrakSperre] > 0)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler hat FraktionsSperre!");
			                return 1;
			            }
			            new ftext[32];
			            if(level == 0) { ftext = "Zivilisten"; } else { ftext = Fracs[(level-1)]; }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "   Du hast %s die Leaderrechte der Fraktion %s gegeben.", giveplayer,ftext);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   Admin %s hat dich zum Leader von der Fraktion %s ernannt.", sendername,ftext);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						SendClientMessage(para1, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
						SendClientMessage(para1, COLOR_GRAD5, " Vergiss nicht: Du hast nun 4 Wochen Pflicht Leader in dieser Fraktion zu bleiben!");
						SendClientMessage(para1, COLOR_GRAD5, " Wenn du vor Ablauf der Frist rausgeworfen wirst, musst du die Rest der Zeit Zivilist bleiben.");
						gTeam[para1] = 0;
					    PlayerInfo[para1][pTeam] = 0;
					    PlayerInfo[para1][pRank] = 6;
					    PlayerInfo[para1][pLeader] = level;
					    PlayerInfo[para1][pGehalt] = 0;
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(string, sizeof(string), "%s[Level:%d] wurde von %s Als Leader der Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,ftext,imonth,iday,iyear);
						LeaderLog(string);
						if(level == 0)
						{
		                	gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 0;
							new rand = random(sizeof(CIV));
							SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
							PlayerInfo[para1][pModel] = CIV[rand];
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
						}
						else if(level == 1) { PlayerInfo[para1][pChar] = 283; gTeam[para1] = 2; PlayerInfo[para1][pTeam] = 2; } // LOS SANTOS POLICE
						else if(level == 2) { PlayerInfo[para1][pChar] = 165; gTeam[para1] = 2; PlayerInfo[para1][pTeam] = 2; } // SAN FIERRO POLICE
						else if(level == 3) { PlayerInfo[para1][pChar] = 287; gTeam[para1] = 2; PlayerInfo[para1][pTeam] = 2; } // Bundeswehr
						else if(level == 4) { PlayerInfo[para1][pChar] = 275; gTeam[para1] = 4; PlayerInfo[para1][pTeam] = 4; } // Medic
						else if(level == 5) { PlayerInfo[para1][pChar] = 113; } // La Cosa Nostra
						else if(level == 6) { PlayerInfo[para1][pChar] = 120; } // Yakuza
						else if(level == 7) { PlayerInfo[para1][pChar] = 295; } // Mayor
						else if(level == 8) { PlayerInfo[para1][pChar] = 294; } // Hitmans
						else if(level == 9) { PlayerInfo[para1][pChar] = 187; } // CNN
						else if(level == 10) { PlayerInfo[para1][pChar] = 189; } // Taxi Cab Company
						else if(level == 11) { PlayerInfo[para1][pChar] = 240; } // Fahrschule
						else if(level == 12) { PlayerInfo[para1][pChar] = 120; } // Fuegos
						else if(level == 13) { PlayerInfo[para1][pChar] = 269; } // Grove Street
						else if(level == 14) { PlayerInfo[para1][pChar] = 103; } // Ballas
                        else if(level == 15) { PlayerInfo[para1][pChar] = 247; } // Sf Biker Club
                        else if(level == 16) { PlayerInfo[para1][pChar] = 110; } // Los Santos Vagos
						else if(level == 17) { PlayerInfo[para1][pChar] = 115; } // Varios Los Aztecas
						else if(level == 18) { PlayerInfo[para1][pChar] = 173; } // Los Santos Rifa
						else if(level == 19) { PlayerInfo[para1][pChar] = 19; } // Red Soldiers
						else if(level == 20) { PlayerInfo[para1][pChar] = 220; } // Terroristen
						else if(level == 21) { PlayerInfo[para1][pChar] = 47; }  //Wheelmen
						else if(level == 22) { PlayerInfo[para1][pChar] = 285; } // S.W.A.T Elite Troop
						else if(level == 23) { PlayerInfo[para1][pChar] = 127; } // russenmafia
					    else if(level == 24) { PlayerInfo[para1][pChar] = 71; } // Ordnungsamt
					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   ** INFO: Das ist ein Adminbefehl, Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /forceskin [playerid]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMember] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist in keiner Fraktion oder Familie !");
				            return 1;
				        }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du wurdest von Admin %s gezwungen deinen Skin zu wechseln.", sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast %s gezwungen den Skin zu wechseln.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						if(PlayerInfo[para1][pMember] == 1) { PlayerInfo[para1][pTeam] = 5; ChosenSkin[para1] = 59; }
				        else if(PlayerInfo[para1][pMember] == 2) { PlayerInfo[para1][pTeam] = 6; ChosenSkin[para1] = 121; }
				        else if(PlayerInfo[para1][pMember] == 3) { PlayerInfo[para1][pTeam] = 7; ChosenSkin[para1] = 98; }
				        else if(PlayerInfo[para1][pMember] == 4) { PlayerInfo[para1][pTeam] = 8; ChosenSkin[para1] = 46; }
				        else if(PlayerInfo[para1][pMember] == 5) { PlayerInfo[para1][pTeam] = 9; ChosenSkin[para1] = 174; }
				        else if(PlayerInfo[para1][pMember] == 6) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 280; }
				        else if(PlayerInfo[para1][pMember] == 7) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 164; }
				        else if(PlayerInfo[para1][pMember] == 8) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 186; }
				        else { return 1; }
                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						FreezePlayer(para1);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMember];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pModel] = ChosenSkin[para1];
				    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Tipp 'weiter' um einen anderen Skin zu wählen.");
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Wenn du den Richtigen gefunden hast, tipp 'fertig'.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[Blacklist für Mafien Rs ,Russenmafia,LCN,Yakuza]------------------------------------------------
    if(strcmp(cmd, "/clearblacklist", true) == 0  || strcmp(cmd, "/clearbl", true) == 0)
    {
        new mafid = GetPlayerMafia(playerid);
        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 ||PlayerInfo[playerid][pLeader] == 12|| PlayerInfo[playerid][pLeader] == 13 ||PlayerInfo[playerid][pLeader] == 14|| PlayerInfo[playerid][pLeader] == 15 ||PlayerInfo[playerid][pLeader] == 16|| PlayerInfo[playerid][pLeader] == 17 ||PlayerInfo[playerid][pLeader] == 18||PlayerInfo[playerid][pLeader] == 19||PlayerInfo[playerid][pLeader] == 23)
        {
            strmid(Blacklist[mafid][user10],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user9],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user8],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user7],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user6],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user5],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user4],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user3],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user2],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user1],"Niemand",0,strlen("Niemand"),255);
            SendClientMessage(playerid,COLOR_YELLOW,"Blacklist gecleart");
        }
    }
    if(strcmp(cmd, "/setblacklist", true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /setblacklist [id]");
            return 1;
        }
        new blid = strval(tmp);
        if(IsPlayerConnected(blid))
        {
            if(IsPlayerNPC(blid))
			{
            	SendClientMessage(playerid, COLOR_GREY, "   Du kannst kein Auftrag auf ein Bot geben");
       	 		return 1;
       		}
            new mafid = GetPlayerMafia(playerid);
            new plName[MAX_PLAYER_NAME];
            new sendName[MAX_PLAYER_NAME];
            GetPlayerName(playerid,sendName,sizeof(sendName));
            GetPlayerName(blid,plName,sizeof(plName));
            strmid(Blacklist[mafid][user10],Blacklist[mafid][user9],0,strlen(Blacklist[mafid][user9]),255);
            strmid(Blacklist[mafid][user9],Blacklist[mafid][user8],0,strlen(Blacklist[mafid][user8]),255);
            strmid(Blacklist[mafid][user8],Blacklist[mafid][user7],0,strlen(Blacklist[mafid][user7]),255);
            strmid(Blacklist[mafid][user7],Blacklist[mafid][user6],0,strlen(Blacklist[mafid][user6]),255);
            strmid(Blacklist[mafid][user6],Blacklist[mafid][user5],0,strlen(Blacklist[mafid][user5]),255);
            strmid(Blacklist[mafid][user5],Blacklist[mafid][user4],0,strlen(Blacklist[mafid][user4]),255);
            strmid(Blacklist[mafid][user4],Blacklist[mafid][user3],0,strlen(Blacklist[mafid][user3]),255);
            strmid(Blacklist[mafid][user3],Blacklist[mafid][user2],0,strlen(Blacklist[mafid][user2]),255);
            strmid(Blacklist[mafid][user2],Blacklist[mafid][user1],0,strlen(Blacklist[mafid][user1]),255);
            strmid(Blacklist[mafid][user1],plName,0,strlen(plName),255);
            IsBlacklist[blid] = 1;
            if(mafid==1)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(5,COLOR_RED,famstr);
            }
            else if(mafid==2)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(6,COLOR_RED,famstr);
            }
            else if(mafid==3)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(16,COLOR_RED,famstr);
            }
            else if(mafid==4)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==5)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==6)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==7)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==8)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==9)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==10)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==11)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            return 1;
        }
        else return SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht Online!");
    }

    if(strcmp(cmd, "/blacklist", true) == 0)
    {
        new mafid = GetPlayerMafia(playerid);
        if(mafid==1||mafid==2||mafid==3||mafid==4||mafid==5||mafid==6||mafid==7||mafid==8||mafid==9||mafid==10||mafid==11)
        {
        new blstr[256];
        SendClientMessage(playerid,COLOR_GREEN,"-----Blacklist-----");
        format(blstr,sizeof(blstr),"1. %s",Blacklist[mafid][user1]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"2. %s",Blacklist[mafid][user2]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"3. %s",Blacklist[mafid][user3]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"4. %s",Blacklist[mafid][user4]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"5. %s",Blacklist[mafid][user5]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"6. %s",Blacklist[mafid][user6]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"7. %s",Blacklist[mafid][user7]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"8. %s",Blacklist[mafid][user8]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"9. %s",Blacklist[mafid][user9]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"10. %s",Blacklist[mafid][user10]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        }
        else return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Gang oder Mafia Mitglied!");
    }

//----------------------------------[GIVERANK]------------------------------------------------
	if(strcmp(cmd, "/giverank", true) == 0 || strcmp(cmd, "/giverang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /giverang [playerid] [Rang(1-6)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 12 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Ränge gehen nur von 1 bis 12!"); return 1; }
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pMember] && PlayerInfo[playerid][pAdmin] <= 4)
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
			            else if(PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pLeader])
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
			            else if(PlayerInfo[playerid][pAdmin] >= 1337)
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht der Leader des Spielers!");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen(Nur Leader)!");
			}
		}
		return 1;
	}
//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/setteam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setteam [playerid] [team 1(civ) - 2(cop)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						//SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("AdmCmd: %s hat %s in Team %d geswitscht.", sendername, giveplayer, level);
						format(string, sizeof(string), "   Du wurdest zum Team %d geswitcht Von %s", level, sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   Du hast %s zu Team %d geswitcht.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!!");
			}
		}
		return 1;
	}
//========== VIRTUELLE WELT ===========//
	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 1330)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
	        return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /setvw [Virtuelle Welt]");
		    return 1;
		}
		new vw;
  		vw = strval(tmp);
  		SetPlayerVirtualWorld(playerid, vw);
  		format(string, sizeof(string), "Neue Virtuelle Welt: %d", vw);
  		SendClientMessage(playerid, COLOR_GREEN, string);
  		return 1;
	}
	if(strcmp(cmd, "/setplayervw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /setplayervw [Spieler ID / Name] [Virtuelle Welt]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new vw;
			tmp = strtok(cmdtext, idx);
			vw = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1330)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, vw);
						format(string, sizeof(string), " Du hast %s's Virtuelle Welt auf %d gesetzt.", giveplayer, vw);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), " %s hat deine Virtuelle Welt auf %d gesetzt.", sendername, vw);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
			}
		}
		return 1;
	}
//========== VIRTUELLE WELT ===========//
	if(strcmp(cmd,"/spawn",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /spawn [playerid]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						SetPlayerSpawn(para1);
						SendClientMessage(playerid, COLOR_GREEN, "Spieler erfolgreich gespawnt!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!!");
			}
		}
		return 1;
	}
//----------------------------------[GOTO]-----------------------------------------------
	if(strcmp(cmd, "/gotons", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1146.4182,-1490.3602,15.4217);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1146.4182,-1490.3602,15.4217);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich zum Zivispawn geportet.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/gotosh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.0354,-1775.1642,33.4297);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1529.0354,-1775.1642,33.4297);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich zur Stadthalle geportet.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotopdh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1515.5270,-1674.5002,29.6489);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1515.5270,-1674.5002,29.6489);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotopdh2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1515.3579,-1649.8158,37.4395);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1515.3579,-1649.8158,37.4395);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich Teleportiert.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}
//=============HITMAN MASKE ANFANG=======================
    if(strcmp(cmd,"/hmaske",true)==0)
    {
	    if(IsPlayerConnected(playerid))
	    {
	  		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	    	{

    			for (new i = 0, j = MAX_PLAYERS; i < j; i ++)
    			{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			//	OnPlayerCommandText(playerid,string
				}
				SendClientMessage(playerid, COLOR_RED,"Du hast deine Maske angezogen! (/maskeaus um sie auszuziehen)");
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/maskeaus",true)==0)
    {
		if(IsPlayerConnected(playerid))
		{
	  		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	    	{

   				for (new i = 0, j = MAX_PLAYERS; i < j; i ++)
    			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			//	OnPlayerCommandText(playerid,string);
				}
				SendClientMessage(playerid, COLOR_RED,"Du hast deine Maske ausgezogen!");
        	}
   		}
   		return 1;
	}
//================HITMAN MASKE ENDE====================
    if(strcmp(cmd, "/armor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,1102.1628,-1263.3516,21.5469)||IsPlayerInRangeOfPoint(playerid,3.0,1102.1628,-1263.3516,21.5469))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am Ballas armor Point!");
	        }
        }
		return 1;
	}
    //================HITMAN MASKE ENDE====================
    if(strcmp(cmd, "/armor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
           // if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2819.0176,-1172.2887,1025.5703)||IsPlayerInRangeOfPoint(playerid,3.0,2819.0176,-1172.2887,1025.5703))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
				    SetPlayerInterior(playerid,8);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===========================================FRAKTION ARMOR=============================
    if(strcmp(cmd, "/lcnarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,1647.7377,-1813.4070,13.5343)||IsPlayerInRangeOfPoint(playerid,3.0,1647.7377,-1813.4070,13.5343))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//=====================================
    if(strcmp(cmd, "/yakiarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,-2717.9670,-317.2987,7.8438)||IsPlayerInRangeOfPoint(playerid,3.0,-2717.9670,-317.2987,7.8438))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/hitmanarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2149.6931,-1808.4832,16.1440)||IsPlayerInRangeOfPoint(playerid,3.0,2149.6931,-1808.4832,16.1440))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/fuegosarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,-2115.0789,-178.0732,35.3203)||IsPlayerInRangeOfPoint(playerid,3.0,-2115.0789,-178.0732,35.3203))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/gsfarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2497.9807,-1687.7264,13.5108)||IsPlayerInRangeOfPoint(playerid,3.0,2497.9807,-1687.7264,13.5108))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/bikearmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,-2032.3395,164.5288,28.8359)||IsPlayerInRangeOfPoint(playerid,3.0,-2032.3395,164.5288,28.8359))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/vagosarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2536.5503,-1060.8982,69.5679)||IsPlayerInRangeOfPoint(playerid,3.0,2536.5503,-1060.8982,69.5679))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/atzearmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2786.1611,-1930.1277,13.5469)||IsPlayerInRangeOfPoint(playerid,3.0,2786.1611,-1930.1277,13.5469))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/rifaarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2176.9104,-2257.9685,14.7734)||IsPlayerInRangeOfPoint(playerid,3.0,2176.9104,-2257.9685,14.7734))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/mostwantarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,1269.8015,-1641.0773,27.3750)||IsPlayerInRangeOfPoint(playerid,3.0,1269.8015,-1641.0773,27.3750))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/terarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,-314.3889,1766.8217,43.6406)||IsPlayerInRangeOfPoint(playerid,3.0,-314.3889,1766.8217,43.6406))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    if(strcmp(cmd, "/brigarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,2513.9211,-2120.2246,13.5469)||IsPlayerInRangeOfPoint(playerid,3.0,2513.9211,-2120.2246,13.5469))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Poin!");
	        }
        }
		return 1;
	}
//===================================
    /*if(strcmp(cmd, "/whearmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
            if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
		    if (IsPlayerInRangeOfPoint(playerid,3.0,-510.2045,-505.2142,25.5234)||IsPlayerInRangeOfPoint(playerid,3.0,-510.2045,-505.2142,25.5234))
			{
				if(GetPlayerMoney(playerid) >= 0)
				{
				//	SetPlayerHealth(playerid,160.0);
				    SetPlayerArmour(playerid,100.0);
					SendClientMessage(playerid,RED,"Du hast dir Armor geholt!");
					GameTextForPlayer(playerid,"Du hast 100 armor bekommen!",5000,5);
					GivePlayerMoney(playerid, -0);
				}
				else
					{
					  //  SendClientMessage(playerid,RED,"Nicht genug Geld zum Pushen! 100000$!");
					}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht am armor Point!");
	        }
        }
		return 1;
	}*/
//
//============================================DONATOR SYS===============================
	/*
	if(strcmp(cmd, "/giveDonator1", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /giveDonator [playerid/SpielerName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Donator-Rang1 gegeben *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir deinen Donator Rang1 gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Herzlichen glückwunsch! Du hast nun einen Donator-Rang! Siehe unter /donatorhelp zu sehen was er dir für Vorteile bringt.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    GivePlayerMoney(giveplayerid, 50000); // 50k
					    PlayerInfo[giveplayerid][pExp] += 3 ; // 3 RP
					    PlayerInfo[giveplayerid][pDonateRank] = 1; // Premium Rang
						new admwarnung[256];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s den Donator-Rang gegeben! (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, " Das kann nur der Rang-Vergeber (Admin 2000)!");
			    return 1;
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/giveDonator2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /giveDonator [playerid/SpielerName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Donator-Rang2 gegeben *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir deinen Donator Rang2 gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Herzlichen glückwunsch! Du hast nun einen Donator-Rang! Siehe unter /donatorhelp zu sehen was er dir für Vorteile bringt.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    GivePlayerMoney(giveplayerid, 100000); // 100k
					    PlayerInfo[giveplayerid][pExp] += 6 ; // 6 RP
					    PlayerInfo[giveplayerid][pDonateRank] = 2; // Premium Rang
						new admwarnung[256];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s den Donator-Rang gegeben! (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, " Das kann nur der Rang-Vergeber (Admin 2000)!");
			    return 1;
   			}
		}
		return 1;
	}
		if(strcmp(cmd, "/giveDonator3", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /giveDonator [playerid/SpielerName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Donator-Rang3 gegeben *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir deinen Donator Rang3 gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Herzlichen glückwunsch! Du hast nun einen Donator-Rang! Siehe unter /donatorhelp zu sehen was er dir für Vorteile bringt.",sendername);
				       GivePlayerMoney(giveplayerid, 150000); // 150k
					    PlayerInfo[giveplayerid][pExp] += 9 ; // 9 RP
					    PlayerInfo[giveplayerid][pDonateRank] = 3; // Premium Rang
						new admwarnung[256];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s den Donator-Rang gegeben! (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, " Das kann nur der Rang-Vergeber (Admin 2000)!");
			    return 1;
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/giveDonator4", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /giveDonator [playerid/SpielerName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s den Donator-Rang4 gegeben *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir deinen Donator Rang4 gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Herzlichen glückwunsch! Du hast nun einen Donator-Rang! Siehe unter /donatorhelp zu sehen was er dir für Vorteile bringt.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    GivePlayerMoney(giveplayerid, 200000); // 350k
					    PlayerInfo[giveplayerid][pExp] += 12 ; // 12 RP
					    PlayerInfo[giveplayerid][pDonateRank] = 4; // Premium Rang
						new admwarnung[256];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s den Donator-Rang gegeben! (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, " Das kann nur der Rang-Vergeber (Admin 2000)!");
			    return 1;
   			}
		}
		return 1;
	}
	*/
//=========================Donator System=================================
/*	if(strcmp(cmd,"/Donator",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			SendClientMessage(playerid,COLOR_WHITE,"User mit einem Donatorrang (zZ. Online):");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pDonateRank] == 3)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string,sizeof(string),"Donator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, COLOR_GOLD, string);
					}
				}
			}
        }
    	return 1;
	}*/
//====================================MASKE=================
/*	if(strcmp(cmdtext, "/maske", true) == 0)
	{
 		if(IsPlayerInFrac(playerid, 8) && PlayerInfo[playerid][pRank] >= 1)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}*/
//==================================REPORT SYSTEM=======================================
  if(strcmp(cmd, "/report", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        /*if(JustReported[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Bitte warte 30 Sekunden bis du den Nächsten Report schreiben kannst !");
	            return 1;
	        }*/
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/re)port [Text]");
				return 1;
			}
			new stringrp[200];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(stringrp, sizeof(stringrp), "Report von: [ID:%d]%s", playerid, sendername);
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			format(stringrp, sizeof(stringrp), "Meldung: %s", (result));
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			ABroadCast(0xA04C4CAA,"Tippe '/ar [SpielerID]' or '/tr [SpielerID]'",1);
			SendClientMessage(playerid, 0x96C184AA, "  Dein Report wurde an alle Admins gesendet die Online sind.");
			JustReported[playerid] = 1;
			PlayerNeedsHelp[playerid] = 1;
			//SetTimerEx("ReportReset", 300000, false, "i", playerid);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/cr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cr [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "** Adminstrator [ID:%d]%s hat den Report geschlossen!", playerid, sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, string);
						format(string, sizeof(string), "** Du hast den /report geschlossen!", playerid, sendername);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		                ReportCall[playerid] = 999;
						ReportCall[giveplayerid] = 999;
					}
				}
    		}
		}
	}
    if(strcmp(cmd, "/ar", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /ar [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "AdmWarnung: %s hat den Report von: [ID:%d]%s Angenommen.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							SendClientMessage(playerid, COLOR_YELLOW,"Schreib nun mit dem Spieler per Chat du bist Automatisch Verbunden.");
							SendClientMessage(playerid, COLOR_YELLOW,"Du kannst den Report mit '/cr [SpielerID/SpielerName]' schließen");
							format(string, sizeof(string), "** Adminstrator [ID:%d]%s hat dein Report Angenommen, er wird dich nun Supporten.", playerid, sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTGREEN,"Du kannst nun per Chat mit dem Admin Schreiben.");
							SendClientMessage(playerid, COLOR_LIGHTGREEN,"Du kannst nun per Chat mit dem Spieler Schreiben.");
     						ReportCall[giveplayerid] = playerid;
                            ReportCall[playerid] = giveplayerid; //Verbinde zum Reporter
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/tr", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /tr [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "AdmWarning: %s hat die /report Anfrage von [ID:%d]%s gelöscht.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							format(string, sizeof(string), "** Administrator [ID:%d]%s hat deine /report Anfrage verweigert !", playerid, sendername);
							SendClientMessage(giveplayerid, 0xB35959AA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}


//===============OLICHT====================
if(strcmp(cmdtext, "/olicht", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
				{
				    if(Olicht[GetPlayerVehicleID(playerid)] == 0)
				    {
						light1[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light2[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light3[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light4[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light5[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						AttachObjectToVehicle(light1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.0089111328, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light3[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light4[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(light5[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid,"~r~Warnlicht Aktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder ausschalten!");
                                                Olicht[GetPlayerVehicleID(playerid)] = 1;
					}
					else if(Olicht[GetPlayerVehicleID(playerid)] == 1)
					{
						DestroyObject(light1[GetPlayerVehicleID(playerid)]);
						DestroyObject(light2[GetPlayerVehicleID(playerid)]);
						DestroyObject(light3[GetPlayerVehicleID(playerid)]);
						DestroyObject(light4[GetPlayerVehicleID(playerid)]);
						DestroyObject(light5[GetPlayerVehicleID(playerid)]);
						GameTextForPlayer(playerid,"~r~Warnlicht Deaktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder anschalten!");
						Olicht[GetPlayerVehicleID(playerid)] = 0;
					}
				}
			}
			return 1;
		}
//
  /*  if(strcmp(cmd, "/report", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(JustReported[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Bitte warte 30 Sekunden bis du den Nächsten Report schreiben kannst !");
	            return 1;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/re)port [Text]");
				return 1;
			}
			new stringrp[200];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(stringrp, sizeof(stringrp), "Report von: [ID:%d]%s", playerid, sendername);
			ABroadCast(0xE19898AA,stringrp,1);
			format(stringrp, sizeof(stringrp), "Meldung: %s", (result));
			ABroadCast(0xE19898AA,stringrp,1);
			ABroadCast(0xA04C4CAA,"Tippe '/ar [SpielerID]' or '/tr [SpielerID]'",1);
			SendClientMessage(playerid, 0x96C184AA, "  Dein Report wurde an alle Admins gesendet die Online sind.");
			JustReported[playerid] = 1;
			PlayerNeedsHelp[playerid] = 1;
			SetTimerEx("ReportReset", 300000, false, "i", playerid);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/cr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cr [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "** Adminstrator [ID:%d]%s hat den Report geschlossen!", playerid, sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, string);
						format(string, sizeof(string), "** Du hast den /report geschlossen!", playerid, sendername);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		                ReportCall[playerid] = 999;
						ReportCall[giveplayerid] = 999;
					}
				}
    		}
		}
	}
    if(strcmp(cmd, "/ar", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /ar [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "AdmWarnung: %s hat den Report von: [ID:%d]%s Angenommen.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							SendClientMessage(playerid, COLOR_YELLOW,"Schreib nun mit dem Spieler per Chat du bist Automatisch Verbunden.");
							SendClientMessage(playerid, COLOR_YELLOW,"Du kannst den Report mit '/cr [SpielerID/SpielerName]' schließen");
							format(string, sizeof(string), "** Adminstrator [ID:%d]%s hat dein Report Angenommen, er wird dich nun Supporten.", playerid, sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTGREEN,"Du kannst nun per Chat mit dem Admin Schreiben.");
							SendClientMessage(playerid, COLOR_LIGHTGREEN,"Du kannst nun per Chat mit dem Spieler Schreiben.");
     						ReportCall[giveplayerid] = playerid;
                            ReportCall[playerid] = giveplayerid; //Verbinde zum Reporter
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/tr", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /tr [SpielerID/SpielerName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "AdmWarning: %s hat die /report Anfrage von [ID:%d]%s gelöscht.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							format(string, sizeof(string), "** Administrator [ID:%d]%s hat deine /report Anfrage verweigert !", playerid, sendername);
							SendClientMessage(giveplayerid, 0xB35959AA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}*/
    if(strcmp(cmd, "/freefromcar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInFrac(playerid, 21))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREY, "Befehl: /freefromcar [playerid] [Sitz: 0 = hinten links, 1 = hinten rechts]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				//if(!IsAWheelman(giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Dieser Spieler ist kein Gang-mitglied.");
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != playerid)
					{
		     			tmp = strtok(cmdtext, idx);
		     			if(!strlen(tmp))
		    			{
		      				SendClientMessage(playerid, COLOR_GREY, "Befehl: /freefromcar [playerid] [Sitz: 0 = hinten links, 1 = hinten rechts]");
		      				return 1;
		    			}
		     			new sit = strval(tmp);
		     			if(sit < 0 || sit > 1)
				 		{
							SendClientMessage(playerid, COLOR_GREY, "Wähle den Sitzplatz nicht unter 0 oder über 1!");
							return 1;
				 		}
						if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						{
							SendClientMessage(playerid, COLOR_GREY, "Du bist nicht der Fahrer dieses Fahrzeuges!");
							return 1;
				 		}
						if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 10)
						{
						    new member = 0;
							for(new i = 0; i<MAX_PLAYERS; i++)
							{
								if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember] || PlayerInfo[i][pLeader] == PlayerInfo[playerid][pMember]
								|| PlayerInfo[i][pLeader] == PlayerInfo[playerid][pLeader])
								{
									if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
									{
									    member ++;
	    							}
  								}
							}
	    					if(member >= 2)
	    					{
								if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 10)
								{
								    if(IsPlayerInAnyVehicle(giveplayerid))
								    {
									new car = GetPlayerVehicleID(playerid);
									if(sit == 0)
									{
									    RemovePlayerFromVehicle(giveplayerid);
										new Float:X,Float:Y,Float:Z;
										GetPlayerPos(giveplayerid,X,Y,Z);
										SetPlayerPos(giveplayerid,X,Y,Z+5);
									    format(string,sizeof(string),"* Du hast %s erfolgreich auf dem Sitzplatz 0 gezogen !",giveplayer);
									    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
										PutPlayerInVehicle(giveplayerid, car, 2);
										format(string, sizeof(string), "** Wheelman %s hat %s in sein Fahrzeug gezogen.", sendername,giveplayer);
										ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										UnFreezePlayer(giveplayerid);
										PlayerTied[giveplayerid] = 0;
									}
									else if(sit == 1)
									{
									    RemovePlayerFromVehicle(giveplayerid);
										new Float:X,Float:Y,Float:Z;
										GetPlayerPos(giveplayerid,X,Y,Z);
										SetPlayerPos(giveplayerid,X,Y,Z+5);
									    format(string,sizeof(string),"* Du hast %s erfolgreich auf dem Sitzplatz 1 gezogen !",giveplayer);
									    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
										PutPlayerInVehicle(giveplayerid, car, 3);
										UnFreezePlayer(giveplayerid);
										PlayerTied[giveplayerid] = 0;
										format(string, sizeof(string), "** Wheelman %s hat %s in sein Fahrzeug gezogen.", sendername,giveplayer);
										ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       						}
		       					//	format(string, sizeof(string), "ACHTUNG: %s wurde von %s gekidnapped.",giveplayer,sendername);
									for(new g=0;g<MAX_PLAYERS; g++)
									{
									    if(IsPlayerInFrac(playerid, 21))
									    {
									       // SendClientMessage(g, COLOR_GRAD2, string);
					        			}
		        						}
		        					}
		       					}
			      			}
			     		}
		    		}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/pfind", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /pfind [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
//			new zid;
			if(IsPlayerConnected(giveplayerid))
			{
			if(IsPlayerInFrac(playerid, 21))
	    {
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst finden!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 4; }
					else if(level >= 51 && level <= 100)
					{ points = 6; }
					else if(level >= 101 && level <= 200)
					{ points = 8; }
					else if(level >= 201 && level <= 400)
					{ points = 10; }
					else if(level >= 401)
					{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid,X,Y,Z,6.0);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Du gehörst nicht zu den Wheelman");
			}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Diese Spieler ID existiert nicht!");
			    }
		}
	    return 1;
     }
  	if(strcmp(cmd, "/freilassen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInFrac(playerid, 21))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /freilassen [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber befreien!"); return 1; }
							if(PlayerTied[giveplayerid] || PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von Wheelman %s befreit.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s befreit.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Frei", 2500, 3);
//								format(string, sizeof(string), "Wheelman %s hat die Handschellen von %s gelöst", GetPlayerName(playerid),GetPlayerName(giveplayerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								UnFreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 0;
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht gefesselt !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner nähe !");
						    return 1;
						}
					}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "   Nutze die Maske nicht aus, sonst wird sie entfernt !");
					return 1;
			}
		}//not connected
	}
		return 1;
	}
//=========================================
//----------------------------- COP PRISON -----------------------------------
/*	if(strcmp(cmd, "/arrestprison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(IsACop(playerid))
			{
		        if(!IsPlayerInRangeOfPoint(playerid,20.0, 575.7631,-2307.2932,2.3297))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "Du befindest dich nicht in der nähe des Los Santos Prison!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /arrestprison [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					return 1;
				}
				moneys = strval(tmp);
				if(moneys < 1 || moneys > 200000) { SendClientMessage(playerid, COLOR_GREY, "   Der Gefängnispreis darf nicht unter $1 oder über $100000 liegen !"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /arrestprison [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					return 1;
				}
				new time = strval(tmp);
				if(time < 1 || time > 180) { SendClientMessage(playerid, COLOR_GREY, "   Die Minuten der Haftzeit dürfen nicht unter 1 oder über 180 Minuten liegen!"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /arrestprison [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					return 1;
				}
				new bail = strval(tmp);
				if(bail < 0 || bail > 0) { SendClientMessage(playerid, COLOR_GREY, "Keine_Kaution"); return 1; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /arrestprison [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kautionspreis]");
					return 1;
				}
				new bailprice = strval(tmp);
				if(bailprice < 0 || bailprice > 50000000) { SendClientMessage(playerid, COLOR_GREY, "Sie können nicht mehr als 5 Millionen einstellen!!"); return 1; }
				new suspect = GetClosestPlayer(playerid);
				if(IsACop(suspect))
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du kannst keinen Beamten einsperren!");
					return 1;
				}
				if(IsPlayerConnected(suspect))
				{
					if(GetDistanceBetweenPlayers(playerid,suspect) < 30)
					{
						GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(WantedLevel[suspect] < 6)
						{
						    SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler wird nicht gesucht!");
						    return 1;
						}
						GivePlayerMoney(playerid, moneys);
						format(string, sizeof(string), "* Du hast %s eingesperrt für $%d!", giveplayer, moneys);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(suspect, -moneys);
						format(string, sizeof(string), "Eingesperrt von %s ~n~    fuer $%d", sendername, moneys);
						GameTextForPlayer(suspect, string, 5000, 5);
						ResetPlayerWeapons(suspect);
                        UnFreezePlayer(suspect);
						PlayerCuffed[suspect] = 0;
						if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
						{
							format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
						{
							format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						else if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
						{
							format(string, sizeof(string), "<< Soldat %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						else if(PlayerInfo[playerid][pMember]==21||PlayerInfo[playerid][pLeader]==21)
						{
							format(string, sizeof(string), "<< FBI Agent %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
						}
						SetPlayerInterior(suspect, 0);
						SetPlayerPos(suspect,571.3146,-2400.7935,2.6275);
						FreezePlayer(playerid);
						SetTimerEx("UnfreezePrison",10000,0,"d",playerid);
						PlayerInfo[suspect][pJailTime] = time * 60;
						if(bail == 1)
						{
							JailPrice[suspect] = bailprice;
							format(string, sizeof(string), "Du bist für %d Sekunden im Prison eingesperrt.   Kaution: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
//							Delete3DTextLabel(label[suspect]);
						}
						else
						{
						    JailPrice[suspect] = 0;
							format(string, sizeof(string), "Du bist für %d Sekunden im Prison eingesperrt.   Kaution: nicht möglich", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						//	Delete3DTextLabel(label[suspect]);
						}
						PlayerInfo[suspect][pJailed] = 2;
				        PlayerInfo[suspect][pArrested] += 1;
						SetPlayerFree(suspect,playerid, "FESTGENOMMEN");
						WantedPoints[suspect] = 0;
						WantedLevel[suspect] = 0;
						WantLawyer[suspect] = 0;
					}//distance
				}//not connected
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Kein gesuchter in ihrer Nähe.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist kein Staatsbeamter!");
			    return 1;
			}
		}//not connected
		return 1;
	}*/
//===========================================BUYGUN=====================================
	/*
	if (strcmp(cmd, "/buygun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(GetPlayerMoney(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Du hast nicht genug Geld!");
				return 1;
			}
			if(PlayerInfo[playerid][pGunLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Du besitzt keinen Waffenschein, und kannst dir somit keine Waffen kaufen!");
				return 1;
			}
			new gun;
			new gunid[16];
			new gunstring1[256];
			new gunstring2[256];
			new gunstring3[256];
			new gunstring4[256];
			new gunstring5[256];
			new infostring[256];
			new guncharge;
			new ammocharge;
			new location = PlayerInfo[playerid][pLocal];
			if(location == 99 || location == 100 || location == 101 || location == 102 || location == 103 || location == 104 || location == 105)
			{
			    if(BizzInfo[location-99][bProducts] <= 0)
			    {
				    GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
					return 1;
	    		}
				new modw = 100;
				tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						format(string, sizeof(string), "Benutzung: /buygun [waffenname] [munition]");
						SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
						SendClientMessage(playerid, COLOR_WHITE,"*** Waffen & Munition ***");
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(gunstring1, 256, "Waffen: Fallschirm ($%d) Golfschläger ($%d) Schlagstock ($%d) Baseballschläger ($%d) Schaufel ($%d) PoolCue ($%d)",
						GunPrice[0][0]/100*modw,GunPrice[1][0]/100*modw,GunPrice[2][0]/100*modw,GunPrice[3][0]/100*modw,GunPrice[4][0]/100*modw,GunPrice[5][0]/100*modw,GunPrice[6][0]/100*modw);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
						format(gunstring2, 256, "Waffen: Violetter Dildo ($%d) Weißer Dildo ($%d) LangerweißerDildo ($%d) WeißerDildo2 ($%d) Blumen ($%d)",
						GunPrice[7][0]/100*modw,GunPrice[8][0]/100*modw,GunPrice[9][0]/100*modw,GunPrice[10][0]/100*modw,GunPrice[11][0]/100*modw,GunPrice[12][0]/100*modw);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
						format(gunstring3, 256, "Waffen: SD-Pistole ($%d) Deagle ($%d) MP5 ($%d)",
						GunPrice[13][0]/100*modw,GunPrice[14][0]/100*modw,GunPrice[15][0]/100*modw,GunPrice[16][0]/100*modw,GunPrice[17][0]/100*modw,GunPrice[18][0]/100*modw);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
						format(gunstring4, 256, "Waffen: Shotgun ($1850) AK47 ($3000) M4 ($3000) Sniper ($250000) Messer ($15000 - Ab Level 15)",
						GunPrice[19][0]/100*modw,GunPrice[20][0]/100*modw,GunPrice[21][0]/100*modw,GunPrice[22][0]/100*modw,GunPrice[23][0]/100*modw,GunPrice[24][0]/100*modw,GunPrice[4][0]/100*modw);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
						format(gunstring5, 256, "Waffen: Pistolen Munition ($%d) Shotgun Munition ($%d) MP5 Munition ($%d) AK47/M4 Munition ($%d) Sniper Munition ($%d)",
						GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
						SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
						SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
						return 1;
					}
					strmid(gunid, tmp, 0, strlen(cmdtext), 255);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						format(string, sizeof(string), "BENUTZUNG: /buygun [Waffe] [Munition]");
						return 1;
					}
					new ammo = strval(tmp);
					if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "Die Munition deiner Waffe muss zwischen 1 und 999 liegen!"); return 1; }
					if (strcmp(gunid, "Fallschirm", true, strlen(gunid)) == 0)
					{
						gun = 46;
						guncharge = GunPrice[0][0]/100*modw;
						ammocharge = 0;
					}
					else if (strcmp(gunid, "Golfschläger", true, strlen(gunid)) == 0)
					{
						gun = 2; guncharge = GunPrice[1][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Schlagstock", true, strlen(gunid)) == 0)
					{
						gun = 3; guncharge = GunPrice[2][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Baseballschläger", true, strlen(gunid)) == 0)
					{
						gun = 5; guncharge = GunPrice[4][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Schaufel", true, strlen(gunid)) == 0)
					{
						gun = 6; guncharge = GunPrice[5][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
					{
						gun = 7; guncharge = GunPrice[6][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Violetter Dildo", true, strlen(gunid)) == 0)
					{
						gun = 10; guncharge = GunPrice[7][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Weißer Dildo", true, strlen(gunid)) == 0)
					{
						gun = 11; guncharge = GunPrice[8][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "langerweißerdildo", true, strlen(gunid)) == 0)
					{
						gun = 12; guncharge = GunPrice[9][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "weißerdildo2", true, strlen(gunid)) == 0)
					{
						gun = 13; guncharge = GunPrice[10][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "Blumen", true, strlen(gunid)) == 0)
					{
						gun = 14; guncharge = GunPrice[11][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
					{
						gun = 15; guncharge = GunPrice[12][0]/100*modw; ammocharge = 0;
						PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
					}
					else if (strcmp(gunid, "SD-Pistole", true, strlen(gunid)) == 0)
					{
						gun = 23; guncharge = GunPrice[13][0]/100*modw; ammocharge = GunPrice[25][0]*ammo;
						PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
					}
					else if (strcmp(gunid, "Deagle", true, strlen(gunid)) == 0)
					{
						gun = 24; guncharge = GunPrice[15][0]/100*modw; ammocharge = GunPrice[25][0]*ammo;
						PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
					}
					else if (strcmp(gunid, "MP5", true, strlen(gunid)) == 0)
					{
						gun = 29; guncharge = GunPrice[18][0]/100*modw; ammocharge = GunPrice[27][0]*ammo;
						PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
					}
					else if (strcmp(gunid, "Shotgun", true, strlen(gunid)) == 0)
					{
						gun = 25; guncharge = GunPrice[19][0]/100*modw; ammocharge = GunPrice[26][0]*ammo;
						PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
					}
					else if (strcmp(gunid, "AK47", true, strlen(gunid)) == 0)
					{
						gun = 30; guncharge = GunPrice[22][0]/100*modw; ammocharge = GunPrice[28][0]*ammo;
						PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else if (strcmp(gunid, "M4", true, strlen(gunid)) == 0)
					{
						gun = 31; guncharge = GunPrice[23][0]/100*modw; ammocharge = GunPrice[28][0]*ammo;
						PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else if (strcmp(gunid, "Sniper", true, strlen(gunid)) == 0)
					{
						gun = 34; guncharge = GunPrice[24][0]/100*modw; ammocharge = GunPrice[29][0]*ammo;
						PlayerInfo[playerid][pGun4] = 34; PlayerInfo[playerid][pAmmo4] = ammo;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Ladenbesitzer: Ich habe noch nie von dieser Waffe gehört.");
						return 1;
					}
					if((guncharge+ammocharge) > GetPlayerMoney(playerid))
					{
						format(infostring, 256, "Dir fehlen $%d!",guncharge+ammocharge);
						SendClientMessage(playerid, COLOR_GRAD3, infostring);
						return 1;
					}
					if(GetPlayerMoney(playerid) < (guncharge+ammocharge))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Das funktioniert nicht!");
					    return 1;
					}
					new payout = guncharge + ammocharge;
					format(infostring, 256, "Du hast ein(e) %s mit %d Munition für $%d erworben.",gunid,ammo,payout);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					if(location == 102 && IsACop(playerid)) { }
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"Vielen Dank für deinen Einkauf!");
						GivePlayerMoney(playerid, - payout);
					}
					BizzInfo[location-99][bTill] += payout;
					ExtortionBiz(location-99, payout);
					BizzInfo[location-99][bProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					GivePlayerWeapon(playerid, gun, ammo);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s hat Waffen für $%d eingekauft Am BIZ: %d", sendername, payout, location-99);
					PayLog(string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1,"Du befindest dich in keinem Ammunation/Waffenladen!");
					return 1;
				}
        }
		return 1;
	}
	*/
//=============================ROB=========================
// >>>>>>>>>>>>>>>>>  BANKÜBERFALL <<<<<<<<<<<<<<<<<
	if(strcmp(cmd, "/rob", true) == 0 || strcmp(cmd, "/ausrauben", true) == 0)
	{
	    if(IsACop(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Da du als Cop versucht hast die Bank auszurauben wurde die Nachricht an die Admins geschickt.");
	    if(!IsPlayerInRangeOfPoint(playerid,3.0,2155.1436,1623.8749,993.6882))
	    {
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht im Tresorraum der Bank!");
	        return 1;
	    }
    	new Cops = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
		        if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pMember] == 3)
		        {
		            Cops += 3;
		        }
		    }
		}

		if(Cops < 3)
		{
	        SendClientMessage(playerid, COLOR_GREY, "Zurzeit sind keine Cops da & alles verriegelt!");
	        return 1;
		}
    	if(rob == 1)
    	{
			SendClientMessage(playerid,0xAA3333AA,"Die Bank wurde gerade erst überfallen!");
			return 1;
		}
		//FreezePlayer(playerid);
		rob = 1;
		SetTimer("Rob_Reset",1000*60*60,0); // Nach 60 Minuten erst wieder ausrauben
		SetTimerEx("Rob_UnFreeze",120000,0,"i",playerid); // Nach 2 minuten Bank überfallen
		OnPlayerCommandText(playerid,"/S Hände hoch das ist ein Überfall!!!");
		SendClientMessage(playerid,0xFF9933FF,"Du willst die Bank überfallen und musst warten bis das Geld eingepackt ist!");
		SendClientMessage(playerid,0xFF9933FF,"Verlasse vorher nicht die Bank!");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					SendClientMessage(i,COLOR_RED,"HQ: Achtung Alle Einheiten! Eine Meldung vom Bank Security System!");
					SendClientMessage(i,COLOR_RED,"HQ: Verbrechen: Banküberfall, Gesuchter: Unbekannt");
					SendClientMessage(i,COLOR_RED,"HQ: Begeben sie sich sofort zur Los Santos Bank!");
				}
			}
		}
		return 1;
	}

//========================AUFBRECHEN===========================
if(strcmp("/aufbrechen", cmdtext, true , 10) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0, 1424.3881,-1004.1063,1639.7909))//Bank
		{
	 		SetPlayerPos(playerid,2144.1572,1610.6646,993.6882);
			SetPlayerInterior(playerid,1);
			GameTextForPlayer(playerid, "~w~ Wifllkommen im Tresorraum", 5000, 1);// Text die kommt wenn man zu dem Punkt Teleoprtiert wird
	 	}
		return 1;
	}
//===============================ADMIN MACHEN===================
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/golddeagle", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] == 0 || IsPlayerAdmin(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeadmin [ID] [Level]");
				return 1;
			}
			new para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			new level = strval(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[para1][pAdmin] < level)
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin befördert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin befördert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin befördert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin degradiert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin degradiert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin degradiert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					PlayerInfo[para1][pAdmin] = level;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Das vergeben von Admin rängen ist nur xRage erlaubt!");
			SendClientMessage(playerid, COLOR_RED, "Lass es lieber, den mann kann es in der Server Log lesen.");
		}
		return 1;
	}
 //==========================================FRAKTION ARMOR==============================
	if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6725,-1673.1500,12.9887);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1529.6725,-1673.1500,12.9887);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich nach Los Santos geportet.");
			/*	GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s hat sich nach Los Santos geportet.", sendername);
				ABroadCast(0x00F5FFFF,string,4);*/
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
   			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
			 	SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich nach Las Venturas geportet.");
			/*	GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s hat sich nach Las Venturas geportet.", sendername);
				ABroadCast(0x00F5FFFF,string,4);*/
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich nach San Fierro geportet.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
			/*	format(string, sizeof(string), "%s hat sich nach San Fierro geportet.", sendername);
				ABroadCast(0x00F5FFFF,string,4);*/
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotozivi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar,484.4689,-1506.8079,20.4503);
					SetVehicleZAngle(tmpcar,33.8881);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid,484.4689,-1506.8079,20.4503);
					SetPlayerFacingAngle(playerid,33.8881);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich zum Zivispawn geportet.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s hat sich zum Zivispawn geportet.", sendername);
				ABroadCast(0x00F5FFFF,string,4);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
    //Fahrschule Trinken
	if(!strcmp("/fdrink",cmdtext))
	{
		if(IsPlayerInRangeOfPoint(playerid,4.0,1214.3776,-1814.5111,16.5938))
		{
			new Float:Leben;
			GetPlayerHealth(playerid, Leben);
			if(Leben < 100)
			{
				SendClientMessage(playerid,0xBEBEBEFF,"Du hast ein Glas Wasser getrunken(+100Hp)");
				SetPlayerHealth(playerid,(Leben + 100));
				GivePlayerMoney(playerid,-5);
			}
			else
			{
				SendClientMessage(playerid,0x828282FF,"Dein Leben ist bereits voll.");
				return 1;
			}
		}
		else
		{
		   SendClientMessage(playerid,0x828282FF,"Du bist nicht an der Fahrschule am Automaten.");
		   return 1;
		}
	}
//
	if(strcmp(cmd, "/gotobsn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar,1212.9077,-884.9197,42.9153);
					SetVehicleZAngle(tmpcar,173.6692);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid,1212.9077,-884.9197,42.9153);
					SetPlayerFacingAngle(playerid,173.6692);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich zum Burger Shot North geportet.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pAdmin] >= 2000) { }
				else {
					format(string, sizeof(string), "%s hat sich zum BSN geportet.", sendername);
					ABroadCast(0x00F5FFFF,string,4);
				}
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gototor", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2000)
	    {
	        SetPlayerPos(playerid,324.39999389648, -1185.5999755859, 75.5);
	        SetPlayerInterior(playerid, 0);
	        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich erfolgreich zum tor Teleportiert!");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Du solltest dich schämen du bist kein Owner!");
		}
	}
	if(strcmp(cmd, "/entercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /entercar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/report", true) == 0)
	{
	    ShowPlayerDialog(playerid, DIALOG_TICKET_S1, DIALOG_STYLE_LIST, "Vorhandene Themen", "Allgemeiner Support\nCheatermeldung\nFrage an High Admins", "Auswählen", "Beenden");
	    return 1;
	}*/
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   Teleporter Zielort gesetzt");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotomark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich zu deiner markierten Position geportet.");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aufsprengen", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,1388.7212,-992.2722,5651.8315))
		{
			SetPVarInt(playerid, "Bombe2", 1);
			SetTimer("bombe2", 10000, true);
			SetTimer("auf", 9000, false);
			SetTimer("zu", 120000, false);
			d1 = CreateDynamicObject(1654, 1387.8286132813, -991.91998291016, 5653.2416992188, 1.7975158691406, 333.98623657227, 4.8770141601563);
	        d2 = CreateDynamicObject(1654, 1389.6013183594, -991.91998291016, 5651.3227539063, 0, 18, 358);
	        d3 = CreateDynamicObject(1654, 1387.8894042969, -991.98480224609, 5651.2680664063, 0, 0, 0);
	        d4 = CreateDynamicObject(1654, 1389.6021728516, -991.91998291016, 5653.1967773438, 0, 0, 0);
			SendClientMessage(playerid, COLOR_GREEN, "Die Bombe ist scharf, geh in Deckung!");
			for(new i = 0; i < MAX_PLAYERS; i++)
					{
			        	if(IsACop(i))
			        	{
			        	    SendClientMessage(i,COLOR_DBLUE,"ZENTRALE: Die LS Bank meldet einen Detonation im Tresorraum!");
			        	    SendClientMessage(i,COLOR_DBLUE,"ZENTRALE: Alle verfügbaren Einheiten umgehend zur LS Bank !!");
						}
					}
			return 1;
		}
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /goto [playerid/PartOfName]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if(IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
					{
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
						SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
						SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
						SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich Teleportiert.");
						GetPlayerName(plo, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playerid][pAdmin] >= 2000) { }
						else {
							format(string, sizeof(string), "%s hat sich zu %s geportet.", sendername, giveplayer);
							ABroadCast(0x00F5FFFF,string,4);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "%d ist kein Aktiver Spieler.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/payday", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "BENUTZUNG: /payday [playerid/Name] (Gibt dem Spieler einen PayDay");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s einen PayDay gegeben. *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir einen PayDay gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						new admwarnung[126];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s einen PayDay gegeben (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						PlayerInfo[giveplayerid][pPlayerKreditDauer] = 59;
						SendClientMessage(playerid,COLOR_GREY,"Achtung nutze diesen Befehl nicht zu oft aus!");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht berechtigt, diesen Befehl zu benutzen !");
			    return 1;
   			}
		}
		return 1;
	}
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/gethere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /gethere [Spieler ID]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 2)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
						SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
						SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
						SendClientMessage(plo, COLOR_GRAD1, "Du wurdest Teleportiert");
						GetPlayerName(plo, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s hat %s zu sich geportet.", sendername, giveplayer);
						ABroadCast(0x00F5FFFF,string,4);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "%d ist kein Aktiver Spieler.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /getcar [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oldcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    format(string, sizeof(string), "Dein Altes Auto war: %d",gLastCar[playerid]);
		    SendClientMessage(playerid, COLOR_GREY, string);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fuelcars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            for(new c=0;c<CAR_AMOUNT;c++)
				{
					Gas[c] = GetGasMax(GetVehicleModel(c));
				}
				SendClientMessage(playerid, COLOR_GREY, "   Alle Autos wurden gefüllt ! ");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht befugt ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/makejulian", true) == 0)
	{
		new pName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,pName,sizeof pName);
		if(!strcmp(pName,"[GnE]Julian",true))
	    //if(PlayerInfo[playerid][pAdmin] == 0 || IsPlayerAdmin(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeadmin [ID] [Level]");
				return 1;
			}
			new para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			new level = strval(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[para1][pAdmin] < level)
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin befördert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin befördert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin befördert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin degradiert.", sendername, giveplayer, level);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin degradiert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin degradiert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					PlayerInfo[para1][pAdmin] = level;
				}
			}
		}
		else
		{
		//	SendClientMessage(playerid, COLOR_RED, "Das vergeben von Admin rängen ist nur xRage erlaubt!");
		//	SendClientMessage(playerid, COLOR_RED, "Lass es lieber, den mann kann es in der Server Log lesen.");
		}
		return 1;
	}
//----------------------------------[GiveGun]------------------------------------------------
	if(strcmp(cmd, "/givegun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /givegun [playerid] [weaponid(eg. 46 = Parachute)] [ammo]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /givegun [playerid] [weaponid] [ammo]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(gun < 1||gun > 46||gun==27||gun==1||gun==2||gun==9||gun==17||gun==19||gun==20||gun==21||gun==36||gun==38||gun==39||gun==40||gun==44||gun==45)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   wrong WeaponID!"); return 1; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   dont go below 1 or above 999 bullets!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						GivePlayerWeapon(playa, gun, ammo);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
//----------------------------------[setskin]------------------------------------------------
	if(strcmp(cmd, "/setskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Hilfe : /setskin [playerid/PartOfName] [skin model]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            new name[20];
						new victim[20];
						GetPlayerName(playerid, name, sizeof(name));
						GetPlayerName(playa, victim, sizeof(victim));
						PlayerInfo[playa][pModel] = health;
						PlayerInfo[playa][pChar] = health;
						SetPlayerSkin(playa, PlayerInfo[playa][pChar]);
						format(string, 256, "AdmWarning: [%s] Skin was just set to %d by %s!",victim,health,name);
						ABroadCast(COLOR_YELLOW,string,1347);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen CMD nicht nutzen,schäm dich!");
			}
		}
		return 1;
	}
//----------------------------------[sethp]------------------------------------------------
	if(strcmp(cmd, "/sethp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /sethp [playerid] [Leben]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if(PlayerInfo[playa][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "FEHLER");
			    return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt.!");
			}
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
		 		SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht heilen, da er ein höheres Adminlevel hat als du!");
				return 1;
			}

		}
		return 1;
	}
	if(strcmp(cmd, "/setarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setarmor [playerid] [armor]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "  Du bist nicht befugt!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   Auto Nummer nicht weniger als 400 oder höher als 611 sein !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 126) { SendClientMessage(playerid, COLOR_GREY, "   Nicht Weniger als 0 oder höher 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 126) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 0 oder höher als 126 !"); return 1; }
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			new carid = CreateVehicle(car, X,Y,Z, 0.0, color1, color2, 60000);
			CreatedCars[CreatedCar] = carid;
			CreatedCar++;
			Gas[carid] = GetGasMax(car);
			format(string, sizeof(string), "   Auto %d gespawned.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}*/
   	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1338)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "Auto Nummer nicht weniger als 400 oder höher als 611 sein !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 252) { SendClientMessage(playerid, COLOR_GREY, "Nicht Weniger als 0 oder höher 252 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 252) { SendClientMessage(playerid, COLOR_GREY, "Nicht weniger als 0 oder höher als 252!"); return 1; }
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			new carid = CreateVehicle(car, X,Y,Z, 0.0, color1, color2, -1);
			SetVehicleNumberPlate(carid, "{009900}R{FF0000}G{0000FF}R {0000FF}Event");
			CreatedCars[CreatedCar] = carid;
			CreatedCar++;
			PutPlayerInVehicle(playerid,carid,0);
//			Gas[carid] = GetGasMax(car);
			format(string, sizeof(string), "Auto mit der ID %d hergestellt.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/deletethiscar", true) == 0 || strcmp(cmd, "/dtc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1338 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "** INFO ** Das ist ein Adminbefehl, du bist kein Admin!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    DestroyVehicle(GetPlayerVehicleID(playerid));
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Du hast dieses Fahrzeug erfolgreich gelöscht.");
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fixveh", true) == 0)
	{
 		if (IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 1337)
		{
			new health;
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if(!strlen(tmp))
			{
			    health = 1000;
			}
			SetVehicleHealth(GetPlayerVehicleID(playerid), health);
			UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), 0, 0, 0, 0);
	//		GetPlayerName(playerid, sendername, sizeof(sendername));
     //  		format(string, 256, "Warnung: %s hat sein Auto %d repariert.", sendername,health);
	//		ABroadCast(COLOR_YELLOW,string,1);
		}
	    /*if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Geh in Paintspray du abuser!!!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				RepairVehicle(GetPlayerVehicleID(playerid));
			    SendClientMessage(playerid, COLOR_GREY, "Vehicle repariert");
				GetPlayerName(playerid, sendername, sizeof(sendername));
			//	format(string, sizeof(string), "%s hat sein Vehicle repariert.", sendername, giveplayer);
				ABroadCast(0x00F5FFFF,string,1337);
			}
		}*/
		return 1;
	}
	if(strcmp(cmd, "/destroycars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1338)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Das darfst du nicht tun!");
			    return 1;
			}
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(i != 0)
				{
			    	DestroyVehicle(i);
				}
			}
			SendClientMessage(playerid, COLOR_GREY, "   destroycar erstellt !");
		}
		return 1;
	}
	if(strcmp(cmd, "/weather", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Das darfst du nicht Tun!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /weather [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			/*if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Wetter Id nicht weniger als 0 oder höher als 45 !"); return 1; }*/
			SetPlayerWeather(playerid, weather);
			SendClientMessage(playerid, COLOR_GREY, "   Wetter Eingestellt !");
		}
		return 1;
	}
//==== /vworld ====//
	if(strcmp(cmd, "/vworld", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /vwolrd [VirtualWorld]");
			    return 1;
			}
			new vw;
			vw = strval(tmp);
			SetPlayerVirtualWorld(playerid, vw);
			format(string, sizeof(string), "Neue virtuelle Welt: %d.",vw);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst erst eingeloggt sein!");
		}
		return 1;
	}

	if(strcmp(cmd, "/weatherall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /weatherall [Wetter ID]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "Wetter ID nicht weniger als 0 oder höher als 45 !"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "   Wetter Eingstellt !");
		}
		return 1;
	}
//----------------------------------[Money]------------------------------------------------
	if(strcmp(cmd, "/money", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /money [Spieler ID] [Geldbetrag]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						ResetPlayerMoney(playa);
						ConsumingMoney[playa] = 1;
						GivePlayerMoney(playa, money);
      					GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "AdmCmd: %s hat %s's Geld auf %d$ gesettet!",sendername,giveplayer,money);
						ABroadCast(COLOR_LIGHTRED,string,4);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun!");
			}
		}
		return 1;
	}
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /givemoney [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            ConsumingMoney[playa] = 1;
						GivePlayerMoney(playa, money);
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "AdmCmd: %s hat %s $%d gegeben.",sendername,giveplayer,money);
						ABroadCast(COLOR_LIGHTRED,string,1337);
						SperreLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun!");
			}
		}
		return 1;
	}
//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /slap [playerid]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1337)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("AdmCmd: %s slapped %s",sendername,  giveplayer);
						new slrand = random(4);
						if(slrand == 0)     	format(string, sizeof(string), "AdmCmd: %s gab %s eine Faust.",sendername,giveplayer);
						else if(slrand == 1)    format(string, sizeof(string), "AdmCmd: %s boxt %s in die Niere.",sendername,giveplayer);
						else if(slrand == 2)    format(string, sizeof(string), "AdmCmd: %s hat von %s eine bekommen.",giveplayer,sendername);
						else                    format(string, sizeof(string), "AdmCmd: Yo, %s got fucked up by %s.",giveplayer,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Das darfst du nicht tun!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mute", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /mute [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("AdmCmd: %s silenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "AdmCmd: %s wurde von %s zum Schweigen gebracht",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("AdmCmd: %s unsilenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "AdmCmd: %s wurde von %s zum Reden gebracht",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}
//----------------------------------[Kick]------------------------------------------------
    if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kick [playerid] [Grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kick [playerid] [Grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/destroycars", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Dir ist es nicht erlaubt, diesen Befehl zu benutzen!");
				return 1;
			}
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(i != 0)
				{
					DestroyVehicle(i);
				}
			}
				SendClientMessage(playerid, COLOR_GREY, "Erschaffene Fahrzeuge wurden zerstört!");
		}
		return 1;
	}
	if(strcmp(cmd, "/quitplayer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Verwendung: /quitplayer [SpielerID/TeildesNamens]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    OnPlayerCommandText(giveplayerid, "/q");
			}
		}
		return 1;
	}


//======== /noamt ========//
	if(strcmp(cmdtext, "/noamt", true)==0)
	{
		if (TowTruckers == 0)
  		{
		    SendClientMessage(playerid,COLOR_GRAD1,"Derzeit sind keine Ordnungsbeamte im Dienst.");
		    return 1;
    	}
        SendClientMessage(playerid,0xFFFF00AA,"Ordnungsbeamte haben wurden über deinen Notruf informiert!");
		new pName[MAX_PLAYER_NAME];
		new msg[256];
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		format(msg,sizeof(msg),"*** %s (ID:&d) hat einen Notruf abgeschickt, er ist rot markiert. ***",pName,playerid);
		GetPlayerName(playerid,pName,sizeof(pName));
		for (new i=0;i<MAX_PLAYERS;i++)
  		{
		    if(IsTowTrucker[i] == 1)
    	  	{
				SendClientMessage(i,0xFFFF00AA,msg);
				SetPlayerCheckpoint(i, X,Y,Z,3.0);
			}
    	}
		return 1;
	}
//===== FINDCAR ======//

	if(strcmp(cmd, "/findcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
	        {
		        tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
		        {
		            SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /findcar [SPIELER ID]");
		            return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				if(IsPlayerConnected(playa))
				{
				    new PVehicle = PlayerCar[playa][Dtc_PlayerKey[playa]][CarId];
				    new Float:vehx, Float:vehy, Float:vehz;
			     	GetVehiclePos(PVehicle, vehx, vehy, vehz);
		     	 	SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 3.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Falsche ID / Name!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Das können nur Ordnungsbeamte!");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GREY, "Du musst eingelogt sein!");
		}
		return 1;
	}
	if(strcmp(cmd, "/caraufbrechen", true) == 0)
	{
		if(PlayerInfo[playerid][pJob] == 5)
		{
  			//new Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(playerid, pX, pY, pZ);
            new Float:vX, Float:vY, Float:vZ;
            new Found = 0;
            new vid = 0;
           	while((vid < MAX_VEHICLES) && (!Found))
            {
   				vid++;
   				GetVehiclePos(vid,vX,vY,vZ);
                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (vid!=GetPlayerVehicleID(playerid)))
                {
                    Found = 1;
                    WantedLevel[playerid]++;
                    PutPlayerInVehicle(playerid, vid, 0);
					OnPlayerCommandText(playerid,"/me hat ein Auto aufgebrochen.");
					SendClientMessage(playerid, COLOR_RED, "*Du hast ein Wanted bekommen, Grund: Aufbrechen von einem Auto!");
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsACop(i))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "%s hat ein Wanted bekommen, Grund: Aufbrechen von einem Auto", sendername);
							SendClientMessage(playerid, TEAM_BLUE_COLOR, string);
						}
					}
				}
			}
			if(!Found)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Autodieb!");
		}
		return 1;
	}
//============ /LEADER ===============//
	if (strcmp(cmd, "/leader", true) == 0)
	     {
	          if(IsPlayerConnected(playerid))
	          {
	               	SendClientMessage(playerid, 0xCDB221FF, "**Fraktions - Leader Online**");
					for(new i = 0; i < MAX_PLAYERS; i++)
	               	{
	  					if(IsPlayerConnected(i))
	      				{
	                     	if(PlayerInfo[i][pLeader] == 1)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *LSPD-Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
                            if(PlayerInfo[i][pLeader] == 2)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *FBI Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
                            if(PlayerInfo[i][pLeader] == 3)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *Bundeswehr Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
                            if(PlayerInfo[i][pLeader] == 4)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *Medic Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}

				  			if(PlayerInfo[i][pLeader] == 5)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *LCN-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
				   			if(PlayerInfo[i][pLeader] == 6)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Yakuza-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 9)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *CNN-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 11)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fahrlehrer-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 12)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fuegos-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 13)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Grove-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 14)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ballas-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 16)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Vagos-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 17)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Aztecas-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
                           	if(PlayerInfo[i][pLeader] == 18)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *LS Rifas-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
						    if(PlayerInfo[i][pLeader] == 19)
			  				{
			  				        GetPlayerName(i, sendername, sizeof(sendername));
			  				        format(string, 40, " *Red Soldiers-Leader: %s", sendername);
			  				        SendClientMessage(playerid, COLOR_GOLD, string);
							}
			   				if(PlayerInfo[i][pLeader] == 20)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Terrorristen-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			  			/*	if(PlayerInfo[i][pLeader] == 21)
			  				{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Wheelmen-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
							}*/
 			  				if(PlayerInfo[i][pLeader] == 22)
			  				{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *S.W.A.T Elite Troop-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
							}
			   				if(PlayerInfo[i][pLeader] == 23)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Brigada-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pLeader] == 24)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ordnungsamt-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                    }
	                }
					return 1;
	            }
	        }
	//============ /MITGLIEDER ===============//
	if (strcmp(cmd, "/mitglieder", true) == 0)
	     {
	          if(IsPlayerConnected(playerid))
	          {
	               	SendClientMessage(playerid, 0xCDB221FF, "**Fraktions - Mitglieder Online**");
					for(new i = 0; i < MAX_PLAYERS; i++)
	               	{
	  					if(IsPlayerConnected(i))
	      				{
	                     	if(PlayerInfo[i][pMember] == 1)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *LSPD-Member: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
				  			if(PlayerInfo[i][pMember] == 5)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *LCN-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
				   			if(PlayerInfo[i][pMember] == 6)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Yakuza-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 9)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *CNN-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 11)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fahrlehrer-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 12)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fuegos-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 13)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Grove-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 14)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ballas-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 16)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Vagos-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 17)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Aztecas-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			  				if(PlayerInfo[i][pMember] == 19)
			  				{
			  				        GetPlayerName(i, sendername, sizeof(sendername));
			  				        format(string, 40, " *Red Soldiers-Member: %s", sendername);
			  				        SendClientMessage(playerid, COLOR_GOLD, string);
							}
			   				if(PlayerInfo[i][pMember] == 20)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Terrorristen-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   		/*		if(PlayerInfo[i][pMember] == 21)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Wheelmen-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}*/
		   				    if(PlayerInfo[i][pMember] == 22)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *S.W.A.T Elite Troop-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 23)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Brigada-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 24)
				  			{
								GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ordnungsamt-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                    }
	                }
					return 1;
	            }
	        }
//============ /MAUL ============//
	if(strcmp(cmd, "/mundtape", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAGang(playerid) || IsACop(playerid))
	        {
	            tmp = strtock(cmdtext, idx);
	            if(!strlen(tmp))
	            {
	                SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /mundtape [Spieler ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != playerid)
				    {
						if(IsPlayerConnected(giveplayerid))
						{
						    if(PlayerInfo[giveplayerid][pMauled] == 0)
						    {
						        if(PlayerTied[giveplayerid] != 1)
						        {
						            SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht gefesselt!");
						            return 1;
								}
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat deinen Mund zugebunden!", sendername);
								format(string, sizeof(string), "* Du hast %s's Mund zugebunden!", giveplayer);
								format(string, sizeof(string), "* %s hat %s Mund zugebunden!", sendername ,giveplayer);
								ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerInfo[giveplayerid][pMauled] = 1;
								PlayerInfo[playerid][pMuted] = 0;
							}
							else if(PlayerInfo[giveplayerid][pMauled] == 1)
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat deinen Mundtape wieder abgenommen!", sendername);
								format(string, sizeof(string), "* Du hast %s's Mundtape abgenommen!", giveplayer);
								format(string, sizeof(string), "* %s hat %s Mundtape abgenommen!", sendername ,giveplayer);
								ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerInfo[giveplayerid][pMauled] = 0;
								PlayerInfo[playerid][pMuted] = 0;
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst deinene eigenen Mund nicht zu binden!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Kein solcher Spieler online!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Gangmitglied / kein Mafiosi / kein Cop!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Du musst eingeloggt sein!");
		}
		return 1;
	}
	if(strcmp(cmd, "/rein", true) == 0)
	{
	    if(PlayerInfo[playerid][pJailed] == 2 || IsACop(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1771.4659,-1547.2609,9.9151))
	        {
	            SetPlayerPos(playerid, 1010.3298,-9.9566,-2.0652);
	            GameTextForPlayer(playerid, "Alcatraz Innenraum", 5000, 3);
	            //FreezePlayer(playerid);
	            TogglePlayerControllable(playerid, 0);
      			SetTimerEx("UnfreezePlayer",4000,0,"i",playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Tür im Alcatrazhof!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
		}
		return 1;
	}
	if(strcmp(cmd, "/raus", true) == 0)
	{
	    if(PlayerInfo[playerid][pJailed] == 2 || IsACop(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1010.3298,-9.9566,-2.0652))
	        {
	            SetPlayerPos(playerid, 1771.4659,-1547.2609,9.9151);
	            GameTextForPlayer(playerid, "Alcatraz Hof", 5000, 3);
	            //FreezePlayer(playerid);
	            TogglePlayerControllable(playerid, 0);
      			SetTimerEx("UnfreezePlayer",4000,0,"i",playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Tür im Innenraum!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
		}
		return 1;
	}
//=========== REINZIEHEN ==============//
	if(strcmp(cmd, "/reinziehen", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 21))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
				SendClientMessage(playerid, COLOR_GREY, "__________________ Reinziehen __________________");
				SendClientMessage(playerid, COLOR_GREY, "Befehl: /reinziehen [playerid] [0/1]");
				SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Vorne rechts, 1 = Hinten rechts");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != playerid)
			    {
			        tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Befehl: /reinziehen [Spieler ID] [0/1]");
					    SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Vorne rechts, 1 = Hinten rechts!");
					    return 1;
					}
					new sit = strval(tmp);
					if(sit < 0 || sit > 1) { SendClientMessage(playerid, COLOR_GREY, "Es gibt nur die Sitzplätze 0 und 1!"); return 1; }
					if(IsPlayerInAnyVehicle(giveplayerid)) { SendClientMessage(playerid, COLOR_GRAD1, "Die Zielperson befindet sich in einem Fahrzeug!"); return 1; }
			 		if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8)
 					{
						new car = GetPlayerVehicleID(playerid);
						if(sit == 0)
						{
				  			GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
   							format(string, sizeof(string), "* Du wurdest von %s ins Car gezogen", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PutPlayerInVehicle(giveplayerid, car, 1);
							FreezePlayer(giveplayerid);
							PlayerCuffed[giveplayerid] = 0;
							PlayerTied[giveplayerid] = 1;
							format(string, sizeof(string), "* %s hat %s ins Auto gezogen!", sendername ,giveplayer);
							ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else if(sit == 1)
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du wurdest von %s ins Car gezogen.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PutPlayerInVehicle(giveplayerid, car, 3);
							FreezePlayer(giveplayerid);
							PlayerCuffed[giveplayerid] = 0;
							PlayerTied[giveplayerid] = 1;
							format(string, sizeof(string), "* %s hat %s ins Auto gezogen!", sendername ,giveplayer);
							ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Wheelmen Agency!");
		}
		return 1;
	}
//============ KIDNAPPING ===============//

	if(strcmp(cmd, "/kidnap", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
    	{
    	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug!");
	  		if(IsAGang(playerid))
	      	{
	   			tmp = strtok(cmdtext, idx);
	   			if(!strlen(tmp))
	   			{
	   			    SendClientMessage(playerid, COLOR_GREY, "__________________ KIDNAP __________________");
	    			SendClientMessage(playerid, COLOR_GREY, "Befehl: /kidnap [Spieler ID] [0/1]");
					SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Hinten links, 1 = Hinten rechts!");
	    			return 1;
	   			}
	   			giveplayerid = ReturnUser(tmp);
				if(PlayerInfo[giveplayerid][pLevel] <= 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er / Level 2er kidnappen!");
				    return 1;
				}
	   			if(IsPlayerConnected(giveplayerid))
	   			{
	    			if(giveplayerid != playerid)
	    			{
	     				tmp = strtok(cmdtext, idx);
	     				if(!strlen(tmp))
	     				{
	      					SendClientMessage(playerid, COLOR_GREY, "Befehl: /kidnap [Spieler ID] [0/1");
	      					SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Hinten links, 1 = Hinten rechts!");
	      					return 1;
	     				}
	     				new sit = strval(tmp);
	     				if(sit < 0 || sit > 1) { SendClientMessage(playerid, COLOR_GREY, "Es gibt nur die Sitzplätze 0 und 1!"); return 1; }
						if(IsPlayerInAnyVehicle(giveplayerid)) { SendClientMessage(playerid, COLOR_GRAD1, "Die Zielperson befindet sich in einem Fahrzeug!"); return 1; }
					 	if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8)
	  					{
							new Float:health;
	    					GetPlayerHealth(giveplayerid, health);
						    if(health < 50)
						    {
  								new car = GetPlayerVehicleID(playerid);
  								if(IsARoller(car) || IsABike(car) || IsANewbie(car))
  								{
  								    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinen auf einen Bike kidnappen!");
									return 1;
								}
								if(sit == 1 && IsA2Turer(car) || sit == 0 && IsA2Turer(car))
								{
						    		SendClientMessage(playerid, COLOR_GRAD1, "Den sitzt gibt es bei diesem Car nicht!");
						    		return 1;
								}
								if(IsPlayerInArea(giveplayerid,1436.625, -1764.764, 1611.556, -1618.698) || IsPlayerInArea(giveplayerid, 1691.416, -1677.914, 1759.867, -1583.168) || IsPlayerInArea(giveplayerid, 1159.018, -959.4252, 1292.118, -864.6794) || IsPlayerInArea(giveplayerid, 1181.835, -1417.363, 1269.301, -1283.14))
								{
								    SendClientMessage(playerid, COLOR_GRAD1, "Opfer in einer NO DM Zone!");
									return 1;
								}
								if(sit == 0)
  								{
  								    GetPlayerName(playerid, sendername, sizeof(sendername));
       								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        				format(string, sizeof(string), "* Du wurdest von %s gekidnapped.", sendername);
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									PutPlayerInVehicle(giveplayerid, car, 2);
									FreezePlayer(giveplayerid);
									PlayerTied[giveplayerid] = 1;
									format(string, sizeof(string), "* %s hat %s ins Auto gezerrt!", sendername ,giveplayer);
									ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 								}
 								else if(sit == 1)
 								{
      								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
     								format(string, sizeof(string), "* Du wurdest von %s gekidnapped.", sendername);
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									PutPlayerInVehicle(giveplayerid, car, 3);
									FreezePlayer(giveplayerid);
									PlayerTied[giveplayerid] = 1;
									format(string, sizeof(string), "* %s hat %s ins Auto gezerrt!", sendername ,giveplayer);
									ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 								}
							}
							else
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat es nicht geschafft %s zu entführen!", sendername, giveplayer);
								ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								format(string, sizeof(string), "*Du konntest %s nicht kidnappen, er hat über 50 HP!", giveplayer);
								SendClientMessage(playerid, COLOR_GRAD1, string);
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
 						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Du kannst dich selber nicht entführen!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Kein solcher Spieler online!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nur Mafiosi und Gangmitglieder können kidnappen!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Du bist noch nicht eingeloggt!");
		}
		return 1;
	}
	if(strcmp(cmd, "/extratime", true) == 0)
	{
	    if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /extratime [ID] [Extra Zeit (in Sekunden)]");
			    return 1;
			}
			new gefangener;
			new extrazeit;
			gefangener = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			extrazeit = strval(tmp);
			if(PlayerInfo[gefangener][pJailed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler befindet sich nicht im Gefängnis!");
			    return 1;
			}
			if(IsPlayerConnected(gefangener))
			{
			    if(GetDistanceBetweenPlayers(playerid, gefangener) < 15)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(gefangener, giveplayer, sizeof(giveplayer));
					PlayerInfo[gefangener][pJailTime] += extrazeit;
					format(string, sizeof(string), "Deine Gefängniszeit wurde von %s um weitere %d Sekunden [%d Minuten] verlängert!", sendername, extrazeit, extrazeit/60);
					SendClientMessage(gefangener, COLOR_YELLOW, string);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsACop(i))
						{
							format(string, sizeof(string), "%s hat die Gefängniszeit von %s um %d Sekunden [%d Minuten] verlängert!", sendername, giveplayer, extrazeit, extrazeit/60);
							SendClientMessage(i, TEAM_BLUE_COLOR, string);
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist zu weit vom Spieler weg!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht online!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
		}
		return 1;
	}
		if(strcmp(cmd, "/gangtuer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid))
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,195.5248,-228.4122,1.7786))
			    {
	  				MoveObject(gangtuer,193, -227.80000305176, 3.2999999523163,3.0); //Wo das Objekt hinsoll bei eingabe des befehls !!
					SetTimer("CloseGangJailTuer", 5000, 0);
					SendClientMessage(playerid, COLOR_RED, "Du hast 5 Sek Zeit bis die Tür sich schließt!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nicht an der Gangjail Tür!");
				}
			}
			else SendClientMessage(playerid,COLOR_RED," Du bist in keiner Gang");
			return 1;
		}

	}
	if(strcmp(cmd, "/gangtor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid))
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,205.0009,-240.5190,1.5781))
			    {
	  				MoveObject(gangtor,204.89999389648, -235.69999694824, -1.2999999523163,3.0);
					PlaySoundForPlayer(playerid,1035);
					SetTimer("CloseGangJailTor", 10000, 0);
					SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
					SendClientMessage(playerid, COLOR_RED, "Du hast 10 Sek Zeit bis das Tor sich schließt !!!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nicht am Gangjail Tor!");
				}
			}
			else SendClientMessage(playerid,COLOR_RED," Du bist in keiner Gang");
			return 1;
		}

	}
	if(strcmp(cmd, "/einbrechen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,205.0009,-240.5190,1.5781))
			    {
			        SendClientMessage(playerid,COLOR_PURPLE, "Du versuchst das Tor Zu knacken, Warte hier!");
                    SetTimerEx("GangjailEinbruch",15000,0,"u",playerid);
                    SetTimer("CloseGangjailEinbruch",60000,0);
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED, "Du bist zu weit vom Gangtor entfernt!");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED, "Du bist kein Staatsbeamter!");
			}
	    }
	}
//=================================== GANGJAIL ===========================================//
if(strcmp(cmd, "/gangjail", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
print("1");
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
print("2");
		        SendClientMessage(playerid, COLOR_GRAD1, "Du bist selber im GangJail!");
		        return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0,204.5171,-232.7427,1.7786))
			{
print("3");
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
print("4");
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /gangjail [Playerid/Name]");
					return 1;
				}
				new playa;
print("5");
				playa = ReturnUser(tmp);
print("6");
				if(PlayerInfo[playa][pLevel] <= 2)
				{
print("7");
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er einsperren!");
				    return 1;
				}
        		             if(IsAGang(playerid))
				     {
print("8");
					    if(IsPlayerConnected(playa))
					    {
print("9");
			    		        if(playa != INVALID_PLAYER_ID)
			    		          {
print("10");
                                                    if(GetDistanceBetweenPlayers(playerid,playa) < 5)
                                                     {
print("11");
                                                          new vehicleid = GetPlayerVehicleID(playerid);
                                                          if(IsPlayerInVehicle(playa,vehicleid))
                                                          {
print("12");
									ResetPlayerWeapons(playa);
									SetPlayerInterior(playa, 0);
									SetPlayerPos(playa,218.9510,-231.8540,1.7786);
									SendClientMessage(playerid, COLOR_YELLOW, "Du hast eine Person ins GangJail eingesperrt.");
									SendClientMessage(playa, COLOR_YELLOW, "Du wurdest ins Gangjail eingesperrt!.");
									SendClientMessage(playa, COLOR_YELLOW, "In 5 Minuten wirst du in der Lage sein, die Cops zu alamieren!");
									//SendClientMessage(playa, COLOR_GREY, "*Nutze dafür /needhelp");
									PlayerInfo[playa][pGangJailed] = 1;
									PlayerTied[playa] = 0;
									BlindFold[playa] = 0;
									PlayerInfo[playa][pMauled] = 0;
									UnFreezePlayer(playa);
									TogglePlayerControllable(playa, 1);
								}
								else
								{
print("14");
								    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deinem Auto!");
								}
							}
							else
							{
print("16");
							    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
							}
print("17");
						}
print("18");
					}
print("19");
				}
				else
				{
print("21");
					SendClientMessage(playerid, COLOR_GRAD1, "Diesen Befehl können nur Gangmitglieder nutzen!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der Gangjail Garage!");
			}
print("24");
		}
		else
		{
print("1");
		    SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht online!");
		}
		return 1;
	}
//=================================== UNGANGJAIL ===========================================//
	if(strcmp(cmd, "/gangunjail", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist selbst im GangJail!");
			    return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist gefesselt!");
			    return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 4.0,204.5171,-232.7427,1.7786))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /gangjail [Playerid/Name]");
					return 1;
				}
				SetTimerEx("Befreien", 25000, 0, "i", playerid);
                GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s versucht das GangJail-Tor zu knacken!",sendername, giveplayer);
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_GRAD1, "*Um Die Person zu befreihen darfst du die garage nicht verlassen!");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der GangJail Garage!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}
//=======================Scheiß neues Gangjail ende=====================================

	if(strcmp(cmdtext, "/czoll", true) == 0)
	{
	    if(!IsACop(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Das können nur Cops!");
	        return 1;
	    }
		if(IsPlayerInRangeOfPoint(playerid, 40.0, 53.180480521532445, -1527.351199817518, 4.87745094) || IsPlayerInRangeOfPoint(playerid, 40.0, 46.18144674051564, -1534.8529052095375, 4.95321989))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor, 53.61148071, -1525.98864746, -2.87745094, 5.0);
			MoveObject(zolltor1, 55.77261353, -1539.03112793, -2.95321989, 5.0);
			SetTimer("closegate", 15000, 0);
			SetTimer("closegate2", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, -981.43225098, -381.12454224, 36.21669388) || IsPlayerInRangeOfPoint(playerid, 40.0, -969.41735840, -379.66165161, 36.21669388))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor2, -981.43225098, -381.12454224, -26.21669388, 5.0);
			MoveObject(zolltor3, -969.41735840, -379.66165161, -26.21669388, 5.0);
			SetTimer("closegate3", 15000, 0);
			SetTimer("closegate4", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 1754.57714844, 523.82324219, 27.69068718) || IsPlayerInRangeOfPoint(playerid, 40.0, 1744.70703125, 527.12695312, 27.43260956) || IsPlayerInRangeOfPoint(playerid, 40.0,  1727.59667969, 533.24121094, 27.49211121) || IsPlayerInRangeOfPoint(playerid, 40.0, 1736.46093750, 530.24609375, 27.49927139))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor4, 1754.57714844, 523.82324219, 17.69068718, 5.0);
			MoveObject(zolltor5, 1744.70703125, 527.12695312, 17.43260956, 5.0);
			MoveObject(zolltor6, 1736.46093750, 530.24609375, 17.49927139, 5.0);
			MoveObject(zolltor7, 1727.59667969, 533.24121094, 17.49211121, 5.0);
			SetTimer("closegate5", 15000, 0);
			SetTimer("closegate6", 15000, 0);
			SetTimer("closegate7", 15000, 0);
			SetTimer("closegate8", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, -162.66503906, 403.01269531, 11.91834545) || IsPlayerInRangeOfPoint(playerid, 40.0, -154.94238281, 401.06250000, 11.91834545))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor8, -162.66503906, 403.01269531, 1.91834545, 5.0);
			MoveObject(zolltor9, -154.94238281, 401.06250000, 1.91834545, 5.0);
			SetTimer("closegate9", 15000, 0);
			SetTimer("closegate10", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, -1230.96582031,994.12304688,43.41479111) || IsPlayerInRangeOfPoint(playerid, 40.0, -1242.07812500, 1000.90136719, 43.47349930))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor10, -1230.96582031, 994.12304688, 33.41479111, 5.0);
 			MoveObject(zolltor11, -1242.07812500, 1000.90136719, 33.47349930, 5.0);
			SetTimer("closegate11", 15000, 0);
			SetTimer("closegate12", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 102.20307159,-1270.01013184,14.58920097) || IsPlayerInRangeOfPoint(playerid, 40.0, 112.27465820, -1277.22094727, 14.75586414) || IsPlayerInRangeOfPoint(playerid, 40.0, 100.10153198, -1254.57641602, 14.75407791) || IsPlayerInRangeOfPoint(playerid, 40.0, 89.60826111,-1248.17480469,14.42384052))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor12, 102.20307159, -1270.01013184, 4.58920097, 5.0);
			MoveObject(zolltor13, 112.27465820, -1277.22094727, 4.75586414, 5.0);
			MoveObject(zolltor14, 100.10153198, -1254.57641602, 4.75407791, 5.0);
			MoveObject(zolltor15, 89.60826111, -1248.17480469, 4.42384052, 5.0);
			SetTimer("closegate13", 15000, 0);
			SetTimer("closegate14", 15000, 0);
			SetTimer("closegate15", 15000, 0);
            SetTimer("closegate16", 15000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, -2694.72802734, 1275.12854004, 55.26990891) || IsPlayerInRangeOfPoint(playerid, 40.0, -2685.87304688,1275.14294434,55.26990891) || IsPlayerInRangeOfPoint(playerid, 40.0, -2677.04370117, 1275.15173340, 55.26990891) || IsPlayerInRangeOfPoint(playerid, 40.0, -2667.32788086, 1275.27246094, 55.26990891))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Gute Weiterfahrt!");
			MoveObject(zolltor16, -2694.72802734, 1275.12854004, 45.26990891, 5.0);
			MoveObject(zolltor17, -2694.72802734, 1275.12854004, 45.26990891, 5.0);
			MoveObject(zolltor18, -2677.04370117, 1275.15173340, 45.26990891, 5.0);
			MoveObject(zolltor19, -2667.32788086, 1275.27246094, 45.26990891, 5.0);
			SetTimer("closegate17", 15000, 0);
			SetTimer("closegate18", 15000, 0);
			SetTimer("closegate19", 15000, 0);
            SetTimer("closegate20", 15000, 0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist an keiner Zollstation!");
		}
		return 1;
	}
//======== ZOLL ========//
	if (strcmp(cmdtext, "/zoll", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 53.180480521532445, -1527.351199817518, 4.87745094))
		{
		    if(zollvar[0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 1!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 1!");
			MoveObject(zolltor, 53.61148071, -1525.98864746, -2.87745094, 3.5);
			SetTimer("closegate", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 46.18144674051564, -1534.8529052095375, 4.95321989))
		{
		    if(zollvar[1] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 2!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 2!");
			MoveObject(zolltor1, 55.77261353, -1539.03112793, -2.95321989, 3.5);
			SetTimer("closegate2", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -981.43225098, -381.12454224, 36.21669388))
		{
		    if(zollvar[2] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 3!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 3!");
			MoveObject(zolltor2, -981.43225098, -381.12454224, -26.21669388, 3.5);
			SetTimer("closegate3", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -969.41735840, -379.66165161, 36.21669388))
		{
		    if(zollvar[3] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 4!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 4!");
			MoveObject(zolltor3, -969.41735840, -379.66165161, -26.21669388, 3.5);
			SetTimer("closegate4", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1754.57714844, 523.82324219, 27.69068718))
		{
		    if(zollvar[4] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 5!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 5!");
			MoveObject(zolltor4, 1754.57714844, 523.82324219, 17.69068718, 3.5);
			SetTimer("closegate5", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1744.70703125, 527.12695312, 27.43260956))
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveObject(zolltor5, 1744.70703125, 527.12695312, 17.43260956, 3.5);
			SetTimer("closegate6", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1727.59667969, 533.24121094, 27.49211121))
		{
		    if(zollvar[6] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 7!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 7!");
			MoveObject(zolltor7, 1727.59667969, 533.24121094, 17.49211121, 3.5);
			SetTimer("closegate7", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1736.46093750, 530.24609375, 27.49927139))
		{
		    if(zollvar[7] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 8!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 8!");
			MoveObject(zolltor6, 1736.46093750, 530.24609375, 17.49927139, 3.5);
			SetTimer("closegate8", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -162.66503906, 403.01269531, 11.91834545))
		{
		    if(zollvar[8] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 9!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 9!");
			MoveObject(zolltor8, -162.66503906, 403.01269531, 1.91834545, 3.5);
			SetTimer("closegate9", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -154.94238281, 401.06250000, 11.91834545))
		{
		    if(zollvar[9] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 10!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 10!");
			MoveObject(zolltor9, -154.94238281, 401.06250000, 1.91834545, 3.5);
			SetTimer("closegate10", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -1230.96582031,994.12304688,43.41479111))
		{
		    if(zollvar[10] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 11!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 11!");
			MoveObject(zolltor10, -1230.96582031, 994.12304688, 33.41479111, 3.5);
			SetTimer("closegate11", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -1242.07812500, 1000.90136719, 43.47349930))
		{
		    if(zollvar[11] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 12!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 12!");
			MoveObject(zolltor11, -1242.07812500, 1000.90136719, 33.47349930, 3.5);
			SetTimer("closegate12", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 102.20307159,-1270.01013184,14.58920097))
		{
		    if(zollvar[12] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 13!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 13!");
			MoveObject(zolltor12, 102.20307159, -1270.01013184, 4.58920097, 3.5);
			SetTimer("closegate13", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 112.27465820, -1277.22094727, 14.75586414))
		{
		    if(zollvar[13] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 14!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 14!");
			MoveObject(zolltor13,  112.27465820, -1277.22094727, 4.75586414, 3.5);
			SetTimer("closegate14", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 100.10153198, -1254.57641602, 14.75407791))
		{
		    if(zollvar[14] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 15!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 15!");
			MoveObject(zolltor14,  100.10153198, -1254.57641602, 4.75407791, 3.5);
			SetTimer("closegate15", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 89.60826111,-1248.17480469,14.42384052))
		{
		    if(zollvar[15] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 16!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 16!");
			MoveObject(zolltor15,  89.60826111, -1248.17480469, 4.42384052, 3.5);
			SetTimer("closegate16", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2694.72802734, 1275.12854004, 55.26990891))
		{
		    if(zollvar[16] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 17!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 17!");
			MoveObject(zolltor16,  -2694.72802734, 1275.12854004, 45.26990891, 3.5);
			SetTimer("closegate17", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2685.87304688,1275.14294434,55.26990891))
		{
		    if(zollvar[17] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 18!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 18!");
			MoveObject(zolltor17,  -2694.72802734, 1275.12854004, 45.26990891, 3.5);
			SetTimer("closegate18", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2677.04370117, 1275.15173340, 55.26990891))
		{
		    if(zollvar[18] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 19!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 19!");
			MoveObject(zolltor18,  -2677.04370117, 1275.15173340, 45.26990891, 3.5);
			SetTimer("closegate19", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2667.32788086, 1275.27246094, 55.26990891))
		{
		    if(zollvar[19] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				GivePlayerMoney(playerid, -500);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 500$ bezahlt | Gute Weiterfahrt von Zoll 20!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 20!");
			MoveObject(zolltor19,  -2667.32788086, 1275.27246094, 45.26990891, 3.5);
			SetTimer("closegate20", 3000, 0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist an keiner Zollstation!");
		}
		return 1;
	}
	if(strcmp(cmd, "/zölle", true) == 0)
	{
	    if(IsACop(playerid))
	    {
			ShowPlayerDialog(playerid, DIALOG_ZÖLLE, DIALOG_STYLE_LIST, "Zölle", "Zoll Los Santos\nZoll LV\n", "Auswählen", "Abbrechen");
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_RED, "Du bist kein Staatsbeamter und nicht befugt!");
	    }
	}
//============= DURCHSUCHEN ==============//
	if(strcmp(cmd, "/durchsuchen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Du musst erst eingeloggt sein!");
				return 1;
			}
			if(!IsAGang(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Können nur Mafiosi und Gangmitglieder!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /durchsuchen [Spieler ID]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Der Spieler muss gefesselt sein!");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s hat %d$ dabei.", giveplayer, GetPlayerMoney(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Spieler nicht in deiner Nähe");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
//============= /augenbinde ==============//
	if(strcmp(cmd, "/augenbinde", true) == 0) // by Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /augenbinde [Spieler ID]");
				return 1;
			}
			if(!IsAGang(playerid) && !IsACop(playerid))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Können nur Gangmitglieder, Mafiosi und Cops!");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "Du musst im selben Auto sitzen!");
        						return 1;
	        				}
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s hat %s eine Augenbinde angelegt.", sendername, giveplayer);
			            	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Der Spieler muss gefesselt sein!");
							return 1;
						}
					}
					else if(BlindFold[giveplayerid] == 1)
					{
					    new Float:x, Float:y, Float:z;
					    GetPlayerPos(giveplayerid,x,y,z);
					    if(PlayerToPoint(5, playerid, x, y, z))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        SetCameraBehindPlayer(giveplayerid);
					    	BlindFold[giveplayerid] = 0;
					    	format(string, sizeof(string), "* %s hat %s Augenbinde abgenommen.", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Spieler nicht in deiner Nähe!");
						    return 1;
						}
					}
			    }
			}
	    }
	    return 1;
	}

//============= BLITZER ===============//
	if(strcmp(cmd, "/blitzer", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GOLD, "___________________________|Blitzer|___________________________");
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /blitzer [Funktion]");
				SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: neu, weg, alleweg [Rang 4], anzeigen");
				SendClientMessage(playerid, COLOR_GOLD, "_____________________________________________________________");
				return 1;
			}
			if(strcmp(tmp,"neu",true) == 0)
			{
		        tmp = strtok(cmdtext, idx);
		   		if(!strlen(tmp))
		   		{
		 			SendClientMessage(playerid, COLOR_GREY, "Benutzung: /blitzer neu [Geschwindigkeit] [Strafe]");
		 			return 1;
				}
				new b_speed;
				b_speed = strval(tmp);
				if(b_speed < 70 || b_speed > 200)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Hinweis: Die Geschwindigkeit muss zwischen 70 und 200 km/h liegen.");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREY, "Benutzung: /blitzer neu [Geschwindigkeit] [Strafe]");
					return 1;
				}
				new b_strafe;
				b_strafe = strval(tmp);
				if(b_strafe < 5 || b_strafe > 500)
				{
					SendClientMessage(playerid, COLOR_GREY, "Hinweis: Die Strafe muss zwischen 5$ / KMH und 500$ / KMH liegen.");
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid))
				{
					AddBlitzer(playerid,b_speed,b_strafe);
					new player[MAX_PLAYER_NAME];
					GetPlayerName(playerid, player, sizeof(player));
					format(string, sizeof(string), "%s hat einen Blitzer aufgestellt.", player);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "Blitzer aufgestellt, Max. Geschwindigkeit: %d, Strafe: %d.", b_speed, b_strafe);
					SendClientMessage(playerid, COLOR_GREEN, string);
					BlitzerErstellt[playerid] = 1;
					FreezePlayer(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Du musst in einem Auto sein!");
				}
			}
			else if(strcmp(tmp,"weg",true) == 0)
			{
				RemoveBlitzer(playerid);
				new player[MAX_PLAYER_NAME];
				GetPlayerName(playerid, player, sizeof(player));
				format(string, sizeof(string), "%s hat seinen Blitzer abgebaut.", player);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BlitzerErstellt[playerid] = 0;
				UnFreezePlayer(playerid);
				return 1;
			}
			else if(strcmp(tmp,"alleweg",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] <= 4)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Mindestens Rang 4 benötigt!");
			        return 1;
   	 			}
				RemoveAllBlitzer();
				SendClientMessage(playerid, COLOR_GREEN, "Alle Blitzer abgebaut.");
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24)
					{
					    RemoveBlitzer(i);
					    UnFreezePlayer(i);
	        			new player[MAX_PLAYER_NAME];
		        		GetPlayerName(playerid, player, sizeof(player));
	  					format(string, sizeof(string), "*Alle Blitzer wurden von %s abgebaut.", player);
	  					SendClientMessage(i, COLOR_LIGHTBLUE, string);
					}
				}
				return 1;
			}
			else if(strcmp(tmp, "anzeigen", true) == 0)
			{
				if(GesammtBlitzer != 0)
				{
				    SendClientMessage(playerid, COLOR_GOLD, "______________| Aktive Blitzer |_______________");
					format(string, sizeof(string), "%d / 15 Blitzer derzeit aktiv.", GesammtBlitzer);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_GOLD, "_____________________________________________");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Keine Blitzer aktiv.");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "___________________________|Fehler|__________________________");
				SendClientMessage(playerid, COLOR_RED, "Benutzung: /blitzer [Funktion]");
				SendClientMessage(playerid, COLOR_RED, "Verfügbare Funktionen: neu, weg, alleweg [Rang 4], anzeigen");
				SendClientMessage(playerid, COLOR_RED, "_____________________________________________________________");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Ordnungsbeamter!");
		}
		return 1;
	}
	if(strcmp(cmd, "/lsawaren", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] == 1350)
		{
		    LSAWaren += 100;
		}
		return 1;
	}
	if(strcmp(cmd, "/einsperren", true) == 0)
	{
	    if(IsACop(playerid))
	    {
	        if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht im Dienst!");
	            return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 6.0, 195.3785,158.2065,1003.0234))
			{
				new suspect = GetClosestPlayer(playerid);
				if(IsACop(suspect))
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du kannst keinen Beamten einsperren!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_GOLD, "____________________________|Einsperren|____________________________");
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /einsperren [Aktion]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Aktion: normal, stellen");
				    return 1;
				}
				if(strcmp(tmp, "normal", true) == 0)
				{
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
						    moneys = WantedLevel[suspect] * 3000;
						    new time = WantedLevel[suspect] * 360;
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
			    				SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht gesucht!");
						    	return 1;
							}
							GivePlayerMoney(playerid, moneys/2);
							FraktionsKasse[0] += moneys/2;
							format(string, sizeof(string), "* Du hast %s eingesperrt für %d$ und %d Sekunden!", giveplayer,moneys, time);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "* Du wurdest von %s für %d Sekunden und für %d$ eingesperrt", sendername, time, moneys);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							ResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
								format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "<< FBI Beamter %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
							{
								format(string, sizeof(string), "<< Soldat %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							if(LSPDZellen == 0)//zelle1
							{
				   				SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,215.0419,110.2922,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 1)//zelle2
							{
			    				SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,227.8457,110.7000,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 2)//zelle3
							{
								SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,223.2922,110.6890,999.0156);
								LSPDZellen = 0;
							}
							PlayerInfo[suspect][pJailTime] = time;
							PlayerInfo[suspect][pJailed] = 1;
		     				PlayerInfo[suspect][pArrested] += 1;
			        		SetPlayerInterior(suspect, 3);
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							SetPlayerWantedLevel(suspect,0);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in der Nähe!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					}
				}
				else if(strcmp(tmp, "stellen", true) == 0)
				{
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
						    moneys = WantedLevel[suspect] * 2000;
						    new time = WantedLevel[suspect] * 240;
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
			    				SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht gesucht!");
						    	return 1;
							}
							GivePlayerMoney(playerid, moneys/2);
							FraktionsKasse[0] += moneys/2;
							format(string, sizeof(string), "* Du hast %s eingesperrt für %d$ und %d Sekunden!", giveplayer,moneys, time);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "* Du wurdest von %s für %d Sekunden und für %d$ eingesperrt", sendername, time, moneys);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							ResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
								format(string, sizeof(string), "<< Officer %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "<< FBI Beamter %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
							{
								format(string, sizeof(string), "<< Soldat %s hat den Verdächtigen %s eingesperrt >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							if(LSPDZellen == 0)//zelle1
							{
				   				SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,223.2922,110.6890,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 1)//zelle2
							{
			    				SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,227.8457,110.7000,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 2)//zelle3
							{
								SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,215.0419,110.2922,999.0156);
								LSPDZellen = 0;
							}
							PlayerInfo[suspect][pJailTime] = time;
							PlayerInfo[suspect][pJailed] = 1;
		     				PlayerInfo[suspect][pArrested] += 1;
			        		SetPlayerInterior(suspect, 3);
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							SetPlayerWantedLevel(suspect,0);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in der Nähe!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an den Zellen!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
		}
		return 1;
	}
//============= PRODUKTE SYSTEM ==================//
	if(strcmp(cmd, "/produkte", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] >= 0 || PlayerInfo[playerid][pLeader] >= 0)
	        {
				tmp = strtok(cmdtext, idx);
				new aktion[200];
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_GOLD, "____________________________|Prdoukthilfe|____________________________");
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /produkte [Aktion]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: kaufen, verkaufen, anzeigen");
				    return 1;
				}
				if(strcmp(tmp, "kaufen", true) == 0)
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 456)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Dieses Fahrzeug kann keine Produkte ausliefern!");
					    return 1;
					}
					if(!IsPlayerInRangeOfPoint(playerid, 50, 1957.5536,-2183.4856,13.5469))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Eingang vom Los Santos Airport!");
					    return 1;
					}
				    aktion = strtok(cmdtext, idx);
				    if(!strlen(aktion))
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /produkte kaufen [Anzahl]");
				        SendClientMessage(playerid, COLOR_GRAD1, "*Preis pro Produkt: 50$, Maximale Produkte: 100");
						return 1;
					}
					new menge;
					menge = strval(aktion);
					new preis = menge*50;
					if(menge > LSAWaren)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Derzeit haben wir nicht soviele Produkte auf Lager!");
					    return 1;
					}
					if(menge < 1 || menge > 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst mindestens 1 Produkt und höchstens 100 Produkte kaufen!");
						return 1;
					}
					if(menge + ProdsDabei[playerid] > 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "So viele Produkte passen nicht mehr rein!");
						format(string, sizeof(string), "Produkte dabei: %d/100",ProdsDabei[playerid]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					    return 1;
					}
					if(preis > GetPlayerMoney(playerid))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					    return 1;
					}
					ProdsDabei[playerid] = menge;
					LSAWaren -= menge;
					GivePlayerMoney(playerid, -preis);
					format(string, sizeof(string), "*Du hast %d Produkte für %d$ gekauft.", menge, preis);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du kannst sie nun an Geschäfte verkaufen.");
					new string2[200];
					format(string2, sizeof(string2), "[Produktverkauf]\nPreis pro Produkt: 50$\nProdukte auf Lager: %d\nKaufen mit /produkt\nEinkauf nur mit Prodlaster", LSAWaren);
					Update3DTextLabelText(LSWText, 0xFFFFFFFF, string2);
					SaveStuff();
					return 1;
				}
				else if(strcmp(tmp, "verkaufen", true) == 0)
				{
				    aktion = strtok(cmdtext, idx);
				    if(!strlen(aktion))
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /produkte verkaufen [Anzahl]");
						return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 456)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Dieses Fahrzeug kann keine Produkte ausliefern!");
					    return 1;
					}
					for(new i = 0; i < sizeof(BizzInfo); i++)
					{
					    new menge = strval(aktion);
					    new preis = menge*BizzInfo[i][bPriceProd];
						if (IsPlayerInRangeOfPoint(playerid,10.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && BizzInfo[i][bOwned] == 1)
						{
							if(BizzInfo[i][bProducts] + menge > BizzInfo[i][bMaxProducts])
							{
								GameTextForPlayer(playerid, "~r~Wir benoetigen nicht soviele Produkte!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							if(preis > BizzInfo[i][bTill])
							{
								GameTextForPlayer(playerid, "~r~Wir haben zu wenig Geld!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							ProdsDabei[playerid] -= menge;
							GivePlayerMoney(playerid, preis);
							BizzInfo[i][bProducts] += menge;
							BizzInfo[i][bTill] -= preis;
							new string3[200];
          		    		format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[i][bMessage],BizzInfo[i][bOwner],BizzInfo[i][bExtortion],BizzInfo[i][bEntranceCost],BizzInfo[i][bLevelNeeded],BizzInfo[i][bProducts],BizzInfo[i][bMaxProducts],BizzInfo[i][bPriceProd]);
						    Update3DTextLabelText(BizzInfo[i][bText],COLOR_BUYED,string3);
							format(string, sizeof(string), "%d Produkte für %d$ verkauft, Produkte: %d/100.", menge,preis,ProdsDabei[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							ConsumingMoney[playerid] = 1;
							OnPropUpdate();
							return 1;
						}
					}
					for(new s = 0; s < sizeof(SBizzInfo); s++)
					{
					    new menge = strval(aktion);
					    new preis = menge*SBizzInfo[s][sbPriceProd];
						if (IsPlayerInRangeOfPoint(playerid,10.0,SBizzInfo[s][sbEntranceX], SBizzInfo[s][sbEntranceY], SBizzInfo[s][sbEntranceZ]) && SBizzInfo[s][sbOwned] == 1)
						{
							if(SBizzInfo[s][sbProducts] + menge > SBizzInfo[s][sbMaxProducts])
							{
								GameTextForPlayer(playerid, "~r~Wir benoetigen nicht soviele Produkte!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							if(menge > ProdsDabei[playerid])
							{
								format(string, sizeof(string), "Du hast nur %d Produkte dabei!", ProdsDabei[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								return 1;
							}
							if(preis > SBizzInfo[s][sbTill])
							{
								GameTextForPlayer(playerid, "~r~Wir haben zu wenig Geld!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							ProdsDabei[playerid] -= menge;
							format(string, sizeof(string), "%d Produkte für %d$ verkauft, Produkte: %d/100.", menge,preis,ProdsDabei[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(playerid, preis);
							SBizzInfo[s][sbProducts] += menge;
							SBizzInfo[s][sbTill] -= preis;
							new string4[200];
	    					format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[s][sbMessage],SBizzInfo[s][sbOwner],SBizzInfo[s][sbExtortion],SBizzInfo[s][sbEntranceCost],SBizzInfo[s][sbLevelNeeded],SBizzInfo[s][sbProducts],SBizzInfo[s][sbMaxProducts], SBizzInfo[s][sbPriceProd]);
					    	Update3DTextLabelText(SBizzInfo[s][sbText],COLOR_BUYED,string4);
							ConsumingMoney[playerid] = 1;
							OnPropUpdate();
							return 1;
						}
					}
					GameTextForPlayer(playerid, "~r~Kein Business in der Naehe", 5000, 1);
					return 1;
				}
				else if(strcmp(tmp, "anzeigen", true) == 0)
				{

					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 456)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Yankee");
					    return 1;
					}
					new prods = ProdsDabei[playerid];
					format(string, sizeof(string), "*Produkte dabei: %d/100", prods);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "ERROR!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Logg dich erst ein!");
		}
		return 1;
	}



//============= AIRPORT SYSTEM ================//
	 if(strcmp(cmd, "/waren", true) == 0)
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 16)
	        {
	            if(PlayerInfo[playerid][pFlugTime] > 0)
	            {
	                format(string, sizeof(string), "Du musst noch %d bis zum nächsten Flug warten!", PlayerInfo[playerid][pFlugTime]);
	                SendClientMessage(playerid, COLOR_GRAD1, string);
	                return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_GOLD, "____________________________|Warenhilfe|____________________________");
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /waren [Aktion]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: kaufen, tauschen, verkaufen, abrechnung");
					SendClientMessage(playerid, COLOR_WHITE, "*Kaufen [LS], Tauschen [SF], Verkaufen [LV], Abrechnung [LS]");
					SendClientMessage(playerid, COLOR_GOLD,"__________________________________________________________________");
					return 1;
				}
				if(strcmp(tmp,"kaufen",true) == 0)
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Benutzung: /waren kaufen [Anzahl]");
					    SendClientMessage(playerid, COLOR_GREY, "*Preis pro Ware: 500$, Maximale Waren: 100");
					    return 1;
					}
					if(!IsPlayerInRangeOfPoint(playerid, 90.0, 1888.6704,-2638.9941,13.5469))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Hangar am Los Santos Airport!");
					    return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 553)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nur mit einer Nevada Waren kaufen!");
					    return 1;
					}
					new menge;
					menge = strval(tmp);
					new preis = menge*500;
					if(menge < 5 || menge > 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens 5 Waren und maxiimal 100 Waren kaufen!");
					    return 1;
					}
					if(WarenDabei[playerid] >= 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du hast schon 100 Waren dabei!");
					    return 1;
					}
					if(preis > GetPlayerMoney(playerid))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kannst du dir nicht leisten!");
					    return 1;
					}
					WarenDabei[playerid] = menge;
					GivePlayerMoney(playerid, -preis);
					format(string, sizeof(string), "*Du hast dir %d Waren im Wert von %d$ gekauft", menge, preis);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Fliege jetzt zum SF Airport (Roter Marker)");
					SetPlayerCheckpoint(playerid, -1233.6982,-88.1554,14.9228, 8.0);
					return 1;
				}
				else if(strcmp(tmp,"tauschen", true) == 0)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 90.0, -1233.6982,-88.1554,14.9228))
				    {
				        SendClientMessage(playerid, COLOR_GRAD1,"Du bist nicht am Hangar am San Fiero Airport!");
				        return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 553)
					{
					    SendClientMessage(playerid, COLOR_GRAD1,"Du bist in keiner Nevada!");
					    return 1;
					}
					if(WarenDabei[playerid] > 0)
					{
                        Waren2Dabei[playerid] = WarenDabei[playerid];
						format(string, sizeof(string), "*Du hast deine %d Waren gegen %d neue Ware ausgetauscht.",WarenDabei[playerid], Waren2Dabei[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Fliege jetzt zum LV Airport (Roter Marker)");
						SetPlayerCheckpoint(playerid, 1346.5087,1712.4694,10.8203, 8.0);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Keine Waren vom LS Airport dabei!");
					}
				}
				else if(strcmp(tmp,"verkaufen", true) == 0)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 90.0, 1346.5087,1712.4694,10.8203))
				    {
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Hangar am Las Venturas Airport!");
						return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 553)
					{
					    SendClientMessage(playerid, COLOR_GRAD1,"Du bist in keiner Nevada!");
					    return 1;
					}
					new geld = Waren2Dabei[playerid] * 1000+random(4000);
					if(Waren2Dabei[playerid] > 0)
					{
						format(string, sizeof(string), "%d Waren aus San Fierro für %d$ verkauft.", Waren2Dabei[playerid], geld);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE,"*Bestellungsschein wurde unterschrieben.");
					    Waren3Verkauft[playerid] = geld;
					    SetPlayerCheckpoint(playerid, 1888.6704,-2638.9941,13.5469, 8.0);
					    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du hast keine Waren vom San Fiero Airport dabei!");
					}
				}
				else if(strcmp(tmp,"abrechnung", true) == 0)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 90.0, 1888.6704,-2638.9941,13.5469))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Hangar in Los Santos!");
					    return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 553)
					{
					    SendClientMessage(playerid, COLOR_GRAD1,"Du bist in keiner Nevada!");
					    return 1;
					}
					if(Waren3Verkauft[playerid] > 0)
					{
						new lohn = Waren3Verkauft[playerid] - 2000;
						SendClientMessage(playerid, COLOR_GOLD, "_______________|Abrechunung|_______________");
						format(string, sizeof(string), "Einnahmen gesammt: %d$", Waren3Verkauft[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						new string2[128];
						format(string2, sizeof(string2), "Lohn abzüglich Tankgebühr: %d$", lohn);
						SendClientMessage(playerid, COLOR_WHITE, string2);
						LSAWaren += Waren3Verkauft[playerid];
						new string10[200];
						format(string10, sizeof(string10), "[Produktverkauf]\nPreis pro Produkt: 50$\nProdukte auf Lager: %d\nKaufen mit /produkt\nEinkauf nur mit Prodlaster", LSAWaren);
						Update3DTextLabelText(LSWText, 0xFFFFFFFF, string10);
						SaveStuff();
						ConsumingMoney[playerid] = 1;
						GivePlayerMoney(playerid, lohn);
						Waren3Verkauft[playerid] = 0;
		    			Waren2Dabei[playerid] = 0;
					    WarenDabei[playerid] = 0;
						SendClientMessage(playerid, COLOR_GOLD, "_________________________________________");
						DisablePlayerCheckpoint(playerid);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Chef: Den nächsten Flug kannst du in 30 Minuten machen.");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Chef: Solange kannst du Passagiere fliegen.");
						PlayerInfo[playerid][pFlugTime] = 1800;
      					new car;
						car = GetPlayerVehicleID(playerid);
  	    				SetVehicleToRespawn(car);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Bestellungsschein dabei!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GOLD, "____________________________|Warenhilfe|____________________________");
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /waren [Aktion]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: kaufen, tauschen, verkaufen, abrechnung");
					SendClientMessage(playerid, COLOR_WHITE, "*Kaufen [LS], Tauschen [SF], Verkaufen [LV], Abrechnung [LS]");
					SendClientMessage(playerid, COLOR_GOLD,"__________________________________________________________________");
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Pilot!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Nicht eingeloggt!");
		}
		return 1;
	}


//============= AUTOFARBEN =================//
	if(!strcmp(cmdtext, "/autofarben", true))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Schwarz: 0 || Weiß: 1 || Blau: 2 || Rot: 3 || Rosa: 5 || Gelb: 6");
	    SendClientMessage(playerid, COLOR_WHITE, "Weitere Farben unter {FF0000}www.wiki.sa-mp.com/wiki/Color_ID");
		return 1;
	}
	if(strcmp(cmd, "/frakkammermats", true) == 0)
	{
	    new frak;
	    if(PlayerInfo[playerid][pMember] > 0)
	    {
	        frak = PlayerInfo[playerid][pMember];
		}
		else if(PlayerInfo[playerid][pLeader] > 0)
		{
		    frak = PlayerInfo[playerid][pLeader];
		}
		if(frak == 5)
		{
			format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", LCNMats);
		}
		else if(frak == 6)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", YakMats);
		}
		else if(frak == 12)
		{
	 		format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", TriadMats);
		}
		else if(frak == 13)
		{
      		format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", GroveMats);
		}
		else if(frak == 14)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", BallasMats);
		}
		else if(frak == 15)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", BikerMats);
		}
		else if(frak == 16)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", VagosMats);
		}
		else if(frak == 17)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", AztecaMats);
		}
		else if(frak == 19)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", RSMats);
		}
		else if(frak == 20)
		{
		    format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", TerrorMats);
		}
		else if(frak == 23)
		{
            format(ALLSTRING, sizeof(ALLSTRING), "In eurer Fraktionskammer sind %d Fraktions-Materialien!", BrigadaMats);
		}
		else
		{
			format(ALLSTRING, sizeof(ALLSTRING), "Ihr habt gar keine Fraktionskammer!");
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
		return 1;
	}
 	if(strcmp(cmd, "/auftrag", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 8))
	    {
	   		SearchingHit(playerid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
//============= /AUFTRAGGEBEN ===============//
	/*if(strcmp(cmd, "/auftraggeben", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 8))
		{
		    if(PlayerInfo[playerid][pRank] < 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rank 2 um Aufträge einem Hitman zuzuteilen");
		        return 1;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Es gibt derzeit keine Aufträge, schau vorher unter /auftrag nach.");
		        return 1;
		    }
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /auftraggeben [Hitman ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pLeader] != 8 && PlayerInfo[giveplayerid][pMember] != 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist kein Hitman!");
						return 1;
				    }
				    if(GoChase[giveplayerid] < 999)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Dieser Hitman ist bereits beschäftigt!");
						return 1;
				    }
				    if(IsPlayerConnected(hitid))
				    {
				        new giver[MAX_PLAYER_NAME];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giver, sizeof(giver));
				        GetPlayerName(hitid, giveplayer, sizeof(giveplayer));
		    			format(string, sizeof(string), "* Hitman %s hat %s den Auftrag gegeben, %s(ID:%d) für %d$ zu töten.", sendername, giver, giveplayer, hitid, PlayerInfo[hitid][pHeadValue]);
		    			SendFamilyMessage(8, COLOR_YELLOW, string);
		    			GoChase[giveplayerid] = hitid;
		    			GetChased[hitid] = giveplayerid;
		    			GotHit[hitid] = 1;
		    			hitid = 0;
		    			hitfound = 0;
				        return 1;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist offline!");
				        return 1;
				    }
				}
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Dieser Hitman ist nicht online!");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
	*/
//============= BESTELLEN ===============//
	if(strcmp(cmd, "/bestellen", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 8))
	    {
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du hast bereits ein Packet angefordert , sammel  es erst am Hauptquatier auf!");
		        return 0;
		    }
		    tmp = strtok(cmdtext, idx);
   			if(!strlen(tmp))
		    {
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________ Packete Hitman __________________|");
			    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /bestellen [Bestellungsnummer]");
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) ($5000 ) Rank 1 - 5: Knife, Desert Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) ($8000) Rank 3 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) ($8000) Rank 3 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) ($8500) Rank 4 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) ($8500) Rank 4 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
			    return 1;
			}
      		if(strcmp(tmp,"1",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 4999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 1 angefordert ($5000), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 1;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"2",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern !"); return 0; }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 2 angefordert ($6000), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 2;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten!");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"3",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 3 angefordert ($6000),  es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 3;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"4",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have Ordered Package 4 ($8000), it will be delivered at your Head Quarter's Front Door.");
			        OrderReady[playerid] = 4;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"5",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 4 angefordert ($8000),  es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 5;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"6",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 5 angefordert ($8000),  es wird an deinem Hauptquatier abgeliefert..");
			        OrderReady[playerid] = 6;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten!");
			        return 1;
			    }
			}
			else if(strcmp(tmp,"7",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 6 angefordert ($8500), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 7;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 1;
			    }
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
//============= TASCHE ================//

   	if(!strcmp(cmdtext, "/tasche", true))
	{
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Du musst eingeloggt sein!");
                return 1;
            }
            new gunname[100];
            GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
            new gunname2[100];
			GetWeaponName(PlayerInfo[playerid][pInvWeapon2], gunname2, sizeof(gunname2));
            SendClientMessage(playerid, COLOR_GOLD, "|___________ Tasche __________|");
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
           		format(string, sizeof(string), "1.Waffe: %s, Munition: %d", gunname, PlayerInfo[playerid][pInvAmmo]);
           		SendClientMessage(playerid, COLOR_GOLD, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GOLD, "1.Waffe: -");
			}
			if(PlayerInfo[playerid][pInvWeapon2] != 0 && PlayerInfo[playerid][pInvAmmo2] != 0)
			{
          		format(string, sizeof(string), "2.Waffe: %s, Munition: %d", gunname2, PlayerInfo[playerid][pInvAmmo2]);
           		SendClientMessage(playerid, COLOR_GOLD, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GOLD, "2.Waffe; -");
			}
           	format(string, sizeof(string), "Drogen: %d", PlayerInfo[playerid][pInvDrugs]);
           	SendClientMessage(playerid, COLOR_GOLD, string);
           	format(string, sizeof(string), "Materialien: %d", PlayerInfo[playerid][pInvMats]);
           	SendClientMessage(playerid, COLOR_GOLD, string);
            SendClientMessage(playerid, COLOR_GOLD, "*Weitere Befehle: /nehmen /verstauen");
        }
        return 1;
    }
//============== /VERSTAUEN ==================//
	if(strcmp(cmd, "/verstauen", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			for(new i=0; i < MAX_PLAYERS; i++)
			{
   				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				if(IsACop(i))
				{
                    if(ProxDetectorS(20.0, playerid, i))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Cops sind in der Nähe, du kannst nichst verstauen!");
						return 1;
					}
				}
			}
		    new namen[256];
		    namen = strtok(cmdtext, idx);
		    if(!strlen(namen))
		    {
		        SendClientMessage(playerid, COLOR_GOLD, "|__________________ Befehlshilfe _________________|");
		        SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /verstauen [Name] ([Menge])");
		        SendClientMessage(playerid, COLOR_GOLD, "Namen: Waffe1, Waffe2, Materialien, Drogen");
		        return 1;
			}
			if(strcmp(namen,"Waffe1", true) == 0)
			{
	   			new gunID = GetPlayerWeapon(playerid);
            	new gunAmmo = GetPlayerAmmo(playerid);
				if(gunID != 0 && gunAmmo != 0)
            	{
                	PlayerInfo[playerid][pInvWeapon] = gunID;
                	PlayerInfo[playerid][pInvAmmo] = gunAmmo;
					RemovePlayerWeapon(playerid, gunID);
                	GetPlayerName(playerid, sendername, sizeof(sendername));
					new gunname[100];
					GetWeaponName(gunID, gunname, sizeof(gunname));
                	format(string, sizeof(string), " %s in die Tasche verstaut.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
                	return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe, die du in die Tasche verstauen kannst!");
				    return 1;
				}
			}
			if(strcmp(namen,"Waffe2", true) == 0)
			{
	   			new gunID = GetPlayerWeapon(playerid);
            	new gunAmmo = GetPlayerAmmo(playerid);
				if(gunID != 0 && gunAmmo != 0)
            	{
                	PlayerInfo[playerid][pInvWeapon2] = gunID;
                	PlayerInfo[playerid][pInvAmmo2] = gunAmmo;
					RemovePlayerWeapon(playerid, gunID);
                	GetPlayerName(playerid, sendername, sizeof(sendername));
					new gunname[100];
					GetWeaponName(gunID, gunname, sizeof(gunname));
                	format(string, sizeof(string), " %s in die Tasche verstaut.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
                	return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe, die du in die Tasche verstauen kannst!");
				    return 1;
				}
			}
			if(strcmp(namen,"Drogen", true) == 0)
			{
   				tmp = strtok(cmdtext, idx);
		     	if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Drogen [Menge]");
			     	format(string, sizeof(string), "Du hast %d Drogen dabei.", PlayerInfo[playerid][pDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
			     	return 1;
		      	}
         		new tdrugs;
      			tdrugs = strval(tmp);
         		if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen dabei.", PlayerInfo[playerid][pDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
				    return 1;
		      	}
		      	if(tdrugs + PlayerInfo[playerid][pInvDrugs] > 60)
		      	{
		      	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 60 Gramm Drogen in deiner Tasche verstauen!");
		      	    return 1;
				}
         		if(tdrugs > PlayerInfo[playerid][pDrugs])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Drogen hast du nicht dabei!");
               		return 1;
              	}
              	PlayerInfo[playerid][pDrugs] -= tdrugs;
               	PlayerInfo[playerid][pInvDrugs] += tdrugs;
               	format(string, sizeof(string), "%d Gramm Drogen in die Tasche verstaut.", tdrugs);
               	SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			if(strcmp(namen,"Materialien", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
    			if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Materialien [Menge]");
		     		format(string, sizeof(string), "Du hast %d Materialien dabei", PlayerInfo[playerid][pMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
       	 		new matss;
           		matss = strval(tmp);
             	if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Materialien [Menge]");
		     		format(string, sizeof(string), "  Du hast %d Materialien dabei.", PlayerInfo[playerid][pMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
	      		if(matss + PlayerInfo[playerid][pInvMats] > 4000)
	      		{
	      		    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 4000 Materials in deiner Tasche verstauen!");
	      		    return 1;
				}
         		if(matss > PlayerInfo[playerid][pMats])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Materialien hast du dabei!");
               		return 1;
              	}
               	PlayerInfo[playerid][pMats] -= matss;
               	PlayerInfo[playerid][pInvMats] += matss;
               	format(string, sizeof(string), "%d Materialien in die Tasche verstaut.", matss);
                SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Name!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}

//============= /nehmen =================//
	if(strcmp(cmd, "/nehmen", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Diese Aktion kann hier nicht ausgeführt werden!");
		if(IsPlayerConnected(playerid))
		{
		    new namen[256];
		    namen = strtok(cmdtext, idx);
		    if(!strlen(namen))
		    {
		        SendClientMessage(playerid, COLOR_GOLD, "|__________________ Befehlshilfe _________________|");
		        SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /nehmen [Name] ([Menge])");
		        SendClientMessage(playerid, COLOR_GOLD, "Namen: Waffe1, Waffe2, Materialien, Drogen");
		        return 1;
			}
			if(strcmp(namen,"Waffe1", true) == 0)
			{
            	if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            	{
                	new gunname[100];
                	GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
                	SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pInvWeapon], PlayerInfo[playerid][pInvAmmo]);
      				format(string, sizeof(string), " %s aus der Tasche rausgeholt.", gunname);
      				SendClientMessage(playerid, COLOR_GREY, string);
      				PlayerInfo[playerid][pInvWeapon] = 0;
                	PlayerInfo[playerid][pInvAmmo] = 0;
				}
            	else
            	{
                	SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe in deiner Tasche!");
                	return 1;
            	}
			}
			else if(strcmp(namen,"Waffe2", true) == 0)
			{
			    if(PlayerInfo[playerid][pInvWeapon2] != 0 && PlayerInfo[playerid][pInvAmmo2] != 0)
			    {
			        new gunname[100];
					GetWeaponName(PlayerInfo[playerid][pInvWeapon2], gunname, sizeof(gunname));
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pInvWeapon2], PlayerInfo[playerid][pInvAmmo2]);
					format(string, sizeof(string), " %s aus der Tasche rausgeholt.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
					PlayerInfo[playerid][pInvWeapon2] = 0;
					PlayerInfo[playerid][pInvAmmo2] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe in deiner Tasche!");
				    return 1;
				}
			}
			else if(strcmp(namen,"Drogen", true) == 0)
			{
   				tmp = strtok(cmdtext, idx);
		     	if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen in deiner Tasche.", PlayerInfo[playerid][pInvDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
			     	return 1;
		      	}
         		new tdrugs;
      			tdrugs = strval(tmp);
         		if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen in deiner Tasche.", PlayerInfo[playerid][pInvDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
				    return 1;
		      	}
         		if(tdrugs > PlayerInfo[playerid][pInvDrugs])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Drogen hast du nicht in deiner Tasche!");
               		return 1;
              	}
              	PlayerInfo[playerid][pInvDrugs] -= tdrugs;
               	PlayerInfo[playerid][pDrugs] += tdrugs;
               	format(string, sizeof(string), "%d Gramm Drogen aus der Tasche genommen.", tdrugs);
               	SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else if(strcmp(namen,"Materialien", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
    			if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Materialien [Menge]");
		     		format(string, sizeof(string), "Du hast %d Materialien aus der Tasche genommen.", PlayerInfo[playerid][pBoxMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
       	 		new matss;
           		matss = strval(tmp);
             	if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Materialien [Menge]");
		     		format(string, sizeof(string), "  Du hast %d Materialien aus der Tasche genommen.", PlayerInfo[playerid][pBoxMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
         		if(matss > PlayerInfo[playerid][pInvMats])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Materialien hast du nicht in deiner Tasche!");
               		return 1;
              	}
              	if(matss + PlayerInfo[playerid][pMats] > 2000)
              	{
              	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien tragen.");
              	    return 1;
				}
               	PlayerInfo[playerid][pInvMats] -= matss;
               	PlayerInfo[playerid][pMats] += matss;
               	format(string, sizeof(string), "%d Materialien aus der Tasche genommen.", matss);
                SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Name!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}

//============= NEUES /GIVE ================//
	if(strcmp(cmd, "/give", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
	        x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_GOLD, "|____________________ Befehlshilfe ___________________|");
			    SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /give [Name] [Spieler ID] ([Menge])");
				SendClientMessage(playerid, COLOR_GOLD, "Namen: Drogen, Waffe, Materialien");
				return 1;
			}
			if(strcmp(x_nr,"Drogen",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs])
					 	{
					 		SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Drogen!"); return 1;
					 	}
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						format(string, sizeof(string), "* %s gibt %s Drogen.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"Waffe",true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /givewaffe [PlayerID]");
						return 1;
					}
					new playa;
					playa = ReturnUser(tmp);
					if(IsPlayerConnected(playa))
					{
					    if(playa != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, playa))
							{
							    if(playa == playerid)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Du kannst dir selber keine Waffe geben!");
							        return 1;
							    }
								if(IsPlayerInAnyVehicle(playa))
								{
								    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinem im Auto eine Waffe übergeben!");
								    return 1;
								}
								new gunID = GetPlayerWeapon(playerid);
								new needed = GetPlayerAmmo(playerid);
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(playa, giveplayer, sizeof(giveplayer));
								GivePlayerWeapon(playa, gunID, needed);
								RemovePlayerWeapon(playerid, gunID);
		  						format(string, sizeof(string),  "%s gibt %s seine Waffe.", sendername, giveplayer);
		    					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    					return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht nah genug!");
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist offline.");
					}
				}
			}
			else if(strcmp(x_nr,"Materialien",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Materialien!"); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pMats] -= dammount;
						PlayerInfo[giveplayerid][pMats] += dammount;
						format(string, sizeof(string), "* %s gibt %s Materialien.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}
		}
		return 1;
	}
//============= Schwarzmarkt ===============//
	if (strcmp("/pornos", cmdtext, true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,2800.9880,-1429.8492,40.0625))
		{
		    SendClientMessage(playerid, COLOR_RED,"Wenn du Sex Brauchst dann geh zu einer Hure!!!");
		    SendClientMessage(playerid, COLOR_RED,"Oder Such dir ne Freundin du Hengst!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED,"Du bist nicht im Schwarzmarkt, am Pornoständer!");
		}
		return 1;
	}
//=================== BuyLKWSchein ===============//
/*	if(strcmp("/lkwschein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,-242.1245,-235.2225,2.4297))
	    {
	        if(PlayerInfo[playerid][pLevel] >= 2)
	        {
	            if(GetPlayerMoney(playerid) >= 3500)
	            {
	                if(PlayerInfo[playerid][pLKWLic] >= 1)
	                {
	                    SendClientMessage(playerid, COLOR_RED, "Du hast den LKW Schein bereits");
	                }
	                else
	                {
	                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir den LKW Schein für 3500$ gekauft.");
	                    PlayerInfo[playerid][pLKWLic] = 1;
	                    GivePlayerMoney(playerid, -3500);
	                }
	            }
	            else { SendClientMessage(playerid, COLOR_RED, "Du kannst dir den LKW Schein nicht Leisten, du hast keine 3500$"); }
	        }
	        else { SendClientMessage(playerid, COLOR_RED, "Du hast nicht das erforderte Level 2"); }
		}
		else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Fleischberg"); }
	}*/
//=================== Flugschein ================//
/*	if(strcmp("/Flugschein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,1952.8041,-2178.1680,13.5469))
	    {
			if(PlayerInfo[playerid][pLevel] >= 1)
			{
			    if(GetPlayerMoney(playerid) >= 8750)
			    {
			        if(PlayerInfo[playerid][pFlyLic] >= 1)
			        {
			            SendClientMessage(playerid, COLOR_RED, "Du hast bereits den Flugschein");
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir den Flugschein für 8750$ gekauft.");
						PlayerInfo[playerid][pFlyLic] = 1;
						GivePlayerMoney(playerid, -8750);
			        }
			        
			    }
			    else { SendClientMessage(playerid, COLOR_RED, "Du kannst dir den Flugschein nicht leisten"); }
			}
		}
		else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Airport Gelände"); }
	}*/
//=================== Buywaffenschein ============//
	if(strcmp("/Kaufen", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,252.4243,111.7874,1003.2188))
	    {
	        if(PlayerInfo[playerid][pLevel] >= 5)
	        {
				if(GetPlayerMoney(playerid) >= 10000)
				{
					if(PlayerInfo[playerid][pGunLic] >= 1)
     				{
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits den Waffenschein");
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir einen Waffenschein für 10.000$ gekauft.");
						PlayerInfo[playerid][pGunLic] = 1;
						GivePlayerMoney(playerid, -10000);
					}
				}
				else { SendClientMessage(playerid, COLOR_RED, "Du kannst dir den Waffenschein nicht leisten"); }
			}
			else { SendClientMessage(playerid, COLOR_RED, "Du hast nicht das erforderte Level 5"); }
	    }
	    else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht im LSPD an der Reception"); }
	}
//========== FRAKKAMMER ==============//
	if(strcmp("/frakkammer", cmdtext, true) == 0)
	{
	    if (PlayerToPoint(2.0,playerid,1712.4611,-1640.0770,20.2239) || PlayerToPoint(2.0,playerid,1277.5029,-808.4862,1089.9375) || PlayerToPoint(2.0,playerid,1712.4611,-1640.0770,20.2239) || PlayerToPoint(2.0,playerid, 1939.4677,982.8486,992.4688) || IsPlayerInRangeOfPoint(playerid, 5.0, 231.5756,1067.9391,1084.2061) || IsPlayerInRangeOfPoint(playerid, 3.0, 2819.4785,-1169.4138,1025.5703) || IsPlayerInRangeOfPoint(playerid, 3.0, -2642.2175,1419.0121,906.4609))
	    {
	        if(IsPlayerInFrac(playerid, 5) || IsPlayerInFrac(playerid, 6) || IsPlayerInFrac(playerid, 12) || IsPlayerInFrac(playerid, 13) || IsPlayerInFrac(playerid, 14) || IsPlayerInFrac(playerid, 16) || IsPlayerInFrac(playerid, 17) || IsPlayerInFrac(playerid, 18) || IsPlayerInFrac(playerid, 19) || IsPlayerInFrac(playerid, 20) || IsPlayerInFrac(playerid, 23))
	        {
	            ShowPlayerDialog(playerid, DIALOG_KAMMER, DIALOG_STYLE_LIST, "Fraktionskammer", "Waffen\nDrogen\nFraktions Materialien", "Auswählen", "Abbrechen");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Gang- / Mafiamitglied");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Fraktionskammer!");
		}
		return 1;
	}

//================= NAVIGATION ===============//
	if(strcmp("/navi", cmdtext, true) == 0 || strcmp("/navigation", cmdtext, true) == 0)
	{
 		ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Öffentliche Orte, Läden & Behörden\nIllegale Orte\nAutohäuser\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
		return 1;
	}
	if (strcmp("/kampfstyles", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2808.0757,-1442.0732,40.0432))
	    {
			ShowPlayerDialog(playerid, KAMPFSTYLES, DIALOG_STYLE_LIST, "Kampf Styles", "Elbow\nBoxing\nGrabkick\nKneehead\nKungfu\nNormal", "Auswählen", "Abbrechen");
			return 1;
		}
	}

//=============== /JOBS ================//
	if(strcmp("/job", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 30.0, 2216.3711,-1150.6212,1025.7969))
	    {
			ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST, "Los Santos Arbeitsamt", "Detektiv\nMüllmann\nPilot\nAngler\nBodyguard\nZeitungsjunge\nBoxer\nBusfahrer\nPizzalieferant\nProdlieferant (FreizeitJob)\nMechaniker\nAnwalt", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht im Arbeitsamt!");
		}
		return 1;
	}
//============= /ijob =============//
	if(strcmp("/ijob", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2804.8872,-1437.9536,40.0447))
	    {
	        ShowPlayerDialog(playerid, DIALOG_iJOBS, DIALOG_STYLE_LIST, "Schwarzmarkt Jobangebote", "WaffenDealer\nDrogenDealer\nHure\nAutodieb\nFarmer", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Schwarzmarkt!");
		}
		return 1;
	}
//============= /DRIVEIN ============//
	if(strcmp("/drivein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, 1214.4454,-904.4616,42.9208) || IsPlayerInRangeOfPoint(playerid, 15.0, 799.1068,-1629.4493,12.9548))
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Fahrzeug!");
	            return 1;
			}
	        FreezePlayer(playerid);
	        ShowPlayerDialog(playerid, BSN, DIALOG_STYLE_LIST, "BSN - Drive IN Bestellung", "3 Chicken Nuggets (3$)\n12 Chicken Nuggets (10$)\n20 Chicken Nuggets (16$)\nPommes (2$)\nCheesburger (5$)\nChickenburger (8$)\nBig Mac (10$)\nCola (3$)\nFanta (3$)\nSprite (3$)", "Kaufen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Drive In Schalter am BSN!");
		}
		return 1;
	}
//===============Schwarzmarkt==============//
	if (strcmp("/markt", cmdtext, true) == 0)
	{
		if(!PlayerToPoint(2.0,playerid,2804.8872,-1437.9536,40.0447))
 		{
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht beim Schwarzmarkt!");
	        return 1;
		}
		if(PlayerInfo[playerid][pLevel] < 2)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Hier kann man erst ab Level 2 einkaufen!");
		    return 1;
		}
    	ShowPlayerDialog(playerid, DIALOG_MARKTLISTE, DIALOG_STYLE_LIST, "Los Santos Schwarzmarkt", "Waffen\nMaterialien", "Auswählen", "Abbrechen");
	 	return 1;
	}
	if(strcmp("/adminbestrafung", cmdtext, true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] > 2000000 || PlayerInfo[playerid][pSupporter] > 20000000)
	    {
	        ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG, DIALOG_STYLE_LIST, "{FF0000}Bestrafungen", "Deathmatch in NODM\nDeathmatch auf Dienstleister\nDeathmatch auf Neuling\nDeathmatch auf Zivilisten\nSinnloses Deathmatch auf Cops\nDeahtmatch im Bundestag\nKnast-Deathmatch\nDeathmatch auf Admin on Duty", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin / Supporter!");
		}
		return 1;
	}
//==============Schwarzmarkt Ende============//

	if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /skick [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
				        if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s hat von %s einen Silent kick bekommen.(%d-%d-%d)", giveplayer, sendername,month,day,year);
						SKickLog(string);
						Kick(giveplayerid);
						return 1;
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein Aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/kickres", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1)
			{
				return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kickres [level] [betrag]");
				return 1;
			}
			new level = strval(tmp);
			if(level < 0 || level > 5) { SendClientMessage(playerid, COLOR_GREY, "   Kannst nur Reservierte Slots Kicken :Level 0 bis 5 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kickres [level] [betrag]");
				return 1;
			}
			new ammount = strval(tmp);
			if(ammount < 1 || ammount > 10) { SendClientMessage(playerid, COLOR_GREY, "  Kannst nur Reservierte Slots Kicken Maximal 10 Spieler !"); return 1; }
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pLevel] == level && PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pDonateRank] < 1 && ammount > 0)
			        {
			            ammount -= 1;
						Kick(i);
			        }
			    }
			}
 		}
		return 1;
	}
	if(strcmp(cmd, "/warn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /warn [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /warn [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht verwarnen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
						    new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s wurde von %s gebann(3.Verwarnung), Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt(3. Verwarnung), Grund: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							//PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];
							PlayerInfo[giveplayerid][pGesperrt] = 1;
							//Ban(giveplayerid);
							return 1;
						}
						format(string, sizeof(string), "Du hast %s gewarnt, Grund: %s", giveplayer, (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "Du wurdest von %s verwarnt, Grund: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "SBAN: %s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "%s wurde vom Server gebannt, Grund: %s", giveplayer, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						//PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];
						PlayerInfo[giveplayerid][pGesperrt] = 1;
						//Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fraksperre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /fraksperre [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /fraksperre [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pFrakSperre] == 0)
						{
							new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s hat von %s eine Fraktionsperre bekommen! Grund: %s (%d-%d-%d)", giveplayer, sendername,(result),month,day,year);
							SperreLog(string);
							format(string, sizeof(string), "AdmCmd: Du hast von %s Eine FraktionsSperre bekommen! Grund: %s",giveplayer,(result));
							SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
							PlayerInfo[giveplayerid][pFrakSperre] = 1;
						}
						else if(PlayerInfo[giveplayerid][pFrakSperre] == 1)
						{
							new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s hat von %s die Fraktionsperre aufgehoben! Grund: %s (%d-%d-%d)", giveplayer, sendername,(result),month,day,year);
							SperreLog(string);
							format(string, sizeof(string), "AdmCmd: Deine FraktionsSperre wurde von %s aufgehoben! Grund: %s",giveplayer,(result));
							SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
							PlayerInfo[giveplayerid][pFrakSperre] = 0;
						}
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin] > PlayerInfo[playerid][pSupporter])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						//PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];
						PlayerInfo[giveplayerid][pGesperrt] = 1;
						//Ban(giveplayerid);
						Kick(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/accban", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
	    	//giveplayer = strtok(cmdtext, idx);
			if(!strlen(giveplayer))
			{
				SendClientMessage(playerid,COLOR_GRAD2,"FEHLER: /accban [AccountName]  (Korrekte Schreibweise erforderlich)");
				return 1;
			}
			new acc[64], acc2[64], year, month, day, readstr[128];
			format(acc,sizeof(acc),"/Accounts/%s.ini",giveplayer);
			format(acc2,sizeof(acc2),"/Accounts/%s.backup",giveplayer);
			if(!fexist(acc))
			{
			    format(string,sizeof(string)," Der Account von %s existiert nicht!",giveplayer);
				SendClientMessage(playerid,COLOR_GRAD2,string);
				return 1;
			}

			new File:account = fopen(acc,io_read);
			new File:backup = fopen(acc2,io_write);
			while(fread(account,readstr))
			{
			    fwrite(backup,readstr);
			}
			fclose(backup);
			fclose(account);

            //new File:banaccount = fopen(acc,io_write);
            //fwrite(banaccount,"Level=-999\n");
            //fclose(banaccount);

			getdate(year, month, day);
			format(string, sizeof(string), "AdmCmd: %s's Account wurde von %s gebannt! (%d-%d-%d)",giveplayer,sendername,month,day,year);
			BanLog(string);
			format(string, sizeof(string), "AdmCmd: %s's Account wurde von %s gebannt!",giveplayer,sendername);
			ABroadCast(COLOR_LIGHTRED,string,1);
			PlayerInfo[giveplayerid][pGesperrt] = 1;
			Kick(giveplayerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/pban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /pban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1339)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /pban [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						M_Log(string);
						//PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];
						PlayerInfo[giveplayerid][pGesperrt] = 1;
						new ip[16];
						GetPlayerIp(giveplayerid,ip,sizeof(ip));
						M_WriteIPToBlacklist(ip); // wie kann man ihn jetzt entbannen ? moment ... muss was kucken
						//Ban(giveplayerid);
						Kick(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /freeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playa][pAdmin] > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Admins kannst du nicht Freezen");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						FreezePlayer(playa);
						format(string, sizeof(string), "AdmCmd: %s Freeze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gefreezet",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[unfreeze]------------------------------------------------
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /unfreeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						UnFreezePlayer(playa);
						format(string, sizeof(string), "AdmCmd: %s UnFroze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s entfreezed",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[GMX]-----------------------------------------------

/*	if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    SaveStuff();
				GameModeExit();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun !");
			}
		}
		return 1;
	}*/
	if (strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutz: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Cam zu %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
/*
	if (strcmp(cmd, "/admins", true) == 0 || strcmp(cmd, "/supporter", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN, "Admins und Supporter:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pSupporter] == 1)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Supporter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pSupporter] == 2)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Supporter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Moderator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 2)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Super-Moderator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 3)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1337)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"
							: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1338)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] stelv.Full Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 2000)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] Full Admin: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
 						if(PlayerInfo[i][pAdmin] == 2001)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] stelv.Projektleiter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
						if(PlayerInfo[i][pAdmin] == 2002)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] Projektleiter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					}
			}
        }
		return 1;
	}
 */


	if (strcmp(cmd, "/adminduty", true) == 0 || strcmp(cmd, "/aduty", true) == 0)
	{
		if(AdminDuty[playerid] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Moderator im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Mod[playerid] = Create3DTextLabel("*Moderator on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Mod[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"* Moderator %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerHealth(playerid, 0x7F800000);
				SetPlayerArmour(playerid, 100);
				return 1;
			}
       		else if(PlayerInfo[playerid][pAdmin] == 2)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Super-Moderator im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Mod[playerid] = Create3DTextLabel("*Moderator on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Mod[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"* Super-Moderator %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerHealth(playerid, 0x7F800000);
				SetPlayerArmour(playerid, 100);
				return 1;
			}
			else if(PlayerInfo[playerid][pAdmin] == 3)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Administrator im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Supermod[playerid] = Create3DTextLabel("*Administrator on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Supermod[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"*Administrator %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerHealth(playerid, 0x7F800000);
				SetPlayerArmour(playerid, 100);
				return 1;
			}
			else if(PlayerInfo[playerid][pAdmin] ==1337)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Fraktionsverwalter im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Admin[playerid] = Create3DTextLabel("*Administrator on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Admin[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"Fraktionsverwalter %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
                SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerArmour(playerid, 100);
				return 1;
			}
           	else if(PlayerInfo[playerid][pAdmin] ==1338)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Administrator im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Admin[playerid] = Create3DTextLabel("*Administrator on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Admin[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"Administrator %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
                SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerArmour(playerid, 100);
				return 1;
			}
            else if(PlayerInfo[playerid][pAdmin] ==2000)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als [GnE] High Admin im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Admin[playerid] = Create3DTextLabel("*[GnE] High Admin on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Admin[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"[GnE] High Admin %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
                SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerArmour(playerid, 100);
				return 1;
			}
			else if(PlayerInfo[playerid][pAdmin] ==2001)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als [GnE] stelv.Projektleiter im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Admin[playerid] = Create3DTextLabel("*[GnE] stelv.Projektleiter on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Admin[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"[GnE] stelv.Projektleiter %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
                SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerArmour(playerid, 100);
				return 1;
			}
			else if(PlayerInfo[playerid][pAdmin] >=2002)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als [GnE] Projektleiter im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
 				Admin[playerid] = Create3DTextLabel("*[GnE] Projektleiter on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Admin[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"[GnE] Projektleiter %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
                SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerArmour(playerid, 100);
				return 1;
			}
			else if(PlayerInfo[playerid][pSupporter] >= 1)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Supporter im Dienst!");
				SetPlayerColor(playerid,COLOR_GOLD);
				AdminDuty[playerid] = 1;
	 			Supporter[playerid] = Create3DTextLabel("*Supporter on Duty*",COLOR_GOLD,30.0,40.0,50.0,40.0,0);
				Attach3DTextLabelToPlayer(Supporter[playerid], playerid, 0.0, 0.0, 0.4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"Supporter %s[ID:%d] ist nun im Dienst [Er ist Gold markiert]*",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
                SetPlayerHealth(playerid, 0x7F800000);
				SetPlayerArmour(playerid, 100);
				return 1;
			}
		}
		if(AdminDuty[playerid] == 1)
		{
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
				format(string,sizeof(string),"Moderator %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
            if(PlayerInfo[playerid][pAdmin] == 2)
			{
				format(string,sizeof(string),"Moderator %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 3)
			{
				format(string,sizeof(string),"Administrator %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
			else if(PlayerInfo[playerid][pAdmin] >=1337)
			{
				format(string,sizeof(string),"Administrator %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
            else if(PlayerInfo[playerid][pAdmin] >=1338)
			{
				format(string,sizeof(string),"[GnE] High Admin %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
            else if(PlayerInfo[playerid][pAdmin] >=2000)
			{
				format(string,sizeof(string),"[GnE] High Admin %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
             else if(PlayerInfo[playerid][pAdmin] >=2001)
			{
				format(string,sizeof(string),"[GnE] stlv.Projektleiter %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
			 else if(PlayerInfo[playerid][pAdmin] >=2002)
			{
				format(string,sizeof(string),"[GnE] [GnE] Projektleiter %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}
			 else if(PlayerInfo[playerid][pSupporter] >= 1)
			{
				format(string,sizeof(string),"Supporter %s[ID:%d] ist nun nicht mehr im Dienst. *",sendername,playerid);
				SendClientMessageToAll(COLOR_GOLD, string);
			}

			SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun nichtmehr On Duty!");
			Delete3DTextLabel(Admin[playerid]);
			Delete3DTextLabel(Supermod[playerid]);
			Delete3DTextLabel(Mod[playerid]);
			Delete3DTextLabel(Supporter[playerid]);
			Delete3DTextLabel(Admin[playerid]);
			Delete3DTextLabel(Supermod[playerid]);
			Delete3DTextLabel(Mod[playerid]);
			Delete3DTextLabel(Supporter[playerid]);
			SetPlayerArmour(playerid, 0);
			AdminDuty[playerid] = 0;
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {
			        SetPlayerColor(playerid, NAMECOLOR_LSCOP);
			    }
			    else
			    {
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			return 1;
		}
		return 1;
	}
	/*if(strcmp(cmd, "/supporterduty", true) == 0 || strcmp(cmd, "/sduty", true) == 0)
	{
  		if(PlayerInfo[playerid][pSupporter] >= 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Supporter im Dienst!");
			SetPlayerColor(playerid,BLAU);
			AdminDuty[playerid] = 1;
			Supporter[playerid] = Create3DTextLabel("*Supporter im Dienst*",BLAU,30.0,40.0,50.0,40.0,0);
			Attach3DTextLabelToPlayer(Supporter[playerid], playerid, 0.0, 0.0, 0.4);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"Supporter %s[ID:%d] ist nun im Dienst [Er ist blau markiert]*",sendername,playerid);
			SendClientMessageToAll(COLOR_RED, string);
			SetPlayerArmour(playerid, 100);
			return 1;
		}
		if(AdminDuty[playerid] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun nichtmehr On Duty!");
			Delete3DTextLabel(Supporter[playerid]);
			SetPlayerArmour(playerid, 0);
			AdminDuty[playerid] = 0;
		}
		return 1;
	}*/
/*	if (strcmp(cmd, "/admins", true) == 0 || strcmp(cmd, "/supporter", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, " ");
			SendClientMessage(playerid, COLOR_GRAD1, " Admins und Supporter:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string,sizeof(string)," %d* Admin: %s[%d]    Nummer: %d",PlayerInfo[i][pAdmin],sendername,i,PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, 0xFF8200FF, string);
					}
					if(PlayerInfo[i][pSupporter] >=1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string,sizeof(string)," %d* Supporter: %s[%d]    Nummer: %d",PlayerInfo[i][pSupporter],sendername,i,PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, 0x00A400FF, string);
					}
					if(PlayerInfo[i][pSupporter] == 6)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string,sizeof(string)," %d* Admin: %s[%d]    Nummer: %d",PlayerInfo[i][pSupporter],sendername,i,PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					if(PlayerInfo[i][pAdmin] == 1337)
					{
					    GetPlayerName(i, sendername, sizeof(sendername));
					    format(string,sizeof(string)," %d* Server-Manager: %s[%d] Nummer: %d",PlayerInfo[i][pAdmin],sendername,i,PlayerInfo[i][pPnumber]);
					    SendClientMessage(playerid, 0x1400FFFF, string);
					}
				}
			}
		}
		return 1;
	}*/
//=================NEUES ADMIN SYSTEM BY [GnE]Julian=============================

	if (strcmp(cmd, "/admins", true) == 0 || strcmp(cmd, "/supporter", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN, "Admins und Supporter:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pSupporter] == 1)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Supporter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pSupporter] == 2)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Supporter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Moderator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 2)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Moderator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 3)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1337)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 1338)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					    if(PlayerInfo[i][pAdmin] == 2000)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] High Administrator: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_GOLD, string);
						}
 						if(PlayerInfo[i][pAdmin] == 2001)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] stelv.Projektleiter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
						if(PlayerInfo[i][pAdmin] == 2002)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"[GnE] Projektleiter: %s || Nummer: %d",sendername,PlayerInfo[i][pPnumber]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
			}
        }
		return 1;
	}
/*
<19:18:00>"[GnE]Splix/Community Manager": Supporter
<19:18:04>"[GnE]Splix/Community Manager": Moderator
<19:18:09>"[GnE]Splix/Community Manager": Super-Moderator
<19:18:15>"[GnE]Splix/Community Manager": Administrator
<19:18:25>"[GnE]Splix/Community Manager": SuperAdmin
<19:18:33>"[GnE]Splix/Community Manager": ServerManager
<19:18:38>"[GnE]Splix/Community Manager": Projektleiter*/
//=================================================================================================
   	if (strcmp("/carhelp", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"*** Commands *** /park /carlock /carkey /carsell");
		return 1;
	}
    if(strcmp("/carsell", cmdtext, true, 10) == 0)
	{
		if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		    GivePlayerMoney(playerid, PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPreis]);
			Dtc_Carlock[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]] = 0;
			Dtc_UnLockCar(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]);
			DestroyObject(sirene[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]]);
			sirenean[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]] = false;
			DestroyVehicle(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]);
		    new string3[32];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "/Autos/%s%d.dtcar", playername3,Dtc_PlayerKey[playerid]);
			fremove(string3);
			Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "    Fahrzeug erfolgreich verkauft, Hälfte des Kaufpreises wird wurde dir wieder gegeben!");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "    Du besitzt Kein Fahrzeug!");
		    return 1;
		}
		return 1;
	}
	if (strcmp("/park", cmdtext, true, 10) == 0)
	{
		if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		    	new newcar = GetPlayerVehicleID(playerid);
	       	 	if (newcar == PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId])
	       	 	{
					new Float:X,Float:Y,Float:Z;
					new Float:z_rot;
					GetPlayerPos(playerid, X,Y,Z);
					GetVehicleZAngle(newcar, z_rot);
    				PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = X;
			    	PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = Y;
			    	PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = Z;
			    	PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = z_rot;
			    	SendClientMessage(playerid, COLOR_YELLOW, "    Du hast dein Fahrzeug hier geparkt, ab nun kannst du dein Fahrzeug hier finden!");
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"  Du bist nicht in deinem Fahrzeug/Du hast nicht den Schlüssel zu diesem Fahrzeug ausgewählt!");
					return 1;
				}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "    Du besitzt Kein Fahrzeug für deinen Ausgewählten Schlüssel!");
		    return 1;
		}
		return 1;
	}
	if (strcmp("/carlock", cmdtext, true, 10) == 0)
	{
		if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		    new Status = Dtc_Carlock[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]];
		    new Float:dtc_X,Float:dtc_Y,Float:dtc_Z;
			GetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId],dtc_X,dtc_Y,dtc_Z);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,20.0,dtc_X,dtc_Y,dtc_Z))
			    {
					PlayerPlaySound(i,1147,dtc_X,dtc_Y,dtc_Z);
				}
			}
			switch (Status)
			{
				case 0:
				{
				    GameTextForPlayer(playerid, "~w~Fahrzeug ~r~abgeschlossen", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					Dtc_Carlock[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]] = 1;
					Dtc_LockCar(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]);
				}
				case 1:
				{
				    GameTextForPlayer(playerid, "~w~Fahrzeug ~g~aufgeschlossen", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					Dtc_Carlock[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]] = 0;
					Dtc_UnLockCar(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]);
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "    Du besitzt Kein Fahrzeug für deinen Ausgewählten Schlüssel!");
		    return 1;
		}
		return 1;
	}
	if (strcmp("/carkey", cmdtext, true, 10) == 0)
	{
	    new mv = MaxVeh;
		if(mv > 1)
		{
		    Dtc_PlayerKey[playerid] += 1;
		    if(Dtc_PlayerKey[playerid] == MaxVeh)
		    {
		        Dtc_PlayerKey[playerid] = 0;
		    }
		    if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		    {
	    		format(string, sizeof(string), "Du nimmst deinen %dten Auto-Schlüssel, für deinen %s!",Dtc_PlayerKey[playerid]+1,CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
			}
			else
			{
			    format(string, sizeof(string), "Du nimmst deinen %dten Auto-Schlüssel, doch hast für diesen Schlüssel noch kein Auto!",Dtc_PlayerKey[playerid]+1);
			}
			SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		return 1;
	}

//----------------------------------[HELP]-----------------------------------------------
//------------------------------------------------------------------------------------------------------
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/regeln", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "Info: Dies ist ein Reallife Server, bitte haltet euch an die folgenden verbote:");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Info: Werde diese Regeln nicht einhalten kann ist hier falsch.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "		*Cheaten, Bugusing, Abwerben");
			SendClientMessage(playerid, COLOR_LIGHTRED, "		*rassistische / beleidigende Spielernamen");
			SendClientMessage(playerid, COLOR_LIGHTRED, "		*Beleidigungen gegenüber anderen Spielern");
			SendClientMessage(playerid, COLOR_LIGHTRED, "       *Sinnloses Deathmatch");
			SendClientMessage(playerid, COLOR_LIGHTRED, "		*Je nach härte gibt es Verwarnungen (bzw einen Bann!)");
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/telehilfe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE,"*** HILFE *** Tippe etwas ein um Mehr Hilfe zu bekommen");
				SendClientMessage(playerid, COLOR_GRAD3,"*** Telefon *** /call z.B.: /sms (/p)ickup (/h)angup /number");
				SendClientMessage(playerid, COLOR_GRAD4,"*** Andere Hilfen *** /help /househelp /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Du hast kein Telefonbuch! Kauf dir eine im 24/7");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/househelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** HAUS HILFE *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Haus *** /enter /exit /open /home /heal /houseupgrade (/hu) /setrentable");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Haus *** /evictall /setrent /evict /housewithdraw");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /help /renthelp /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
		}
		return 1;
	}
	if(strcmp(cmd, "/renthelp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Miet Hilfe *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Mieten *** /unrent /enter /exit /lock /home");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /househelp /help /businesshelp /leaderhelp /fishhelp /cookhelp /irchelp");
		}
		return 1;
	}
	if(strcmp(cmd, "/tankhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAD3,"*** TANKSTELLE *** /tankinfo /tankpreis /tankteilhaber /tankbank /tankwithdraw");
			if(PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    SendClientMessage(playerid, COLOR_GRAD3, "*** TANKSTELLE *** /aselltanke - Id über /tedit herrausfinden - ; /tedit");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/businesshelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** BUSINESS HELP *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** BUSINESS *** /bizinfo /bizfee /bizname /prodprice /teilhaber");
			SendClientMessage(playerid, COLOR_GRAD4,"*** BUSINESS *** /enter /exit /open /sellbiz /bizbank /bizkasse");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /househelp /renthelp /help");
		}
		return 1;
	}
	if(strcmp(cmd, "/leaderhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pLeader] >= 1)
		    {
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** Leader Hilfe *** Tippe etwas ein um mehr Hilfe zu bekommen");
				SendClientMessage(playerid, COLOR_GRAD3,"*** Leader *** /ramfa (Nur für Autos ausm Gangautohaus) /fcarsell /fpark /invite /uninvite /giverank /setlohn /frc(carrespawn)");
				if(PlayerInfo[playerid][pLeader] == 7)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"*** LEADER *** /settax /givetax");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Leader!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/irchelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC HILFE *** Tipp einen Befehl");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc leave)");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Password [channelnr])  (/irc NeedPass [channelnr])  (/irc Lock [channelnr])");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Admins)  (/irc MOTD [motdtext])  (/irc status [channelnr])  (/i [text])");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fishhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** ANGEL HILFE *** Tipp ein Command");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /fish (Try to catch a fish)   /fishes (Show the fishes you have caught)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /throwback (Throw the last fish you caught back)   /throwbackall");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /releasefish (Release one of your fishes)");
		}
		return 1;
	}
	if(strcmp(cmd, "/cookhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** KOCH HILFE *** Tipp ein Command");
			SendClientMessage(playerid, COLOR_GRAD3,"*** COOKING *** /cook (See all the options available)   /cooked (See everything that you have Cooked)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** COOKING *** /eat (Eat something that you have Cooked)");
		}
		return 1;
	}
	if(strcmp(cmd, "/ahelp", true) == 0 || strcmp(cmd, "/ah", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pSupporter] == 0)
	            return SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Supporter / Admin.");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pSupporter] >= 1) {
				SendClientMessage(playerid, 0x4BFF00FF, "*1* SUPPORTER *** /kick /unfreeze /goto /aws /aduty /supmobil"#COL_RED" /deskkick");
			}
			if(PlayerInfo[playerid][pSupporter] >= 2) {
				SendClientMessage(playerid, 0x4BFF00FF, "*2* SUPPORTER *** /gethere /bigears");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1) {
				SendClientMessage(playerid, 0x00AFFFFF, "*1* ADMIN *** /prison /ar /cr /tr /cleartext /checkwarns /check /setint /mute /rrball /supmobil");
				SendClientMessage(playerid, 0x00AFFFFF, "*1* ADMIN *** /kick /kickres /warn /sban /ban /goto /cnn /a(dmin) /aw(s) /showme");
				SendClientMessage(playerid, 0x00AFFFFF, "*1* ADMIN *** /checkwaffen /lt (Einheit nach links) /rt (Einheit nach rechts)"#COL_RED" /deskick");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2) {
				SendClientMessage(playerid, 0xFFFF00FF,"*2* ADMIN ***  /setteam /cnn /freeze /unfreeze /recon /cam /spawn /rc (Carrespawn)");
				SendClientMessage(playerid, 0xFFFF00FF,"*2* ADMIN ***  /getip /startbonus"#COL_RED" /arb /arball /deletearb");
			}
			if (PlayerInfo[playerid][pAdmin] >= 3) {
				SendClientMessage(playerid, 0xFFA000FF,"*3* ADMIN ***  /gotols /gotolv /gotosf /gotozivi /gotobsn /noshowme /auninvite");
				SendClientMessage(playerid, 0xFFA000FF,"*3* ADMIN ***  /mark /gotomark /gethere /oldcar /gotocar /getcar /saveall /vworld");
				SendClientMessage(playerid, 0xFFA000FF,"*3* ADMIN ***  /ainvite /auninvite /startbonus"#COL_RED" /deletearbfor /arbobj");
			}
			if (PlayerInfo[playerid][pAdmin] >= 4) {
			    SendClientMessage(playerid, 0xFF6400FF,"*4* ADMIN ***  /knast /logout /logoutpl /logoutall /edit /asellhouse /asellbiz /sellsbiz /setchamp /umbenennen");
			    SendClientMessage(playerid, 0xFF6400FF,"*4* ADMIN ***  /fixveh /destroycars /sethp /setarmor /givegun /givemoney /money /setstat");
			    SendClientMessage(playerid, 0xFF6400FF,"*4* ADMIN ***  /pevent /delevent /mole /hq /givemats /givedrugs /sethouseinterior /startbonus");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1337) {
				SendClientMessage(playerid, COLOR_GREEN,"*** 1337 *** /weather /weatherall /makeadmin /makeleader /startlotto");
				SendClientMessage(playerid, COLOR_GREEN,"*** 1337 *** /setfkasse /fl (Fraktionsliste) /noooc /hirekey");
				SendClientMessage(playerid, COLOR_GREEN,"*** 1337 *** /haus /hauseo /cnnn /makeircadmin /afill /startbonus");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1338) {
				SendClientMessage(playerid, 0x1400FFFF,"***1338 *** /dtc /veh /togreport Unsichtbar in Adminliste /startbonus");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2000) {
			    SendClientMessage(playerid, COLOR_RED,"*** 2000 *** /givedonator /arb /arball /arbforall /deletearb /deletearbfor /arbobj /arbobjid ");
   			}
			if (PlayerInfo[playerid][pAdmin] >= 2001) {
				SendClientMessage(playerid, COLOR_RED,"*** 2001 *** /makesupp /makeadmin");
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		}
		return 1;
	}
//----------------------------- Gravity -------------------------------------------
	/*if(strcmp(cmd,"/gravity",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not an Admin !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /gravity [value Default: 0.008]");
	            return 1;
			}
			new Float:gravity;
			floatstr(tmp);
			SetGravity(gravity);
			format(string, sizeof(string), "* Gravity changed to %f.",gravity);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}*/
	if(strcmp(cmd,"/stopani",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        ClearAnimations(playerid);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/skill",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ SKILLS _____________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /skill [Nummer]");
				SendClientMessage(playerid, COLOR_GREY, "1: Detektiv, 2: Hure, 3: DrogenDealer 4: Autodieb");
				SendClientMessage(playerid, COLOR_GREY, "5: News Reporter 6: Boxer 7: Fischer 8: Anwalt");
				return 1;
			}
		    if(strcmp(x_nr,"1",true) == 0)//Detective
			{
			    new level = PlayerInfo[playerid][pDetSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Leute finden um ein Level aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Leute finden um ein Level aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Leute finden um ein Level aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Leute finden um ein Level aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Whore
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Drugs Dealer
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//Car Jacker
			{
			    new level = PlayerInfo[playerid][pJackSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//News Reporter
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"8",true) == 0)//Lawyer
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = Level = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ungültige Skill Nummer !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2)// MAn muss mindestens admin level 2 sein
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbar: Driving, Flying, Sailing, Fishing, Weapon, Motorrad, Roller, LKW, Alle,Perso.");
					return 1;
				}
			    if(strcmp(x_nr,"driving",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Führerschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Führerschein (Fahr Vorsichtig).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flying",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Flugschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Flugschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"sailing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Bootschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Bootschein.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fishing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Angelschein  %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Angelschein.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapon",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Waffenschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Waffenschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"LKW",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den LKW schein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den LKWschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Motorrad",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Motorradschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Motorradschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Rollerschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Rollerschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"alle",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst %s alle Scheine.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s hat die alle Scheine gegeben",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"perso",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst %s den Personalausweiß.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s hat dir den Personalausweiß gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pOwnPerso] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Lehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/givelicense", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Nur mit Rang 2 oder höher kann man Lizenzen ausstellen !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /givelicense [Schein] [playerid/Name]");
				    SendClientMessage(playerid, COLOR_WHITE, "Scheine: fahren, fliegen, fischen, Boot, Motorrad, Roller, LKW, Waffe");
					return 1;
				}
			    if(strcmp(x_nr,"fahren",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fahren [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s eine Fahrlizens gegeben..",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir eine Fahrlicense gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fliegen",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fliegen [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Flugschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "*Lehrer %s hat dir einen Flugschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boot",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense boot [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Bootschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Bootschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fischen",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fischen [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s eine Angellizens gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir eine Angellizens gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"LKW",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense LKW [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s ein LKW Schein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir ein LKW Schein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Motorrad",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense Motorrad [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s ein Motorad Schein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir ein Motorad Schein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense Roller [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Rollerschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Rollerschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"waffen",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense waffen [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pLevel] < 5 && !IsACop(giveplayerid))
					        {
								SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht Level 5!");
								return 1;
							}
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Waffenschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Waffenschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/startlesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /startlesson [playerid");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast eine Lernstunde für %s gestartet.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Fahrlehrer %s hat deine Lernstunde gestartet.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/stoplesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /stoplesson [playerid]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler nimmt keine Lernstunden !");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast die Lernstunde von %s beendet.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Fahrlehrer %s hat deine Lernstunde beendet.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ram", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    new rand = random(5);
					    if(rand == 0)
					    {
						    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
							SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
							GameTextForPlayer(playerid, "~r~Tuer aufgebrochen", 5000, 1);
							PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
							PlayerInfo[playerid][pLocal] = i;
						}
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Bundeswehr !");
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!IsPlayerInRangeOfPoint(playerid,8.0,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Area51 Sicherheitspult !");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /camera [nummer 1 - 6]  (6 = Aus)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Die Kameranummer darf nicht unter 1 oder 6 liegen !"); return 1; }
				FreezePlayer(playerid);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					UnFreezePlayer(playerid);
					SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Soldat !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/anbieten",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pZig] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Zigaretten mehr !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /anbieten [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selber eine Zigarette anbieten!"); return 1; }
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du hast %s eine Zigarette angeboten.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat dir eine Zigarette angeboten (tippe /accept kippe).", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        ZigOffer[giveplayerid] = playerid;
				        return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/divorce",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht verheiratet !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /divorce [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selber einen Antrag machen!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Du hast %s die Scheidung eingerreicht.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat dir die Scheidung eingereicht (tipp /accept divorce).", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht mit dir Verheiratet !");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/antrag",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 10000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Die Hochzeit kostet $100000 !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist bereits verheiratet !");
				return 1;
	        }
	        if(PlayerInfo[playerid][pPhousekey] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du besitzt  kein Wohnsitz !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /propose [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist bereits Verheiratet !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPhousekey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Du kannst den Spieler nicht heiraten er hat ein Haus !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPbiskey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Du kannst den Spieler nicht heiraten er hat ein Business !");
			            return 1;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber vorschlagen!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s einen Antrag gemacht.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat dir einen Antrag gemacht(tipp /accept marriage).", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/trauzeuge",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /witness [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht Heiraten!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du bittest %s dein Trauzeuge zu sein.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s bittet dich sein Trauzeuge zu sein (tipp /accept witness).", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/irc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc Leave)  (/irc Admins)");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc [name] [channelnr]");
				SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Namen: MOTD, Password, NeedPass, Lock, Kick, Status");
				return 1;
			}
		    if(strcmp(x_nr,"join",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc join [channelnr] oder /irc join [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
			    if(IRCInfo[channel][iLock] == 0)
			    {
			        if(IRCInfo[channel][iNeedPass] == 0)
			        {
			            JoinChannelNr(playerid, channel);
				    }
				    else
				    {
				        tmp = strtok(cmdtext, idx);
				        if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Du brauchst ein Password um zu Joinen.");
							SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc join [channelnr] [password]");
							return 1;
						}
						JoinChannel(playerid,channel,tmp);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Dieser Channel ist Gesichert !");
				    return 1;
			    }
			}
			else if(strcmp(x_nr,"status",true) == 0)
			{
			    for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
			        format(string, sizeof(string), "Channel %d: %d Spieler Verbunden.",i + 1, IRCInfo[i][iPlayers]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"password",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc password [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc password [channelnr] [password]");
					    return 1;
					}
					strmid(IRCInfo[channel][iPassword], tmp, 0, strlen(tmp), 255);
					format(string, sizeof(string), "Du hast das IRC Channel PW geändert auf: %s.",IRCInfo[channel][iPassword]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"needpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc needpass [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidirger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iNeedPass] != 0)
				    {
				        IRCInfo[channel][iNeedPass] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Spieler brauchen das IRC Passwort um zu Joinen.");
				    }
					else
					{
					    IRCInfo[channel][iNeedPass] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Spieler brauch das PW für den IRC Channel.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"lock",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc lock [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidiriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iLock] != 0)
				    {
				        IRCInfo[channel][iLock] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Du hast den IRC Channel geöffnet.");
				    }
					else
					{
					    IRCInfo[channel][iLock] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Du hast den IRC Channel wieder abgeschlossen.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von diesem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"motd",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc motd [channelnr] [motdtext]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Nicht nidirger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /irc motd [motdtext]");
						return 1;
					}
					strmid(IRCInfo[channel][iMOTD], result, 0, strlen(result), 255);
					SendClientMessage(playerid, COLOR_YELLOW, "MODT Text geändert.");
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Channel Admin !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"leave",true) == 0)
			{
			    if(PlayersChannel[playerid] < 999)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "* %s hat den Channel Verlassen.", sendername);
			        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			        IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
			        PlayersChannel[playerid] = 999;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"admins",true) == 0)
			{
				for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
				    format(string, sizeof(string), "Channel %d: %s.", i + 1, IRCInfo[i][iAdmin]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"kick",true) == 0)
			{
			    if(PlayersChannel[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
			        return 1;
			    }
			    new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[PlayersChannel[playerid]][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc kick [playerid]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayersChannel[giveplayerid] == PlayersChannel[playerid])
					        {
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "*Du wurdest von %s aus dem Channel gekickt.",giveplayer);
					            SendClientMessage(playerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* Du hast mit Channel admin: %s gekickt.",sendername);
					            SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* %s hat den Channel Verlassen (Kicked).", sendername);
						        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
					            IRCInfo[PlayersChannel[giveplayerid]][iPlayers] -= 1;
					            PlayersChannel[giveplayerid] = 999;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht im IRC Channel !");
							    return 1;
					        }
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
                }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Falsche IRC Chanel Nummer ! ");
			    return 1;
			}
		}
		return 1;
 	}
 	if(strcmp(cmd,"/i",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayersChannel[playerid] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst hier nicht schreiben, weil du gemutet bist!");
				return 1;
			}
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /i [irc chat]");
				return 1;
			}
			format(string, sizeof(string), "** IRC %s: %s. **", sendername, result);
			SendIRCMessage(PlayersChannel[playerid], COLOR_YELLOW2, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der San Andreas Präsident !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /settax [Betrag]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "   Steuern müssen zwischen 1 und 5000 sein !"); return 1; }
			Tax = moneys;
			SaveStuff();
			format(string, sizeof(string), "* Die Steuern wurden auf $%d pro Spieler geändert.", Tax);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/givetax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der San Andreas Präsident !");
				return 1;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Staatskasse ist Leer! !");
				return 1;
			}
			new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1)
			        {
			            Cops += 1;
			        }
			    }
			}
			if(Cops >= 1)
			{
			    new value = Tax / 2;
			    new price = value / Cops;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1)
				        {
				            format(string, sizeof(string), "* Du hast vom Presidenten $%d bekommen ( Steuern ).",price);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(i, price);
							Tax -= price;
				        }
				    }
				}
				SaveStuff();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Im moment sind keine Polizisten online !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/read",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /read [name]");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare namen: Paper, TestPaper");
				return 1;
			}
	        if(strcmp(x_job,"paper",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________ German Next Era Life  _______________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Zeitungsjunge !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"testpaper",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			    {
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /read testpaper [papernr]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Zeitungsnummer nicht weniger als 1 oder höher als 10 !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Unter dieser Nummer gibt es keine Zeitung !");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________  German Next Era Life _______________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "   Du bist kein News Reporter !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /read testpaper [papernr]");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deliver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 15 || gTeam[playerid] == 2 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 10)
	        {
	            if(gTeam[playerid] == 2 || IsACop(playerid))
	            {
	                if(!IsPlayerInRangeOfPoint(playerid,8.0,96.9123,1920.5088,18.1473))
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Area51 Liefertor !");
					    return 1;
					}
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /deliver [playerid/PartOfName]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Du kannst dich nicht selber in Fort DeMorgan einsperren !"); return 1; }
					        if(WantedLevel[giveplayerid] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Der Player muss mindestens Wanted Level 1 haben um ihn in Fort DeMorgan einzusperren ! !"); return 1; }
					        if(gTeam[giveplayerid] == 2 || PlayerInfo[giveplayerid][pLeader] == 6 || PlayerInfo[giveplayerid][pLeader] == 10) { return 1; }
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du bringst %s nach Fort DeMorgan.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s bringt dich nach Fort DeMorgan.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~w~Willkommen in ~n~~r~Fort DeMorgan", 5000, 3);
								WantedPoints[giveplayerid] = 0;
								WantedLevel[giveplayerid] = 0;
								SetPlayerWantedLevel(giveplayerid,0);
								PlayerInfo[giveplayerid][pJailed] = 2;
								PlayerInfo[giveplayerid][pJailTime] = 3600;
								SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
								SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}

	            }
	            else if(PlayerInfo[playerid][pJob] == 15)
	            {
			        if(BringingPaper[playerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Du hast dir keine Zeitung vom Redaktionsgebäude geholt !");
			            return 1;
			        }
			        tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /deliver [playerid]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %s eine deiner Zeitungen angeboten.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Zeitungsjunge %s möchte dir eine Zeitung geben (gib /accept paper) ein um anzunehmen.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PaperOffer[giveplayerid] = playerid;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Player ist nicht in deiner Nähe !");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Zeitungsjunge !");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bring", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 15)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Zeitungsjunge !");
	            return 1;
	        }
			if(IsPlayerInRangeOfPoint(playerid,8.0,1654.1636,-1654.8077,22.5156))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /bring [papernr]");
					return 1;
				}
		        new paper = strval(tmp);
		        if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Die Zeitungsnummer darf nicht unter 1 oder über 10 liegen  !"); return 1; }
				paper -= 1;
				if(PaperInfo[paper][PaperUsed] == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Unter dieser Nummer gibt es keine fertige Zeitung !");
				    return 1;
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		        format(string, sizeof(string), "* Du kannst nun Zeitungen austragen, Zeitung: %s, Von: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				BringingPaper[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Redaktionsgebäude !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/papers", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pJob] == 15)
	        {
				if(IsPlayerInRangeOfPoint(playerid,3.0,1654.1636,-1654.8077,22.5156))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| Zeitung: %s, Von: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Du bist nicht am Redaktionsgebäude !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Zeitungsjunge !");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/paper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
	            if(!IsPlayerInRangeOfPoint(playerid,3.0,1654.1954,-1654.9637,22.5156))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Redaktionsgebäude !");
				    return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [papernr] oder /paper delete [papernr]");
				    return 1;
				}
			    if(strcmp(x_nr,"write",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [Nummer]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Die Zeitungsnummer darf nicht unter 1 oder über 10 liegen !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Unter dieser Nummer gibt es schon eine Zeitung !");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine neue Zeitung erstellt..");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Alles was du jetzt schreibst steht hinterher in der Zeitung, dir stehen 7 Reihen zur verfügung.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte gib den Titel deiner Zeitung an.");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"delete",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 4)
				    {
				        tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /paper delete [papernr]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Die Zeitungsnummer darf nicht unter 1 oder über 10 liegen !"); /*return 1 !");*/ return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "Gelöschte Zeitung %d.",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du mußt Rang 4 haben um Zeitungen zu löschen !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [papernr] oder /paper delete [papernr]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein News Reporter !");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/spawnchange", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPhousekey] != 255)
	        {
	            if(Spectate[playerid] != 255 && PlayerInfo[playerid][pAdmin] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du bist am zuschauen, Spawn kann jetzt nicht gewechselt werden !");
	                return 1;
	            }
	            if(SpawnChange[playerid])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Ab jetzt spawnst du wieder am gewohnten Platz  !");
	                SpawnChange[playerid] = 0;
	                if(IsAnInstructor(playerid))
		            {
		                if(SchoolSpawn[playerid] == 0)
		                {
		                    SchoolSpawn[playerid] = 1;
		                    SendClientMessage(playerid, COLOR_GREY, "   Du spawnst jetzt an der Flugschule !");
		                }
		                else if(SchoolSpawn[playerid] == 1)
		                {
		                    SchoolSpawn[playerid] = 0;
		                    SendClientMessage(playerid, COLOR_GREY, "   Du spawnst jetzt an der Fahrschule !");
		                }
		            }
     			}
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du spawnst jetzt in deinem eigenen / gemieteten Haus ! !");
	                SpawnChange[playerid] = 1;
	            }
	        }
	        else
	        {
	            if(IsAnInstructor(playerid))
	            {
	                if(SchoolSpawn[playerid] == 0)
	                {
	                    SchoolSpawn[playerid] = 1;
	                    SendClientMessage(playerid, COLOR_GREY, "   Du spawnst jetzt an der Flugschule !");
	                }
	                else if(SchoolSpawn[playerid] == 1)
	                {
	                    SchoolSpawn[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_GREY, "   Du spawnst jetzt an der Fahrschule !");
	                }
	            }
	            else
	            {
		            SendClientMessage(playerid, COLOR_GREY, "   Du besitzt kein Haus / keine Mietwohnug !");
		            return 1;
	            }
	        }
	    }
	    return 1;
	}
	/*
	if(strcmp(cmd, "/report", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(oocon[playerid] == 1)
		 	{
		 	    SendClientMessage(playerid, COLOR_RED," Der /report wurde Ausgeschalten!");
			}
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, " /report [text]");
				return 1;
			}
			if (strlen(result) > 50)
			{ // nicht länger als 50 zeichen
				SendClientMessage(playerid, COLOR_LIGHTRED, "Dein Report ist zu lang schreibe bitte einen kürzeren!");
				return 1;
			}
			format(string, sizeof(string), "Report von %s[ID:%d][Ph.:%d]: %s",sendername,playerid,PlayerInfo[playerid][pPnumber],(result));
			for(new i=0; i<GetMaxPlayers(); i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			        {
			            SendClientMessage(i,COLOR_YELLOW,string);
			        }
			    }
			}
			SendClientMessage(playerid, COLOR_YELLOW, "Dein Bericht wurde an die Admins gesendet.");
	    }
	    return 1;
	}
	*/
	if (strcmp(cmd, "/antidebababababfxD", true) ==0 ){AntiDeAMX(); return 1;}
	if(strcmp(cmd, "/clothes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
	        {
	            if(IsAtClothShop(playerid))
				{

				    if(PlayerInfo[playerid][pMember] == 1) { ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
					else if(PlayerInfo[playerid][pMember] == 2) { ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
				    else if(PlayerInfo[playerid][pMember] == 3) { ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
				    else if(PlayerInfo[playerid][pMember] == 4) { ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
				    else if(PlayerInfo[playerid][pMember] == 5) { ChosenSkin[playerid] = 258; SetPlayerSkin(playerid, 120); }
				    else if(PlayerInfo[playerid][pMember] == 6) { ChosenSkin[playerid] = 294; SetPlayerSkin(playerid, 294); }
				    else if(PlayerInfo[playerid][pMember] == 7) { ChosenSkin[playerid] = 164; SetPlayerSkin(playerid, 164); }
				    else if(PlayerInfo[playerid][pMember] == 8) { ChosenSkin[playerid] = 250; SetPlayerSkin(playerid, 250); }
				    else if(PlayerInfo[playerid][pMember] == 9) { ChosenSkin[playerid] = 187; SetPlayerSkin(playerid, 187); }
				    else if(PlayerInfo[playerid][pMember] == 10) { ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
				    else if(PlayerInfo[playerid][pMember] == 11) { ChosenSkin[playerid] = 240; SetPlayerSkin(playerid, 240); }
				    else if(PlayerInfo[playerid][pMember] == 12) { ChosenSkin[playerid] = 118; SetPlayerSkin(playerid, 118); }//Triaden
				    else if(PlayerInfo[playerid][pMember] == 13) { ChosenSkin[playerid] = 105; SetPlayerSkin(playerid, 105); }//Grove
				    else if(PlayerInfo[playerid][pMember] == 14) { ChosenSkin[playerid] = 102; SetPlayerSkin(playerid, 102); }//Bloods
				    else if(PlayerInfo[playerid][pMember] == 15) { ChosenSkin[playerid] = 185; SetPlayerSkin(playerid, 185); }//Sf Biker Club
				    else if(PlayerInfo[playerid][pMember] == 16) { ChosenSkin[playerid] = 108; SetPlayerSkin(playerid, 108); }//Los Santos MaraSalvatrucha
				    else if(PlayerInfo[playerid][pMember] == 17) { ChosenSkin[playerid] = 114; SetPlayerSkin(playerid, 114); }//Varios Los Crips
				    else if(PlayerInfo[playerid][pMember] == 18) { ChosenSkin[playerid] = 173; SetPlayerSkin(playerid, 173); }//San Fiero Rifa
				    else if(PlayerInfo[playerid][pMember] == 19) { ChosenSkin[playerid] = 234; SetPlayerSkin(playerid, 234); }//West Coust Customs
				    else if(PlayerInfo[playerid][pMember] == 20) { ChosenSkin[playerid] = 220; SetPlayerSkin(playerid, 220); }
				    else if(PlayerInfo[playerid][pMember] == 21) { ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
				    else if(PlayerInfo[playerid][pMember] == 22) { ChosenSkin[playerid] = 277; SetPlayerSkin(playerid, 277); }
				    else if(PlayerInfo[playerid][pMember] == 23) { ChosenSkin[playerid] = 133; SetPlayerSkin(playerid, 133); }
					else if(PlayerInfo[playerid][pMember] == 24) { ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
					else { return 1; }
					GetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
					ChangePos2[playerid][0] = GetPlayerInterior(playerid);
					ChangePos2[playerid][1] = 1;
				    SetPlayerInterior(playerid,0);
					new rand = random(sizeof(gInviteSpawns));
					SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
					SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
					SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					FreezePlayer(playerid);
					SelectChar[playerid] = 255;
					SelectCharID[playerid] = PlayerInfo[playerid][pMember];
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Gib 'weiter' ein um den Charakter auszusuchen den du gerne nutzen möchtest.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Wenn du den richtigen gefunden hast gib 'fertig' ein.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist in keinem Bekleidungsgeschäft !");
					return 1;
				}
	        }
	        else
	        {
 				if(IsPlayerInRangeOfPoint(playerid, 10.0, 205.2583,-134.0106,1002.8672) || IsPlayerInRangeOfPoint(playerid, 10.0, 207.2777,-105.8812,1005.1328))
	            {
					AtClothes[playerid] = 1;
    				ForceClassSelection(playerid);
					TogglePlayerSpectating(playerid, 0);
			    	return 1;
	        	}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits ein Lotterielos !");
	            return 1;
	        }
	        if(GetPlayerMoney(playerid) < 50)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du brauchst $1500 um ein Lotterielos kaufen zu können !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"Benutze: /lotto [nummer]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 100) { SendClientMessage(playerid, COLOR_GREY, "   Deine Lotterienummer darf nicht unter 1 oder über 100 liegen!"); return 1; }
			format(string, sizeof(string), "* Du hast dir ein Lotterielos mit der Nummer: %d gekauft, viel Glück.", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerMoney(playerid, - 500);
			Jackpot += 500;
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}

	if(strcmp(cmd, "/take", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] == 2 || IsACop(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rang 2 oder höher um diese Aktion durch zu führen !");
	                return 1;
	            }
	            if(IsPlayerInAnyVehicle(playerid))
	            {
	            	SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist in einem Auto !");
	                return 1;
			    }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Entzug von Gegenständen __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /take [Gegenstand] [Spieler ID]");
                    SendClientMessage(playerid, COLOR_GRAD1, "Verfügbare Gegenstände: Driverslicense, Flyinglicense, Boatlicense, Gunlicense, Roller");
                    SendClientMessage(playerid, COLOR_GRAD1, "Verfügbare Gegenstände: Waffen, Drogen, Materials, TDrogen, TMaterials");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"driverslicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take driverslicense [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s den Führerschein entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir den Führerschein entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flyinglicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s die Fluglizenz entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Fluglizenz entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s deinen Rollerschein entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deinen Rollerschein entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pRollerLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"gunlicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take driverslicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s's den Waffenschein abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deinen Waffenschein abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pGunLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boatlicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take boatlicense [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s's die Bootlizenz abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Bootlizenz abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"waffen",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take waffen [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							//new Erfolg = 0;
							//new chealth;
							//GetPlayerHealth(chealth,playerid);
							//new Zufall = ((Erfolg+chealth)+random(5));
					        new Float:health;
						    GetPlayerHealth(playerid, health);
							new Float:Zufall=health-random(50);
							if(Zufall >= 15)
					    	{
					        	if (ProxDetectorS(8.0, playerid, giveplayerid))
								{
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
						    	    format(string, sizeof(string), "* Du hast %s's die Waffen abgenommen.", giveplayer);
						    	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						    	    format(string, sizeof(string), "* Officer %s hat dir deine Waffen abgenommen.", sendername);
						    	    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    	    ResetPlayerWeapons(giveplayerid);
						    	    PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						    	    PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						    	    PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						    	    PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
					        	}
					        	else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
								    return 1;
								}
							}
       						else
							{
							   SendClientMessage(playerid, COLOR_GREY, "Waffen abnehmen Fehlgeschlagen!");
							   return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"tdrogen", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp)) {
				        SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take tdrogen [Spieler ID]");
				        return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Taschen-Drogen abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Taschen-Drogen abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pInvDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"tmaterials", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp)) {
				        SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take tmaterials [Spieler ID]");
				        return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Taschen-Materials abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Taschen-Materials abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pInvMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drogen",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take drogen [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Drogen abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Drogen abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materials",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take materials [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Materialien abgenommen .", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Materialien abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Ungenauer Name !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein COP !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/atake", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Entzug von Lizenzen __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take [licensename] [spielerid/PartOfName]");
                    SendClientMessage(playerid, COLOR_GREY, "Available names: Driverslicense, Flyinglicense, Boatlicense, Gunlicense, Weapons, Drugs, Materials");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"driverslicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take driverslicense [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s den Führerschein entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir den Führerschein entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flyinglicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s den Motorradführerschein entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir den Motorradführerschein entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"gunlicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take driverslicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's Die Waffen License abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Waffen License abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boatlicense",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take boatlicense [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's die Boat License abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Boat's License abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapons",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take weapons [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's die Waffen abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Waffen abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        ResetPlayerWeapons(giveplayerid);
					        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
					        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
					        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
					        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drugs",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take drugs [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s's Drogen abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Drogen abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pDrugs] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materials",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take materials [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s's Materialien abgenommen .", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Materialien abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMats] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Ungenauer Name !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein COP !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/drink", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3.0,499.4521,-20.6484,1000.6797))
	        {
	            new local = PlayerInfo[playerid][pLocal];
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|__________________ Bar __________________|");
						SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /drink [Drink]");
				  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Drinks: Bier ($60), Vodka ($100), V+Energy ($100), Wasser ($20), Soda($10)");
				  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Drinks: Mixery (20$), Grapefruit (20$), Cola (10$), Fanta (10$)");
						SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
						return 1;
					}
				    if(strcmp(x_nr,"Bier",true) == 0)
					{
					    GivePlayerMoney(playerid, - 60);
					    BizzInfo[local-99][bProducts] -= 1;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 1;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~betrunken", 3500, 1);
						BizzInfo[local-99][bTill] += 60; }
						SetPlayerTime(playerid,22,10);
						SetPlayerDrunkLevel(playerid,50000);
						SetPlayerWeather(playerid,-66);
		        		PlayerStoned[playerid] += 1;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"Mixery", true) == 0)
					{
					    GivePlayerMoney(playerid, -10);
					    BizzInfo[local-99][bProducts] -= 1;
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~betrunken", 3500, 1);
						BizzInfo[local-99][bTill] += 10; }
                        SetPlayerTime(playerid,22,10);
						SetPlayerDrunkLevel(playerid,50000);
						SetPlayerWeather(playerid,-66);
				        PlayerStoned[playerid] += 1;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Grapefruit", true) == 0)
					{
					    GivePlayerMoney(playerid, -20);
					    BizzInfo[local-99][bProducts] -= 1;
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~betrunken", 3500, 1);
						BizzInfo[local-99][bTill] += 20; }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Cola", true) == 0)
					{
					    GivePlayerMoney(playerid, -10);
					    BizzInfo[local-99][bProducts] -= 1;
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 2;
						BizzInfo[local-99][bTill] += 10;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Fanta", true) == 0)
					{
					    GivePlayerMoney(playerid, -20);
					    BizzInfo[local-99][bProducts] -= 1;
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 2;
						BizzInfo[local-99][bTill] += 20;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Vodka",true) == 0)
					{
					    GivePlayerMoney(playerid, - 10);
					    BizzInfo[local-99][bProducts] -= 1;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~betrunken", 3500, 1);
						BizzInfo[local-99][bTill] += 100; }
						SetPlayerTime(playerid,22,10);
						SetPlayerDrunkLevel(playerid,50000);
						SetPlayerWeather(playerid,-66);
				        PlayerStoned[playerid] += 1;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"V+Energy",true) == 0)
					{
					    GivePlayerMoney(playerid, - 100);
					    BizzInfo[local-99][bProducts] -= 1;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					    PlayerDrunk[playerid] += 3;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~betrunken", 3500, 1);
						BizzInfo[local-99][bTill] += 100; }
						SetPlayerTime(playerid,22,10);
						SetPlayerDrunkLevel(playerid,50000);
						SetPlayerWeather(playerid,-66);
				        PlayerStoned[playerid] += 1;
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
					else if(strcmp(x_nr,"Wasser",true) == 0)
					{
					    GivePlayerMoney(playerid, - 20);
					    BizzInfo[local-99][bTill] += 20;
					    BizzInfo[local-99][bProducts] -= 1;
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
						}
					}
					else if(strcmp(x_nr,"Soda",true) == 0)
					{
					    GivePlayerMoney(playerid, - 10);
					    BizzInfo[local-99][bTill] += 10;
					    BizzInfo[local-99][bProducts] -= 1;
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Barkeeper: Sorry, ich kenne dieses Getränk nicht.");
					    return 1;
					}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s trinkt %s.", sendername ,x_nr);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht mehr trinken, sonst musst du brechen !");
	                return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Es ist kein Barkeeper in der nähe ? !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/setchamp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setchamp [playerid]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "* Du hast %s zum neuen Box Champion.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
		            return 1;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/boxstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Boxer !");
	            return 1;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Undefeated";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
	            else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
	            else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
	            else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
	            else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
	            else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
	            else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
	            else if(level >= 71) { ntext = "Itallion Stallion"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Box Rekorde __________________|");
	        format(string, sizeof(string), "| Current Champion: %s, with [%d] Winnings and [%d] Losses.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current Title: %s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current NickName: %s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
	        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
		}
		return 1;
	}
	if(strcmp("/orgasmus", cmdtext, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1330)
		    {
				SendClientMessageToAll(COLOR_PURPLE, "Ein Admin Hat einen Orgasmus, Der Admin findet euch alle sooooo Geil das er Erregt ist");
				SendClientMessageToAll(COLOR_PURPLE, "Wenn ihr wissen wollt wer es ist oder Errektionsprobleme habt dann macht /report wir helfen Gern");
				SetPlayerHealth(playerid, 100);
		    }
		    else
			{
			    SendClientMessage(playerid,COLOR_RED, "Schäm dich du Sau!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED, "Logg dich ein du Sau!");
		}
	}
	if(strcmp("/dummenhilfe", cmdtext, true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1330)
		    {
		        SendClientMessage(playerid,COLOR_PURPLE, "Du bist dumm ? Aha .. also benutz /orgasmus!!");
		    }
			else
			{
			    SendClientMessage(playerid,COLOR_PURPLE, "Du bist anscheind zu dumm um den Befehl zu schreiben ?");
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_PURPLE, "Du bist nicht eingeloggt weil du zu Dumm bist!");
		}
	}
	if(strcmp(cmd, "/fight", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Boxer !");
	            return 1;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Da ist grade ein Kampf am laufen, warte bis er beendet ist !");
	            return 1;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist grade am kämpfen !");
	            return 1;
	        }
	        if(!IsPlayerInRangeOfPoint(playerid,20.0,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Grove Gym !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /fight [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Idiot, du kannst nicht mit der selber boxen, tz tz tz!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s zu einen Kampf herrausgefordert.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Boxer %s will mit dir kämpfen (gib /accept boxing)ein um anzunehmen.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Dieser Player ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/music", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCDPlayer])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Music __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /music [name]");
			  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare: names: On, Off, Next");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player An", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Aus", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"next",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast kein CD-Player !");
			    return 1;
			}
	    }
	    return 1;
	}
/*	if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Service Namen  __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /service [Service]");
		  		SendClientMessage(playerid, COLOR_GREY, "Service: Taxi, Bus, Medic, Mechanic, Wheelmen");
		  		SendClientMessage(playerid, COLOR_GREY, "Das Ordnungsamt erreichst du mit /noamt");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(GetPlayerInterior(playerid) != 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Von hier aus kannst du kein Taxi rufen. Begib dich auf eine offene Straße!");
		            return 1;
		        }
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Im Moment ist kein Taxifahrer im Dienst, bitte versuch es Später erneut !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du kannst im Moment kein Taxi rufen !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s bracht ein Taxi. Gib (/accept taxi) ein, um anzunehmen)", sendername);
		    	SendFamilyMessage(10, TEAM_Aztecas_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast ein Taxi angefordert warte auf eine Antwort.");
		    	TaxiCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"bus",true) == 0)
			{
			    if(GetPlayerInterior(playerid) != 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Von hier aus kannst du keinen Bus rufen. Begib dich auf eine offene Straße!");
		            return 1;
		        }
			    if(BusDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "  Im Moment ist kein Busfahrer im Dienst, bitte versuch es Später erneut !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Im Moment kannst du keinen Bus rufen !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s braucht ein Bus. Gib (/accept bus) ein, um anzunehmen.)", sendername);
		    	SendJobMessage(14, TEAM_Aztecas_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast einen Bus Fahrer gerufen,Warte auf eine Antwort.");
		    	BusCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"wheelmen", true) == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"** %s benötitgt einen Wheelman! Gebe /accept wheelmen ein, um anzunehmen.", sendername);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerInFrac(i, 21))
				    {
				        SendClientMessage(i, TEAM_Aztecas_COLOR, string);
					}
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast einen Wheelman gerufen, bitte warte auf eine Antwort.");
				WCALL = playerid;
				return 1;
			}
			else if(strcmp(x_nr,"medic",true) == 0)
			{
			    if(GetPlayerInterior(playerid) != 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Von hier aus kannst du keinen Notruf absetzen. Begib dich auf eine offene Straße!");
		            return 1;
		        }
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Es ist kein Arzt im Dienst, bitte versuch es Später erneut!");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s braucht einen Arzt. (gib /accept medic ein um den Anruf anzunehmen)", sendername);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
						{
							SendClientMessage(i, TEAM_Aztecas_COLOR, string);
						}
    				}
				}
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast nach einem Arzt gerufen, warte auf eine Antwort.");
		    	MedicCall = playerid;
		    	return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/service", true) == 0)
	{
 		if(JustService[playerid] == 1)
   		{
     		SendClientMessage(playerid,COLOR_GREY," * Du hast gerade einen Service angefordert, warte ein wenig.");
       		return 1;
	    }
	    ShowPlayerDialog(playerid,DIALOG_SERVICE,DIALOG_STYLE_LIST,"Service von SanAndreas","Taxi\nBus\nSan Andreas Rettungsdienst\nWheelmen\nOrdnungsamt\nPolizei","Rufen","Abbrechen");
	    return 1;
	}
	if(strcmp(cmd, "/tie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid) || PlayerInfo[playerid][pFMember] < 255)
			{
			    if(PlayerInfo[playerid][pRank] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rang 3 oder höher !");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /tie [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(PlayerInfo[giveplayerid][pLevel] <= 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er / Level 2er einsperren!");
				    return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Schon gefesselt !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber Anbinden!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du wurdest von %s gefesselt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s gefesselt.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s gefesselt.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Gefesselt", 2500, 3);
								FreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht in deinem Fahrzeug!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist in keiner Familie, Member / Leader !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/untie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid) || IsACop(playerid) || PlayerInfo[playerid][pFMember] < 255 || PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(PlayerInfo[playerid][pRank] < 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du benötigst Rang 1 oder höher  !");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutz: /untie [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst entfesseln!"); return 1; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s befreit.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s befreit.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Du bist frei", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht gefesselt !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Gang-/Familienmitlgied oder Cop !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/sell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Verkaufen __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare namen: Fish, Cooked");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"fish",true) == 0)
			{
			    if (!IsPlayerInRangeOfPoint(playerid,100.0,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du bist nicht im 24-7 !");
					return 1;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell fish [fish]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 sein !"); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser nummer hast du keinen Fish gefangen(1) !"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser nummer hast du keinen Fish gefangen(2) !"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser nummer hast du keinen Fish gefangen(3) !"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser nummer hast du keinen Fish gefangen(4) !"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser nummer hast du keinen Fish gefangen(5) !"); return 1; }
				ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 Kg oder mehr wiegen.");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]);
                        price = price * Fishes[playerid][pWeight1];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s verkauf.Er wog %d, Preis $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir interessieren uns nur für Fische die mehr als 20Kg wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]);
                        price = price * Fishes[playerid][pWeight2];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s verkauf.Er wog %d, Preis $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 Kg oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]);
                        price = price * Fishes[playerid][pWeight3];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s verkauft.Er wog %d, Preis $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 Kg oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]);
                        price = price * Fishes[playerid][pWeight4];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Ficsh~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s verkauft.Er wog %d, Preis $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 Kg oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]);
                        price = price * Fishes[playerid][pWeight5];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s verkauft.Er wog %d, Preis $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else if(strcmp(x_nr,"cooked",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell cooked [cooknummer] [playerid]");
					return 1;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Die Kochnummer darf nicht unter 1 oder über 5 liegen !"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts mit dieser Nummer gekocht(1) !"); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts mit dieser Nummer gekocht(2) !"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts mit dieser Nummer gekocht(3) !"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts mit dieser Nummer gekocht(4) !"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts mit dieser Nummer gekocht(5) !"); return 1; }
				tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell cooked [cooknummer] [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unbekannter /sell-Name!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/fare",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pJob] == 14)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Du bist nun außer Dienst und hast $%d verdient.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GivePlayerMoney(playerid, TransportMoney[playerid]);
					ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return 1;
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /fare [preis]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   Preis muss zwischen 1 und 999 Dollar liegen!"); return 1; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Taxifahrer %s is im Dienst, Preis: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(COLOR_YELLOW,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du fährst das Taxi nicht!");
					    return 1;
					}
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /fare [preis]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 9999) { SendClientMessage(playerid, COLOR_GREY, "   Preis muss zwischen 1 und 999 Dollar liegen!"); return 1; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Busfahrer %s ist im Dienst, Preis: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_Grove_COLOR,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du fährst den Bus nicht !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Du bist nicht in einem Taxi / Bus !");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Taxi / Bus Fahrer !");
			    return 1;
			}
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/eat",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du kannst während dem Boxkampf nichts essen !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /eat [cook number]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Kochnummer muss zwischen 1 und 5 liegen!"); return 1; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 1 !"); return 1; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 2 !"); return 1; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 3 !"); return 1; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 4 !"); return 1; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 5 !"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* %s isst %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d gegessen, du hast nun mehr Lebenspunkte.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* %s isst %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d gegessen, du hast nun mehr Lebenspunkte.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* %s isst %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d gegessen, du hast nun mehr Lebenspunkte.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* %s isst %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d gegessen, du hast nun mehr Lebenspunkte.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* %s isst %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d gegessen, du hast nun mehr Lebenspunkte.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast genug Lebenspunkte (nur unter 40)!");
			    return 1;
			}
	    }
	    return 1;
	}
 	if(strcmp(cmd,"/cook",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /cook [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Namen: letzter Fisch, Fisch, Huhn, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"letzter Fisch",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter!");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du hast bis jetzt keine Fische gefangen!");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"Fisch",true) == 0)
				{
				    new found = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cook Fisch [Fischnumner]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 liegen!"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 1 !"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 2 !"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 3 !"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 4 !"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 5 !"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"Huhn",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast kein Huhn dabei !");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du musst im Cluckin' Bell Restaurant sein, um ein Huhn zu kochen !");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"Hamburger",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,376.4466,-60.9574,1001.5078) || IsPlayerInRangeOfPoint(playerid,3.0,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Hamburger dabei !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du musst im Burger Shot Restaurant sein, um Hamburger zu brutzeln !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Pizza",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,374.1185,-113.6361,1001.4922) || IsPlayerInRangeOfPoint(playerid,3.0,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Pizzas dabei !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du musst im Well Stacked Pizza Restaurant sein, um Pizza zu backen !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Unbekannter Koch-Name!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Hier kannst du kein Essen zubereiten!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/cooked",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Kochbehälter __________________|");
	        format(string, sizeof(string), "** (1) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
	if(strcmp(cmd,"/fish",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pJob] == 18)
            {
		        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits 5 Fische gefangen, esse oder verkaufe sie zuerst !");
		            return 1;
		        }
		        new Veh = GetPlayerVehicleID(playerid);
		        if((IsAtFishPlace(playerid)) || IsABoat(Veh))
		        {
		            new Caught;
		            new rand;
		            new fstring[MAX_PLAYER_NAME];
		            new Level = PlayerInfo[playerid][pFishSkill];
	            	if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		            else if(Level >= 401) { Caught = random(180)-70; }
		            rand = random(FishNamesNumber);
		            if(rand == 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Jacke gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 4)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Hose gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 7)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Gießkanne gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 10)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast ein Paar Schuhe gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 13)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast einen Autoreifen gefangen und wirfst ihn zurück!");
		                return 1;
		            }
		            else if(rand == 20)
		            {
		                new mrand = random(500);
		                format(string, sizeof(string), "* Du hast einen Geldbeutel gefangen! Inhalt: $%d.", mrand);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                GivePlayerMoney(playerid, mrand);
		                return 1;
		            }
					else if(Caught < 0)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, " Deine Angelschnur ist gerissen!");
					    return 1;
					}
			        if(PlayerInfo[playerid][pFishLic] < 1)
			        {
		            	WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Angeln ohne Lizenz");
					}
			        if(Fishes[playerid][pWeight1] == 0)
			        {
			        	PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight1] = Caught;
						else Fishes[playerid][pWeight1] = 1;
						format(string, sizeof(string), "* Du hast %s gefangen. Gewicht: %d.", Fishes[playerid][pFish1], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 1;
						Fishes[playerid][pFid1] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
	     			}
			        else if(Fishes[playerid][pWeight2] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight2] = Caught;
						else Fishes[playerid][pWeight2] = 1;
						format(string, sizeof(string), "* Du hast %s gefangen. Gewicht: %d.", Fishes[playerid][pFish2], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 2;
						Fishes[playerid][pFid2] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight3] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight3] = Caught;
                        else Fishes[playerid][pWeight3] = 1;
						format(string, sizeof(string), "* Du hast %s gefangen. Gewicht: %d.", Fishes[playerid][pFish3], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 3;
						Fishes[playerid][pFid3] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight4] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight4] = Caught;
					    else Fishes[playerid][pWeight4] = 1;
						format(string, sizeof(string), "* Du hast %s gefangen. Gewicht: %d.", Fishes[playerid][pFish4], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 4;
						Fishes[playerid][pFid4] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight5] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight5] = Caught;
						else Fishes[playerid][pWeight5] = 1;
						format(string, sizeof(string), "* Du hast %s gefangen. Gewicht: %d.", Fishes[playerid][pFish5], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 5;
						Fishes[playerid][pFid5] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Du kannst keinen Fisch mehr tragen !");
			            return 1;
			        }
		            if(PlayerInfo[playerid][pFishSkill] == 51)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 2 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 251)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 3 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 501)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 4 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 700)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 5 gestiegen. Du kannst nun schwerere Fische fangen."); }
		        }
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du bist kein Angler!");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/fishes",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fishe __________________|");
	        format(string, sizeof(string), "** (1) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/releasefish",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /releasefish [Fisch]");
				return 1;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 liegen !"); return 1; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 1 gefangen !"); return 1; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 2 gefangen !"); return 1; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 3 gefangen !"); return 1; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 4 gefangen !"); return 1; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 5 gefangen !"); return 1; }
			ClearFishID(playerid, fishid);
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
		}
		return 1;
	}
 	if(strcmp(cmd,"/throwback",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keinen Fisch gefangen !");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/throwbackall",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keinen Fisch gefangen !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/licenses",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
	        new text6[20];
	        new text7[20];
	        new text8[20];
	        new text9[20];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "bestanden"; } else { text1 = "nicht bestanden"; }
            if(PlayerInfo[playerid][pFlyLic]) { text3 = "bestanden"; } else { text3 = "nicht bestanden"; }
			if(PlayerInfo[playerid][pBoatLic]) { text4 = "bestanden"; } else { text4 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pFishLic]) { text5 = "bestanden"; } else { text5 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pGunLic]) { text6 = "bestanden"; } else { text6 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pMotoLic]) { text7 = "bestanden"; } else { text7 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pLKWLic]) { text8 = "bestanden"; } else { text8 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pRollerLic]) { text9 = "bestanden"; } else { text9 = "nicht bestanden"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Lizenzen __________________|");
	        format(string, sizeof(string), "** Führerschein: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Fluglizenz: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Segelschein: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Angelschein: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Waffenschein: %s.", text6);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Motorradschein: %s.", text7);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** LKW Schein: %s.", text8);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Rollerschein: %s.", text9);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
	if(strcmp(cmd,"/licensepreise",true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInFrac(playerid,11) || PlayerInfo[playerid][pAdmin] >= 1)
	        {
		        tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /licensepreise [Spieler ID / Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* %s zeigt %s die Lizens-Preise.",sendername,giveplayer);
						    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Führerschein: 3.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Angelschein: 1.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Segelschein: 24.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Flugschein: 56.000$ [Level 3]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Waffenschein: 120.000$ [Level 5, Staatsfraktionen 100.000$]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," LKW-Schein: 13.500$ [Level 1]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," Motorradschein: 6.800$ [Level 1]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," Rollerschein: 1.000$ [Level 1]");
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
		            return 1;
		        }
	        }
		}
	    return 1;
 	}


 	if(strcmp(cmd,"/showlicenses",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /showlicenses [playerid/Name]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir deine Lizenzen nicht selber zeigen, gib /licenses ein für Hilfe!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
				        new text6[20];
				        new text9[20];
				        new text10[20];
				        new text12[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "bestanden"; } else { text1 = "nicht bestanden"; }
						if(PlayerInfo[playerid][pFlyLic]) { text3 = "bestanden"; } else { text3 = "nicht bestanden"; }
						if(PlayerInfo[playerid][pBoatLic]) { text4 = "bestanden"; } else { text4 = "nicht bestanden"; }
				        if(PlayerInfo[playerid][pFishLic]) { text5 = "bestanden"; } else { text5 = "nicht bestanden"; }
				        if(PlayerInfo[playerid][pLKWLic]) { text9 = "bestanden"; } else { text9 = "nicht bestanden"; }
				        if(PlayerInfo[playerid][pMotoLic]) { text10 = "bestanden"; } else { text10 = "nicht bestanden"; }
				        if(PlayerInfo[playerid][pGunLic]) { text6 = "bestanden"; } else { text6 = "nicht bestanden"; }
				        if(PlayerInfo[playerid][pRollerLic]) { text12 = "bestanden"; } else { text12 = "nicht bestanden"; }
				        format(string, sizeof(string), "|__________ Lizenzen von %s __________|", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "** Führerschein: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Fluglizenz: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Segelschein: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Angelschein: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
    					format(string, sizeof(string), "** Waffenschein: %s.", text6);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** LKW Schein: %s.", text9);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Motorradschein: %s.", text10);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Rollerschein: %s.", text12);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s hat dir seine Lizenzen gezeigt.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast deine Lizenzen %s gezeigt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/frisk",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /frisk [playerid/PartOfName]");
				return 1;
			}
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine anderen Leute durchsuchen!");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber durchsuchen/You can not search yourself yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20], text2[20], text3[20], text4[20], text5[20], text6[30], text7[20];
					    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drogen."; } else { text1 = "| -"; }
					    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materialien."; } else { text2 = "| -"; }
					    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text3 = "| Fisch."; } else { text3 = "| -."; }
					    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Telefonbuch."; } else { text4 = "| -"; }
					    if(PlayerInfo[giveplayerid][pCDPlayer] > 0) { text5 = "| CD-Player."; } else { text5 = "| -"; }
					    if(PlayerInfo[giveplayerid][pInvMats] > 0) { text6 = "| Taschen-Materialien."; } else { text6 = "| -"; }
					    if(PlayerInfo[giveplayerid][pInvDrugs] > 0) { text7 = "| Tasche-Drogen."; } else { text7 = "| -"; }
					    format(string, sizeof(string), "|__________ Gegenstände von %s __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "%s.", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text2);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text3);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text4);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text7);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s hat %s nach illegalen Gegenständen durchsucht.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/sellcar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 10)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Autohändler !");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Du bist in keinem Auto !");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sellcar [playerid] [Preis]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sellcar [playerid] [Preis]");
				return 1;
			}
			new money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preis musst zwisch 1 und 99999 Dollar liegen !"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst dir das Auto nicht selbst verkaufen!");
					        return 1;
					    }
					    if(CarCalls[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat schon ein Auto. Er muss /callcar benutzen !");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du willst ein Auto an %s für %d Dollar verkaufen.", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Autohändler %s will dir ein Auto für %d Dollar verkaufen (Tippe /accept car um es zu kaufen).", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						CarOffer[giveplayerid] = playerid;
						CarPrice[giveplayerid] = money;
						CarID[giveplayerid] = GetPlayerVehicleID(playerid);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
	    }
		return 1;
	}
	if(strcmp(cmd,"/portable",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		    {
			    if(ConnectedToPC[playerid] == 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den Laptop heruntergefahren !");
			        ConnectedToPC[playerid] = 0;
			        return 1;
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast deinen Laptop hochgefahren und dich zur Hitman-Argentur verbunden !");
			    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Neues");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Aufträge");
			    //SendClientMessage(playerid, COLOR_YELLOW2, "| - Auftraggeben");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Bestellen");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ränge");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ausloggen");
				SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
				ConnectedToPC[playerid] = 255;
				SetTimerEx("Laptopaus", 120000, 0, "i", playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Mitglied der Hitman-Argentur !");
		        return 1;
		    }
		}
	    return 1;
	}
	if(strcmp(cmd,"/materials",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Du bist kein Waffenhändler !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /materials [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Befehle: Get, Deliver.");
				return 1;
			}
			if(strcmp(x_nr,"get",true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,593.0110,-1248.0918,18.1534))
			    {
			        if(MatsHolding[playerid] >= 10)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Kein Platz mehr für mehr Material Pakete! !");
				        return 1;
			        }
			        tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /materials get [Betrag]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10) { SendClientMessage(playerid, COLOR_GREY, "Du kannst maximal 10 Pakete mitnehmen !"); return 1; }
					new price = moneys * 100;
					if(GetPlayerMoney(playerid) > price)
					{
					    format(string, sizeof(string), "* Du hast %d Materials Pakete für $%d gekauft.", moneys, price);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bringe sie zur Materials-Fabrik an den San Fierro Docks!");
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Die Docks sind auf der Map markiert, löschen mit /dc.");
						SetPlayerCheckpoint(playerid, -1824.5602967283965, 44.043216977757766, 13.2, 3.0);
						GivePlayerMoney(playerid, - price);
					    MatsHolding[playerid] = moneys;
					}
					else
					{
					    format(string, sizeof(string), "   Du hast keine $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "An dieser Stelle kannst du keine Material-Pakete kaufen!");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"deliver",true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,-1826.4926,42.1423,15.1228))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (50)*(MatsHolding[playerid]);
			            if(payout + PlayerInfo[playerid][pMats] > 2000)
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien tragen.");
			                return 1;
						}
			            format(string, sizeof(string), "* Die Fabrik hat dir %d Materialien für %d Pakete gegeben.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Du haste keine Pakete !");
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Du bist nicht an der Waffenfabrik in San Fierro nähe der Docks !");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Unbekannter Material-Name !");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/sellgun",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Du bist kein WaffenDealer!");
			    return 1;
			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "*** Waffen  ***");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellgun [playerid/PartOfName] [weaponname]");
				SendClientMessage(playerid, COLOR_GREY, "Waffen: Blumen(25) sPistole(100) Deagle(200) MP5(200) Schrotflinte(200)");
				SendClientMessage(playerid, COLOR_GREY, "Waffen: AK47(600) M4(600) Rifle(600)");
				SendClientMessage(playerid, COLOR_GREY, "*Angaben in den Klammern sind die erforderlichen Mats.");
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Waffen  ***");
						SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellgun [playerid/PartOfName] [weaponname]");
						SendClientMessage(playerid, COLOR_GREY, "Waffen: Blumen(25) sPistole(100) Deagle(200) MP5(200) Schrotflinte(200)");
						SendClientMessage(playerid, COLOR_GREY, "Waffen: AK47(600) M4(600) Rifle(600)");
						SendClientMessage(playerid, COLOR_GREY, "*Angaben in den Klammern sind die erforderlichen Mats.");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(x_weapon,"sPistole",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 23; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die schallgedämpfte Pistole!"); return 1; } }
				else if(strcmp(x_weapon,"Blumen",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 14; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Blumen!"); return 1; } }
				else if(strcmp(x_weapon,"Deagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 150; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 24; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Deagle!"); return 1; } }
				else if(strcmp(x_weapon,"MP5",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; PlayerInfo[giveplayerid][pGun2] = 29; PlayerInfo[giveplayerid][pAmmo2] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die MP5!"); return 1; } }
				else if(strcmp(x_weapon,"Schrotflinte",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 25; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Schrotflinte!"); return 1; } }
				else if(strcmp(x_weapon,"AK47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 30; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 30; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die AK47!"); return 1; } }
				else if(strcmp(x_weapon,"M4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 31; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 31; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die M4!"); return 1; } }
				else if(strcmp(x_weapon,"Rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 33; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 33; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Rifle!"); return 1; } }
				else { SendClientMessage(playerid,COLOR_GREY,"   Falscher Waffenname!"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(IsPlayerInAnyVehicle(giveplayerid))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinem im Auto eine Waffe übergeben!");
					    return 1;
					}
					if(giveplayerid == playerid)
					{
						format(string, sizeof(string), " Du hast dir, eine %s mit %d Munition, für %d verkauft.", x_weapon, ammo[playerid], price[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "* %s gibt sich eine Waffe.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeapon(playerid,weapon[playerid],ammo[playerid]);
						PlayerInfo[playerid][pMats] -= price[playerid];
					}
					else
					{
						format(string, sizeof(string), "   Du hast %s, eine %s mit %d Munition, für %d verkauft.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Du hast eine %s mit %d Munition von %s erhalten.", x_weapon, ammo[playerid], sendername);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "* %s übergibt an %s eine Waffe.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
						PlayerInfo[playerid][pMats] -= price[playerid];
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist zu weit weg!");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/sellpizza",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 19)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Pizza Dienst!");
			    return 1;
			}
			new pizzaname[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "*** Pizza  ***");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellpizza [Playerid] [Pizzaname]");
				SendClientMessage(playerid, COLOR_GREY, "Pizzen: Salami Funghi Calzone");
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					pizzaname = strtok(cmdtext, idx);
					if(!strlen(pizzaname))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Pizza  ***");
						SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellpizza [Playerid] [Pizzaname]");
						SendClientMessage(playerid, COLOR_GREY, "Pizzen: Salami Funghi Calzone");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(pizzaname,"Salami",true) == 0){ }
				else if(strcmp(pizzaname,"Funghi",true) == 0) { }
				else if(strcmp(pizzaname,"Calzone",true) == 0) { }
				else { SendClientMessage(playerid,COLOR_GREY,"   Falscher Pizza name!"); return 1; }
				if(ProxDetectorS(5.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dir nicht selber Pizzen Verkaufen!");
						return 1;
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   Du hast %s, eine Pizza %s verkauft.", giveplayer,pizzaname);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   Du hast eine Pizza %s von %s gekauft.", pizzaname, sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s verkauft an %s eine Pizza.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Der Spieler ist zu weit weg!");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/drogenlager", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, -85.4636,2.1646,3.1172))
	    {
	 	   	format(ALLSTRING, sizeof(ALLSTRING), "*Es sind %d Gramm Drogen im Drogenlager.", FarmerDrogen);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
		}
		return 1;
	}
	if(strcmp(cmd,"/get",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);

			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Get __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /get [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Befehle: Drugs, Fuel, Anwaltlicense");
				SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
				return 1;
			}

		    if(strcmp(x_job,"drugs",true) == 0)
			{
		        new tel;
			    new price;
			    new ammount;
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /get drugs [Betrag]");
					return 1;
				}
				new level = PlayerInfo[playerid][pDrugsSkill];
				ammount = strval(tmp);
				if(level >= 0 && level <= 50)
				{ tel = 1000; if(ammount < 1 || ammount > 6) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 6 gramm Drogen tragen!!"); return 1; } }
				else if(level >= 51 && level <= 100)
				{ tel = 900; if(ammount < 1 || ammount > 12) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maxima 12 gramm Drogen tragen!!"); return 1; } }
				else if(level >= 101 && level <= 200)
				{ tel = 850; if(ammount < 1 || ammount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 20 gramm Drogen tragen!"); return 1; } }
				else if(level >= 201 && level <= 400)
				{ tel = 825; if(ammount < 1 || ammount > 30) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 30 gramm Drogen tragen!"); return 1; } }
				else if(level >= 401)
				{ tel = 800; if(ammount < 1 || ammount > 99) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 99 gramm Drogen tragen!"); return 1; } }
				if(FarmerDrogen - ammount < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht vorhanden!");
				    return 1;
				}
				if(level >= 0 && level <= 50)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 6)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 6 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 51 && level <= 100)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 12)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 12 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 101 && level <= 200)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 20)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 20 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 201 && level <= 400)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 30)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 30 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 401)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 99)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 99 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				if (PlayerInfo[playerid][pJob] == 4 && IsPlayerInRangeOfPoint(playerid,3.0, -85.4636,2.1646,3.1172))
				{
				    price = ammount * tel;
				    if(GetPlayerMoney(playerid) > price)
				    {
				        format(string, sizeof(string), "* Du hast %d Gramm Drogen für $%d erworben.", ammount, price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        GivePlayerMoney(playerid, -price);
						PlayerInfo[playerid][pDrugs] = ammount;
						FarmerDrogen -= ammount;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du kannst die Drogen nicht anfordern !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Drogendealer oder nicht im Crack Haus!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"fuel",true) == 0)
			{
			    if(IsAtGasStation(playerid))
				{
				    new price = 20 * SPRITPREIS;
				    format(string, sizeof(string), "* Du hast dir Einen Benzinkanister für $%d gekauft.(20 Liter)",price);
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				    PlayerInfo[playerid][pFuel] = 20;
					GivePlayerMoney(playerid, - price);
					return 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"   Du bist an keiner Tankstelle!");
					return 1;
				}
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/tanken", true) == 0)
//	ShowPlayerDialog(playerid, DIALOG_BEZAHLEN, DIALOG_STYLE_LIST, "Womit möchtest du bezahlen", "Bargeld\nEc Karte", "Auswälen", "");
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Du musst in einem Fahrzeug sitzen!");
	    if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "Nur der Fahrer kann das Fahrzeug auftanken!");
	    new notanke = 0;
		for(new b = 0; b < sizeof(TankeInfo); b++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
			{

	    /*
	    if (IsPlayerInRangeOfPoint(playerid,3.0,-91.6928,-1170.3101,2.4106) ||IsPlayerInRangeOfPoint(playerid,3.0,-2024.4131,156.3826,28.8359)
				|| IsPlayerInRangeOfPoint(playerid,3.0,2411.5710,976.1568,45.4609) || IsPlayerInRangeOfPoint(playerid,3.0, -1674.7457,413.9423,7.1797)
				|| IsPlayerInRangeOfPoint(playerid,3.0, 1939.7811,-1772.3312,13.3906)|| IsPlayerInRangeOfPoint(playerid,3.0, 1004.9082,-940.9944,41.7214)
				|| IsPlayerInRangeOfPoint(playerid,3.0, 1939.2225,-1772.7452,12.9431)
				|| PlayerInfo[playerid][pLocal] != 255)
		{
		*/
				if(IsPlayerConnected(playerid))
	 			{
					//if(IsAtGasStation(playerid))
					//{
	 				if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
	   				{
	 		   	 		return SendClientMessage(playerid,COLOR_YELLOW," Du kannst kein Fahrrad betanken!");
		   	 		}
					SetTimer("Fillup",RefuelWait,0);
					Refueling[playerid] = 1;
					FreezePlayer(playerid);
					SendClientMessage(playerid,COLOR_WHITE," Dein Fahrzeug wird betankt, Bitte warten....");
					notanke = 0;
					//}
		    		return 1;
				}
			}
			else notanke = 1;
		}
		if(notanke == 1) {
			return SendClientMessage(playerid, COLOR_WHITE, "Du bist an keiner Tankstelle.");
		}

	}

	{

	}
	if(strcmp(cmd, "/afill", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
				{
				    SendClientMessage(playerid, COLOR_YELLOW," Du kannst kein Fahrrad betanken!");
				}
				else
				{
				    SetTimer("AFillup",RefuelWait,0);
				    Refueling[playerid] = 1;
					SendClientMessage(playerid, COLOR_WHITE," Dein Fahrzeug wird Betankt, nutze es nicht aus!");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED," Schäm dich ! Du abuser! :D!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED, "Du bist in keinem Fahrzeug!");
		}
	}
	if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
			    if(PlayerInfo[playerid][pFuel] > 0)
			    {
			        new veh = GetPlayerVehicleID(playerid);
				    if(IsANoTachoVehicle(veh))
				    {
				        SendClientMessage(playerid,COLOR_YELLOW," Ein Fahrrad hat doch keinen Tank...");
				    }
			        else if( (Gas[veh] + 20) < GetGasMax(GetVehicleModel(veh)) )
			        {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "   ~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Fahrzeug tanken, bitte warten.");
				        Gas[veh] += 20;
				        PlayerInfo[playerid][pFuel] = 0;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dein Fahrzeug hat noch genug Benzin !");
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Dein Benzinkanister ist leer !");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist in keinem Fahrzeug !");
		    }
		}
		return 1;
	}
    	if(strcmp(cmd, "/fillboot", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(20.0,playerid,-100.8630,-1730.0671,1.2640))
 		    {
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht bei der Anlegestelle!");
	        return 1;
	        }
			    if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
			    {
			        SendClientMessage(playerid,COLOR_YELLOW," Du kannst kein bike betanken!");
			    }
			    else
			    {
					SetTimer("Fillup",RefuelWait,0);
					Refueling[playerid] = 1;
					FreezePlayer(playerid);
					SendClientMessage(playerid,COLOR_WHITE," Dein Boot wird betankt, Bitte warten....");
				}
			}
			else
			{
			SendClientMessage(playerid,COLOR_GREY,"   Du bist an keiner Anlegstelle!");

		    }
    	    return 1;
	}
		if(strcmp(cmd, "/repairboot", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(20.0,playerid,-102.8027,-1739.3223,1.2640))
 		    {
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht bei der Anlegestelle!");
	        return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				RepairVehicle(GetPlayerVehicleID(playerid));
			    SendClientMessage(playerid, COLOR_GREY, "Boot repariert");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tazer", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   In einem Auto kann der Befehl nicht benutzt werden!");
			        return 1;
			    }
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist schon gefesselt !");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    if(gTeam[suspect] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst keinen Beamten Tazern! !");
					        return 1;
					    }
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Der Betroffene ist in einem Fahrzeug !");
					        return 1;
					    }
					    if(TazerBereit[playerid] == 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Dein Tazer ist noch nicht aufgeladen! (ca. 30 Sekunden)");
					        return 1;
					    }
						if(random(3) == 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du hast ihn nicht getroffen!");
					        return 1;
					    }
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s hat dich mit einem Stromschocker niedergestreckt.", sendername);
						SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s mit einem Stromschocker niedergestreckt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s holt seinen Stromschocker raus und streckt %s nieder.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(suspect, "~r~Geschockt", 2500, 3);
						LoopingAnim(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
						FreezePlayer(suspect);
						PlayerCuffed[suspect] = 1;
						PlayerCuffedTime[suspect] = 20 + random(10);
						TazerBereit[playerid] = 0;
						SetTimerEx("TazerBereitForPlayer",30000,0,"i",playerid);
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht in deiner Nähe!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Beamter !");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/testcuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			FreezePlayer(playerid);
			PlayerCuffed[playerid] = 2;
			PlayerCuffedTime[playerid] = 180;
			return 1;
		}
	}
	if(strcmp(cmd, "/cuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /cuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Polizisten fesseln !");
					        return 1;
				        }
					    if(PlayerCuffed[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist schon gefesselt !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber fesseln!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Dir wurden von %s Handschellen angelegt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s Handschellen angelegt.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s Handschellen angelegt.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~In Handschellen", 2500, 3);
								FreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 2;
								PlayerCuffedTime[giveplayerid] = 600;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Spieler ist nicht in deinem Auto, oder du bist nicht in einem Auto!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner nähe!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/uncuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /uncuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du hast dich selbst entfesselt!"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s entfesselt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du entfesselst %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Entfesselt", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht gefesselt!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/find", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] !=1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Dedektiv !");
				return 1;
		    }
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast schon nach jemanden gesucht, daher musst du noch 2 Minuten warten!");
			    return 1;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /find [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst finden!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 4; }
					else if(level >= 51 && level <= 100)
					{ points = 6; }
					else if(level >= 101 && level <= 200)
					{ points = 8; }
					else if(level >= 201 && level <= 400)
					{ points = 10; }
					else if(level >= 401)
					{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 2.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 3.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 4.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 5.Du kannst jetzt öfters Leute finden."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Falsche ID !");
			}
		}
	    return 1;
	}
//======== /KREDIT =========//
	if(strcmp(cmd, "/kredit", true) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0,2308.8831,-2.0025,26.7422))
  		{
    		SendClientMessage(playerid, COLOR_GREY, "Du bist nicht in der Bank am Schreibtisch!");
   			return 1;
      	}
		if(PlayerInfo[playerid][pLevel] < 2)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst erst ab Level 2 einen Kredit aufnehmen!");
			return 1;
		}
		if(PlayerInfo[playerid][pPlayerKreditDauer] > 0)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits ein Kredit!");
		    return 1;
		}
	    if(PlayerInfo[playerid][pAccount] + GetPlayerMoney(playerid) < 50000)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst kein Kredit aufnehmen, da dein Geld unter 50.000$ liegt!");
	        return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /kredit [Betrag]");
		    return 1;
		}
		new kredit = strval(tmp);
		if(PlayerInfo[playerid][pLevel] >= 3 && PlayerInfo[playerid][pLevel] <= 5)
		{
		    if(kredit > 100000)
		    {
		        SendClientMessage(playerid, COLOR_GRAD1, "Betrag muss zwischen 50.000$ und 100.000$ liegen, da du unter Level 6 bist.");
		        return 1;
			}
			PlayerInfo[playerid][pPlayerKreditDauer] = 25;
			format(string, sizeof(string), "*Du hast einen Kredit in Höhe von %d$ aufgenommen.", kredit);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"*Es wurde zu deinem Bankkonto dazugerechnet.");
			format(string, sizeof(string), "*In den nächsten %d Paydays werden dir %d$ abgebucht.",PlayerInfo[playerid][pPlayerKreditDauer], kredit/20);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pAccount] += kredit;
			PlayerInfo[playerid][pPlayerKredit] = kredit/20;
		}
		else if(PlayerInfo[playerid][pLevel] >= 6 && PlayerInfo[playerid][pLevel] < 10)
		{
		    if(kredit > 200000)
		    {
		        SendClientMessage(playerid, COLOR_GRAD1, "Betrg muss wischen 50.000$ und 200.000$ liegen, da du unter Level 11 bist.");
		        return 1;
			}
			PlayerInfo[playerid][pPlayerKreditDauer] = 30;
			format(string, sizeof(string), "*Du hast einen Kredit in Höhe von %d$ aufgenommen.", kredit);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"*Es wurde zu deinem Bankkonto dazugerechnet.");
			format(string, sizeof(string), "*In den nächsten %d Paydays werden dir %d$ abgebucht.",PlayerInfo[playerid][pPlayerKreditDauer], kredit/20);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pAccount] += kredit;
			PlayerInfo[playerid][pPlayerKredit] = kredit/25;
		}
		else if(PlayerInfo[playerid][pLevel] >= 11)
		{
		    if(kredit > 400000)
		    {
		        SendClientMessage(playerid, COLOR_GRAD1, "Betrg muss wischen 50.000$ und 400.000$ liegen.");
		        return 1;
			}
			PlayerInfo[playerid][pPlayerKreditDauer] = 40;
			format(string, sizeof(string), "*Du hast einen Kredit in Höhe von %d$ aufgenommen.", kredit);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"*Es wurde zu deinem Bankkonto dazugerechnet.");
			format(string, sizeof(string), "*In den nächsten %d Paydays werden dir %d$ abgebucht.",PlayerInfo[playerid][pPlayerKreditDauer], kredit/20);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pAccount] += kredit;
			PlayerInfo[playerid][pPlayerKredit] = kredit/35;
		}
		return 1;
	}
//==========HFIND=============//

if(strcmp(cmd, "/hfind", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] > 8 || PlayerInfo[playerid][pLeader] > 8)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Hitman");
				return 1;
		    }
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /hfind [Spieler ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Falsche ID!");
			}
		}
	    return 1;
	}

//===============HFIND========//

//======== ORTEN ==========//
	if(strcmp(cmd, "/orten", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!IsACop(playerid))
		    {
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Polizist!");
				return 1;
		    }
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orten [Spieler ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Falsche ID!");
			}
		}
	    return 1;
	}

//==================================
	if(strcmp(cmd, "/guard", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Bodyguard!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /guard [playerid] [Preis]");
				return 1;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Geldbetrag muss zwischen 1 und 99999 liegen!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst dich nicht selbst beschützen!");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du bietest %s deinen Schutz für $%d an.", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Bodyguard %s möchte dich für $%d beschützen, (tipp /accept bodyguard).", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah Genug!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/cancel",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cancel [name]");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: Sex, Drugs, Repair, Bodyguard, Live, Refill, Car, Boxing ,Kippe");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: Taxi, Bus, Medic, Mechanic, Paper, Ticket, Witness, Marriage, Divorce, Anwalt");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sex",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_job,"drugs",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"repair",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"live",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"refill",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"car",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"paper",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"kippe",true) == 0) { ZigOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"ticket",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_job,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
           	else if(strcmp(x_job,"SAPD",true) == 0) { if(IsPlayerConnected(CopCall)) { if(CopCall == playerid) { CopCall = 999;} else { SendClientMessage(playerid,COLOR_GREY, " You Are not the current Caller ! "); return 1; }}}
			else if(strcmp(x_job,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"anwalt",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Auftrag~n~~r~aufgebrochen", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Auftrag~n~~r~wurde abgebrochen", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Auftrag~n~~r~abgebrochen", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Auftrag~n~~r~abgebrochen", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "* Abgebrochen: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}
//ACCEPT COMMANDS (Cops)
	if(strcmp(cmd,"/accept",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Akzeptieren __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: accept [name]");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Sex, Drugs, Repair, Bodyguard, Live, Refill, Wheelmen");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Car, Taxi, Bus, Boxing, Medic, Mechanic, Paper, Ticket, kippe");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
	        if(strcmp(x_job,"car",true) == 0)
			{
			    if(CarOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > CarPrice[playerid])
			            {
			                if(IsPlayerInVehicle(CarOffer[playerid], CarID[playerid]))
			                {
				                GetPlayerName(CarOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                new points;
				                PlayerInfo[CarOffer[playerid]][pCarSkill] ++;
				                if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 50)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Dein Auto Dealer Skill ist nun auf 2.Deine verkauften Autos kann man nun öfters rufen."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 100)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Dein Auto Dealer Skill ist nun auf 3.Deine verkauften Autos kann man nun öfters rufen."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 200)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Dein Auto Dealer Skill ist nun auf 4.Deine verkauften Autos kann man nun öfters rufen."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 400)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Dein Auto Dealer Skill ist nun auf 5.Deine verkauften Autos kann man nun öfters rufen."); }
								new level = PlayerInfo[CarOffer[playerid]][pCarSkill];
								if(level >= 0 && level <= 50) { points = 1; }
								else if(level >= 51 && level <= 100) { points = 2; }
								else if(level >= 101 && level <= 200) { points = 3; }
								else if(level >= 201 && level <= 400) { points = 4; }
								else if(level >= 401) { points = 4; }
				                format(string, sizeof(string), "* Du hast ein Auto für $%d von Auto Dealer %s gekauft. (%d mal /callcar verfügbar)",CarPrice[playerid],giveplayer,points);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s dein Auto für $%d verkauft, er hat %d mal /callcar .",sendername,CarPrice[playerid],points);
								SendClientMessage(CarOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[CarOffer[playerid]][pPayCheck] += CarPrice[playerid];
								GivePlayerMoney(playerid, -CarPrice[playerid]);
								RemovePlayerFromVehicle(CarOffer[playerid]);
								CarCalls[playerid] = points;
						        CarOffer[playerid] = 999;
								CarPrice[playerid] = 0;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Dealer ist nicht in dem Auto!");
						    	return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du kannst das Auto nicht kaufen!");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner will ein Auto verkaufen !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"divorce",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* * Du hast den Scheidung von %s angenommen.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat die Scheidung akzeptiert.", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPhousekey] = 255;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe! !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat die Scheidung eingereicht!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"kippe",true) == 0)
			{
			    if(ZigOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(ZigOffer[playerid]))
			        {
			        	if(PlayerInfo[ZigOffer[playerid]][pZig] >= 1)
			        	{
				            if(ProxDetectorS(10.0, playerid, ZigOffer[playerid]))
							{
							    GetPlayerName(ZigOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* * Du hast die Zigarette von %s angenommen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat die Zigarette angenommen.", sendername);
								SendClientMessage(ZigOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[ZigOffer[playerid]][pZig] -= 1;
								PlayerInfo[playerid][pZig] += 1;
	 							return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe! ");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Zigaretten mehr!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Kippe angeboten!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"witness",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %s's Einladung zum Trauzeugen angenommen.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat die Einladung zum Trauzeugen angenommen.", sendername);
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dich hat keiner zum Trauzeugen gewählt!");
				    return 1;
				}
			}
	        else if(strcmp(x_job,"marriage",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid,10.0, -1988.6638,1117.8837,54.4726))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht in SF an der Kirche!");
			            return 1;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Trauzeugen (/witness)! !");
						        return 1;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* %s hat den Antrag angenommen.", giveplayer);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* %s hat den Antrag angenommen.", sendername);
									SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "Priester: %s möchtest du %s heiraten? (tipp 'yes', etwas anderes wird die Hochzeit abbrechen)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe!");
								    return 1;
								}
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir einen Antrag gestellt!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"ticket",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %d$ für das Ticket von %s bezahlt!", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat dir %d$ dür das Ticket bezahlt!", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
							GivePlayerMoney(playerid, - TicketMoney[playerid]);
							GivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
							SetPlayerWantedLevel(playerid, 0);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Polizeibeamte ist nicht in deiner Nähe !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir ein Ticket gegeben !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"paper",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast die Zeitung vom Boten %s angenommen(Tipp /read paper).", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat dir die Zeitung abgekauft.", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Kein Zeitungsjunge in der Nähe !");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Zeitung angeboten!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"boxing",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pJob] == 12)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* Du hast die Herausforderung von %s angenommen, du kämpfst mit %d HP.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat deine Herausforderung angenommen, du kämpfst mit %d HP.",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						FreezePlayer(playerid);
						FreezePlayer(BoxOffer[playerid]);
						GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Warte", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box News: Champion %s wird in 60sek gegen %s antreten, (Grove Gym).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box News: Champion %s wird in 60sek gegen %s antreten, (Grove Gym).",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Kein Box Wetkampf !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Taxi Fahrer !");
				    return 1;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du hast berreits ein Taxi gerufen !");
				    return 1;
	            }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen, fahre zu dem Marker auf der MiniMap.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Taxi Fahrer %s ist unterwegs zu dir.Bitte warte an deiner momentanen Position.",sendername);
						SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Taxi Fahrer~n~~r~Goto redmarker", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Keiner hat ein Taxi gerufen!");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Busfahrer !");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits den Busanruf angenommen !");
				    return 1;
	            }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen, fahre zu dem Marker auf der MiniMap.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Busfahrer %s ist unterwegs zu dir. Bitte warte an deiner momentanen Position.",sendername);
						SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Busfahrer~n~~r~Goto redmarker", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Keiner hat einen Bus gerufen !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job, "wheelmen", true) == 0)
			{
			    if(!IsPlayerInFrac(playerid, 21))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nur Wheelmen können Aufträge annehmen!");
			        return 1;
				}
				if(WCALL < 999)
				{
				    if(IsPlayerConnected(WCALL))
				    {
				        GetPlayerName(playerid, sendername,sizeof(sendername));
				        GetPlayerName(WCALL, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen. Fahre zur Roten Markierung.", giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker, um den Checkpoint zu löschen.");
            			format(string, sizeof(string), "* %s hat deinen Auftrag angenommen. Er ist unterwegs",sendername);
						SendClientMessage(WCALL, COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(WCALL, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						WCALL = 999;
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nichtmehr online!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Keiner hat die Wheelmen gerufen!");
				}
			}
			else if(strcmp(x_job,"medic",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Du hast schon einen Notruf abgesetzt !");
					    return 1;
		            }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Du hast den Notruf von %s angenommen, fahre zu der roten Markierung.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker um die Markierung zu löschen.");
	                        format(string, sizeof(string), "* Notarzt %s hat deinen Notruf angenommen. Warte an deiner momentanen Position.",sendername);
							SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Sanitäter~n~~r~Fahr zur Markierung", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Niemand hat einen Notarzt gerufen!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Notarzt !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"refill",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                new car = GetPlayerVehicleID(playerid);
			                new fuel;
			                PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 2, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 3, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 4, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 5, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
							new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
							if(level >= 0 && level <= 50)
							{ fuel = 15; }
							else if(level >= 51 && level <= 100)
							{ fuel = 20; }
							else if(level >= 101 && level <= 200)
							{ fuel = 30; }
							else if(level >= 201 && level <= 400)
							{ fuel = 40; }
							else if(level >= 401)
							{ fuel = 50; }
			                format(string, sizeof(string), "* Du hast das Auto von %d mit %d Benzin für $%d auftanken lassen.",giveplayer,fuel,RefillPrice[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du hast %s's Fahrzeug mit %d Benzin aufgefüllt. Die $%d wurden zum Zahltag gerechnet.",sendername,fuel,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid];
							GivePlayerMoney(playerid, -RefillPrice[playerid]);
							new maxgas = GetGasMax(GetVehicleModel(car));
							if((Gas[car]+15) > maxgas)
							{
							    Gas[car] = maxgas;
							}
							else
							{
							    Gas[car] += 15;
							}
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du kannst nicht Auffüllen !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gesagt das er dich betanken soll !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"live",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist bis zum Ende Gefreezt.");
							SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Du bist gefreezt (tipp /live um zu Beenden).");
							FreezePlayer(playerid);
							FreezePlayer(LiveOffer[playerid]);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Kein News Reporter in deiner nähe !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner gibt dir eine Live Unterhaltung !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"anwalt",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /accept anwalt [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsACop(playerid) || gTeam[playerid] == 2)
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pJob] == 2)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %s erlaubt einen Gefangenen zu befreien.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE,string);
								format(string, sizeof(string), "* Officer %s hat dir erlaubt den Gefangenen zu befreien.(/free)", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, " Du bist kein Polizist / Soldat / FBI Agent!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"bodyguard",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast den Schutz für $%d von Bodyguard %s angenommen.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s will deinen Schutz, die $%d wurden zum Zahltag addiert.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[GuardOffer[playerid]][pPayCheck] += GuardPrice[playerid];
							GivePlayerMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner will dich beschützen !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"drugs",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %d Gramm für $%d vom Drogen Händler %s gekauft.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat deine %d Gramm gekauft, er zahlt $%d .",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								ProxDetector(7.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								//PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								GivePlayerMoney(playerid, -DrugPrice[playerid]);
								GivePlayerMoney(DrugOffer[playerid],DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 2 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 3 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 4 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 5 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Drogen mehr aufnehmen !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du kannst so viele nicht Anbieten!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner möchte deine Drogen !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"sex",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hattest Sex mit %s, Kosten $%d.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hatte Sex mit dir, Lohn: %d$", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);
								GivePlayerMoney(SexOffer[playerid], SexPrice[playerid]);
								GivePlayerMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Dein Sex Skill ist nun LVL 2, du kannst nun besseren Sex bieten und weniger Aids chance."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Dein Sex Skill ist nun LVL 3, du kannst nun besseren Sex bieten und weniger Aids chance."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Dein Sex Skill ist nun LVL 4, du kannst nun besseren Sex bieten und weniger Aids chance."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Dein Sex Skill ist nun LVL 5, du kannst nun besseren Sex bieten und weniger Aids chance."); }
								if(STDPlayer[playerid] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 30.0); }
											new rand = random(sizeof(STD1));
											STDPlayer[playerid] = STD1[rand];
											STDPlayer[SexOffer[playerid]] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bekommst 30 Healthpunkte und keine Geschlechtskrankheit während du Sex hast."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast während des Sex keine Geschlechstkrankheit bekommen."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 30 Healthpunkte und eine Chlamydieninfektion bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex eine Chlamydieninfektion bekommen."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 30 Healthpunkte und nen Tripper gekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex nen Tripper bekommen."); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 30 Healthpunkte und die Syphilis bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex die Syphilis bekommen."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 60.0); }
											new rand = random(sizeof(STD2));
											STDPlayer[playerid] = STD2[rand];
											STDPlayer[SexOffer[playerid]] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bekommst 60 Healthpunkte und keine Geschlechtskrankheit während du Sex hast."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast während des Sex keine Geschlechstkrankheit bekommen."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 60 Healthpunkte und eine Chlamydieninfektion bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex eine Chlamydieninfektion bekommen."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 60 Healthpunkte und nen Tripper gekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex nen Tripper bekommen."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 60 Healthpunkte und die Syphilis bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex die Syphilis bekommen."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 90.0); }
											new rand = random(sizeof(STD3));
											STDPlayer[playerid] = STD3[rand];
											STDPlayer[SexOffer[playerid]] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bekommst 90 Healthpunkte und keine Geschlechtskrankheit während du Sex hast."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast während des Sex keine Geschlechstkrankheit bekommen."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 90 Healthpunkte und eine Chlamydieninfektion bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex eine Chlamydieninfektion bekommen."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 90 Healthpunkte und nen Tripper gekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex nen Tripper bekommen."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 90 Healthpunkte und die Syphilis bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex die Syphilis bekommen."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 120.0); }
											new rand = random(sizeof(STD4));
											STDPlayer[playerid] = STD4[rand];
											STDPlayer[SexOffer[playerid]] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bekommst 120 Healthpunkte und keine Geschlechtskrankheit während du Sex hast."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast während des Sex keine Geschlechstkrankheit bekommen."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 120 Healthpunkte und eine Chlamydieninfektion bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex eine Chlamydieninfektion bekommen."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 120 Healthpunkte und nen Tripper gekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex nen Tripper bekommen."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast von dem Sex 120 Healthpunkte und die Syphilis bekommen."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Du hast wegen dem Sex die Syphilis bekommen."); }
										}
										else if(level >= 401)
										{
										    if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 150.0); }
											SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Dein Sex Skill Level ist so hoch das du die höchsten Healthpunkte vergibst und keine Geschlechtskrankheiten verbreitest.");
											SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Das Sex Skill Level der Hure ist so hoch das sie die höchsten Healthpunkte vergibt und keine Geschlechtskrankheiten verbreitet.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Der Spieler hat ein Kondom benutzt.");
									    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast ein Kondom benutzt.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Dieser Spieler hatte schon eine Geschlechtskrankheit, er kann sich keine neue Krankheit einfangen.");
								    return 1;
								}
								SexOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Du oder die Hure sitzt nicht im Auto !");
							    return 1;
							}
						}//Connected or not
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du kannst dir keinen Sex leisten!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Dir hat keine Hure ein Angebot für Sex gemacht !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"repair",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
								format(string, sizeof(string), "* Du hast dein Auto für $%d von Mechaniker %s reparieren lassen.",RepairPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s's Auto repariert.  Die $%d wurden zum Zahltag gerechnet ",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 2, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 3, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 4, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 5, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								PlayerInfo[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid];
								GivePlayerMoney(playerid, -RepairPrice[playerid]);
								RepairVehicle(GetPlayerVehicleID(playerid));//NEU
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								/*if(MotorschadenMSGSent[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du kannst nun wieder weiter fahren!");
								    UnFreezePlayer(playerid);
								    MotorschadenMSGSent[playerid] = 0;
								}*/
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du kannst dir diese Reparatur nicht leisten !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Reparatur angeboten !");
			        return 1;
			    }
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/refill", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] !=7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein KFZ-Mechaniker!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /refill [playerid] [preis]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 450) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1$ oder über 450$ liegen!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Du kannst dein eigenes Auto nicht auftanken!"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du hast %s das Betanken seines Auto für $%d angeboten .",giveplayer,money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* KFZ-Mechaniker %s bietet dir die Betankung deines Autos für $%d an, (gib /accept refill) ein um anzunehmen.",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe / nicht in seinem Auto.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
			}
		}
		return 1;
	}
 if(strcmp(cmd, "/repair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein KFZ Mechaniker!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /repair [playerid] [Preis]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 450) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1$ oder über 450$ liegen!"); return 1; }
			{
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
						{
						    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Du kannst dein eigenes Auto nicht Reparieren!"); return 1; }
					    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s die Reparatur seines Wagens für $%d angeboten .",giveplayer,money);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* KFZ-Mechaniker %s bietet dir eine Reparatur deines Wagens für $%d an, (gib /accept repair) ein um anzunehmen.",sendername,money);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RepairOffer[playa] = playerid;
							RepairPrice[playa] = money;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe / nicht in seinem Wagen.");
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/callcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bestelltes Auto ist angekommen.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* Du kannst dein bestelltes Auto %d mal rufen.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Fehler!");
		    }
		}
	    return 1;
	}
	if(strcmp(cmd, "/family", true) == 0 || strcmp(cmd, "/f", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht sprechen, du wurdest gemutet!");
				return 1;
			}
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nichts ins Familienchat schreiben!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: (/f)amily [familien chat]");
				return 1;
			}
		    new leader = PlayerInfo[playerid][pLeader];
		    new member = PlayerInfo[playerid][pMember];
			if( (member >= 5 && member <= 24) || (leader >= 5 && leader <= 24) )
			if(member != 7 && leader != 7)
			{
			    if(member==5)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Destro %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Consiguere %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Soldato %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Adepto %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Solitario %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Bambino %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==6)//Anfang Yakuza
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Heddo %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Maneja %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Erito %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Menba %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Kodona %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Sabanto %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 0) { format(string, sizeof(string), "** Gaijin %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}//Ende Yakuza
				else if(member==8)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Direktor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Vice-Direktor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Massenmörder %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Attentäter %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Söldner %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Azubi %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Praktikant %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==9)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Network Producer %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Network Editor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Network Anchor %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Local Editor %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Local Reporter %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Intern %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Intern %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==10)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Taxi Company Owner %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Shift Supervisor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Dispatcher %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Cabbie %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Taxi Rookie %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Trainee %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Trainee %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==11)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Under Boss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Manager %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Senior Instructor %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Instructor %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Trainee %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Trainee %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==12)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rechte Hand %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Linke Hand %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Würdiger %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Anfänger %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Unwürdiger %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Anwärter %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==13)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rechte Hand %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Grove Gangsta %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Grove OG %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Home %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Zugezogener %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Knecht %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==14)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Big Boss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** O.G Nigga %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Street-Nigga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Homie %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Nigga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Knecht %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Nigga %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==15)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Bikerboss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Underboss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Road Captain %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Biker %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Member %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Prospect %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Opfer %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==16)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Maestro %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** 2.Hand %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Vagos Bro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Loco Amigo %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Homie %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Amigo %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Amigo %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==17)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Jefazo %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Padrino %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Siervo %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Compañero %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Novicio %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Péon %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Amigo %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==18)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Rädelsführer %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Vertrauter %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Vollstrecker %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Schläger %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Neuling %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Anwerber %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Amigo %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==19)
				{
				    if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Red King %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rechte Hand %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Elite %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Killer %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Erfahrener %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Anfängerr %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Straßenheitzer %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==20)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Al-Qaida Anführer %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rechte Hand %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Atentäter %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Bombenleger %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** T-Azubi %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Sklave %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Terrorist %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member == 21)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Leader %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Co-Leader %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Ausbilder %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Spezial Member %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Member %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Anfänger %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Terrorist %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(member==23)
				{
				    if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Baron %s: %s. )) **", sendername, result); }
				    else if(PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Baron %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Brat %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Dilowoj %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Pristupnik %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Shigol %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Novichok %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 0) { format(string, sizeof(string), "** Iskupitel Vini %s: %s. )) **", sendername, result); }
					else { format(string, sizeof(string), "** Baron %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==5)
				{
				    format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==6)
				{
				    format(string, sizeof(string), "** Pate %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==8)
				{
				    format(string, sizeof(string), "** Director %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==9)
				{
				    format(string, sizeof(string), "** Network Producer %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==10)
				{
				    format(string, sizeof(string), "** Taxi Company Owner %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==11)
				{
				    format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==12)
				{
				    format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==13)
				{
				    format(string, sizeof(string), "** Oberhaupt %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==14)
				{
				    format(string, sizeof(string), "** O.G Nigga %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==15)
				{
				    format(string, sizeof(string), "** TopRacer %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==16)
				{
				    format(string, sizeof(string), "** Maestro %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==17)
				{
				    format(string, sizeof(string), "** Maestro %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==18)
				{
				    format(string, sizeof(string), "** Rädelsführer %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==19)
				{
				    format(string, sizeof(string), "** Red King %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==20)
				{
				    format(string, sizeof(string), "** Terrorist %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==21)
				{
				    format(string, sizeof(string), "** Leader %s: %s. )) **",sendername, result);
				    SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(leader==23)
				{
				    format(string, sizeof(string), "** Boss %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], TEAM_Aztecas_COLOR, string);
				}
				else if(PlayerInfo[playerid][pFMember] < 255)
			    {
			        if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pRank] == 12) { format(string, sizeof(string), "** Godfather %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Underboss %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Capo %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Soldier %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Associate %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Outsider %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Outsider %s: %s. )) **", sendername, result); }
					SendNewFamilyMessage(PlayerInfo[playerid][pFMember], TEAM_Aztecas_COLOR, string);
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Du bist nicht befugt in diesen Chat zu schreiben!");
				return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/news", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du bist gemutet!");
					return 1;
				}
				if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 586)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /news [newstext]");
						return 1;
					}
					format(string, sizeof(string), "NR %s: %s", sendername, result);
					OOCNews(COLOR_NEWS,string);
					PlayerInfo[playerid][pNewsSkill] ++;
					if(PlayerInfo[playerid][pNewsSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein News Reporter Skill ist jetzt auf Level 2, bald kannst du den News Helikopter fliegen und ein Interview machen."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein News Reporter Skill ist jetzt auf Level 3, bald kannst du den News Helikopter fliegen und ein Interview machen."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein News Reporter Skill ist jetzt auf Level 4, du kannst jetzt den News Helikopter fliegen."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein News Reporter Skill ist jetzt auf Level 5, du kannst jetzt Interviews machen."); }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im News Van oder Chopper !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Reporter !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/live", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Live Unterhaltung beendet.");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live Unterhaltung benedet.");
			        UnFreezePlayer(playerid);
			        UnFreezePlayer(TalkingLive[playerid]);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
			    if(PlayerInfo[playerid][pNewsSkill] < 400)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dein News Reporter Skill ist zu niedrig um einen Live Talk mit Personen zu halten !");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /live [playerid]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht mit dir selbst Live machen!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %s zu einer Live Conversation eingeladen.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s bietet dir eine Live Conversation an, gib (/accept live) ein, um zu akzeptieren.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du bist zu weit von diesem Spieler entfernt !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein CNN Reporter !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/selldrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Drogen Dealer!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /selldrugs [playerid] [betrag] [preis]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Das Drogengewicht darf nicht unter 1 oder über 99 Gramm liegen!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1 oder über 99999 liegen!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nicht genug Drogen dabei !"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst nicht an dich selber verkaufen!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du hast %s %d Gramm Drogen für $%d angeboten  .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Drogendealer %s bietet dir %d Gramm Drogen für $%d an, (gib /accept drugs) ein um sie zu kaufen.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/usedrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du kannst während einem Kampf keine Drogen nehmen !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pDrugs] > 1)
			{
			    PlayerStoned[playerid] += 1;
			    if(PlayerStoned[playerid] >= 2) { GameTextForPlayer(playerid, "~w~Du bist~n~~p~ voll Stoned", 4000, 1); }
			    new Float:health;
			    GetPlayerHealth(playerid, health);
			    if(PlayerInfo[playerid][pDrugPerk] > 0)
			    {
			        new hp = 10 * PlayerInfo[playerid][pDrugPerk];
					hp += 30;
					SetPlayerHealth(playerid, health + hp);
			    }
			    else
			    {
			        SetPlayerHealth(playerid, health + 20.0);
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "%s hat Drogen eingenommen", sendername);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    SendClientMessage(playerid, COLOR_GREY, "   2 Gramm Drogen genommen !");
			    PlayerInfo[playerid][pDrugs] -= 2;
			    if(STDPlayer[playerid]==1)
				{
				     STDPlayer[playerid] = 0;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast keine Geschlechtkrankheit mehr, weil du Drogen genommen hast !");
				}
				else if(STDPlayer[playerid]==2)
				{
				     STDPlayer[playerid] = 1;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Geschlechtskrankheit durch die Einhame von Drogen auf eine Chlamydieninfektion verringert !");
				}
				else if(STDPlayer[playerid]==3)
				{
				     STDPlayer[playerid] = 2;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Geschlechtskrankheit durch die Einhame von Drogen auf einen Tripper verringert !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Drogen mehr !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/healme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (IsPlayerInRangeOfPoint(playerid,3.0,1173.2563,-1323.3102,15.3943)||IsPlayerInRangeOfPoint(playerid,3.0,2029.5945,-1404.6426,17.2512))
			{
	            if(STDPlayer[playerid] > 0)
	            {
					STDPlayer[playerid] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast keine Geschlechtskrankheit mehr weil du im Krankenhaus behandelt wurdest !");
					GivePlayerMoney(playerid, -1000);
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "ARZT: Deine Behandlungskosten betragen $1000,-. Schönen Tag noch!");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Geschlechtskrankheit die geheilt werden könnten !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist an keinem Krankenhaus !");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/eject", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"   Du kannst nur als Fahrer Leute aus dem Auto werfen !");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /eject [playerid]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber rauswerfen!"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Du hast %s aus dem Auto geworfen!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du wurdest von %s aus dem Auto geworfen!", PName);
							UnFreezePlayer(playa);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " Der Spieler ist nicht in deinem Auto !");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " Falsche ID!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du mußt in einem Farzeug sitzen um den Befehl nutzen zu können ! !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sex", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "  Du kannst nur im Auto Sex haben!");
					return 1;
			    }
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /sex [playerid] [Preis]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preis nicht niedriger als 1, oder höher als 99999!"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht mit dir selber Sex Haben!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %s Sex mit dir für $%d angeboten.", giveplayer, money);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Hure %s hat dir für $%d Sex angeboten (gib /accept sex) ein um anzunehmen.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "   Du und der andere Player müssen zusammen im Auto sitzen !");
				                return 1;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist keine Hure !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/gefangene", true) == 0)
	{
	    if(IsACop(playerid))
	    {
	        new x;
	        SendClientMessage(playerid, COLOR_RED, "====[Gefangene]====");
	        for(new i=0; i < MAX_PLAYERS; i++)
	        {
	            if(PlayerInfo[i][pJailed] > 0 && IsPlayerConnected(i))
	            {
	                GetPlayerName(i, giveplayer, sizeof(giveplayer));
	                format(string, sizeof(string), "%s%s [ID: %d | Restliche Sekunden: %d]", string, giveplayer,i,PlayerInfo[i][pJailTime]);
	                x++;
	                if(x > 2)
	                {
	                    SendClientMessage(playerid, COLOR_YELLOW, string);
	                    x = 0;
	                    format(string, sizeof(string), "");
					}
					else
					{
					    format(string, sizeof(string), "%s, ", string);
					}
				}
			}
			if(x <= 2 && x > 0)
			{
			    string[strlen(string)-2] = '.';
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Polizist!");
		}
		return 1;
	}
	if(strcmp(cmd, "/wanted", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
				new x;
				SendClientMessage(playerid, COLOR_RED, "====[Gesuchte Spieler]====");
			    for(new i=0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 0)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s%s[ID:%d]: %d", string,giveplayer,i,WantedLevel[i]);
							x++;
							if(x > 3)
							{
							    SendClientMessage(playerid, COLOR_YELLOW, string);
							    x = 0;
								format(string, sizeof(string), "");
							}
							else
							{
								format(string, sizeof(string), "%s, ", string);
							}
						}
					}
				}
				if(x <= 3 && x > 0) {
					string[strlen(string)-2] = '.';
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist kein Beamter !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/dropcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 5)
			{
		        if(PlayerInfo[playerid][pCarTime] == 0)
		        {
		            GameTextForPlayer(playerid, "~w~Auto verkaufen ~n~~r~Stell das Auto unter dem Kran ab", 5000, 1);
		            CP[playerid] = 1;
		            SetPlayerCheckpoint(playerid, -1548.3618,123.6438,3.2966,8.0);
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du hast schon ein Auto versetzt, du mußt erst die Wartezeit ablaufen lassen !");
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Auto Dieb !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/kuendigen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 0)
		    {
		        if(PlayerInfo[playerid][pDonateRank] >= 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast deinen 1 Stunden Vertrag erfüllt und den Job gekündigt.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Du musst noch %d Stunden arbeiten um den Vertrag zu erfüllen und den Job kündigen zu können.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Job !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]==1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetPlayerMoney(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "Du hast dich selber für eine Kaution von $%d rausgeholt.", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dir die Kaution nicht leisten !");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   Du hast keine Kaution !");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht im Gefängnis !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/clear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	 		if(gTeam[playerid] == 2 || IsACop(playerid)|| IsAbf(playerid))
			{
			    new tmpcar = GetPlayerVehicleID(playerid);
				//if(IsPlayerInRangeOfPoint(playerid,5.0,196.9869,170.9081,1003.0234) || IsPlayerInRangeOfPoint(playerid,3.0,53.3795,68.0757,1003.6406))
				//{
				if(GetPlayerInterior(playerid) == 3 || GetPlayerInterior(playerid) == 10 || GetPlayerInterior(playerid) == 6 || IsACopCar(tmpcar))
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutz: /clear [Spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
	                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst deine Akte nicht selber säubern!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "*Du hast die Akte von %s gereinigt.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "*Polizist %s hat deine Akte gereinigt.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							for(new i=0; i<MAX_PLAYERS; i++)
							{
								if(IsACop(i))
								{
									format(string, sizeof(string), "%s hat %s's Akte gereinigt.", sendername, giveplayer);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
									Clear(string);
								}
							}
							WantedPoints[giveplayerid] = 0;
							WantedLevel[giveplayerid] = 0;
							ClearCrime(giveplayerid);
							SetPlayerWantedLevel(giveplayerid,0);
							if(gTeam[giveplayerid]==4)
							{
							    gTeam[giveplayerid] = 3;
							    //SetPlayerToTeamColor(giveplayerid);
							}
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht online!");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht im Police Department beim Clear Punkt!");
					return 1;
				}
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/oticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
			{
		    	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /oticket [playerid] [preis] [Grund]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /oticket [playerid] [preis] [Grund]");
					return 1;
				}
				moneys = strval(tmp);
				if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 1 oder mehr als 99999 !"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "Benutz: /ticket [Spieler ID] [Preis] [Grund]");
								return 1;
							}
							format(string, sizeof(string), "* Du hast %s ein Ticket in Höhe von $%d ausgestellt, Grund: %s", giveplayer, moneys, (result));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Ordnungsamtbeamter %s hat dir ein Ticket in Höhe von $%d ausgestellt, Grund: %s", sendername, moneys, (result));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Um das Ticket zu bezahlen gib '/accept ticket' ein.");
							TicketOffer[giveplayerid] = playerid;
							TicketMoney[giveplayerid] = moneys;
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht nah genug !");
							return 1;
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist nicht beim Ordnungsamt!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] != 2 && !IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Beamter!");
			    return 1;
			}
	        if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Beamter!");
			    return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ticket [playerid] [preis] [Grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ticket [playerid] [preis] [Grund]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 1 oder mehr als 99999 !"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Benutz: /ticket [playerid] [Preis] [Grund]");
							return 1;
						}
						format(string, sizeof(string), "* Du hast %s ein Ticket in Höhe von $%d ausgestellt, Grund: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Officer %s hat dir ein Ticket in Höhe von $%d ausgestellt, Grund: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Um das Ticket zu bezahlen gib '/accept ticket' ein.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/arrest", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
				if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im Dienst!");
				    return 1;
				}
		        if(IsPlayerInRangeOfPoint(playerid,6.0, 218.8988,114.1459,999.0156) || IsPlayerInRangeOfPoint(playerid,6.0,1530.1338,-1676.9119,5.4657))
				{// Jail spot
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /arrest [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kationspreis]");
						SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Das Bußgeld muss zwischen 1 und 10.000$ betragen!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /arrest [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kationspreis]");
						SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
						return 1;
					}
					new time = strval(tmp);
					if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "   Die Minuten der Haftzeit dürfen nicht unter 1 oder über 60 liegen !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /arrest [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kationspreis]");
						SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
						return 1;
					}
					new bail = strval(tmp);
					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "   Die Möglichkeit einer Kaution kann entweder mit 0 abgelehnt-, oder mit 1 erlaubt werden !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /arrest [preis] [zeit (minuten)] [kaution (0=nein 1=ja)] [kationspreis]");
						SendClientMessage(playerid, COLOR_GRAD2, "Tipp: Beim Normalfall 2.000$ + 3 Minuten pro Wanted und beim Stellen 1.000$ + 2 Minuten pro Wanted");
						return 1;
					}
					new bailprice = strval(tmp);
					if(bailprice < 0 || bailprice > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Der Kautionspreis darf nicht unter 1$ oder über $10.000$ liegen !"); return 1; }
					new suspect = GetClosestPlayer(playerid);
					if(IsACop(suspect))
					{
						SendClientMessage(playerid, COLOR_GRAD2, " Du kannst keinen Beamten einsperren!");
						return 1;
					}
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht gesucht!");
							    return 1;
							}
							GivePlayerMoney(playerid, moneys/2);
							FraktionsKasse[0] += moneys/2;
							format(string, sizeof(string), "* Du hast %s eingesperrt für $%d!", giveplayer,moneys);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Eingesperrt von %s ~n~    fuer $%d", sendername, moneys);
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
								format(string, sizeof(string), "INFO: Officer %s hat den gesuchten %s eingesperrt", sendername, giveplayer);
								OOCNews(COLOR_YELLOW, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "INFO: Agent %s hat den Verdächtigen %s eingesperrt", sendername, giveplayer);
								OOCNews(COLOR_YELLOW, string);
							}
							else if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
							{
								format(string, sizeof(string), "INFO: Soldat %s hat den Verdächtigen %s eingesperrt", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							else if(PlayerInfo[playerid][pMember]==22||PlayerInfo[playerid][pLeader]==22)
							{
							    format(string, sizeof(string), "INFO: SWAT Agent %s hat den gesuchten %s eingesperrt", sendername, giveplayer);
							    OOCNews(COLOR_YELLOW, string);
							}
							if(LSPDZellen == 0)//zelle1
							{
							    SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,215.0419,110.2922,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 1)//zelle2
							{
							    SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,227.8457,110.7000,999.0156);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 2)//zelle3
							{
							    SetPlayerInterior(suspect, 3);
								SetPlayerPos(suspect,223.2922,110.6890,999.0156);
								LSPDZellen = 0;
							}
							/*if(LSPDZellen == 0)//zelle4
							{
								SetPlayerPos(suspect,197.8290,161.8141,1003.0300);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 0)//zelle5
							{
								SetPlayerPos(suspect,197.8290,161.8141,1003.0300);
								LSPDZellen += 1;
							}
							if(LSPDZellen == 0)//zelle6
							{
								SetPlayerPos(suspect,197.8290,161.8141,1003.0300);
								LSPDZellen += 1;
							}*/
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Du bist für %d Sekunden eingesperrt.   Kaution: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Du bist für %d Sekunden eingesperrt.   Kaution: nicht möglich", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							}
							PlayerInfo[suspect][pJailed] = 1;
					        PlayerInfo[suspect][pArrested] += 1;
					        SetPlayerInterior(suspect, 6);
							SetPlayerFree(suspect,playerid, "Verhaftet");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							SetPlayerWantedLevel(suspect,0);
						}//distance
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Niemand zum Verhaften in deiner Nähe.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Beamter !");
			    return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/contract", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /contract [playerid] [Betrag]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /contract [playerid] [Betrag]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 10000 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "   Die Vertragssumme muß mindestens $10000-, aber nicht mehr als $100000 betragen!"); return 1; }
			if(PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du mußt mindestens Level 2 haben um einen Vertrag zu erstellen.");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 8 && PlayerInfo[playerid][pLeader] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Verträge mit deiner eigenen Agentur abschließen!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pLeader] == 8 && PlayerInfo[playerid][pMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Verträge mit deiner eigenen Agentur abschließen!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pMember] == 8||PlayerInfo[giveplayerid][pLeader] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du kannst diesen Spieler nicht unter /contract nehmen da er Verbugt ist !");
				        return 1;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber unter Vertrag nehmen!"); return 1; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = GetPlayerMoney(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						GivePlayerMoney(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s möchte das ein Hitman die Zielperson: %s für $%d tötet.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Du hast einem Hitman den Auftrag zur Beseitigung von %s für $%d erteilt.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Falsche Angaben!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein Aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

//================= Function ENDE ==================//
	return 1;
}

//------------------------------------------------------------------------------------------------------
Function HouseLevel(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new h = PlayerInfo[playerid][pPhousekey];
		if(h == 255) { return 0; }
		if(h <= 4) { return 1; }
		if(h >= 5 && h <= 9)  { return 2; }
		if(h >= 10 && h <= 18) { return 3; }
		if(h >= 19 && h <= 22) { return 4; }
		if(h >= 23 && h <= 25) { return 5; }
		if(h == 26) { return 6; }
		if(h == 27) { return 7; }
		if(h >= 28 && h <= 31) { return 7; }
	}
	return 0;
}

Function CHouseLevel(houseid)
{
	if(houseid <= 4) { return 3; }
	if(houseid >= 29 && houseid <= 30) { return 4; }
	if(houseid >= 5 && houseid <= 9) { return 5; }
	if(houseid >= 10 && houseid <= 18 || houseid == 28) { return 7; }
	if(houseid >= 19 && houseid <= 22) { return 8; }
	if(houseid >= 23 && houseid <= 25) { return 9; }
	if(houseid == 26) { return 10; }
	if(houseid == 27) { return 11; }
	if(houseid >= 28 && houseid <= 31) { return 12; }
	return 0;
}

Function ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

Function CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

Function ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

Function CarCheck()
{
	new string[256];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
			SetPlayerHealth(j, health - 1.0);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Du verlierst 4 HP wegen AIDS.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Du verlierst 8 HP wegen AIDS.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Du verlierst 12 HP wegen AIDS.");
			}

			if(GetPlayerMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "Du hast Schulden! Treibe $%d auf oder du kommst ins Gefängnis.", GetPlayerMoney(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	for(new c = 1; c < 254; c++)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (PlayerInfo[i][pJob] == 5)
				{
					SetVehicleParamsForPlayer(c, i, 0, 0);
				}
			}
		}
		if (gLastDriver[c] == 301)
		{
			CarRespawn(c);
		}
		if (gLastDriver[c] >= 300)
		{
			gLastDriver[c]++;
		}
		//foundowner = -1;
	}
	return 1;
}

Function IdleKick()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
			if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5] && M_Bot[i][PAFK] == 0)
			{
				//new string[128];
				//format(string,sizeof(string),"*~ [AFK] %s wurde automatisch in den AFK-Modus gebracht! /afklist ",GetName(i));
				//SendClientMessageToAll(0xAFAFAFAA,string);
				M_Bot[i][PAFK] = 1;
				FreezePlayer(i);
			}
			PlayerPos[i][3] = PlayerPos[i][0];
			PlayerPos[i][4] = PlayerPos[i][1];
			PlayerPos[i][5] = PlayerPos[i][2];
		}
	}
}

Function CustomPickups()
{
	//new rand;
	//NameTimer();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    //======================
			if(IsPlayerInRangeOfPoint(i,5.0,2149.2600,-1802.2012,16.1548))
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                GivePlayerWeapon(i, 24, 200); GivePlayerWeapon(i, 29, 800); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 4, 1);
			                GivePlayerMoney(i, - 5000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 2:
			            {
			                GivePlayerWeapon(i, 24, 300); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 31, 800); GivePlayerWeapon(i, 4, 1);
			                GivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 3:
			            {
			                GivePlayerWeapon(i, 24, 300); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 30, 800); GivePlayerWeapon(i, 4, 1);
			                GivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 4:
			            {
			                GivePlayerWeapon(i, 24, 300); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 31, 800); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 34, 20);
			                GivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 5:
			            {
			                GivePlayerWeapon(i, 24, 500); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 30, 800); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 34, 20);
			                GivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 6:
			            {
			                GivePlayerWeapon(i, 24, 500); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 31, 800); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 34, 20);
							GivePlayerMoney(i, - 8500);
							SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			            case 7:
			            {
			                GivePlayerWeapon(i, 24, 500); GivePlayerWeapon(i, 29, 1000); GivePlayerWeapon(i, 25, 100); GivePlayerWeapon(i, 30, 800); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 34, 20);
			                GivePlayerMoney(i, - 8500);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast dein bestelltes Paket aufgenommen.");
			            }
			        }
			        OrderReady[i] = 0;
			    }
			}//Hitman delivery stuff
		}
	}
	return 1;
}

Function Production()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5)
			{
				if(FishCount[i] >= 3)
				{
					PlayerInfo[i][pFishes] = 0;
				}
				else
				{
				FishCount[i] += 1;
                }
			}
		    if(PlayerDrunk[i] > 0)
			{
				PlayerDrunk[i] = 0;
				PlayerDrunkTime[i] = 0;
				SetPlayerWeather(i,12);
				SetPlayerDrunkLevel (i, 0);
				GameTextForPlayer(i, "~p~Nicht mehr~n~~w~Betrunken", 3500, 1);
			}
		}
	}
}

Function OnPlayerText(playerid, text[])
{
	//new giver[MAX_PLAYER_NAME];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	//SetPlayerChatBubble(playerid, text, 0xFF0000FF, 20.0, 10000);
	/*TextSpams[playerid]++;
	if(TextSpams[playerid] >= 5 && PlayerInfo[playerid][pAdmin] == 0)
	{
		format(string, sizeof(string), " %s wurde von %s gekickt! (GRUND: Spam)",sendername,M_Bot_BOT_NAME);
		SendClientMessageToAll(M_BOT_COLOR, string);
		Kick(playerid);
		return 0;
	}*/

//SUPPORT


    //////////////////////////////////////////////////////////////////
	//////////////////// AUS M-BOT ///////////////////////////////////

	new lastidx = (strlen(text) - 1);
	if(text[lastidx] == '.')
	    text[lastidx] = ' ';

	new countit = 0;
	for(new x=0; x<strlen(text); x++)
	{
		if(text[x] == '.' && text[x+1] <= '9' && text[x+1] >= '0') // Es wurde ein Punkt und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
		else if(text[x] == '.' && text[x+2] <= '9' && text[x+2] >= '0') // Es wurde ein Punkt, Leerzeichen und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
	}
	if(countit >= 2 && PlayerInfo[playerid][pAdmin] <1) // Dreimal und eine IP wird erkannt
	if(strfind(text,"84.201.4.110:9876",true) != 0) // NICHT die TS-IP
	if(strfind(text,"84.201.4.110:9876",true) != 0)
	{
		new textstring[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,sizeof(name));
		format(textstring,sizeof(textstring)," [ANTI-IP] %s wird verdächtigt eine IP zu verschicken!",name);
		SendClientMessageToAdmins(M_BOT_COLOR,textstring);
		format(textstring,sizeof(textstring)," [ANTI-IP] %s: %s",name,text);
		SendClientMessageToAdmins(M_BOT_COLOR,textstring);
		SendClientMessage(playerid,M_BOT_COLOR," [ANTI-IP] Wir dulden kein Abwerben bzw. Serverwerbungen!");
		SendClientMessage(playerid,M_BOT_COLOR," [ANTI-IP] Achtung: Gebe es nicht noch einmal ein!");
		M_Bot[playerid][PIPWarns]++;
		if(M_Bot[playerid][PIPWarns] >= 3)
		{
		    format(textstring,sizeof(textstring)," [ANTI-IP] %s wurde von %s gebannt! (GRUND: Verdacht auf Abwerben)",name,M_Bot_BOT_NAME);
		    SendClientMessageToAll(M_BOT_COLOR,textstring);
		    BanEx(playerid,"Abwerben");
		}
		return 0;
	}
	for(new w=0; w<sizeof(BadWords); w++)
	{
		if(!strfind(text,BadWords[w],true))
		{
		    M_Bot[playerid][PBadWordWarns]++;
		    if(M_Bot[playerid][PBadWordWarns] >= 3)
			{
				new textstring[128], name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
			    format(textstring,sizeof(textstring)," %s wurde von %s gekickt! (GRUND: 3 BadWord-Warnungen)",name,M_Bot_BOT_NAME);
			    SendClientMessageToAll(M_BOT_COLOR,textstring);
				M_Log(textstring);
			    M_Kick(playerid);
			}
			else
			{
				new textstring[128], name[MAX_PLAYER_NAME];
				GetPlayerName(playerid,name,sizeof(name));
			    format(textstring,sizeof(textstring)," Du hast nun %d/3 Warnungen, bei 3 wirst du gekickt!",M_Bot[playerid][PBadWordWarns]);
		    	SendClientMessage(playerid,M_BOT_COLOR,textstring);
				format(textstring,sizeof(textstring)," %s hat %d/3 BadWord-Warnungen",name,M_Bot[playerid][PBadWordWarns]);
		    	GameTextForPlayer(playerid,"~r~Keine Beleidigungen!",4000,3);
			}
			return 0;
		}
	}
	//////////////////// AUS M-BOT ///////////////////////////////////
    //////////////////////////////////////////////////////////////////
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du kannst nichts schreiben, da dich ein Admin gemutet hat!");
		return 0;
	}
	if(PlayerInfo[playerid][pTot] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du kannst nicht Reden da du im Krankenhaus liegst!");
		return 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du hast ein Mundtape!");
	    return 0;
	}
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("weiter", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("weiter")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: // LSPD
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[0][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[0][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[1][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[1][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[2][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[2][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[3][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[3][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[4][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[4][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[5][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[5][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[6][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[6][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[7][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = JoinPed[7][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, JoinPed[8][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = JoinPed[8][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, JoinPed[9][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[9][0]; }
				}
				case 2: // SFPD
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[86][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[86][0]; }
					else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[87][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[87][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[88][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[88][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[89][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[89][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[90][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[90][0]; }
       			}
				case 3: // Bundeswehr
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[14][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[14][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[15][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[15][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[16][0]; }
				}
				case 4: // Medic
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[16][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[17][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[17][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[18][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[18][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[19][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[19][0]; }
				}
				case 5: //La Cosa Nostra
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[20][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[20][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[21][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[21][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[22][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[22][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[23][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[23][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[24][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[24][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[25][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[25][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[26][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[26][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[27][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[27][0]; }
				}
				case 6: //Yakuza
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[28][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[28][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[29][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[29][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[30][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[30][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[31][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[31][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[32][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[32][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[33][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[33][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[34][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[34][0]; }
				}
 				case 7: //San Andreas Präsident
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[35][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[35][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[36][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[36][0]; }
    			}
				case 8: //Hitman Agency
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[37][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[37][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[38][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[38][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[39][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[39][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[40][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[40][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[41][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[41][0]; }
				}
				case 9: //News Reporters
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[42][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[42][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[43][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[43][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[44][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[44][0]; }
				}
				case 10: //Taxi Cab Company
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[45][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[45][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[46][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[46][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[47][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[47][0]; }
				}
				case 11: //Driving/Flying School
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[48][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[48][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[49][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[49][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[50][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[50][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[51][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[51][0]; }
				}
				case 12: //Fuegos
				{
    				if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[105][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[105][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[106][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[106][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[107][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[107][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[108][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[108][0]; }
				    else if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[109][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[109][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[111][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[111][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[112][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[112][0]; }

				}
    			case 13: //Grove
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[58][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[58][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[59][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[59][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[60][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[60][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[61][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[61][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[62][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[62][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[63][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[63][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[64][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[64][0]; }
    			}
    			case 14: //Ballas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[65][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[65][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[66][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[66][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[67][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[67][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[68][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[68][0]; }
				}
    			case 15: //Ls Biker Club
				{
				    if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[52][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[52][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[53][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[53][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[54][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[54][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[55][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[55][0]; }
	    			else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[56][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[56][0]; }
	    			else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[57][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[57][0]; }

				}
    			case 16: //Los Santos Vagos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[74][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[74][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[75][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[75][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[76][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[76][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[77][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[77][0]; }
				}
    			case 17: //Varios Los Aztecas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[78][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[78][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[79][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[79][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[80][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[80][0]; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[81][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[81][0]; }
    			}
    			case 18: //Los Santos Rifa
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[82][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[82][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[83][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[83][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[84][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[84][0]; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[85][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[85][0]; }
    			}
    			case 19: //West Coast Customs
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[86][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[86][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[87][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[87][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[88][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[88][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[89][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[89][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[90][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[90][0]; }
    			}
    			case 21: //Wheelmen
    			{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[86][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[91][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[92][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[92][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[93][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[93][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[94][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[94][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[95][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[95][0]; }
				}
    			case 23: // Grundwehrdient
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[99][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[99][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[100][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[100][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[101][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[101][0]; }
				}
    			case 24: // Ordnungsamt
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[102][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[102][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[103][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[103][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[104][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[104][0]; }
				}
			}
		    return 0;
		}
		else if ((strcmp("fertig", tmp, true, strlen(tmp)) == 0))
		{
		    if(ChangePos2[playerid][1] == 1)
		    {
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        return 0;
		    }
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
		    SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			SpawnPlayer(playerid);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    UnFreezePlayer(playerid);
			return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze 'fertig'.");
		    return 0;
		}
	}
	if(RegistrationStep[playerid] > 0)
	{
		if(RegistrationStep[playerid] == 2)
	    {
	        new year, month,day;
			getdate(year, month, day);
	        new DateInfo[3][20];
			split(text, DateInfo, '.');
			if (strlen(text) > 10) { // nicht länger als 10 zeichen (xx/xx/xxxx)
				SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
				return 0;
			}
			if (!IsValidDate(strval(DateInfo[0]),strval(DateInfo[1]),strval(DateInfo[2]))) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
				return 0;
			}
			if(year - strval(DateInfo[2]) > 100 || strval(DateInfo[2]) < 1 || strval(DateInfo[2]) >= year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
			    return 0;
			}
			new check = year - strval(DateInfo[2]);
			if(check == year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
			    return 0;
			}
			if(strval(DateInfo[1]) > month)
			{
			    check -= 1;
			}
			else if(strval(DateInfo[1]) == month && strval(DateInfo[0]) > day)
			{
			    check -= 1;
			}
			PlayerInfo[playerid][pAge] = check;
			format(string, sizeof(string), "Ok, du bist also %d Jahre alt.",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			RegistrationStep[playerid] = 3;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Woher kommst du? (Wähle das richtige aus mithilfe der Leertaste oder STRG aus!)");
	    }
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Priest: %s do you take %s as your lovely Wife? (type 'yes', anything else will reject the Marriage).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Standesamt: %s und %s  von nun an seid ihr...Ehemann & Ehefrau, du kannst die Braut jetzt Küssen.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s und %s von nun an seid ihr...Ehemann & Ehefrau, du kannst den Bräutigam jetzt Küssen.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Standesamt: Wir haben ein neues Paar, %s & %s haben geheiratet.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Priester: %s und %s ich mache euch zu Mann und Mann, du darfst die Braut jetzt küssen.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Standesamt: %s und %s ich mache euch zu Mann und Mann, du darfst den Bräutigam jetzt küssen.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Standesamt: Wir haben ein neues schwulen Paar, %s & %s haben geheiratet.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Priester: %s und %s ich mache euch zu Frau und Frau, du darfst die Braut jetzt küssen.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priester: %s und %s ich mache euch zu Frau und Frau, du darfst den Bräutigam jetzt küssen.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Standesamt: Wir haben ein neues Lesben Paar, %s & %s haben geheiratet.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					GivePlayerMoney(playerid, - 100000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Du wolltest %s nicht heiratem, du hast nicht 'yes' gesagt.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s wollte dich nicht heiraten, er/sie hat nicht 'yes' gesagt.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Du wolltest %s nicht heiraten, du hast nicht 'yes' gesagt.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s wollte dich nicht heiraten, er/sie hat nicht 'yes' gesagt.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Schreibe nun den Titel des Zeitungsartikels."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Schreibe nun eine Textzeile des Zeitungsartikels."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Now you can write down the News Lines, 7 remaining.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* Du hast Zeile %d des Zeitungsartikels geschrieben.", line);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Dein Zeitungsartikel kann nun von Zeitungsjungen verteilt werden.");
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Aufträge", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Aufträge")))
		{
		    SearchingHit(playerid);
			return 0;
		}
		else if ((strcmp("Neues", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Neues")))
		{
		    	new x_nr[256];
				x_nr = strtok(text, idx);

				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Hitman Agency News __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: 'Neues [Nummer] [Text]' oder 'Neues Löschen [Nummer]' oder 'Neues Löschen alle'");
					format(string, sizeof(string), "1: %s :: Hitman: %s", News[hAdd1], News[hContact1]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "2: %s :: Hitman: %s", News[hAdd2], News[hContact2]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "3: %s :: Hitman: %s", News[hAdd3], News[hContact3]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "4: %s :: Hitman: %s", News[hAdd4], News[hContact4]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "5: %s :: Hitman: %s", News[hAdd5], News[hContact5]);
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
					return 0;
				}//lets start
				/*if(strcmp(x_nr,"1",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Es wurde bereits eine Nachricht platziert! Sie muss zuerst gelöscht werden!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Du musst Rank 3 sein um Nachrichten an den News Channel zu schreiben!"); return 0; }
				    if(News[hTaken1] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text zu kurz !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact1], string, 0, strlen(string), 255);
						News[hTaken1] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine Nachricht in den News Channel der Hitman Agentur platziert.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 1 ist bereits vergeben!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Es wurde bereits eine Nachricht platziert! Sie muss zuerst gelöscht werden!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Du musst Rank 3 sein um Nachrichten an den News Channel zu schreiben!"); return 0; }
				    if(News[hTaken2] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text zu kurz!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact2], string, 0, strlen(string), 255);
						News[hTaken2] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine Nachricht in den News Channel der Hitman Agentur platziert.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 2 ist bereits vergeben!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Es wurde bereits eine Nachricht platziert! Sie muss zuerst gelöscht werden!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Du musst Rank 3 sein um Nachrichten an den News Channel zu schreiben!"); return 0; }
				    if(News[hTaken3] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text zu kurz !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact3], string, 0, strlen(string), 255);
						News[hTaken3] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine Nachricht in den News Channel der Hitman Agentur platziert.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 3 ist bereits vergeben !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"4",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Es wurde bereits eine Nachricht platziert! Sie muss zuerst gelöscht werden!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Du musst Rank 3 sein um Nachrichten an den News Channel zu schreiben!"); return 0; }
				    if(News[hTaken4] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text zu kurz !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact4], string, 0, strlen(string), 255);
						News[hTaken4] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine Nachricht in den News Channel der Hitman Agentur platziert.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 4 ist bereits vergeben !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"5",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "Es wurde bereits eine Nachricht platziert! Sie muss zuerst gelöscht werden!"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "Du musst Rank 3 sein um Nachrichten an den News Channel zu schreiben!"); return 0; }
				    if(News[hTaken5] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text zu kurz !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact5], string, 0, strlen(string), 255);
						News[hTaken5] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine Nachricht in den News Channel der Hitman Agentur platziert.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 5 ist bereits vergeben !");
				        return 0;
				    }
				}*/
				else if(strcmp(x_nr,"löschen",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] < 4)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du musst Rank 4 sein um Nachrichten vom News Channel zu löschen!");
				        return 0;
				    }
				    new string1[MAX_PLAYER_NAME];
				    new x_tel[256];
					x_tel = strtok(text, idx);
					if(!strlen(x_tel)) {
					    SendClientMessage(playerid, COLOR_WHITE, "Verwendung: News delete [nummer] oder News delete all.");
					    return 0;
					}
                    if(strcmp(x_tel,"1",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine News (1) vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else if(strcmp(x_tel,"2",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine News (2) vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else if(strcmp(x_tel,"3",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine News (3) vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else if(strcmp(x_tel,"4",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine News (4) vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else if(strcmp(x_tel,"5",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast eine News (5) vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else if(strcmp(x_tel,"alle",true) == 0)
                    {
                        format(string, sizeof(string), "Nichts"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						format(string, sizeof(string), "Nichts"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						format(string, sizeof(string), "Nichts"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						format(string, sizeof(string), "Nichts"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						format(string, sizeof(string), "Nichts"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Keiner");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast alle News vom News Channel der Hitman Agentur gelöscht.");
						return 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: News delete [number] or News delete all.");
					    return 0;
                    }
				}
				else { return 0; }
		}
		/*else if ((strcmp("Auftraggeben", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Auftraggeben")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rank 4 um Verträge mit Hitmans zu schließen!");
		        return 0;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Es wurde nichts gefunden!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Verwendung: Givehit [spielerid/teildesnamens]");
				return 0;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pLeader] != 8 && PlayerInfo[giveplayerid][pMember] != 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist kein Hitman!");
						return 0;
				    }
				    if(GoChase[giveplayerid] < 999)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Dieser Hitman ist bereits beschäftigt!");
						return 0;
				    }
				    if(IsPlayerConnected(hitid))
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giver, sizeof(giver));
				        GetPlayerName(hitid, giveplayer, sizeof(giveplayer));
				        //format(string, sizeof(string), "* You assigned%s to kill: %s(ID:%d), for $%d.", giver, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    			//SendClientMessage(playerid, COLOR_YELLOW, string);
				        //format(string, sizeof(string), "* Hitman %s has assigned you to kill: %s(ID:%d), for $%d.", sendername, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    			//SendClientMessage(giveplayerid, COLOR_YELLOW, string);
		    			format(string, sizeof(string), "* Hitman %s, stimme Hitman %s zu, %s(ID:%d) für %d$ zu killen.", sendername, giver, giveplayer, hitid, PlayerInfo[hitid][pHeadValue]);
		    			SendFamilyMessage(8, COLOR_YELLOW, string);
		    			GoChase[giveplayerid] = hitid;
		    			GetChased[hitid] = giveplayerid;
		    			GotHit[hitid] = 1;
		    			hitid = 0;
		    			hitfound = 0;
				        return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist offline!");
				        return 0;
				    }
				}
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Hitman ist nicht online!");
			    return 0;
			}
		}*/
		else if ((strcmp("Ränge", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Ränge")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Agentur Ranks __________________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 8||PlayerInfo[i][pLeader] == 8)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* %s: Rank %d", giveplayer,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
		}
		else if ((strcmp("Bestellen", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Bestellen")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits ein Packet angefordert , sammel  es erst am Hauptquatier auf!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(PlayerInfo[playerid][pRank] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 4999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 1 angefordert ($5000), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern !"); return 0; }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 2 angefordert ($6000), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten!");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 3 angefordert ($6000),  es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have Ordered Package 4 ($8000), it will be delivered at your Head Quarter's Front Door.");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if(GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 4 angefordert ($8000),  es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 5 angefordert ($8000),  es wird an deinem Hauptquatier abgeliefert..");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten!");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Dein Rang ist nicht hoch genug. Du kannst das Packet nicht anfordern!"); return 0; }
			    if(GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast Packet 6 angefordert ($8500), es wird an deinem Hauptquatier abgeliefert.");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Du kannst dir dieses Paket nicht leisten !");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________ Packete Hitman __________________|");
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) ($5000 ) Rank 1 - 5: Knife, Desert Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) ($8000) Rank 3 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) ($8000) Rank 3 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) ($8500) Rank 4 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) ($8500) Rank 4 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
			    return 0;
			}
		}
		else if ((strcmp("Ausloggen", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Ausloggen")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den Laptop ausgeschalten.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
		    SendClientMessage(playerid, COLOR_YELLOW2, "|");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Neues");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Aufträge");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Auftraggeben");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Bestellen");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ränge");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ausloggen");
			SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
		    return 0;
		}
	    return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s ist im Knast und benötigt einen Anwalt. Begib dich zum Police Department.", sendername);
	    	SendJobMessage(2, COLOR_YELLOW, string);
	    	SendJobMessage(2, COLOR_YELLOW, "* Frage einen Polizisten, ob er dir erlaubt jemanden zu befreien. (/accept Anwalt [deine id])");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Alle aktiven Anwälte wurden informiert.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, " Es sind keine Anwälte online.");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
  		format(string, sizeof(string), "LivePlayer %s: %s", sendername, text);
		OOCNews(COLOR_LIGHTGREEN, string);
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s sagt (Handy): %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Ich habe die aktiven Einsatzkräfte alarmiert.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
			format(wanted, sizeof(wanted), "Zentrale: Es gibt einen neuen Fall. Reporter: %s",turner);
			SendTeamBeepMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Gesuchter: %s",text);
			SendTeamMessage(1, TEAM_CYAN_COLOR, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			if ((strcmp("Niemand", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Niemand")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Ich habe die aktiven Einsatzkräfte alarmiert.");
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
				format(wanted, sizeof(wanted), "Zentrale: Es gibt einen neuen Fall. Reporter: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "Verbrechen: %s   Gesuchter: Unbekannt",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (IsACop(badguy) || gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Dies ist keine Scherzhotline!!");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Die Einsatzkräfte sind schon zu dieser Person alarmiert worden!");
						SendClientMessage(playerid, COLOR_DBLUE, "Vielen Dank, dass sie den Fall gemeldet haben.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Dies ist keine Scherzhotline!!");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Ich habe die aktiven Einsatzkräfte alarmiert.");
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
					SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Polizeimeldestelle: Uns ist niemand mit dem Namen %s bekannt. Ist dies der richtige Name?",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Kennen sie den Namen des Gesuchten? Nennen sie ihn oder schreiben sie 'Niemand'.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Benötigen sie die Polizei oder einen Arzt?");
				return 0;
			}
			else if ((strcmp("Polizei", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Polizei")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Ich leite sie zur Polizeimeldestelle um. Bitte warten...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Bitte beschreiben sie das Verbrechen kurz!");
				return 0;
			}
			else if ((strcmp("Arzt", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Arzt")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Ich leite sie zur Notrufzentrale um. Bitte warten...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Bitte beschreiben sie den Vorfall kurz!");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Benötigen sie die Polizei oder einen Arzt?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW," Es ist niemand am anderem Ende der Leitung...");
		}
		return 0;
	}
    if(ReportCall[playerid] != 999)
    {
        new idx;
        tmp = strtok(text, idx);
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[REPORT-SYSTEM] %s: %s", sendername, text);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
        if(ReportCall[ReportCall[playerid]] == playerid)
		{
        	SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN,string);
  		}
  		return 0;
	}
/*    if(ReportCall[playerid] != 999)
    {
        new idx;
        tmp = strtok(text, idx);
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[REPORT-SYSTEM] %s: %s", sendername, text);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
        if(ReportCall[ReportCall[playerid]] == playerid)
		{
        	SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN,string);
  		}
  		return 0;
	}*/
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
      	if(PlayerInfo[playerid][pTot] == 1)
		{
			return 0;
		}
		if(PlayerInfo[playerid][pMauled] == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Dir wurde dein Mund zugeklebt, du kannst nichst sagen!");
		    return 0;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s sagt: %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 0;
	}
	return 1;
}

Function SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}

Function FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

Function AddsOn()
{
	adds=1;
	return 1;
}

stock IsValidDate(day, month, year)
{
	new maxDays;
	if (year < 1900 || year > 2010) return 0; // Bad Year
	switch (month)
	{
		case 1,3,5,7,8,10,12: maxDays = 31;
		case 4,6,9,11: maxDays = 30;
		case 2:
		{
			if(IsLeapYear(year))
		 	{
			 	maxDays = 29;
			}
			else
			{
				maxDays = 28;
			}
		}
		default: return 0; // Bad Month
	}

	if (day < 1 || day > maxDays) return 0; // Bad Day
	return 1;
}

stock IsLeapYear(year)
{
	/*if (year % 4 == 0 &&
		(year % 100 != 0 ||
		 year % 400 == 0)) {
		return 1;
	} else {
		return 0;
	}*/
	return ( year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) );
}



Function CountDown4()
{
	GameTextForAll("4",1000,3);
	SetTimer("CountDown3",1000,0);
	return 1;
}

Function CountDown3()
{
	GameTextForAll("3",1000,3);
	SetTimer("CountDown2",1000,0);
	return 1;
}

Function CountDown2()
{
	GameTextForAll("2",1000,3);
	SetTimer("CountDown1",1000,0);
	return 1;
}

Function CountDown1()
{
	GameTextForAll("1",1000,3);
	SetTimer("CountDownLos",1000,0);
	return 1;
}

Function CountDownLos()
{
	GameTextForAll("~g~] ! LOS LOS LOS ! ]",1000,3);
	return 1;
}

stock DisplayForPlayer(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	if(JobDuty[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	if(JobDuty[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pJob] == 17)
	if(Mullabfuhr[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pJob] == 14)
	if(TransportDuty[playerid] > 0)
	{
	    return 0;
	}
	return 1;
}

stock IsAnAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
		return 1;
	return 0;
}

stock IsPlayerInFrac(playerid,fracid)
{
	if (PlayerInfo[playerid][pMember] == fracid || PlayerInfo[playerid][pLeader] == fracid)
		return 1;
	return 0;
}

stock CountPlayersInFrac(fracid)
{
	new count = 0;
	for(new i=0; i<GetMaxPlayers(); i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInFrac(i,fracid))
	    {
			count++;
		}
	}
	return count;
}

stock CountDutyFiremen()
{
    new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerInFrac(i,22) && JobDuty[i] == 1 && FWDuty[i] == 1)
		{
			count++;
		}
	}
	return count;
}

Function PlaySoundForPlayer(playerid,soundid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	PlayerPlaySound(playerid,soundid,X,Y,Z);
}
Function CloseMVTor()
{
	MoveObject(MVTor,1589.148315, -1638.497070, 15.292543,3);
	for(new i=0; i<GetMaxPlayers(); i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,10.0,1584.747680,-1638.100952,12.492498))
	    {
			PlaySoundForPlayer(i,1035);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",i,1036);
		}
	}
	return 1;
}

Function CloseBallasTor()
{
	MoveObject(ballastor,1141.0999755859, -1206.5, 20.5, 19.5,3);
	return 1;
}

Function Closeziviltor()
{
	MoveObject(ziviltor,2095.3999023438, -1445.6999511719, 23.700000762939,3);
	return 1;
}

Function Closeziviltor2()
{
	MoveObject(ziviltor2,2002.0999755859, -1358.5999755859, 23.5,3);
	return 1;
}
/*Function Closezivitor()
{
	MoveObject(zivitor,1811.5, -1889.5999755859, 13.199999809265,3);
	return 1;
}*/

Function Closewheeltor()
{
	MoveObject(wheeltor,1812.9000244141, -2071.8999023438, 15.300000190735,3);
	return 1;
}

Function Closeextrontor()
{
	MoveObject(extrontor,1245.6999511719, -767.20001220703, 93.800003051758,3);
	return 1;
}

Function Closesurealtor()
{
	MoveObject(surealtor,324.39999389648, -1185.5999755859, 75.5,3);
	return 1;
}

Function Closeschokotor()
{
	MoveObject(schokotor,1496.5, -699.90002441406, 96.400001525879,3);
	return 1;
}

Function CloseMedictor()
{
	MoveObject(Medictor,1997.1999511719, -1445, 15.300000190735,3);
	MoveObject(Medictor2,2002.9000244141, -1450.6999511719, 15.300000190735,3);
	return 1;
}

Function CloseRifasTor()
{
	MoveObject(rifastor,2234.3999023438, -2215.6000976563, 15.300000190735,3);
	return 1;
}
forward GangjailEinbruch(playerid);
public GangjailEinbruch(playerid)
{
		new rand = random(1);
		if(rand == 0)
        {
                MoveObject(gangtor,204.89999389648, -235.69999694824, -1.2999999523163,3.0);
                SendClientMessage(playerid,COLOR_GREEN,"Du hast es geschafft! Jetzt aber schnell Das Tor schließt in 50sek!");
        }
        else
        {
                SendClientMessage(playerid,COLOR_RED,"Schade. Es hat nicht geklappt.");
        }
        return 1;
}
forward GetDtCarOwnerSlot(playerid,veh);
public GetDtCarOwnerSlot(playerid,veh)
{
    for(new X = 0; X < MaxVeh; X++)
    {
        if(PlayerCar[playerid][X][CarId] == veh)
		{
			return X;
		}
    }
    return 555;
}
forward GetDtCarOwner(veh);
public GetDtCarOwner(veh)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        for(new X = 0; X < MaxVeh; X++)
        {
            if(PlayerCar[i][X][CarId] == veh){return i;}
        }
    }
    return 1;
}
Function CloseGangjailEinbruch()
{
    MoveObject(gangtor,204.89999389648, -235.69999694824, 2.4000000953674,3);
	return 1;
}

Function CloseGangJailTor()
{
	MoveObject(gangtor,204.89999389648, -235.69999694824, 2.4000000953674,3);
	return 1;
}

Function CloseGangJailTuer()
{
	MoveObject(gangtuer,193, -227.80000305176, 0.80000001192093,3);
	return 1;
}

/*Function CloseBundeswehr1()
{
	MoveObject(Bundeswehrtor1,2473.3999023438, -2270.3999023438, 26.799999237061,3);//wo das Objekt hinsoll.. beim schließen !
	return 1;
}

Function CloseBundeswehr2()
{
	MoveObject(Bundeswehrtor2,2366.6999511719, -2382.6000976563, 15.199999809265,3);
	return 1;
}

Function CloseBundeswehr3()
{
	MoveObject(Bundeswehrtor3,2301.5, -2663.3999023438, 15.300000190735,3);
	return 1;
}*/

Function CloseVagosTor()
{
	MoveObject(vagostor,2800.6000976563, -1585.5, 12.699999809265,3);
	return 1;
}
Function CloseMVTor2()
{
	MoveObject(MVTor2,1588.5999755859, -1638, 15.10000038147, 3.0);
	return 1;
}
Function Zu()
{
	MoveObject(tuer1,1387.9091796875,-971.20501708984,5652.53515625, 100.0);
	MoveObject(tuer2,1387.9912109375,-991.5615234375,5652.17578125, 100.0);
	return 1;
}
Function Auf()
{
	MoveObject(tuer1,1387.9091796875,-971.20501708984,5000.5351562, 100.0);
	MoveObject(tuer2,1387.9912109375,-991.5615234375,5000.17578125, 100.0);
	return 1;
}
Function CloseMVTor4()
{
	MoveObject(MVTor4,309.39999389648, -1554.8000488281, 32.200000762939, 3.0);
	return 1;
}
Function CloseMVTor5()
{
	MoveObject(MVTor5,363.29998779297, -1469.3000488281, 31.799999237061,3.0);
	return 1;
}
Function CloseMVTor3()
{
	MoveObject(MVTor3,1539.8000488281, -1627.6999511719, 15.199999809265, 3.0);
	return 1;
}

stock AtATM(playerid)
{
 	for(new atm=0; atm<sizeof(ATMs); atm++)
 	{
 	    if(IsPlayerInRangeOfPoint(playerid,2.5,ATMs[atm][0],ATMs[atm][1],ATMs[atm][2]))
 	    {
 	        return 1;
		}
	}
	return 0;
}

Function DisMarker(playerid)
{
	DisablePlayerCheckpoint(playerid);
}


Function IsAbf(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==3)
		{
		    return 1;
		}
		else if(leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

Function SetPlayerPosEx(playerid,Float:Xpos,Float:Ypos,Float:Zpos,Float:Angle)
{
    SetPlayerPos(playerid,Xpos,Ypos,Zpos);
    SetPlayerFacingAngle(playerid,Angle);
}

Function UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

Function ShowPlayerFractionCommands(playerid)
{
    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
    {
        SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /fkasse (Fraktionskasse)");
	}
	if(gTeam[playerid] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** (/r)adio (/d)epartments (/m)egaphone (/su)spect /mdc /arrest /duty /wanted /cuff /zivil /rbball /ticket /sperre");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /gov)ernment /pd1 /pd2 /pdd ( Innen Tore )/sfpdtor /orten /tazer /frisk /take /schild /rb /rbb /sperrewegall");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /alcator /alcatür /alcalift /alcaptor /zollcontrol"#COL_RED" /ucl /ucldel /deskkick");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /nagelband (/nb) /nagelbandweg (/nbw) /nagelbandwegall (/nbwa) /spionagetool (FBI)");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /FRC ( Carrespawn (Leader) ) /armylift1 /armylift2");
	}
	else if(gTeam[playerid] == 1 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** (/r)adio (/d)epartments /heal /duty /medictor /FRC)");
	}
	else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /lenter /invade /ctf /lexit /lcntor /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer /FRC)");
	}
	else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /tie /untie /invade /ctf /yaktor /yaktor2 /kidnap /gangjail /gangunjail /tie /untie /mundtape");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /durchsuchen /augenbinde /frakkammermats /frakkammer /FRC)");
	}
	else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /settax /givetax /penter /pexit /dachluke /präsibüro /ptor /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /portable /henter /hfind /hexit /bestellen /tie /untie /kidnap /gangjail /gangunjail /mundtape");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /durchsuchen /augenbinde /frakkammermats /frakkammer /FRC /sad");
	}
	else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /paper /papers /live /news [text] /ntor /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /fare [Fahrpreis] /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /startlesson /stoplesson /givelicense /lehrerlift /licensepreise /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /ctor /invade /ctf /cgarage /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /genter /invade /ctf /gexit /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /kenter /invade /ctf /kexit /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer /FRC /btor");
	}
	else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /enter /invade /ctf /exit /FRC /kidnap /gangjail /gangunjail /tie /untie /mundtape /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer");
	}
	else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /vaenter /invade /ctf /vaexit /vator /kidnap /gangjail /tie /untie /gangunjail /mundtape /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde /frakkammermats /frakkammer /FRC");
	}
	else if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17)
	{
	    SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /enter /exit /invade /ctf /FRC /kidnap /gangjail /tie /untie /gangunjail");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /mundtape /durchsuchen /augenbinde /frakkammermats /frakkammer");
	}
	else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /rienter /invade /ctf /riexit /FRC /rftor /kidnap /tie /untie /gangjail /gangunjail");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /mundtape /durchsuchen /augenbinde /frakkammermats /frakkammer");
	}
	else if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /enter /exit /invade /ctf /mwtor /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /terenter /terexit /legbombe /selbstmord /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /fenter /fexit /fsperre /swat1 /swat2 /gov /rb /rbb /sperrewegall /orten /tazer /nb /nbw /FRC ");
	}
	else if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /renter /invade /ctf /rexit /skin(am i) /rtor /rtor2 /tie /untie");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /augenbinde 1/0 /kidnap /angriff /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /pfind /freefromcar /freilassen /wmaske /whtor /wenter /wexit /reinziehen /tie /untie /kidnap");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /gangjail /gangunjail /mundtape /durchsuchen /augenbinde /frakkammermats /frakkammer /FRC");
	}
	else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /oamtls /oticket /m /tazer /blitzer /findcar /parkkralle /FRC");
	}
	else if(GetPlayerFaction(playerid) == 21)
	{
	    SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /pfind /freefromcar /freilassen /wmaske /whtor /wenter /wexit /reinziehen /tie /sad");
		SendClientMessage(playerid,COLOR_GRAD5,"*** FRAKTION *** /untie /kidnap /gangjail /gangunjail /mundtape /durchsuchen /augenbinde /frakkammermats /frakkammer /FRC");
	}
	else if(IsAGang(playerid))
	{
	    SendClientMessage(playerid, COLOR_GRAD5,"*** FRAKTION *** /kidnap /invade /ctf /gangjail /gangunjail /mundtape /durchsuchen (nach Geld)");
		SendClientMessage(playerid, COLOR_GRAD5,"*** FRAKTION ***/augenbinde /frakkammermats /frakkammer /FRC");
	}
	return 1;
}

Function Float:GetDistanceToClosestInside(playerid)
{
	new Float:SmallestDistance = 99999.9, Float:OldDistance;
	for(new cpid; cpid<sizeof(CPs); cpid++)
	{
		OldDistance = GetDistanceToInsideCheckpoint(playerid,cpid);
		if(OldDistance < SmallestDistance)
		{
			SmallestDistance = OldDistance;
		}
	}
	return SmallestDistance;
}

Function Float:GetDistanceToClosestOutside(playerid)
{
	new Float:SmallestDistance = 99999.9, Float:OldDistance;
	for(new cpid; cpid<sizeof(CPs); cpid++)
	{
		OldDistance = GetDistanceToOutsideCheckpoint(playerid,cpid);
		if(OldDistance < SmallestDistance)
		{
			SmallestDistance = OldDistance;
		}
	}
	return SmallestDistance;
}
stock GetClosestInsideID(playerid)
{
	new Float:SmallestDistance = 99999.9, Float:OldDistance, returnid;
	for(new cpid; cpid<sizeof(CPs); cpid++)
	{
		OldDistance = GetDistanceToInsideCheckpoint(playerid,cpid);
		if(OldDistance < SmallestDistance)
		{
			SmallestDistance = OldDistance;
			returnid = cpid;
		}
	}
	return returnid;
}
stock GetClosestOutsideID(playerid)
{
	new Float:SmallestDistance = 99999.9, Float:OldDistance, returnid;
	for(new cpid; cpid<sizeof(CPs); cpid++)
	{
		OldDistance = GetDistanceToOutsideCheckpoint(playerid,cpid);
		if(OldDistance < SmallestDistance)
		{
			SmallestDistance = OldDistance;
			returnid = cpid;
		}
	}
	return returnid;
}
Function Float:GetDistanceToInsideCheckpoint(playerid,checkpointid)
{
	new Float:cpx1,Float:cpy1,Float:cpz1,Float:cpx2,Float:cpy2,Float:cpz2;
	GetPlayerPos(playerid,cpx1,cpy1,cpz1);
	cpx2 = CPs[checkpointid][ExitX];
	cpy2 = CPs[checkpointid][ExitY];
	cpz2 = CPs[checkpointid][ExitZ];
	return floatsqroot(floatpower(floatabs(floatsub(cpx2,cpx1)),2)+floatpower(floatabs(floatsub(cpy2,cpy1)),2)+floatpower(floatabs(floatsub(cpz2,cpz1)),2));
}
Function Float:GetDistanceToOutsideCheckpoint(playerid,checkpointid)
{
	new Float:cpx1,Float:cpy1,Float:cpz1,Float:cpx2,Float:cpy2,Float:cpz2;
	GetPlayerPos(playerid,cpx1,cpy1,cpz1);
	cpx2 = CPs[checkpointid][EnterX];
	cpy2 = CPs[checkpointid][EnterY];
	cpz2 = CPs[checkpointid][EnterZ];
	return floatsqroot(floatpower(floatabs(floatsub(cpx2,cpx1)),2)+floatpower(floatabs(floatsub(cpy2,cpy1)),2)+floatpower(floatabs(floatsub(cpz2,cpz1)),2));
}
Function EnableCheckpointingAgain(playerid)
{
    CheckPointing[playerid] = 1;
}

Function ClearChatbox(playerid,lines)
{
	if(IsPlayerConnected(playerid) && lines > 0)
	{
		for(new l=0; l<lines; l++)
		{
	    	SendClientMessage(playerid,COLOR_WHITE," ");
	    }
	}
}

Function Motorrad(playerid)
{
	MotorradSchritt[playerid]++;
	if(MotorradSchritt[playerid] == 2)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
		GameTextForPlayer(playerid,"~w~WILLKOMMEN",5000,3);
		SendClientMessage(playerid,COLOR_LIGHTBLUE, "Willkommen bei der schnellen Fahrschule von German Next Era Life.");
		SendClientMessage(playerid,COLOR_LIGHTBLUE, "Dir werden jetzt auf die Schnelle die Grundregeln beigebracht.Kurz gesagt Straßenverkehrsordnung.");
	}
	else if(MotorradSchritt[playerid] == 10)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Da du dich für den Motorrad Führerschein entschieden hast folgen gleich ein Paar Fragen");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Es geht um Grundwissen fragen die man eigentlich Problemlos kenne sollte");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du darfst als Motorrad Fahrer in der Stadt nur 80Km/h fahren.Ausserhalb Unbegrenzt");
	}
	else if(MotorradSchritt[playerid] == 25)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Die Straßenverkehrsordnung ist einzuhalten. Die einzigen die diese nicht beachten dürfen sind Notdienste");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Mit einem Motorrad musst du innerhalb der Stadt langsam beschleunigen.");
	}
	else if(MotorradSchritt[playerid] == 40)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"An deinem Motorrad muss immer alles Funktionieren. Und du musst alle Papiere dabei haben");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"bezüglich des Motorrads");
	}
	else if(MotorradSchritt[playerid] == 50)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Die Prüfung beginnt jetzt. Das Admin Team wünscht dir Viel Glück");
	}
	else if(MotorradSchritt[playerid] == 60)
	{
 		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 1:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was musst du immer mit dir führen?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Kondome");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Lizenz & Personalausweiß");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Zigaretten");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Deospray");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 80)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was muss an deinem Fahrzeug Funktionieren?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Die Hupe ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Die Dekoration");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Alles");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Der Motor");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 100)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 3:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wie beschleunigt man in einer Stadt?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Langsam");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Schnell");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Egal Hauptsache man fährt");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Garnicht");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 120)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wer darf die Verkehrsregeln missachten?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Niemand");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Nur ich");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Beamte in Not");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Der Pizzaservice");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 125)
	{
 		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Du hast nun den Motorrad Führerschein!");
	    PlayerInfo[playerid][pMotoLic] = 1;
	    MotorradSchritt[playerid] = 0;
	    UnFreezePlayer(playerid);
    	SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
	    SetCameraBehindPlayer(playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	
	return 1;
}

Function OnPlayerPruefung(playerid)
{
    PruefungsSchritt[playerid]++;
	if(PruefungsSchritt[playerid] == 2)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    GameTextForPlayer(playerid,"~w~WILLKOMMEN",5000,3);
		SendClientMessage(playerid,COLOR_LIGHTBLUE," Willkommen bei der schnellen Fahrschule von German Next Era Life.");
		SendClientMessage(playerid,COLOR_LIGHTBLUE," Dir werden jetzt auf die Schnelle die Grundregeln beigebracht.Kurz gesagt Straßenverkehrsordnung.");
	}
	else if(PruefungsSchritt[playerid] == 10)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Bei uns gild meistens die Rechts vor Links Regel. Es sei denn es ist mit Ampeln geregelt.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Die einzigen die diese Regeln missachten dürfen sind Staatsbeamte die im Dienst sind!");
	}
	else if(PruefungsSchritt[playerid] == 25)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Sollte dir ein Beamter mit Sirene begegnen musst du diesen platz machen");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," und durchfahren lassen.");
	}
	else if(PruefungsSchritt[playerid] == 40)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Solltest du in eine Verkehrskontrolle geraten musst du Rechtsran fahren");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," und dem Beamten deine Lizenzen zeigen dies Funktionier mit /showlicenses oder /showperso.");
	}
	else if(PruefungsSchritt[playerid] == 58)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Damit dein Fahrzeug auch nicht sinnlos herumsteht und auch");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," nicht abgeschleppt wird, musst du es Ordnungsgemäß Parken.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Park es am besten auf einem Parkplatz.");
	}
	else if(PruefungsSchritt[playerid] == 72)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Wir hoffen du hast dir alles gut gemerkt,");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Die Prüfung geht sofort los. Das Admin Team wünscht dir Viel Glück");
	}
	else if(PruefungsSchritt[playerid] == 90)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 1:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Welche Vorfahrtsregel gilt auf diesem Server?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Beste vor Schlechteste");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Garkeine");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Rechts vor Links");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Links vor Rechts");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 100)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was machst du wenn ein Beamter dir ein Beamter in Not Begegnet?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Ich fahre ganz normal weiter");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Auf der Straße Parken");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Rechts ran fahren und vorbei lassen");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Fenster runter und Winken");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 110)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 3:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was machst du wenn eine Ampel Rot anzeigt?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Ich halte an.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Ich halte und warte bis sie Grün aufleuchtet");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Ich parke mein Auto und steige aus");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Ich fahre einfach weiter");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 120)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 4:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wie Schnell darfst du in einer Spielstraße fahren?(Grundwissen)");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) 50-80");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Schnell");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Langsam");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Schrittgeschwindigkeit");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 125)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Du hast nun den Führerschein!");
	    PlayerInfo[playerid][pCarLic] = 1;
	    PruefungsSchritt[playerid] = 0;
	    UnFreezePlayer(playerid);
    	SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
	    SetCameraBehindPlayer(playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}

	return 1;
}

Function OnPlayerFailedPruefung(playerid)
{
	GameTextForPlayer(playerid,"~r~DURCHGEFALLEN",5000,3);
	SendClientMessage(playerid,COLOR_RED," Du bist leider durchgefallen. Versuche es beim nächsten mal besser.");
    UnFreezePlayer(playerid);
    SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
    SetCameraBehindPlayer(playerid);
	return 1;
}

Function serverNews()
{
	if(newswechsel == 1)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Bei Fragen oder Problemen kannst du dich per /report [Frage] an die Supporter/Admins wenden.");
		SendClientMessageToAll(COLOR_WHITE,"  Das Team wird sich dann so schnell wie möglich um dein Anliegen kümmern und dieses so");
		SendClientMessageToAll(COLOR_WHITE,"  gut es geht zu beantworten. Cheater Sollten sofort per /report an die Administratoren/Supporter");
		SendClientMessageToAll(COLOR_WHITE,"  gemeldet werden. Sollte kein Administrator Online sein, so kannst du dich im Teamspeak an");
	    SendClientMessageToAll(COLOR_WHITE,"  einen Administrator wenden.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
		newswechsel = 2;
	}
	else if(newswechsel == 2)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Der normale Premiumaccount reicht dir nicht?");
		SendClientMessageToAll(COLOR_WHITE,"  Für schlappe 2 Euro pro Monat gibt es den Donator Rank 1 (Premium Rang 2)");
		SendClientMessageToAll(COLOR_WHITE,"  Wie du ihn bekommst und welche vorteile du dann hast erfährst du im Forum.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
		newswechsel = 3;
	}
	else if(newswechsel == 3)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Du willst Supporter/Admin werden ?");
		SendClientMessageToAll(COLOR_WHITE,"  Guck ins Forum ob wir welche suchen wenn ja bewirb dich am besten.");
		SendClientMessageToAll(COLOR_WHITE,"  Für weiter Informationen erhälts du bei den Supporter/Administratoren.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
		newswechsel = 4;
	}
	else if(newswechsel == 4)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Kennst du schon unser Werbesystem 'User werben User'?");
		SendClientMessageToAll(COLOR_WHITE,"  Wenn du Sechs Spieler wirbst, kannst du uns dies im Forum mitteilen oder einen Administator sagen.");
		SendClientMessageToAll(COLOR_WHITE,"  Der geworbene Spieler muss allerdings das dem Supporter/Administrator bescheid sagen.");
		SendClientMessageToAll(COLOR_WHITE,"  Damit der , der den Spieler Geworben hat 3 Respektpunkte und 500.000 als Belohnung kriegt.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
		newswechsel = 5;
	}
	else if(newswechsel == 5)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Solltest du einen Cheater bzw. Hacker auf unserem Server gesehen haben, so solltest du");
		SendClientMessageToAll(COLOR_WHITE,"  diesen mithilfe von /report schnellstmöglich an einen Supporter/Administrator weiterleiten.");
		SendClientMessageToAll(COLOR_WHITE,"  User mit Cheatverdacht werden sofort Gebannt. Bei einem Fehlbann kann man im Forum nach dem");
		SendClientMessageToAll(COLOR_WHITE,"  genauen Grund fragen.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
        newswechsel = 6;
	}
   	else if(newswechsel == 6)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Du hast Wünsche für eine Gang oder Map / Script wünsche dann Poste die Bitte ins Forum.");
		SendClientMessageToAll(COLOR_WHITE,"  Wir suchen noch User die uns unterstüzen also gibt /donatorhelp ein und bestellt euch den.");
		SendClientMessageToAll(COLOR_WHITE,"  Donator Rank 1 :) Viel Spaß noch auf dem Server.");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
        newswechsel = 6;
	}
	else if(newswechsel == 7)
	{
	    SendClientMessageToAll(COLOR_GREEN, "_________________________________________ GNE INFORMATION ____________________________________");
		SendClientMessageToAll(COLOR_WHITE,"  Auf diesem Server gilt die Ampelregelung gilt nur in Los Santos & San Fiero.");
		SendClientMessageToAll(COLOR_WHITE," In Las Venturas & auf dem Land muss die Ampelregelung nicht eingehalten");
		SendClientMessageToAll(COLOR_WHITE," werden. Die Höchstgeschwindigkeit in Los Santos beträgt 90 km/h. (Toleranz: 95 km/h)");
        SendClientMessageToAll(COLOR_WHITE," Wenn ihr zuschnell fährt kriegt ihr Punkte weiter informationen findet ihr unter /punkte");
		SendClientMessageToAll(COLOR_GREEN, "||___www.gne-life.de_____________________________________Teamspeak 3: 84.200.15.38:7568___||");
        newswechsel = 1;
	}
	return 1;
}

/*Function serverNews()
{
    new string[200];
	if(newswechsel == 1)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		format(string, sizeof(string), "Unsere TeamSpeak3 IP: {FFFFFF}%s ", TEAMSPEAKIP);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessageToAll(COLOR_YELLOW, "Um nähere Details zum Server erfahren zu können, solltest du");
		SendClientMessageToAll(COLOR_YELLOW, "dich im Forum registrieren!");
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 2;
	}
	else if(newswechsel == 2)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		SendClientMessageToAll(COLOR_YELLOW, "Solltest du den Wunsch haben, in eine Gang oder sonstige");
		SendClientMessageToAll(COLOR_YELLOW, "Fraktion aufgenommen zu werden, so kannst du dich im Forum");
		SendClientMessageToAll(COLOR_YELLOW, "registrieren und eine Bewerbung schreiben!");
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 3;
	}
	else if(newswechsel == 3)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		format(string, sizeof(string), "Unsere TeamSpeak3 IP: {FFFFFF}%s ", TEAMSPEAKIP);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessageToAll(COLOR_YELLOW, "Um nähere Details zum Server erfahren zu können, solltest du");
		SendClientMessageToAll(COLOR_YELLOW, "dich im Forum registrieren!");
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 4;
	}
	else if(newswechsel == 4)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		SendClientMessageToAll(COLOR_YELLOW, "Solltest du den Wunsch haben, in eine Gang oder sonstige");
		SendClientMessageToAll(COLOR_YELLOW, "Fraktion aufgenommen zu werden, so kannst du dich im Forum");
		SendClientMessageToAll(COLOR_YELLOW, "registrieren und eine Bewerbung schreiben!");
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 5;
	}
	else if(newswechsel == 5)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		format(string, sizeof(string), "Unsere TeamSpeak3 IP: {FFFFFF}%s ", TEAMSPEAKIP);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessageToAll(COLOR_YELLOW, "Um nähere Details zum Server erfahren zu können, solltest du");
		SendClientMessageToAll(COLOR_YELLOW, "dich im Forum registrieren!");
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 6;
	}
	else if(newswechsel == 6)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
		SendClientMessageToAll(COLOR_YELLOW, "Solltest du den Wunsch haben, in eine Gang oder sonstige");
		SendClientMessageToAll(COLOR_YELLOW, "Fraktion aufgenommen zu werden, so kannst du dich im Forum");
		SendClientMessageToAll(COLOR_YELLOW, "registrieren und eine Bewerbung schreiben!");
		SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		SendClientMessageToAll(COLOR_WHITE, "==========================================================");
		newswechsel = 7;
	}
	else if(newswechsel == 7)
	{
	    SendClientMessageToAll(COLOR_WHITE, "========================== Hinweis =========================");
	    SendClientMessageToAll(COLOR_YELLOW, "Wir suchen immernoch User die uns unterstützen ! In mehreren Sanktionen");
	    SendClientMessageToAll(COLOR_YELLOW, "Du wärst gerne Donator oder willst uns helfen ? Dann /donatorhelp");
	    SendClientMessageToAll(COLOR_YELLOW, "Mehr informationen bei einem Admin!");
	    SendClientMessageToAll(COLOR_YELLOW, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
   		format(string, sizeof(string), "Unsere TeamSpeak3 IP: {FFFFFF}%s ", TEAMSPEAKIP);
 	    SendClientMessageToAll(COLOR_YELLOW, string);
		format(string, sizeof(string), "Unsere Forumsadresse: {FFFFFF}%s ", FORUMURL);
		SendClientMessageToAll(COLOR_WHITE, "============================================================");
		newswechsel = 1;
	    
	}
	return 1;
}*/
Function RemoveRoadblock(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
				DisablePlayerCheckpoint(i);
			}
		}
	}
	DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
	PlayerInfo[playerid][pRoadblock] = 0;
	return 1;
}

Function MullabfuhrAbbruch(playerid)
{
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408)
	{
		SendClientMessage(playerid, COLOR_RED, "Du bist nicht in das Fahrzeug zurückgekehrt!");
		DisablePlayerCheckpoint(playerid);
		Mullabfuhr[playerid] = 0;
	}
	return 1;
}

Function ticketsys(string[])
{
	new eintragen[256];
	format(eintragen, sizeof(eintragen), "%s\n",string);
	new File:hFile;
	hFile = fopen("tickets.log", io_append);
	fwrite(hFile, eintragen);
	fclose(hFile);
}

Function RespawnAfterKrankenhaus(playerid)
{
    SetPlayerPos(playerid,1999.7947,-1453.1426,13.5547);
	SetPlayerFacingAngle(playerid,113.4541);
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	SetCameraBehindPlayer(playerid);
	UnFreezePlayer(playerid);
	new rand = random(3);
	if(rand == 0)
	{
	    GameTextForPlayer(playerid,"~y~GEHEILT!~n~~g~Du hattest eine leichte Verletzung",5000,3);
	    SetPlayerHealth(playerid,90.0);
	}
	else if(rand == 1)
	{
	    GameTextForPlayer(playerid,"~y~GEHEILT!~n~~g~Du hattest eine mittlere Verletzung",5000,3);
	    SetPlayerHealth(playerid,60.0);
	}
	else if(rand == 2)
	{
	    GameTextForPlayer(playerid,"~y~GEHEILT!~n~~g~Du hattest eine schwere Verletzung",5000,3);
	    SetPlayerHealth(playerid,20.0);
	}
	return 1;
}

Function UnsetStuntVar(playerid)
{
	StuntVar[playerid] = 1;
	return 1;
}


Function Rep(playerid,veh,Float:vehX,Float:vehY,Float:vehZ,Float:vehA)
{
    SetVehiclePos(veh,vehX,vehY,vehZ);
    SetVehicleZAngle(veh,vehA);
    PutPlayerInVehicle(playerid,veh,0);
    UnFreezePlayer(playerid);
    SendClientMessage(playerid,COLOR_GREEN," Du hast dein Fahrzeug auf Kosten des Staats tanken und reparieren lassen!");
    Gas[veh] = GetGasMax(GetVehicleModel(veh));
	LinkVehicleToInterior(veh,0);
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	return 1;
}


stock strvalEx( const string[] )
{
	if( strlen( string ) >= 50 ) return 0;
	return strval(string);
}

Function UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}


Function Rob_Reset()
{
	rob = 0;
	return 1;
}

Function Rob_Cop(playerid)
{
	if(PlayerInfo[playerid][pLocal] == 102)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					new sendername[MAX_PLAYER_NAME],string[123];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					SendClientMessage(i,TEAM_BLUE_COLOR,"HQ: Achtung! Das Bank Security System konnte den Täter identifizieren!");
					format(string,sizeof(string),"HQ: Der Täter heißt %s und befindet sich noch in der Bank!",sendername);
					SendClientMessage(i,TEAM_BLUE_COLOR,string);
				}
			}
		}
	}
	else if(PlayerInfo[playerid][pLocal] == 102)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					new sendername[MAX_PLAYER_NAME],string[123];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					SendClientMessage(i,TEAM_BLUE_COLOR,"HQ: Achtung! Das Bank Security System  konnte den Täter identifizieren!");
					format(string,sizeof(string),"HQ: Der Täter heißt %s und befindet sich nicht mehr in der Tankstelle!",sendername);
					SendClientMessage(i,TEAM_BLUE_COLOR,string);
				}
			}
		}
	}
}
Function Rob_UnFreeze(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,35.0,2155.1436,1623.8749,993.6882))//2316.1729,-7.1389,26.7422))
	{
		//UnFreezePlayer(playerid);
		new randmoney = 50000+ random(30000);
		GivePlayerMoney(playerid,randmoney);
		new string[128];
		format(string,sizeof(string),"Du hast $%d erbeutet! Nun verschwinde! Aber schnell!",randmoney);
		SendClientMessage(playerid,COLOR_GREEN,string);
		SetTimerEx("Rob_Cop",80000+random(90000),0,"i",playerid); // Nach 1 minute
	}
	else
	{
        SendClientMessage(playerid,0xAA3333AA," Du hast die Bank verlassen und bekommst keine Kohle!");
        return 1;
    }
	return 1;
}
Function UnSetWeaps(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		WeapsTaken[playerid] = 0;
	}
	return 1;
}

//sanft rotieren
Function MoveObjektRot(oid,Float:rx, Float:ry, Float:rz, geschw) {
	new Float:x, Float:y, Float:z, Float:dx, Float:dy, Float:dz;
	GetObjectRot(oid,x,y,z);
	dx=(rx-x)/geschw;
	dy=(ry-y)/geschw;
	dz=(rz-z)/geschw;
	SetObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz);
	return 1;
}
Function MoveRot(oid,Float:rx, Float:ry, Float:rz, geschw, Float:dx, Float:dy, Float:dz) {
	new Float:x, Float:y, Float:z;
	GetObjectRot(oid,x,y,z);
	SetObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	if(geschw>=1) {
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz); }
	return 1;
}

Function TazerBereitForPlayer(playerid)
{
	TazerBereit[playerid] = 1;
	return 1;
}

stock SetPlayerToKnast(playerid,knastid)
{
	switch(knastid)
	{
		case 1:
		{
		    SetPlayerPos(playerid,193.9086,175.1976,1003.0234);
		    SetPlayerFacingAngle(playerid,352.7898);
		    SetPlayerInterior(playerid,3);
		    PlayerInfo[playerid][pInt] = 3;
		}
		case 2:
		{
		    SetPlayerPos(playerid,1265.8997,-779.5238,1084.0078);
		    SetPlayerFacingAngle(playerid,359.0086);
		    SetPlayerInterior(playerid,5);
		    PlayerInfo[playerid][pInt] = 5;
		}
		case 3:
		{
		    SetPlayerPos(playerid,1261.3492,-779.2875,1084.0078);
		    SetPlayerFacingAngle(playerid,355.2485);
		    SetPlayerInterior(playerid,5);
		    PlayerInfo[playerid][pInt] = 5;
		}
	}
	return 1;
}


Function OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	/*if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,name,sizeof(name));
		ShowPlayerDialog(playerid,DIALOG_CLICK,DIALOG_STYLE_LIST,name,"Goto\nGethere\nKick\nBan\nHealth\nSlap\nTV\nInterior","OK","Abbrechen");
		pClicked[playerid] = clickedplayerid;
	}*/
	if(IsACop(playerid))
	{
	    ShowPlayerDialog(playerid,DIALOG_COP,DIALOG_STYLE_LIST,"Verbrechen klicken","Nitro\nStVO\nBesitz von Mats/Drogen\nVersuchtes Kidnapping\nFlucht\nversuchte Flucht\nBeihilfe zur Flucht\nVerweigerung\nBehinderung der Justiz\nWaffenhandel\nEinsperren ins GangJail\nBeamten/Zivilistenangriff\nEntfürhung\nBeamten-/Zivilistenbeschuss\nAnschlag\nMord\nBankraub\nPräsidentenbeschuss\nPräsidentenmord\nAusbruch aus Alcatraz\nAusbruchshilfe aus Alcatraz","Auswählen","Beenden");
	    pVerbrecher[playerid] = clickedplayerid;
	}
	return 1;
}

Function SupLabel(playerid)
{
	if(supmobil[playerid] != 0)
	{
	    Delete3DTextLabel(suptext[playerid]);
		format(stringx, sizeof(stringx), "Supporter Car von %s", MeinName(playerid));
		suptext[playerid] = Create3DTextLabel(stringx, COLOR_GOLD, 0.0, 0.0, 0.0, 30.0, 0, 1);
		Attach3DTextLabelToVehicle(suptext[playerid], supmobil[playerid], 0.0, 0.0, 0.3);
	}
	else KillTimer(suplabeltimer[playerid]);
	return 1;
}

Function CreateSupCar(playerid, carid) {
	new Float:cX, Float:cY, Float:cZ, Float:cZa, rand1, rand2;
	GetPlayerPos(playerid, cX, cY, cZ);
	GetPlayerFacingAngle(playerid, cZa);
	rand1 = random(126);
	rand2 = random(126);
    supmobil[playerid] = CreateVehicle(carid, cX, cY, cZ, cZa, rand1, rand2, 0);
    PutPlayerInVehicle(playerid, supmobil[playerid], 0);

	format(stringx, sizeof(stringx), "Supporter Car von %s", MeinName(playerid));
	suptext[playerid] = Create3DTextLabel(stringx, COLOR_GOLD, 0.0, 0.0, 0.0, 30.0, 0, 1);
	Attach3DTextLabelToVehicle(suptext[playerid], supmobil[playerid], 0.0, 0.0, 0.3);
	suplabeltimer[playerid] = SetTimerEx("SupLabel", 10000, 1, "i", playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(supmobil[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(supmobil[playerid],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);

	return 1;
}

Function OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	if(dialogid==DIALOG_ZOLLCONTROL)
	{
	    switch(listitem)
	    {
	        case 0: // ID
	        {
	            ShowPlayerDialog(playerid, DIALOG_ZOLLCONTROL2, DIALOG_STYLE_INPUT, "Zollkontrolle", "Zoll-ID eingeben:", "Absenden", "Abbrechen");
	        }
	        case 1: // LS-SF
	        {
				if(zollvar[0] == 0) {
				    zollvar[0] = 1;
				    zollvar[1] = 1;
				    zollvar[2] = 1;
				    zollvar[3] = 1;
				    zollvar[12] = 1;
				    zollvar[13] = 1;
				    zollvar[14] = 1;
				    zollvar[15] = 1;
					format(stringx, sizeof(stringx), "%s die Zölle von LS nach SF verschlossen.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				}
				else {
				    zollvar[0] = 0;
				    zollvar[1] = 0;
				    zollvar[2] = 0;
				    zollvar[3] = 0;
				    zollvar[12] = 0;
				    zollvar[13] = 0;
				    zollvar[14] = 0;
				    zollvar[15] = 0;
					format(stringx, sizeof(stringx), "%s die Zölle von LS nach SF geöffnet.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				}
	        }
	        case 2: // LS-LV
	        {
				if(zollvar[9] == 0) {
				    zollvar[8] = 1;
				    zollvar[9] = 1;
				    zollvar[4] = 1;
				    zollvar[5] = 1;
				    zollvar[6] = 1;
				    zollvar[7] = 1;
					format(stringx, sizeof(stringx), "%s die Zölle von LS nach LV verschlossen.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				}
				else {
				    zollvar[8] = 0;
				    zollvar[9] = 0;
				    zollvar[4] = 0;
				    zollvar[5] = 0;
				    zollvar[6] = 0;
				    zollvar[7] = 0;
					format(stringx, sizeof(stringx), "%s die Zölle von LS nach LV geöffnet.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				}
			}
	        case 3: // SF-LV
	        {
	            if(zollvar[10] == 0) {
	                zollvar[10] = 1;
	                zollvar[11] = 1;
	                zollvar[16] = 1;
	                zollvar[17] = 1;
	                zollvar[18] = 1;
	                zollvar[19] = 1;
					format(stringx, sizeof(stringx), "%s die Zölle von SF nach LV verschlossen.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
	            }
	            else {
	                zollvar[10] = 0;
	                zollvar[11] = 0;
	                zollvar[16] = 0;
	                zollvar[17] = 0;
	                zollvar[18] = 0;
	                zollvar[19] = 0;
					format(stringx, sizeof(stringx), "%s die Zölle von SF nach LV geöffnet.", MeinName(playerid));
					SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
					SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				}
	        }
	    }
	}
	if(dialogid==DIALOG_ZOLLCONTROL2)
	{
	    new idzoll = strval(inputtext);
	    if(idzoll >= 1 && idzoll <= 20)
	    {
			if(zollvar[idzoll-1] == 1)
			{
			    format(stringx, sizeof(stringx), "%s hat den Zoll %d geöffnet.", MeinName(playerid), idzoll);
				SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
				SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				zollvar[idzoll-1] = 0;
			}
			else {
				format(stringx, sizeof(stringx), "%s hat den Zoll %d geschlossen.", MeinName(playerid), idzoll);
				SendRadioMessage(1, TEAM_BLUE_COLOR, stringx);
				SendRadioMessage(2, TEAM_BLUE_COLOR, stringx);
				zollvar[idzoll-1] = 1;
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Nur von 1-20!");
	}
	if(dialogid == DIALOG_WEQUIP)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
		            SetPlayerArmour(playerid, 100.0);
		            SetPlayerHealth(playerid, 100.0);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich gehealt und eine Rüstung angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST, "Wheelman Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
		            GivePlayerWeapon(playerid, 24, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer Desert Eagle ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
		            GivePlayerWeapon(playerid, 29, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer MP5 ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 3:
		        {
		            GivePlayerWeapon(playerid, 31, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer M4 ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 4:
		        {
		            GivePlayerWeapon(playerid, 34, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer Sniper ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Hoffentlich wirst du dein Ziel erreichen.");
	}
    if(dialogid == DIALOG_SERVICE)
	{
		if(response)
		{
				if(listitem == 0)
				{
					new string[256];
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
					    if(TaxiDrivers < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Es ist kein Taxifahrer im Dienst, bitte versuche es später noch einmal.");
				            return 1;
				        }
				        if(TransportDuty[playerid] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du kannst im Momment kein Taxi rufen.");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s braucht ein Taxi. Gib (/accept taxi) ein, um anzunehmen)", sendername);
				    	SendFamilyMessage(10, COLOR_LIGHTBLUE, string);
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast ein Taxi angefordert, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
				    	JustService[playerid] = 1;
				    	TaxiCall = playerid;
					}
				}
				if(listitem == 1)
				{
					new string[256];
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
					    if(BusDrivers < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Es ist kein Busfahrer im Dienst, bitte versuche es später noch einmal.");
				            return 1;
				        }
				        if(TransportDuty[playerid] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du kannst im Momment keinen Bus rufen.");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s braucht ein Bus. Gib (/accept bus) ein, um anzunehmen.)", sendername);
				    	SendJobMessage(14, COLOR_LIGHTBLUE, string);
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast einen Busfahrer gerufen, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
				    	JustService[playerid] = 1;
				    	BusCall = playerid;
					}
				}
				if(listitem == 3)
				{
				    if(GetPlayerInterior(playerid) != 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
			            return 1;
			        }
				    new string[256];
				    new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string,sizeof(string),"[Leitstelle] %s benötitgt einen Wheelmen! Gib /accept wheelmen ein, um anzunehmen.", sendername);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsPlayerInFrac(i, 21))
					    {
					        SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast einen Wheelmen gerufen, warte auf eine Antwort.");
					SetTimerEx("ServiceReset", 30000, false, "i", playerid);
					JustService[playerid] = 1;
					WCALL = playerid;
					return 1;
				}
				if(listitem == 2)
				{
				    if(GetPlayerInterior(playerid) != 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
			            return 1;
			        }
				    if(Medics < 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Der San Andreas Rettungsdienst ist im Moment nicht erreichbar, versuch es später noch einmal.");
			            return 1;
			        }
			        new string[256];
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "[Leitstelle] %s braucht einen Arzt. Gib (/accept medic) ein um den Anruf anzunehmen.", sendername);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 22 || PlayerInfo[i][pLeader] == 22)
							{
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
	    				}
					}
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast den San Andreas Rettungsdienst gerufen, warte auf eine Antwort.");
			    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
			    	JustService[playerid] = 1;
			    	MedicCall = playerid;
			    	return 1;
				}
				if(listitem == 4)
				{
					if (TowTruckers < 1)
			  		{
					    SendClientMessage(playerid,COLOR_GRAD1," * Derzeit sind keine Ordnungsbeamte im Dienst.");
					    return 1;
			    	}
			        SendClientMessage(playerid,0xFFFF00AA," * Ordnungsbeamte haben wurden über deinen Notruf informiert!");
			        SetTimerEx("ServiceReset", 30000, false, "i", playerid);
			        JustService[playerid] = 1;
					new pName[MAX_PLAYER_NAME];
					new msg[256];
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					format(msg,sizeof(msg),"*** %s (ID:%d) hat einen Notruf abgeschickt, er ist rot markiert. ***",pName,playerid);
					GetPlayerName(playerid,pName,sizeof(pName));
					for (new i=0;i<MAX_PLAYERS;i++)
			  		{
					    if(IsTowTrucker[i] == 1)
			    	  	{
							SendClientMessage(i,0xFFFF00AA,msg);
							SetPlayerCheckpoint(i, X,Y,Z,3.0);
						}
			    	}
				}
				if(listitem == 5)
				{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
					    if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Es ist kein Polizist im Dienst, bitte versuche es später noch einmal");
				            return 1;
				        }
				        new sendername[MAX_PLAYER_NAME];
				        new string[256];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s hat einen Streifenwagen angefordert, Gib (/accept polizei) ein um den Auftrag anzunehmen.", sendername);
						{
							if(IsPlayerConnected(i))
							{
								if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
								{
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
		    				}
						}
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast einen Streifenwafen gerufen, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
				    	JustService[playerid] = 1;
				    	CopCall = playerid;
				    	return 1;
					}
				}
		}
	}


   	if(dialogid == DIALOG_FBIEQUIP)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
					SetPlayerHealth(playerid, 100.0);
					SetPlayerArmour(playerid, 100.0);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
				    GivePlayerWeapon(playerid, 24, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstetn.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
				    GivePlayerWeapon(playerid, 29, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
                case 3:
		        {
				    GivePlayerWeapon(playerid, 31, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
                case 4:
		        {
				    GivePlayerWeapon(playerid, 34, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
                case 5:
		        {
					GivePlayerWeapon(playerid, 41, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "FBI Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper\n6. Spray","Auswählen","Abbrechen");
		        }
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Hoffentlich hast du dich Richtig Umgezogen.");
	}
   	if(dialogid == DIALOG_FBIUNIFORM)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
					SetPlayerSkin(playerid, 170);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
				    SetPlayerSkin(playerid, 285);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
				    SetPlayerSkin(playerid, 286);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 3:
		        {
					SetPlayerSkin(playerid, 165);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Hoffentlich hast du dich Richtig Umgezogen.");
	}
	if(dialogid==DIALOG_ARBOBJ) // Auswahl von den Objekten
	{
		switch(listitem)
		{
			case 0..14: // Objekt 1-15
			{
			    if(response == 1)
			    {
				    Objekt[playerid] = listitem+1; // +1 damit die Objekt ID zur Abfrage stimmt
					format(stringx, sizeof(stringx), "Du hast nun %d als Objekt zum spawnen!", listitem+1);
				    ShowPlayerDialog(playerid, DIALOG_AUSGEWAEHLT, DIALOG_STYLE_MSGBOX, "Bestätigung", stringx, "Okay", "Fertig");
			    }
			}
			case 15:
			{
			    if(response == 1)
			    {
			        ShowPlayerDialog(playerid, DIALOG_OBJINPUT, DIALOG_STYLE_INPUT, "Objekt System", "Objekt ID eingeben", "Auswählen","Abbrechen");
			    }
			}
		}
	}
	if(dialogid==DIALOG_OBJINPUT)
	{
	    if(response == 1)
	    {
	        new obj = strval(inputtext);
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
		        if(obj == 0) { }
		        else {
		            Objekt[playerid] = 999999;
		            ObjektID[playerid] = obj;
		            format(stringx, sizeof(stringx), "Du hast nun %d als Objekt zum spawnen!", obj);
		            ShowPlayerDialog(playerid, DIALOG_AUSGEWAEHLT, DIALOG_STYLE_MSGBOX, "Bestätigung", stringx, "Fertig", " ");
		        }
	        }
	        else SendClientMessage(playerid, COLOR_WHITE, "Erst ab Admin Level 2000 möglich.");
	    }
	}
	if(dialogid==DIALOG_SUPMOBIL)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        //Gas[supmobil[playerid]] = 1;
		        case 0: CreateSupCar(playerid, 480); // Comet
		        case 1: CreateSupCar(playerid, 560); // Sultan
		        case 2: CreateSupCar(playerid, 431); // Bus
		        case 3: CreateSupCar(playerid, 522); // NRG
		        case 4: CreateSupCar(playerid, 452); // Boot
		        case 5: CreateSupCar(playerid, 487); // Heli
		        case 6:
		        {
					if(PlayerInfo[playerid][pAdmin] >= 1) {
		            	ShowPlayerDialog(playerid, DIALOG_SUPMOBILID, DIALOG_STYLE_INPUT, "Supporter Fahrzeug", "Fahrzeug ID eingeben:", "Erstellen", "Abbrechen");
		            }
		            else SendClientMessage(playerid, COLOR_WHITE, "Du bist dazu nicht berechtigt.");
		        }
	        }
	    }
	}
	if(dialogid==DIALOG_SUPMOBILID)
	{
	    if(response) {
            if(strval(inputtext)>=400&&strval(inputtext)<=611) {
  	          if(strval(inputtext)==432||strval(inputtext)==425||strval(inputtext)==520) {
  	            SendClientMessage(playerid, COLOR_WHITE, "So ist das aber nicht gedacht.");
  	            new Float:p[3];
  	            GetPlayerPos(playerid,p[0],p[1],p[2]);
  	            SetPlayerPos(playerid,p[0],p[1],p[2]+200);
  	            return 1;
  	          }
                new car = strval(inputtext);
                CreateSupCar(playerid, car);
            }
	    }
	}
	if(dialogid == DIALOG_KLINGEL)
	{
		if(response)
		{
			if(listitem == 0)
			{
			 	if(PlayerInfo[playerid][pJob] != 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Du bist kein Anwalt!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte, ein Officer steht dir gleich zur Verfügung");
				new sendername[MAX_PLAYER_NAME];
				new anwalt[126];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(anwalt,sizeof(anwalt),"Anwalt %s steht im Eingangsbereich und möchte zu den Zellen",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(playerid, 2) || IsPlayerInFrac(playerid, 22))
					{
						SendClientMessage(i,COLOR_PURPLE,anwalt);
					}
				}
			}
			if(listitem == 1)
			{
				if(WantedLevel[playerid] < 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Du bist nicht gesucht");
					return 1;
				}
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte ein Officer wird sich gleich um dich Kümmern");
                new sendername[MAX_PLAYER_NAME];
				new stellen[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(stellen,sizeof(stellen),"%s möchte sich stellen und steht im Eingangsbereich",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
					{
						
						SendClientMessage(i, COLOR_PURPLE, stellen);
					}
				}
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte ein Officer steht dir gleich zur Verfügung");
				new sendername[MAX_PLAYER_NAME];
				new hilfe[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(hilfe,sizeof(hilfe),"%s steht im Eingangsbereich und benötigt Hilfe",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
					{
						SendClientMessage(i, COLOR_PURPLE, hilfe);
					}
				}
			}
		}
	}
    if(dialogid == DIALOG_ID)
    {
        if(!response)
            return 0;

        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~Du bist bereits an diesem Stockwerk", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~Du hast bereits den Aufzug gerufen", 3500, 4);
		else
	        CallElevator(playerid, listitem);

		return 1;
    }
    if(dialogid == DIALOG_RADIO)
    {
		if(response)
		{
		    if(listitem == 0)
            {
                GameTextForPlayer(playerid, "~r~Technobase.FM.", 500,3);
				PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/dsl.pls");
	 		}
	 		if(listitem == 1)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Hardbase.FM.", 500,3);
				PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/dsl.pls");
	 		}
			if(listitem == 2)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Housetime.FM.", 500,3);
				PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls");
	 		}
			if(listitem == 3)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Trancebase.FM.", 500,3);
				PlayAudioStreamForPlayer(playerid, "http://listen.trancebase.fm/dsl.pls");
	 		}
			if(listitem == 4)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Coretime.FM.", 500,3);
	            PlayAudioStreamForPlayer(playerid, "http://listen.coretime.fm/dsl.pls");
	 		}
	 		if(listitem == 5)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Clubtime.FM.", 500,3);
	 			PlayAudioStreamForPlayer(playerid, "http://listen.Clubtime.fm/dsl.pls");
	        }
	        if(listitem == 6)
	        {
	            GameTextForPlayer(playerid, "~r~Plante Radio", 500,3);
	            PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
			}
			if(listitem == 7)
			{
			    GameTextForPlayer(playerid, "~r~YouFM", 500,3);
			    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");//YOU FM LIVE
			}
			if(listitem == 8)
			{
			    GameTextForPlayer(playerid, "~r~YouFM Rock", 500,3);
			    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_rock.m3u"); // YOU FM ROCK
			}
			if(listitem == 9)
			{
			    GameTextForPlayer(playerid, "~r~YouFM Club", 500,3);
			    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_club.m3u"); // YOU FM CLUB
			}
			if(listitem == 10)
			{
			    GameTextForPlayer(playerid, "~r~YouFM Black", 500,3);
			    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_black.m3u"); // YOU FM BLACK
			}
			if(listitem == 11)
			{
			    GameTextForPlayer(playerid, "~r~T89.0RTL", 500,3);
			    PlayAudioStreamForPlayer(playerid, "http://mp3.89.0rtl.de/listen.pls"); // 89.0 RTL
			}
	 		if(listitem == 12)
	 		{
	 		    GameTextForPlayer(playerid, "~r~Radio Aus", 500,3);
	 			StopAudioStreamForPlayer(playerid);
	 		}
	 		return 1;
		}
    }
    /*if(dialogid == DIALOG_BEZAHLEN)
    {
        if(response)
        {
            if(listitem == 0)
            {
                new FillUp;
                new bezahlen[276];
                GivePlayerMoney(playerid, - FillUp);
                SBizzInfo[2][sbTill] += FillUp/4;
				ExtortionSBiz(2, FillUp);
                GivePlayerMoney(playerid, - FillUp);
                FillUp = SBizzInfo[2][sbEntranceCost] * FillUp;
				format(bezahlen,sizeof(bezahlen), "Du musstest %d$ bezahlen", bezahlen);
				SendClientMessage(playerid, COLOR_LIGHTBLUE,bezahlen);
				
			}
        }
    }*/
    if(dialogid == DIALOG_STADTHALLE)
    {
        if(response)
        {
	        if(listitem == 0)
	        {
	            OnPlayerCommandText(playerid, "/start");
			}
			if(listitem == 1)
			{
	            OnPlayerCommandText(playerid, "/motorrad");
			}
			if(listitem == 2)
			{
				OnPlayerCommandText(playerid, "/persokaufen");
			}
		}
	}
	if(dialogid == DIALOG_NEULING)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, NEULING1, DIALOG_STYLE_MSGBOX, "Womit Kann ich Fahren?","Hallo Lieber Neuling,\nWir heißen dich nochmal Rechtherzlich bei uns Willkommen\nSo zur sache, auf der anderen Seite stehen Roller womit du fahren kannst\nMarker auf der Karte gesetzt!\nEr ist Rot Makiert.Viel Spaß!", "Fertig", "Fertig");
	            SetPlayerCheckpoint(playerid,1770.3796,-1939.0886,13.5613,8.0);
	        }
	        if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, NEULING2, DIALOG_STYLE_LIST, "Was kann ich jetzt machen?", "Führerschein\nBrauche Arbeit\nBrauche einen Personalausweiß", "Auswählen", "Abbrechen");
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, COLOR_ORANGE, "Tippe /serverinfo um mehr von uns zu erfahren!");
			}
			if(listitem == 3)
			{
			    OnPlayerCommandText(playerid, "/teamspeakip");
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_ORANGE, "Tippe /report um hilfe zu bekommen!");
			}
		}
	}
	if(dialogid == NEULING2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,1481.0941,-1765.4796,18.7958,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
	        }
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,2225.8604,-1157.4128,25.7804,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,1481.0941,-1765.4796,18.7958,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
			}
	    }
	}
	/*if(dialogid == NEON)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        SetPVarInt(playerid, "neon", 1);
            	SetPVarInt(playerid, "blue", CreateDynamicObject(18648,0,0,0,0,0,0));
            	SetPVarInt(playerid, "blue1", CreateDynamicObject(18648,0,0,0,0,0,0));
            	AttachObjectToVehicle(GetPVarInt(playerid, "blue"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(GetPVarInt(playerid, "blue1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	GameTextForPlayer(playerid, "~b~ Blue ~w~Neon wurde an deinem auto angebracht",3500,5);
            	GivePlayerMoney(playerid, -5000);
			}
			if(listitem == 1)
			{
   				SetPVarInt(playerid, "neon", 1);
       			SetPVarInt(playerid, "green", CreateDynamicObject(18649,0,0,0,0,0,0));
       			SetPVarInt(playerid, "green1", CreateDynamicObject(18649,0,0,0,0,0,0));
       			AttachObjectToVehicle(GetPVarInt(playerid, "green"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
          		AttachObjectToVehicle(GetPVarInt(playerid, "green1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
          		GameTextForPlayer(playerid, "~g~Green ~w~Neon wurde an deinem auto angebracht",3500,5);
          		GivePlayerMoney(playerid, -5000);
			}
			if(listitem == 2)
			{
			    SetPVarInt(playerid, "neon", 1);
       			SetPVarInt(playerid, "yellow", CreateDynamicObject(18650,0,0,0,0,0,0));
          		SetPVarInt(playerid, "yellow1", CreateDynamicObject(18650,0,0,0,0,0,0));
            	AttachObjectToVehicle(GetPVarInt(playerid, "yellow"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
             	AttachObjectToVehicle(GetPVarInt(playerid, "yellow1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "~y~Yellow~w~ Neon wurde an deinem auto angebracht",3500,5);
				GivePlayerMoney(playerid, -5000);
			}
			if(listitem == 3)
			{
   				SetPVarInt(playerid, "neon", 1);
   				SetPVarInt(playerid, "white", CreateDynamicObject(18652,0,0,0,0,0,0));
   				SetPVarInt(playerid, "white1", CreateDynamicObject(18652,0,0,0,0,0,0));
       			AttachObjectToVehicle(GetPVarInt(playerid, "white"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
          		AttachObjectToVehicle(GetPVarInt(playerid, "white1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                GameTextForPlayer(playerid, "~w~White~w~ Neon wurde an deinem auto angebracht",3500,5);
                GivePlayerMoney(playerid, -5000);
			}
			if(listitem == 4)
			{
   				SetPVarInt(playerid, "neon", 1);
     			SetPVarInt(playerid, "pink", CreateDynamicObject(18651,0,0,0,0,0,0));
        		SetPVarInt(playerid, "pink1", CreateDynamicObject(18651,0,0,0,0,0,0));
          		AttachObjectToVehicle(GetPVarInt(playerid, "pink"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(GetPVarInt(playerid, "pink1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "~p~Pink~w~ Neon wurde an deinem auto angebracht",3500,5);
				GivePlayerMoney(playerid, -5000);
			}
			if(listitem == 5)
			{
	   			DestroyObject(GetPVarInt(playerid, "blue"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "blue1"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "green"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "green1"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "yellow"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "yellow1"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "white"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "white1"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "pink"));
	            DeletePVar(playerid, "neon");
	            DestroyObject(GetPVarInt(playerid, "pink1"));
	            DeletePVar(playerid, "neon");
	            GameTextForPlayer(playerid, "~g~Das beon wurde von deinem Auto entfernt",3500,5);
	            GivePlayerMoney(playerid, -5000);

		}
 	}
	return 1;
    }*/
    if(dialogid == DIALOG_HILFE)
    {
        if(response)
        {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, DIALOG_H1, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 1", "/stats {FF0000}(Zeigt Statistik an)\n/buylevel {FF0000}(Level kaufen)\n/upgrade {FF0000}(Fähigkeiten Upgrade)\n/time {FF0000}(Aktuelle Uhrzeit)\n/buy {FF0000}(Sachen im 24/7 kaufen)\n/stake {FF0000}(Drogen / Mats aus Savebox holen)\n/put {FF0000}(Drogen / Mats in Savebox reinlegen", "Zurück", "Beenden");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_H2, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 2", "/showlicenses {FF0000}(Lizensen einem Spieler zeigen)\n/buygun {FF0000}(Waffen im Waffenladen kaufen)\n/skill {FF0000}(Skills anzeigen)\n/lotto {FF0000}(Lottonummer kaufen)\n/leader {FF0000}(Fraktionsleader anzeigen)\n/usedrugs {FF0000}(Drogen einnehmen)\n/service {FF0000}(Verfügbare Service anzeigen)", "Zurück", "Beenden");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, DIALOG_H3, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 3", "/report {FF0000}(Admins erreichen)\n/eject {FF0000}(Spieler aus Auto rausschmeißen)\n/serverinfo {FF0000}(Serverinformationen)\n/members {FF0000}(Eigene Frakmember online)\n/fahrlehrer {FF0000}(Fahrlehrer anzeigen)\n/mitglieder {FF0000}(Frakmember online)\n/tasche {FF0000}(Tasche ansehen)\n/dc {FF0000}(Checkpoint löschen)", "Zurück", "Beenden");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, DIALOG_H4, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 4", "/give {FF0000}(Gegenstände u.ä. anderen geben)\n/navi {FF0000}(GPS aufrufen)\n/s {FF0000}(Schreien}\n/w {FF0000}(Zu Spieler flüstern)\n/ad {FF0000}(Werbung schreiben)\n/call {FF0000}(Spieler anrufen)\n/atm {FF0000}(ATM Menü aufrufen, vor einem ATM)\n/bank {FF0000}Bankmenü aufrufen, in Bank)", "Zurück", "Beenden");
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pJob] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREEN, "Du brauchst einen Job um Hilfe zu bekommen!");
				}
			    if(PlayerInfo[playerid][pJob] == 1)
			    {
					ShowPlayerDialog(playerid, DIALOG_H51, DIALOG_STYLE_LIST, "{FFFFFF}Detektiv-Befehle", "/find {FF0000}(Spieler aufspüren)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 3)
				{
				    ShowPlayerDialog(playerid, DIALOG_H52, DIALOG_STYLE_LIST, "{FFFFFF}Huren-Befehle", "/sex", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
					ShowPlayerDialog(playerid, DIALOG_H53, DIALOG_STYLE_LIST, "{FFFFFF}Drogendealer-Befehle", "/selldrugs {FF0000}(Drogen verkaufen)\n/get drugs {FF0000}(Drogen kaufen)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 5)
				{
				    ShowPlayerDialog(playerid, DIALOG_H54, DIALOG_STYLE_LIST, "{FFFFFF}Carjacker-Befehle", "/caraufbrechen {FF0000}(Ein Auto aufbrechen)\n/dropcar {FF0000}(Auto abgeben)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 8)
				{
				    ShowPlayerDialog(playerid, DIALOG_H55, DIALOG_STYLE_LIST, "{FFFFFF}Bodygurad-Befehle", "/guard", "Zurück", "Beenden");
				}
	            if(PlayerInfo[playerid][pJob] == 9)
	            {
					ShowPlayerDialog(playerid, DIALOG_H56, DIALOG_STYLE_LIST, "{FFFFFF}Waffendealer-Befehle", "/materials\n/sellgun", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 12)
				{
				    ShowPlayerDialog(playerid, DIALOG_H57, DIALOG_STYLE_LIST, "{FFFFFF}Boxer-Befehle", "/fight\n/boxstats", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 14)
				{
				    ShowPlayerDialog(playerid, DIALOG_H58, DIALOG_STYLE_LIST, "{FFFFFF}Busfahrer-Befehle", "/fare", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 15)
				{
				    ShowPlayerDialog(playerid, DIALOG_H59, DIALOG_STYLE_LIST, "{FFFFFF}Zeitungsjunge-Befehle", "/papers\n/bring\n/deliver", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 16)
				{
				    ShowPlayerDialog(playerid, DIALOG_H513, DIALOG_STYLE_LIST, "{FFFFFF}Piloten-Befehle", "/waren", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 17)
				{
				    ShowPlayerDialog(playerid, DIALOG_H510, DIALOG_STYLE_LIST, "{FFFFFF}Müllmann-Befehle", "/starten", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 18)
				{
				    ShowPlayerDialog(playerid, DIALOG_H511, DIALOG_STYLE_LIST, "{FFFFFF}Fischer-Befehle", "/fishhelp", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_H512, DIALOG_STYLE_LIST, "{FFFFFF}Pizzalieferanz-Befehle", "/sellpizza", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
				    ShowPlayerDialog(playerid,DIALOG_H14, DIALOG_STYLE_LIST, "{FFFFFF}Farmer-Befehle", "/ernten (im Mähdrescher an der Drogenfarm)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 2)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "=========[ANWALT]=========");
				    SendClientMessage(playerid, COLOR_ORANGE, "/befreien, /erlaubnis, /anwälte");
				    SendClientMessage(playerid, COLOR_ORANGE, "Mit dem Beruf Anwalt kannst du im LSPD jemanden befreien");
				    SendClientMessage(playerid, COLOR_ORANGE, "Bitte einen Polizisten dich reinzulassen und gehe zum i bei den Zellen");
				    SendClientMessage(playerid, COLOR_YELLOW, "==========================");
				}
				if(PlayerInfo[playerid][pJob] == 7)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "========[MECHANIKER]=======");
				    SendClientMessage(playerid, COLOR_ORANGE, "/repair , /refill um den Usern zu helfen");
				    SendClientMessage(playerid, COLOR_ORANGE, "Du kannst das Auto Reparieren und wieder auftanken");
				    SendClientMessage(playerid, COLOR_YELLOW, "===========================");
				}
			}
			if(listitem == 5)
			{
			    ShowPlayerFractionCommands(playerid);
				ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Hilfreiche Befehle 1\nHilfreiche Befehle 2\nHilfreiche Befehle 3\nHilfreiche Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges", "Auswählen", "Abbrechen");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, DIALOG_H6, DIALOG_STYLE_LIST, "{FFFFFF}Sonstige Befehle", "/carhelp\n/telehilfe\n/househelp\n/renthelp\n/businesshelp\n/leaderhelp\n/regeln", "Zurück", "Beenden");
			}
			if(listitem == 7)
			{
				ShowPlayerDialog(playerid, DIALOG_H7, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donator", "Was ist Ein Donator, Ein Donator ist eine Person die den Server Unterstützt!, Um Mehr zu erfahren Tippe /donatorhelp", "Zurück", "Beenden");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid, DIALOG_H8, DIALOG_STYLE_MSGBOX, "{FFFFFF}ServerInformationen", "Tippe /serverinfo um mehr von uns zu Erfahren!", "Zurück", "Beenden");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, DIALOG_H9, DIALOG_STYLE_MSGBOX, "{FFFFFF}Teamspeak", "Du hast ein Problem ?\nKein Admin ist on ? Dann joine auf unseren Teamspeak\nAdresse findest du unter /teamspeakip", "Zurück", "Beenden");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, DIALOG_H10, DIALOG_STYLE_MSGBOX, "{FFFFFF}Gangfight", "Ein Gangfight ist ein Kampf zwischen Zwei Fraktionen,\nDie sich gegenseitig beschießen und um ein Gebiet\nKämpfen\nAngriffs Befehl: /invade", "Zurück", "Beenden");
			}
		}
	}
    if(dialogid == DIALOG_H1 || dialogid == DIALOG_H2 || dialogid == DIALOG_H3 || dialogid == DIALOG_H4 || dialogid == DIALOG_H6 || dialogid == DIALOG_H7 || dialogid == DIALOG_H8 || dialogid == DIALOG_H9 || dialogid == DIALOG_H10)
    {
		if(response == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Allgemeine Befehle 1\nAllgemeine Befehle 2\nAllgemeine Befehle 3\nAllgemeine Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges\nDonator\nServer-Informationen\nTeamspeak\nGangfight", "Auswählen", "Abbrechen");
		}
	}

    if(dialogid == DIALOG_H51 || dialogid == DIALOG_H52 || dialogid == DIALOG_H53 || dialogid == DIALOG_H54 || dialogid == DIALOG_H55 || dialogid == DIALOG_H56 || dialogid == DIALOG_H57 || dialogid == DIALOG_H58 || dialogid == DIALOG_H59 || dialogid == DIALOG_H510 || dialogid == DIALOG_H511 || dialogid == DIALOG_H512 || dialogid == DIALOG_H513 || dialogid == DIALOG_H14)
    {
		if(response == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Hilfreiche Befehle 1\nHilfreiche Befehle 2\nHilfreiche Befehle 3\nHilfreiche Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges", "Auswählen", "Abbrechen");
		}
	}

	if(dialogid == DIALOG_ZÖLLE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid, CLOSEZOLLLS, DIALOG_STYLE_LIST, "{FFFFFF}Los Santos Zoll", "Zoll öffnen\nZoll schließen", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, CLOSEZOLLLV, DIALOG_STYLE_LIST, "{FFFFFF}Los Venturas", "Zoll schließen\nZoll öffnen", "Auswählen", "Abbrechen");
	        }
	    }
	}

	if(dialogid == CLOSEZOLLLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            MoveObject(lszoll1, 68.300003051758, -1526.5, 2.9000000953674, 3);
				MoveObject(lszoll2, 67.900001525879, -1535.8000488281, 2.7999999523163, 3);
				MoveObject(lszoll3, 67.699996948242, -1541.4000244141, 2.9000000953674, 3);
				MoveObject(lszoll4, 35.599998474121, -1522.1999511719, 3.4000000953674, 3);
				MoveObject(lszoll5, 35.099998474121, -1537.0999755859, 2.5999999046326, 3);
				MoveObject(lszoll6, 35.200000762939, -1529.9000244141, 3.0999999046326, 3);
				if(IsACop(playerid))
				{
				    SendClientMessage(playerid, COLOR_RED, "Der Zoll LS wurde wieder freigegeben!");
				}
	        }
	        if(listitem == 1)
	        {
				MoveObject(lszoll1, 68.300003051758, -1526.5, 4.6999998092651, 3);
				MoveObject(lszoll2, 67.900001525879, -1535.8000488281, 4.8000001907349, 3);
				MoveObject(lszoll3, 67.699996948242, -1541.4000244141, 4.6999998092651, 3);
				MoveObject(lszoll4, 35.599998474121, -1522.1999511719, 5.0999999046326, 3);
				MoveObject(lszoll5, 35.099998474121, -1537.0999755859, 5.0999999046326, 3);
				MoveObject(lszoll6, 35.200000762939, -1529.9000244141, 5.0999999046326, 3);
				if(IsACop(playerid))
				{
				    SendClientMessage(playerid, COLOR_GREEN, "Der Zoll LS wurde geschlossen!");
				}
	        }
	    }
	}
	
	if(dialogid == CLOSEZOLLLV)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
				MoveObject(lvzoll1, 1719.5, 511.5, 28.700000762939, 3);
				MoveObject(lvzoll2, 1728.4000244141, 508.60000610352, 28.700000762939, 3);
				MoveObject(lvzoll3, 1737.3000488281, 505.70001220703, 28.700000762939, 3);
				MoveObject(lvzoll4, 1746.1999511719, 502.79998779297, 28.700000762939, 3);
				MoveObject(lvzoll5, 1763.5, 550.5, 25.700000762939, 3);
				MoveObject(lvzoll6, 1754.5999755859, 553.40002441406, 25.700000762939, 3);
				MoveObject(lvzoll7, 1745.6999511719, 556.29998779297, 25.700000762939, 3);
				MoveObject(lvzoll8, 1736.8000488281, 559.20001220703, 25.700000762939, 3);
				if(IsACop(playerid))
				{
				    SendClientMessage(playerid, COLOR_RED, "Der Zoll LV wurde geschlossen!");
				}
		    }
		    if(listitem == 1)
		    {
				MoveObject(lvzoll1, 1719.5, 511.5, 26, 3);
				MoveObject(lvzoll2, 1728.4000244141, 508.60000610352, 26.200000762939, 3);
				MoveObject(lvzoll3, 1737.3000488281, 505.70001220703, 26, 3);
				MoveObject(lvzoll4, 1746.1999511719, 502.79998779297, 25.700000762939, 3);
				MoveObject(lvzoll5, 1763.5, 550.5, 23.200000762939, 3);
				MoveObject(lvzoll6, 1754.5999755859, 553.40002441406, 23.200000762939, 3);
				MoveObject(lvzoll7, 1745.6999511719, 556.29998779297, 23.5, 3);
				MoveObject(lvzoll8, 1736.8000488281, 559.20001220703, 23.700000762939, 3);
				if(IsACop(playerid))
				{
				    SendClientMessage(playerid, COLOR_GREEN, "Der Zoll LV wurde wieder freigegeben!");
				}
			}
		}
	}
	
	if(dialogid == KAMPFSTYLES)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetPlayerMoney(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
				GivePlayerMoney(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			}
			if(listitem == 1)
			{
			    if(GetPlayerMoney(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
			    GivePlayerMoney(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
			}
			if(listitem == 2)
			{
			    if(GetPlayerMoney(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
			    GivePlayerMoney(playerid, -5000);
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			}
			if(listitem == 3)
			{
			    if(GetPlayerMoney(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
			    GivePlayerMoney(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
			}
			if(listitem == 4)
			{
			    if(GetPlayerMoney(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
			    GivePlayerMoney(playerid, -5000);
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
			}
			if(listitem == 5)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
			}
		}
	}
//===== NEWS =====//
	if(dialogid == NEWS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {//dach
	            SetPlayerPos(playerid, 1649.4564,-1641.6837,83.7813);
				GameTextForPlayer(playerid, "~g~Helilandeplatz der News Zentrale", 5000, 3);
			}
			if(listitem == 1)
			{
			    SetPlayerPos(playerid, 1658.7493,-1691.7506,15.6094);
			    GameTextForPlayer(playerid,"~g~Parkhaus der News Zentrale", 5000, 3);
			}
			if(listitem == 2)
			{
			    SetPlayerPos(playerid, 1654.1954,-1654.9637,22.5156);
			    GameTextForPlayer(playerid,"~g~News Zentrale", 5000, 3);
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG2, DIALOG_STYLE_INPUT, "DM in NODM", "Du möchtest einen User wegen Deahtmatch in NODM bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG3, DIALOG_STYLE_INPUT, "DM auf Dienstleister", "Du möchtest einen User wegen Deathmatch auf Dienstleister einsperren.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG4, DIALOG_STYLE_INPUT, "DM auf Neulinge", "Du möchtest einen User wegen Deathmatch auf Neulingen bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG5, DIALOG_STYLE_INPUT, "DM auf Zivilisten", "Du möchtest einen User wegen Deathmatch auf Zivilisten bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG6, DIALOG_STYLE_INPUT, "Sinnloses DM auf Cops", "Du möchtest einen User wegen sinnlosem Deathmatch auf Cops bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG7, DIALOG_STYLE_INPUT, "DM im Bundestag", "Du möchtest einen User wegen Deathmatch im Bundestag bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG8, DIALOG_STYLE_INPUT, "Knast-Deathmatch", "Du möchtest einen User wegen Knast Deathmatch bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, DIALOG_BESTRAFUNG9, DIALOG_STYLE_INPUT, "DM auf Admin on Duty", "Du möchtest einen User wegen Deathmatch auf Admin on Duty bestrafen.\nGebe hier die ID des Users ein.", "Bestrafen", "Abbrechen");
			}
		}
	}
	if(dialogid == DIALOG_KAMMER)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, DIALOG_KAMMER_WAFFEN1, DIALOG_STYLE_LIST, "Waffen", "Messer (20 Materialien)\nDesert Eagle (100 Materialien)\nM4 (200 Materialien)\nSniper (400 Materialien)", "Auswählen", "Abbrechen");
			}
			else if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_KAMMER_DROGEN1, DIALOG_STYLE_LIST, "Drogen", "Drogen reinlegen\nDrogen rausnehmen", "Auswählen", "Abbrechen");
			}
			else if(listitem == 2)
			{
			    format(ALLSTRING, sizeof(ALLSTRING), "Du hast %d Fraktions-Materialien dabei.\nWie viele willst du in die Fraktionskammer reinlegen?", FrakMatsHolding[playerid]);
			    ShowPlayerDialog(playerid, DIALOG_KAMMER_FMATS, DIALOG_STYLE_INPUT, "Fraktions Materialien", ALLSTRING, "Reinlegen", "Abbrechen");
			}
		}
	}
	if(dialogid == DIALOG_KAMMER_WAFFEN1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir ein Messer aus der Fraktionskammer genommen (20 Materialien)");
				GivePlayerWeapon(playerid, 4, 1);
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}
				SaveFrakMats();
			}
			if(listitem == 1)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 100 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine Desert Eagle aus der Fraktionskammer genommen (100 Materialien)");
				GivePlayerWeapon(playerid, 24, 300);
				if(frak == 5)
				{
					LCNMats -= 100;
				}
				else if(frak == 6)
				{
				    YakMats -= 100;
				}
				else if(frak == 12)
				{
				    TriadMats -= 100;
				}
				else if(frak == 13)
				{
				    GroveMats -= 100;
				}
				else if(frak == 14)
				{
				    BallasMats -= 100;
				}
				else if(frak == 15)
				{
				    BikerMats -= 100;
				}
				else if(frak == 16)
				{
				    VagosMats -= 100;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 100;
				}
				else if(frak == 19)
				{
				    RSMats -= 100;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 100;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 100;
				}
				SaveFrakMats();
			}
			if(listitem == 2)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 200 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine M4 aus der Fraktionskammer genommen (200 Materialien)");
				GivePlayerWeapon(playerid, 31, 800);
				if(frak == 5)
				{
					LCNMats -= 200;
				}
				else if(frak == 6)
				{
				    YakMats -= 200;
				}
				else if(frak == 12)
				{
				    TriadMats -= 200;
				}
				else if(frak == 13)
				{
				    GroveMats -= 200;
				}
 				else if(frak == 14)
				{
				    BallasMats -= 200;
				}
 				else if(frak == 15)
				{
				    BikerMats -= 200;
				}
				else if(frak == 16)
				{
				    VagosMats -= 200;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 200;
				}
				else if(frak == 19)
				{
				    RSMats -= 200;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 200;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 200;
				}
				SaveFrakMats();
			}
			if(listitem == 3)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 400 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine M4 aus der Fraktionskammer genommen (200 Materialien)");
				GivePlayerWeapon(playerid, 34, 50);
				if(frak == 5)
				{
					LCNMats -= 400;
				}
				else if(frak == 6)
				{
				    YakMats -= 400;
				}
				else if(frak == 12)
				{
				    TriadMats -= 400;
				}
				else if(frak == 13)
				{
				    GroveMats -= 400;
				}
				else if(frak == 14)
				{
				    BallasMats -= 400;
				}
				else if(frak == 15)
				{
				    BikerMats -= 400;
				}
				else if(frak == 16)
				{
				    VagosMats -= 400;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 400;
				}
				else if(frak == 19)
				{
				    RSMats -= 400;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 400;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 400;
				}
				SaveFrakMats();
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen!");
		}
	}
	if(dialogid == DIALOG_KAMMER_DROGEN3)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new frak;
	            new val = strval(inputtext);
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(val < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens 1 Gramm Drogen rausholen");
					return 1;
				}
				if(frak == 5 && LCNDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "*Du hast %d Drogen aus der Fraktionskammer rausgeholt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
				PlayerInfo[playerid][pDrugs] += val;
				if(frak == 5)
				{
					LCNDrugs -= val;
				}
				else if(frak == 6)
				{
				    YakDrugs -= val;
				}
				else if(frak == 12)
				{
				    TriadDrugs -= val;
				}
				else if(frak == 13)
				{
				    GroveDrugs -= val;
				}
				else if(frak == 14)
				{
				    BallasDrugs -= val;
				}
				else if(frak == 14)
				{
				    BikerDrugs -= val;
				}
				else if(frak == 16)
				{
				    VagosDrugs -= val;
				}
				else if(frak == 17)
				{
				    AztecaDrugs -= val;
				}
				else if(frak == 19)
				{
				    RSDrugs -= val;
				}
				else if(frak == 20)
				{
				    TerrorDrugs -= val;
				}
				else if(frak == 23)
				{
				    BrigadaDrugs -= val;
				}
				SaveFrakDrugs();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Falsche Eingabe!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
	}
	if(dialogid == DIALOG_KAMMER_DROGEN2)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new frak;
	            new val = strval(inputtext);
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(val < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens 1 Gramm Drogen reinlegen");
					return 1;
				}
				if(val > PlayerInfo[playerid][pDrugs])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viele Drogen dabei!");
				    return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "*Du hast %d Drogen in die Fraktionskammer reingelegt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
				PlayerInfo[playerid][pDrugs] -= val;
				if(frak == 5)
				{
					LCNDrugs += val;
				}
				else if(frak == 6)
				{
				    YakDrugs += val;
				}
				else if(frak == 12)
				{
				    TriadDrugs += val;
				}
				else if(frak == 13)
				{
				    GroveDrugs += val;
				}
				else if(frak == 14)
				{
				    BallasDrugs += val;
				}
				else if(frak == 15)
				{
				    BikerDrugs += val;
				}
				else if(frak == 16)
				{
				    VagosDrugs += val;
				}
				else if(frak == 17)
				{
				    AztecaDrugs += val;
				}
				else if(frak == 19)
				{
				    RSDrugs += val;
				}
				else if(frak == 20)
				{
				    TerrorDrugs += val;
				}
				else if(frak == 23)
				{
				    BrigadaDrugs += val;
				}
				SaveFrakDrugs();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Falsche Eingabe!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
	}
	if(dialogid == DIALOG_KAMMER_DROGEN1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(ALLSTRING, sizeof(ALLSTRING), "Du hast %d Drogen dabei.\nWie viele willst du in die Fraktionskammer reinlegen?", PlayerInfo[playerid][pDrugs]);
	            ShowPlayerDialog(playerid, DIALOG_KAMMER_DROGEN2, DIALOG_STYLE_INPUT, "Drogen reinlegen", ALLSTRING, "Reinlegen", "Abbrechen");
			}
			else if(listitem == 1)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", YakDrugs);
				}
				else if(frak == 12)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", TriadDrugs);
				}
				else if(frak == 13)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", AztecaDrugs);
				}
				else if(frak == 19)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", RSDrugs);
				}
				else if(frak == 20)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", TerrorDrugs);
				}
				else if(frak == 23)
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Deine Fraktion hat %d Gramm Drogen in der Fraktionskammer.\nWie viele willst du rausnehmen?", BrigadaDrugs);
				}
				ShowPlayerDialog(playerid, DIALOG_KAMMER_DROGEN3, DIALOG_STYLE_INPUT, "Drogen rausnehmen", ALLSTRING, "Rausnehmen", "Abbrechen");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen!");
		}
	}
	if(dialogid == DIALOG_KAMMER_FMATS)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new frak;
	            new val = strval(inputtext);
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(val < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens eine Fraktions-Materialie reinlegen!");
					return 1;
				}
				if(val > FrakMatsHolding[playerid])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viele Fraktions-Materialien dabei!");
				    return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "*Du hast %d Fraktions-Materialien in die Fraktionskammer reingelegt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Mit /frakkammermats siehst du wie viele Materialien deine Fraktion hat.");
				FrakMatsHolding[playerid] -= val;
				if(frak == 5)
				{
					LCNMats += val;
				}
				else if(frak == 6)
				{
				    YakMats += val;
				}
				else if(frak == 12)
				{
				    TriadMats += val;
				}
				else if(frak == 13)
				{
				    GroveMats += val;
				}
				else if(frak == 14)
				{
				    BallasMats += val;
				}
				else if(frak == 14)
				{
				    BikerMats += val;
				}
				else if(frak == 16)
				{
				    VagosMats += val;
				}
				else if(frak == 17)
				{
				    AztecaMats += val;
				}
				else if(frak == 19)
				{
				    RSMats += val;
				}
				else if(frak == 20)
				{
				    TerrorMats += val;
				}
				else if(frak == 23)
				{
				    BrigadaMats += val;
				}
				SaveFrakMats();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Falsche Eingabe!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG2)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 1 Stunde ins Prison eingesperrt, Grund: Deathmatch in NODM", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
				    PlayerInfo[Player][pJailTime] += 3600;
				    PlayerInfo[Player][pJailed] = 1;
				    Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG3)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 1 Stunde ins Prison eingesperrt, Grund: Deathmatch auf Dienstleister", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
				    PlayerInfo[Player][pJailTime] += 3600;
				    PlayerInfo[Player][pJailed] = 1;
				    Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG4)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 3 Stunden gebannt, Grund: Deathmatch auf Neulinge", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
				    SendClientMessage(Player, COLOR_LIGHTRED, "*Du hast eine Verwarnung bekommen, Grund: Deathmatch auf Neulinge");
        			TBan(Player,180);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG5)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 1 Stunde ins Prison eingesperrt, Grund: Deathmatch auf Zivilisten", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
        			PlayerInfo[Player][pJailTime] += 3600;
        			PlayerInfo[Player][pJailed] = 1;
        			Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG6)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 30 Minuten ins Prison eingesperrt, Grund: Sinnloses Deathmatch auf Cops", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
        			PlayerInfo[Player][pJailTime] += 1800;
        			PlayerInfo[Player][pJailed] = 1;
        			Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG7)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s wurde von %s für 30 Minuten ins Prison eingesperrt, Grund: Deathmatch im Bundestag", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
        			PlayerInfo[Player][pJailTime] += 1800;
        			PlayerInfo[Player][pJailed] = 1;
        			Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG8)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s's Gefängniszeit wurde von %s um 10 Minuten verlängert, Grund: Knast-Deathmatch", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
        			PlayerInfo[Player][pJailTime] += 600;
        			Kick(Player);
				}
			}
		}
	}
	if(dialogid == DIALOG_BESTRAFUNG9)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new Player;
	            new giveplayer[MAX_PLAYER_NAME];
	            new sendername[MAX_PLAYER_NAME];
				Player = strval(inputtext);
				GetPlayerName(Player, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(IsPlayerConnected(Player))
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "*%s's Gefängniszeit wurde von %s um 10 Minuten verlängert, Grund: Deathmatch auf Admin on Duty", giveplayer, sendername);
				    SendClientMessageToAll(COLOR_LIGHTRED, ALLSTRING);
        			PlayerInfo[Player][pJailTime] += 1200;
        			PlayerInfo[Player][pJailed] = 1;
        			Kick(Player);
				}
			}
		}
	}

//===== BANK =====//
	if(dialogid == BANK)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s,sizeof(s),"Du hast %d$ auf dein Bankkonto",bank);
				ShowPlayerDialog(playerid,Kontostand,DIALOG_STYLE_MSGBOX,"Kontostand",s,"Zurück","Beenden");
			}
			if(listitem == 1)
			{
				new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s,sizeof(s),"Kontostand: %d$\nWie viel möchtest du auf dein Konto einzahlen?",bank);
				ShowPlayerDialog(playerid,Einzahlen,DIALOG_STYLE_INPUT,"Einzahlen",s,"Einzahlen","Zurück");
			}
			if(listitem == 2)
			{
			    
	  			new bank = PlayerInfo[playerid][pAccount];
		    	new s[128];
		    	format(s, sizeof(s), "Kontostand: %d$\nWie viel möchstes du von deinem Konto abheben?", bank);
				ShowPlayerDialog(playerid,Auszahlen, DIALOG_STYLE_INPUT,"Abheben", s, "Abheben", "Zurück");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pLevel] < 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Das kann man erst ab Level 2!");
					return 1;
				}
			    new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s, sizeof(s), "Kontostand: %d$\nGebe bitte die ID des Users an, an den du Überweisen willst.", bank);
				ShowPlayerDialog(playerid,Uberweisen, DIALOG_STYLE_INPUT, "Bank Überweisung", s, "Weiter", "Zurück");
			}
			if(listitem == 4)
			{
				OnPlayerCommandText(playerid, "/ueberfall");
			}
		}
	}
	if(dialogid == Kontostand)
	{
	    if(response)
	    {
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Einzahlen)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new val = strval(inputtext);
				if(GetPlayerMoney(playerid) == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Ungültig!");
					return 1;
				}
				if(val < 0 ||val > 10000000)
				{
			 		SendClientMessage(playerid, COLOR_GRAD1," Bitte nur Summen in Höhe von 1 bis 10 Million Dollar!");
					return 1;
				}
				if(val > GetPlayerMoney(playerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viel Geld hast du nicht!");
					return 1;
				}
				if(val == 999999999999999)
				{
					SendClientMessage(playerid, COLOR_RED, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 888888888888888)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;                                }
				if(val == 777777777777777)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 666666666666666)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
					}
				if(val == 555555555555555)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 444444444444444)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 333333333333333)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 222222222222222)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 111111111111111)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				new s[128];
				GivePlayerMoney(playerid,-val);
				PlayerInfo[playerid][pAccount]+= val;
				ConsumingMoney[playerid] = 1;
				format(s, sizeof(s), "Du hast %d$ in dein Konto eingezahlt. Neuer Kontostand: %d$", val, PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GREEN, s);
			}
			else
			{
			SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Auszahlen)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new val = strval(inputtext);
				if(GetPlayerMoney(playerid) == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Ungültig!");
					return 1;
				}
				if(val < 0 ||val > 10000000)
				{
			 		SendClientMessage(playerid, COLOR_GRAD1," Bitte nur Summen in Höhe von 1 bis 10 Million Dollar!");
					return 1;
				}
				if(val > PlayerInfo[playerid][pAccount])
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast zu wenig Geld!");
					return 1;
				}
				if(val == 999999999999999)
				{
					SendClientMessage(playerid, COLOR_RED, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 888888888888888)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;                                }
				if(val == 777777777777777)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 666666666666666)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
					}
				if(val == 555555555555555)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 444444444444444)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 333333333333333)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 222222222222222)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				if(val == 111111111111111)
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Schäm dich du Bug-User!");
					Kick(playerid);
					return 1;
				}
				new s[128];
				GivePlayerMoney(playerid, val);
				PlayerInfo[playerid][pAccount] -= val;
				ConsumingMoney[playerid] = 1;
				format(s, sizeof(s), "Du hast %d$ von deinem Konto ausgezahlt. Neuer Kontostand: %d$", val, PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GREEN, s);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Uberweisen)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
				Spieler = strval(inputtext);
				new giveplayer[MAX_PLAYER_NAME];
				new s[128];
				GetPlayerName(Spieler, giveplayer, sizeof(giveplayer));
				if(IsPlayerConnected(Spieler))
				{
				    format(s, sizeof(s), "Wie viel willst du an %s überweisen? Aktueller Kontostand: %d", giveplayer, PlayerInfo[playerid][pAccount]);
				    ShowPlayerDialog(playerid, Uberweisen2, DIALOG_STYLE_INPUT, "Überweisung", s, "Überweisen", "Abbrechen");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Derzeit ist dieser Spieler nicht Online!");
				}
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Uberweisen2)
	{
	    if(response)
	    {
			if(IsNumeric(inputtext) && strval(inputtext) > 0)
			{
				new val = strval(inputtext);
				if(val > PlayerInfo[playerid][pAccount])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "So viel Geld hast du nicht!");
				    return 1;
				}
				new s[128];
				new sendername[MAX_PLAYER_NAME];
				new giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(Spieler, giveplayer, sizeof(giveplayer));
				PlayerInfo[playerid][pAccount] -= val;
				PlayerInfo[Spieler][pAccount] += val;
				format(s, sizeof(s), "Du hast %s erfolgreich %d$ überweisen.", giveplayer, val);
				SendClientMessage(playerid, COLOR_GREY, s);
				format(s, sizeof(s), "%s hat dir %d$ überwiesen.", sendername, val);
				SendClientMessage(Spieler, COLOR_GREY, s);
				new string[180];
				format(string, sizeof(string), "%s überweist $%d an %s", sendername, val, giveplayer);
    			if(val >= 500000)
				{
					ABroadCast(COLOR_YELLOW,string,1);
				}
				printf("%s", string);
				PayLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Überweisung abgebrochen.");
		}
	}
//===== COPDIALOG ======//
	if(dialogid == DIALOG_COP)
	{
	    if(IsACop(playerid))
	    {
	        if(response == 1)
	        {
        		new giveplayer[MAX_PLAYER_NAME];
       			new sendername[MAX_PLAYER_NAME];
	            new stringn[200];
			    GetPlayerName(pVerbrecher[playerid],giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    if(PlayerInfo[pVerbrecher[playerid]][pJailed] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist bereits im Gefängnis!");
			        return 1;
				}
			    switch (listitem)
				{
					case 0:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Nitro gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Nitro, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Nitro, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 1:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Verstoß gegen die StVO gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Verstoß gg die StVO, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Verstoß gg die StVO, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 2:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Drogen / Materialienbesitz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Drogen / Materialienbesitz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Drogen / Materialienbesitz, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 3:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen versuchtes Kidnapping gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Versuchtes Kidnapping, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Versuchtes Kidnapping, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 4:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 5:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen versuchte Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: versuchte Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: versuchte Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 6:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Beihilfe zur Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beihilfe zur Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beihilfe zur Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 7:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Verweigerung gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Verweigerung, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Verweigerung, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 8:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Behinderung der Justiz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Behinderung der Justiz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Behinderung der Justiz, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 9:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen illegalem Waffenhandel gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: illegaler Waffenhandel, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: illegaler Waffenhandel, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 10:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen Einsperren ins Gangjail gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Einsperren ins Gangjail, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Einsperren ins Gangjail, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 11:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen Beamten-/Zivilistenangriff gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenangriff, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenangriff, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 12:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Entführung gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Entführung, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Entführung, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 13:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Beamten-/Zivilistenbeschuss gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenbeschuss, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenbeschuss, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 14:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Anschlag gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Anschlag, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Anschlag, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 15:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Beamten-/Zivilistenmord gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 4;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenmord, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenmord, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 16:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Bankraub gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 4;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Bankraub, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Bankraub, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 17:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 5 Wanteds wegen Präsidentenbeschuss gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 5;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Präsidentenbeschuss, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 5, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Präsidentenbeschuss, Zeuge: %s, Vergebene Wanteds: 5", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 18:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 6 Wanteds wegen Präsidentenmord gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Präsidentenmord, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 6, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Präsidentenmord, Zeuge: %s, Vergebene Wanteds: 6", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 19:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Ausbruch aus Alcatraz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Ausbruch aus Alcatraz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Ausbruch aus Alcatraz, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 20:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Ausbruchshilfe aus Alcatraz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Ausbruchshilfe aus Alcatraz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_LIGHTRED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Ausbruchshilfe aus Alcatraz, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
				}
			}
		}
	}


//===== BSN MENÜ =====//
	if(dialogid == BSN)
	{
	    if(response)
	    {
	        new Float:health;
	        if(listitem == 0)
	        {
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
	            SendClientMessage(playerid, COLOR_GREEN, "3 Chicken Nuggets für 3$ gekauft, schöne Weiterfahrt.");
	            GivePlayerMoney(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
	            UnFreezePlayer(playerid);
			}
			if(listitem == 1)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "12 Chicken Nuggets für 10$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -10);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+7);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 2)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "20 Chicken Nuggets für 10$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -16);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+9);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 3)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Portion Pommes für 2$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -2);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 4)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Cheesburger für 5$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -5);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+10);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 5)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Chickenburger für 8$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -8);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+15);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 6)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Big Mac für 10$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -10);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+30);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 7)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Cola für 3$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 8)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Fanta für 3$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 9)
			{
				if(GetPlayerHealth(playerid, health) >= 100)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Sprite für 3$ gekauft, schöne Weiterfahrt.");
			    GivePlayerMoney(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
		}
	}

//===== SHOWME =====//
	if(dialogid == DIALOG_SHOWME)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        SetPlayerColor(playerid, 0xFFFF00AA); //Gelb
		        SendClientMessage(playerid, COLOR_YELLOW, "Showme eingestellt");
		    }
		    if(listitem == 1)
		    {
                SetPlayerColor(playerid, 0xAA3333AA); //Rot
                SendClientMessage(playerid, COLOR_RED, "Showme eingestellt");
			}
			if(listitem == 2)
			{
			    SetPlayerColor(playerid, 0x33AA33AA); //Grün
			    SendClientMessage(playerid, COLOR_GREEN, "Showme eingestellt");
			}
			if(listitem == 3)
			{
			    SetPlayerColor(playerid, 0x0000BBAA); //Blau
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Showme eingestellt");
			}
			if(listitem == 4)
			{
			    SetPlayerColor(playerid, 0xFF66FFAA); //Pink
			    SendClientMessage(playerid, COLOR_GRAD1, "Showme eingestellt (Pink)");
			}
			if(listitem == 5)
			{
			    SetPlayerColor(playerid, 0x00000000); //Schwarz
			    SendClientMessage(playerid, COLOR_BLACK, "Showme eingestellt");
			}
			if(listitem == 6)
			{
			    SetPlayerColor(playerid, 0xFFFFFF00); //Normal/Weiss
			    SendClientMessage(playerid, COLOR_GRAD1, "Showme aus");
			}
		}
	}
//===== UHRENLADEN =====//
	if(dialogid == DIALOG_UHREN)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				BuyUhr(playerid, 0);
			}
			if(listitem == 1)
			{
			    BuyUhr(playerid, 1);
			}
			if(listitem == 2)
			{
			    BuyUhr(playerid, 2);
			}
			if(listitem == 3)
			{
			    BuyUhr(playerid, 3);
			}
			if(listitem == 4)
			{
			    BuyUhr(playerid, 4);
			}
		}
	}
//===== HANDYLADEN =====//
	if(dialogid == DIALOG_HANDY)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, Handys, DIALOG_STYLE_LIST, "Handys", "Nokia 3330 (200$)\nNokia 6500 (500$)\nNokia N95 (1500$)\nSony Ericsson C905 (2000$)\nMotorola Q9h (2500$)\nBlackberry Bold (2500$)\niPhone (3000)\nGoogle HTC Magic 3.5 (3000)\nZurück zum vorherigen Menü", "Kaufen", "Beenden");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, Guthaben, DIALOG_STYLE_LIST, "Guthaben aufladen", "30$ Karte\n60$ Karte\n90$ Karte\nZurueck zum vorherigen Menue", "Auswählen", "Beenden");
			}
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pHandyVer] == 0)
			    {
					ShowPlayerDialog(playerid, Vertrag, DIALOG_STYLE_MSGBOX, "Vertrag kaufen", "Mit einem Vertrag kannst du kostenlos Leute anrufen.\nDu musst dein Handy nicht aufladen.\nAn jedem PayDay werden dir 100$ Handykosten berechnet.\nZum Kaufen eines Vertrags, klicke auf Kaufen", "Kaufen", "Beenden");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du besitzt schon ein Handyvertrag!");
				}
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pHandyVer] == 1)
				{
			    	ShowPlayerDialog(playerid, Vertragk, DIALOG_STYLE_MSGBOX, "Vertrag kündigen", "Wenn du dir sicher bist, dass du deinen Vertrag kündigen willst, klicke auf Kündigen.", "Kündigen", "Beenden");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du hast garkein Handyvertrag!");
				}
			}
		}
	}
	if(dialogid == Handys)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	        	BuyHandy(playerid, 0);
			}
			if(listitem == 1)
			{
				BuyHandy(playerid, 1);
			}
			if(listitem == 2)
			{
			    BuyHandy(playerid, 2);
			}
			if(listitem == 3)
			{
			    BuyHandy(playerid, 3);
			}
			if(listitem == 4)
			{
			    BuyHandy(playerid, 4);
			}
	        if(listitem == 5)
	        {
	            BuyHandy(playerid, 5);
			}
			if(listitem == 6)
			{
			    BuyHandy(playerid, 6);
			}
			if(listitem == 7)
			{
			    BuyHandy(playerid, 7);
			}
			if(listitem == 8)
			{
				ShowPlayerDialog(playerid,DIALOG_HANDY,DIALOG_STYLE_LIST,"Handy Laden","Handy kaufen\nHandy aufladen\nHandyvertrag kaufen\nHandyvertrag kündigen","Auswählen","Abbrechen");
			}
		}
	}
	if(dialogid == Guthaben)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
  				if(PlayerInfo[playerid][pCash] >= 30)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 30;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 30$ aufgeladen.");
		     		GivePlayerMoney(playerid, -30);
			   	}
			   	else
			   	{
			 	 	SendClientMessage(playerid,COLOR_RED, "Du hast nicht genug Geld.");
			   	}
			}
			if(listitem == 1)
			{
  				if(PlayerInfo[playerid][pCash] >= 30)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 60;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 60$ aufgeladen.");
		     		GivePlayerMoney(playerid, -60);
			   	}
			   	else
			   	{
				  	SendClientMessage(playerid,COLOR_RED, "Du hast nicht genug Geld.");
			   	}
			}
			if(listitem == 2)
			{
			  	if(PlayerInfo[playerid][pCash] >= 90)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 90;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 90$ aufgeladen.");
		     		GivePlayerMoney(playerid, -90);
			   	}
			   	else
			   	{
				  	SendClientMessage(playerid,COLOR_RED, " Du hast nicht genug Geld ");
			   	}
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid,DIALOG_HANDY,DIALOG_STYLE_LIST,"Handy Laden","Handy kaufen\nHandy aufladen\nHandyvertrag kaufen\nHandyvertrag kündigen","Auswählen","Abbrechen");
			}
		}
	}
	if(dialogid == Vertrag)
	{
	    if(response == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
 			if(PlayerInfo[playerid][pLevel] >= 2)
	   		{
				SendClientMessage(playerid, COLOR_GREEN, "Herzlichen Glückwunsch, du besitzt nun einen Vertrag.");
				SendClientMessage(playerid, COLOR_GREEN, "Kündigen kannst du ihn hier unter Vertrag kündigen.");
		   		PlayerInfo[playerid][pHandyVer] = 1;
	   		}
	   		else
	   		{
			 	SendClientMessage(playerid , COLOR_LIGHTRED , "Du musst mindestens Level 2 sein, um einen Vertrag besitzen zu können.");
		   	}
		}
	}
	if(dialogid == Vertragk)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
			SendClientMessage(playerid,COLOR_GREEN , "Du hast deinen Vertrag gekündigt.");
  			PlayerInfo[playerid][pHandyVer] = 0;
		}
	}

//===== JOBS =====//
	if(dialogid == DIALOG_iJOBS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, WD,DIALOG_STYLE_MSGBOX,"Job WaffenDealer", "Als WaffenDealer kannst du mit Materialien Waffen verkaufen / dir selber geben.\nDie Materialien sind illegal also vorsicht vor Cops!\nUm WaffenDealer zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DD,DIALOG_STYLE_MSGBOX,"Job DrogenDealer", "Als DrogenDealer kannst du an Leuten Drogen verkaufen.\nDiese musst du vorher in der Crackhöhle nähe LS Gym kaufen.\nUm DrogenDealer zu werden, klicke auf Annehmmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, HURE,DIALOG_STYLE_MSGBOX, "Job Hure", "Als Hure kannst du mit Leuten Sex haben, diese bekommen dann ein wenig HP mehr.\nAber Achtung, mit einem niedrigen Skill verteilt man viele Krankheiten!\nMit Krankheiten verliert man immer HP,\nbis man stirbt, außer man geht zum Krankenhaus\nUm Hure zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, AUTODIEB,DIALOG_STYLE_MSGBOX, "Job Autodieb", "Als Autodieb musst du Autos klauen und diese dann zum Kran in SF bringen.\nNiedrigster Lohn pro Car (Skill 1): 1200$-2000$\nHöchster Lohn pro Car (Skill 5): 6000$\nUm Autodieb zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, FARMER, DIALOG_STYLE_MSGBOX, "Farmer", "An der Farm in Blueberry stehen 6 Mähdrescher, diese kann man zum Ernten von Hanfpflanzen benutzen\nFarmer werden benötigt, um Drogen zu ernten\nLohn pro Ernte: 10000$ (30 Minuten Pause nach jeder Ernte)\nMan kann eventuell von Drogendealern einen Zusatzlohn verlangen", "Annehmen", "Abbrechen");
			}
		}
	}
	if(dialogid == PRODI)
	{
	    if(response == 0)
	    {
            ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST, "Los Santos Arbeitsamt", "Detektiv\nAnwalt\nMüllmann\nPilot\nAngler\nBodyguard\nZeitungsjunge\nBoxer\nBusfahrer\nPizzalieferant", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
		}
	}
	if(dialogid == FARMER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Farmer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Farmer arbeiten!");
		    PlayerInfo[playerid][pJob] = 6;
		}
	}
	if(dialogid == WD)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt WaffenDealer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Für Navigationshilfe /navi.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als WaffenDealer arbeiten!");
		    PlayerInfo[playerid][pJob] = 9;
		}
	}
	if(dialogid == DD)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt DrogenDealer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als DrogenDealer arbeiten!");
		    PlayerInfo[playerid][pJob] = 4;
		}
	}
	if(dialogid == HURE)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Hure!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Hure arbeiten!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Such dir viele Freier");
		    PlayerInfo[playerid][pJob] = 3;
		}
	}
	if(dialogid == AUTODIEB)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Autodieb!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Autodieb arbeiten!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lass dich nicht erwischen !!");
		    PlayerInfo[playerid][pJob] = 5;
		}
	}

	if(dialogid == DIALOG_JOBS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
             	ShowPlayerDialog(playerid,DETE,DIALOG_STYLE_MSGBOX,"Job Detektiv","Als Detektiv kannst du Leute aufspüren.\nDen Gehalt bekommst du von deinen Kunden, es gibt 500$ / Payday dazu.\nUm Detektiv zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid,MULLMANN,DIALOG_STYLE_MSGBOX, "Job Muellmann","Als Müllmann musst du Häuser und Geschäfte abfahren und bekommst dafür Geld\nZwischen jeder Runde gibt es 30 Minuten Pause.\nUm Muellmann zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid,PILOT,DIALOG_STYLE_MSGBOX, "Job Pilot", "Als Pilot kannst du am Flughafen für 500$ / Ware maximal 100 Waren kaufen, diese musst du in San Fiero austauschen\nund in Las Venturas verkaufen, danach den Bestellungsschein unterschrieben zurück nach Los Santos bringen\nAußerdem kannst du Leuten deinen Dienst anbieten\nPersonenflüge mit Shamal und Maverick, Dienstflüge mit Nevada\nUm Pilot zu werden, klicke auf Annehmen.", "Annehmen", "Abbrechen");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid,ANGLER,DIALOG_STYLE_MSGBOX, "Job Angler", "Als Angler kannst du auf Booten oder am Pier Fische angeln\nDiese kannst du dann im 24/7 verkaufen oder auch kochen und dann essen\nAchtung: Fischen ohne Schein ist verboten\nUm Angler zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid,BODYGUARD,DIALOG_STYLE_MSGBOX, "Job Bodyguard", "Als Bodyguard kannst du Leute deinen Dienst als Beschützer anbieten (/guard).\nDas Geld bekommst du immer einmalig\nUm Bodyguard zu werden, klicke auf Annehmen.","Annehmen","Abbrechen");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid,ZEITUNGSJUNGE,DIALOG_STYLE_MSGBOX, "Job Zeitungsjunge", "Als Zeitungsjunge musst die Zeitungen, die die Nachrichtenreporter schreiben austeilen\nDer Gehalt hängt vom Interesse der Leser und der aktivität der Nachrichtenreporter ab\nUm Zeitungsjunge zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid,BOXER,DIALOG_STYLE_MSGBOX, "Job Boxer", "Als Boxer kannst du gegen andere Boxer im Gym an der Grove kämpfen\nEinen festen Gehalt gibt es wie bei jedem Job am Payday(500$)\nSollten Turniere stattfinden, kannst du da dein Geld verdienen.", "Annehmen", "Abbrechen");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid,BUSFAHRER,DIALOG_STYLE_MSGBOX, "Job Busfahrer", "Als Busfahrer kannst du Leute transportieren.\nDie Kosten legst du selber fest.\nLeute die einen Bus brauchen, melden sich mit /service.\nUm Busfahrer zu werden, klicke auf Annehmen.", "Auswählen", "Abbrechen");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid,PIZZALIEFERANT,DIALOG_STYLE_MSGBOX, "Job Pizzalieferant", "Als Pizzalieferant kannst du Leuten Pizzen austragen\nMit dem Essen einer Pizza bekommt man ein bisschen Leben\nUm Pizzalieferant zu werden, klicke auf Annehmen", "Auswählen", "Abbrechen");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, PRODI, DIALOG_STYLE_MSGBOX, "Freizeitjob Produktlieferant", "Am Hafen sind 4 Yankees (Produktfahrzeuge), mit denen kann man zum LS Airport und dort am Eingang Produkte kaufen\ndiese Produkte kann man dann an Businesses verkaufen\nPreis pro Produkt: 50$\nMaximale Kapazität: 100 Produkte\nDie YankeeStation ist am Hafen (zu finden unter /navi", "OK", "Zurück");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, MECHANIKER, DIALOG_STYLE_MSGBOX, "Mechaniker", "Als Mechaniker kannst du gewisse Sachen tuen,Du kannst Usern ihr Fahrzeug reparieren\nUnd auftanken, aber nur gewissen Punkten\nMarker gesetzt!", "Auswählen", "Abbrechen");
			}
			if(listitem == 11)
			{
			    ShowPlayerDialog(playerid, ANWALT, DIALOG_STYLE_MSGBOX, "Anwalt", "Als Anwalt kannst du Leute aus dem Gefängnis befreien, musst dir aber eine Erlaubnis bei einem Beamten holen!", "Auswählen", "Abbrechen");
			}
		}
	}

	if(dialogid == DETE)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Detektiv.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Detektiv arbeiten.");
		    PlayerInfo[playerid][pJob] = 1;
		}
	}
	if(dialogid == MULLMANN)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Müllmann.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Müllmann arbeiten.");
		    PlayerInfo[playerid][pJob] = 17;
		}
	}
	if(dialogid == PILOT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Pilot.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Pilot arbeiten.");
		    PlayerInfo[playerid][pJob] = 16;
		}
	}
	if(dialogid == ANGLER)
	{
		if(response == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Angler.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Angler arbeiten.");
		    PlayerInfo[playerid][pJob] = 18;
		}
	}
	if(dialogid == BODYGUARD)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Bodyguard.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Bodyguard arbeiten.");
		    PlayerInfo[playerid][pJob] = 8;
		}
	}
	if(dialogid == ZEITUNGSJUNGE)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Zeitungsjunge.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Zeitungsjunge arbeiten.");
		    PlayerInfo[playerid][pJob] = 15;
		}
	}
	if(dialogid == BOXER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Boxer.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Boxer arbeiten.");
		    PlayerInfo[playerid][pJob] = 12;
		}
	}
	if(dialogid == BUSFAHRER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Busfahrer.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Busfahrer arbeiten.");
		    PlayerInfo[playerid][pJob] = 14;
		}
	}
	if(dialogid == PIZZALIEFERANT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Pizzalieferant.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Pizzalieferant arbeiten.");
		    PlayerInfo[playerid][pJob] = 14;
		}
	}
	if(dialogid == MECHANIKER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
	    }
	    if(response == 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Mechaniker.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Mechaniker arbeiten.");
            GettingJob[playerid] = 7;
	    }
	}
	if(dialogid == ANWALT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
	    }
	    if(response == 1)
	    {
	        if(IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_RED, "Du kannst als Staatsbeamter kein Anwalt sein!");
	        }
	        else
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Anwalt.");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Anwalt arbeiten.");
	            PlayerInfo[playerid][pJob] = 2;
			}
	    }
	}
	if(dialogid == NAVIHAUPT)
	{
		if(response)
		{
			if(listitem == 0)
			{
		        ShowPlayerDialog(playerid, GEBÄUDE, DIALOG_STYLE_LIST, "Öffentliche Orte, Läden & Behörden", "Los Santos Police Department\nFraktionsautohaus\nLos Santos Ordnungsamt\nLos Santos Stadthalle\nLos Santos Zivispawn\nLos Santos Bank\nHandyladen\nUhrenladen\nArbeitsamt\nLS Hafen Yankee Station\nLos Santos Redaktionsgebäude\nSan Fierro Redaktionsgebäude\nNeonshop\nKennzeichen-Zulassungsstelle\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, iORTE, DIALOG_STYLE_LIST, "Illegale Orte", "Los Santos Schwarzmarkt\nWaffenDealerMaterialsPoint 1\nWaffenDealerMaterialsPoint 2\nDrogenfarm Blueberry\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, AUTOHÄUSER, DIALOG_STYLE_LIST, "Autohäuser", "Bikeautohaus\nBilligautohaus\nLuxusautohaus\nFlugzeugautohaus\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, ANGRIFFSPUNKTE, DIALOG_STYLE_LIST, "Gang- und Mafien-Orte", "Big Pen Angriffspunkt\nCar Wash East Angriffspunkt\nLS Stadion Angriffspunkt\nLS Strand Angriffspunkt\nSF Einkaufszentrum Angriffspunkt\nSF Park Angriffspunkt\nSF Hafen Angriffspunkt\nFraktions-Materialien-Fabrik\nZurück zum Hauptmenü", "Auswählen", "Beenden");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, FÜHRERSCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "Fahrschule Los Santos", "Auswählen", "Abbrechen");
			}
		}
	}
	if(dialogid == FÜHRERSCHEINE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Fahre zum Roten Marker auf der Karte");
	            SendClientMessage(playerid, COLOR_ORANGE, "Tippe /dc um den Marker zu löschen");
	            SetPlayerCheckpoint(playerid, 1239.7979,-1830.9847,13.4001,3.0);
	        }
	        if(listitem == 1)
	        {
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Fahre zum Roten Marker auf der Karte");
	            SendClientMessage(playerid, COLOR_ORANGE, "Tippe /dc um den Marker zu löschen");
	            SetPlayerCheckpoint(playerid, 1315.3083,-904.8380,38.7837,3.0);
	        }
	    }
	}

	if(dialogid == ANGRIFFSPUNKTE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung (Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid,2403.5715,-1223.2195,25.1426,3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2507.6379,-1471.5164,24.0372,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2790.3394,-1944.1105,13.5469,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2805.7092,-1178.7507,25.4434,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2513.3823,776.3461,35.1719,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2767.8943,1099.3843,32.8440,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 6)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1789.3870,1543.5454,7.1875,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 7)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2805.0444,-1434.0425,40.0484, 3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 8)
			{
	        	ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Öffentliche Orte, Läden & Behörden\nIllegale Orte\nAutohäuser", "Auswählen", "Beenden");
			}
		}
	}

	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Desert Eagle für 8000$ gekauft!");
	            GivePlayerWeapon(playerid, 24, 5000);
				GivePlayerMoney(playerid, -8000);
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine M4 für 8000$ gekauft!");
			    GivePlayerWeapon(playerid, 31, 500);
			    GivePlayerMoney(playerid, -8000);
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Ak47 für 8000$ gekauft!");
			    GivePlayerWeapon(playerid, 30, 500);
			    GivePlayerMoney(playerid, -8000);
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine MP5 für 8000$ gekauft!");
			    GivePlayerWeapon(playerid, 29, 500);
			    GivePlayerMoney(playerid, -8000);
			}
			if(listitem == 4)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir ein Messer für 8000$ gekauft!");
			    GivePlayerWeapon(playerid, 4, 500);
			    GivePlayerMoney(playerid, -8000);
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Schutzweste für 9000$ gekauft!");
				SetPlayerArmour(playerid, 100);
				GivePlayerMoney(playerid, -9000);
			}
			if(listitem == 6)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Schrotflinte für 8000$ gekauft!");
				GivePlayerMoney(playerid, -8000);
				GivePlayerWeapon(playerid, 25, 50);
			}
		}
		return 1;
	}
	if(dialogid == GEBÄUDE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung (Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid,1535.9275,-1673.7886,13.3828,3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,326.5195,-1797.1442,4.7259,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,929.2902,-1219.0624,16.7100,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1478.3370,-1744.2144,13.5469,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1134.5912,-1470.4243,15.7774,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1462.6222,-1013.9056,26.77344,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 6)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1104.1304,-1449.0028,15.7969,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 7)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1699.9642,-1170.1368,23.8281,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 8)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid, 2231.0088,-1159.9550,25.8263, 3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 9)
			{
			    SendClientMessage(playerid, 0xFF780FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid, 2761.1362,-2416.0835,13.5002, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 10)
			{
			    SendClientMessage(playerid, 0xFF780FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid, 1654.1636,-1654.8077,22.5156, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 11)
			{
			    SendClientMessage(playerid, 0xFF780FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid, 1207.2928,-917.7825,43.0665, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 12)
			{
	        	SendClientMessage(playerid, 0xFF780FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid, 999.0546,-1105.4008,23.3770, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 13)
			{
	        	SendClientMessage(playerid, 0xFF780FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid, 1209.8247,-1749.9943,13.5937, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 14)
			{
                ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Öffentliche Orte, Läden & Behörden\nIllegale Orte\nAutohäuser", "Auswählen", "Beenden");
			}
		}
	}

	if(dialogid == iORTE)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2808.0295,-1433.0054,40.0473,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 1)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,592.7109,-1247.9420,18.1414,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 2)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1826.2963,42.1656,15.1228,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid, -85.4636,2.1646,3.1172, 3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Öffentliche Orte, Läden & Behörden\nIllegale Orte\nAutohäuser", "Auswählen", "Beenden");
			}
		}
	}

	if(dialogid == AUTOHÄUSER)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2467.6665,-1546.0446,23.9988,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 1)
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2130.9797,-1145.2065,24.7068,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 2)
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,755.3275,-1354.0264,13.5130,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 3)
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1780.4744,-2433.6321,13.5547,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Öffentliche Orte, Läden & Behörden\nIllegale Orte\nAutohäuser", "Auswählen", "Beenden");
			}
		}
	}









	if(dialogid == MAFIA)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
		    	if(GetPlayerMoney(playerid) > 3500)
		    	{
					GivePlayerWeapon(playerid,24,200);
					GivePlayerMoney(playerid,-5000);
					BizzInfo[2][bTill] += 1000;
					BizzInfo[3][bTill] += 1000;
	            	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Deagle mit 200 Munition für 5.000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 1)
			{
		    	if(GetPlayerMoney(playerid) > 5000)
		    	{
			    	GivePlayerWeapon(playerid,29,700);
			    	GivePlayerMoney(playerid,-5000);
			    	BizzInfo[2][bTill] += 1400;
			    	BizzInfo[3][bTill] += 1400;
			    	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine MP5 mit 700 Munition für 6.000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 2)
			{
		    	if(GetPlayerMoney(playerid) > 8000)
		    	{
			    	GivePlayerWeapon(playerid,31,800);
			    	GivePlayerMoney(playerid,-8000);
			    	BizzInfo[2][bTill] += 1200;
			    	BizzInfo[3][bTill] += 1200;
			    	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine M4 mit 800 Munition für 8000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 3)
			{
 				if(GetPlayerMoney(playerid) > 3000)
 		 		{
    				GivePlayerWeapon(playerid,4,1);
					GivePlayerMoney(playerid,-3000);
					BizzInfo[2][bTill] += 1000;
					BizzInfo[3][bTill] += 1000;
					SendClientMessage(playerid, COLOR_GREEN, "Du hast dir einen Messer für 3000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
		}
	}


	if(dialogid == DIALOG_MARKTLISTE)
	{
		if(response)
     	{
	   		if(listitem == 0) // WAFFEN
	   		{
   				ShowPlayerDialog(playerid,DIALOG_MARKTLISTE1,DIALOG_STYLE_LIST,"Schwarzmarkt Waffen","Ak47 / 300 Schuss / 3750$\nDesert Eagle / 100 Schuss / 3000$\nMP5 / 600 Schuss / 6000$\nShotgun / 50 Schuss / 800$\nArmor / 1000$","Kaufen","Beenden");
	   		}
	   		if(listitem == 1) // MATS
           	{
  				ShowPlayerDialog(playerid,DIALOG_MARKTLISTE2,DIALOG_STYLE_LIST,"Schwarzmarkt Materialien","500 Materialien / 5000$\n250 Materialien / 2500$","Kaufen","Beenden");
			}
        }
	}
	if(dialogid == DIALOG_MARKTLISTE1)
	{
		if(response)
     	{
	   		if(listitem == 0) // WAFFEN
	   		{
	  			if(GetPlayerMoney(playerid) > 3750)
	   			{
		   		    GivePlayerMoney(playerid,-3750);
		   		    GivePlayerWeapon(playerid,30,300);
		    	}
      			else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht so viel Geld !");
				}
	   		}
	   		if(listitem == 1) // Desert Eagle
           	{
	  			if(GetPlayerMoney(playerid) > 1000)
	   			{
		   		    GivePlayerMoney(playerid,-1000);
		   		    GivePlayerWeapon(playerid,24,100);
      		    }
      			else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht so viel Geld !");
				}
			}
	   		if(listitem == 2) // MP5
	   		{
   	  			if(GetPlayerMoney(playerid) > 6000)
	   			{
		   		    GivePlayerMoney(playerid,-6000);
		   		    GivePlayerWeapon(playerid,29,600);
    		    }
      			else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht so viel Geld !");
				}
			}
			if(listitem == 3) // Shotgun
			{
			    if(GetPlayerMoney(playerid) > 800)
			    {
			        GivePlayerMoney(playerid,-800);
					GivePlayerWeapon(playerid,25,50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, " Du hast nicht so viel Geld !");
				}
			}
			if(listitem == 4) //AMOR
			{
			    if(GetPlayerMoney(playerid) > 1000)
			    {
					GivePlayerMoney(playerid,-1000);
					SetPlayerArmour(playerid, 100);
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, " Du hast nicht so viel Geld !");
				}

			}
        }
	}
	if(dialogid == DIALOG_MARKTLISTE2)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
				if(PlayerInfo[playerid][pMats] >= 1500)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien mit dir tragen.");
				    return 1;
				}
	  			if(GetPlayerMoney(playerid) > 5000)
		   		{
		    		GivePlayerMoney(playerid,-5000);
					PlayerInfo[playerid][pMats] += 500;
					SendClientMessage(playerid,COLOR_GREEN,"Du hast 500 Mats gekauft!");
	     		}
	      		else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht so viel Geld !");
	   			}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pMats] >= 1750)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien mit dir tragen.");
				    return 1;
				}
			    if(GetPlayerMoney(playerid) > 2500)
			    {
			        GivePlayerMoney(playerid,-2500);
			        PlayerInfo[playerid][pMats] +=250;
			        SendClientMessage(playerid, COLOR_GREEN,"Du hast 250 Mats gekauft!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "  Du hast nicht so viel Geld !");
				}
			}
		}
	}


	if(dialogid == DIALOG_MARKTLISTE)
	{
		if(response)
     	{
	   		if(listitem == 0) // WAFFEN
	   		{
   				ShowPlayerDialog(playerid,DIALOG_MARKTLISTE1,DIALOG_STYLE_LIST,"Schwarzmarkt Waffen","Ak47 / 300 Schuss / 3750$\nDesert Eagle / 100 Schuss / 3000$\nMP5 / 600 Schuss / 6000$\nShotgun / 50 Schuss / 800$\nArmor / 1000$","Kaufen","Beenden");
	   		}
	   		if(listitem == 1) // MATS
           	{
  				ShowPlayerDialog(playerid,DIALOG_MARKTLISTE2,DIALOG_STYLE_LIST,"Schwarzmarkt Materialien","500 Materialien / 5000$\n250 Materialien / 2500$","Kaufen","Beenden");
			}
        }
	}

    new string[128];
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid,sendername,sizeof(sendername));

	if(dialogid == DIALOG_LOGIN)
	{
		if(response && strlen(inputtext) > 0)
		{
			OnPlayerLogin(playerid,inputtext);
		}
		else
		{
		    Kick(playerid);
		}
	}

	if(dialogid == DIALOG_REG)
	{
		if(response)
		{
		    ShowPlayerDialog(playerid,DIALOG_REG2,DIALOG_STYLE_INPUT,"Account erstellen","Gib das Passwort für deinen Account ein:","OK","Abbrechen");
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_REG,DIALOG_STYLE_MSGBOX,"Account","Du benötigst einen Account, um auf diesem Server zu spielen!","Erstellen","Abbrechen");
		}
	}

	if(dialogid == DIALOG_REG2)
	{
		if(response && strlen(inputtext) > 0)
		{
			OnPlayerRegister(playerid,inputtext);
		}
		else
		{
		    ShowPlayerDialog(playerid,DIALOG_REG2,DIALOG_STYLE_INPUT,"Account erstellen","Gib das Passwort für deinen Account ein:","OK","Abbrechen");
		}
	}

/*	if(dialogid == DIALOG_CLICK)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(response == 1)
			{
			    GetPlayerName(pClicked[playerid],giveplayer,sizeof(giveplayer));
			    switch (listitem)
				{
					case 0:
					{
					    format(string,sizeof(string),"/goto %d",pClicked[playerid]);
					    OnPlayerCommandText(playerid,string);
					}
					case 1:
					{
					    format(string,sizeof(string),"/gethere %d",pClicked[playerid]);
					    OnPlayerCommandText(playerid,string);
					}
					case 2:
					{
						format(string,sizeof(string),"[KICK] %s",giveplayer);
						ShowPlayerDialog(playerid,DIALOG_CLICK_KICK,DIALOG_STYLE_INPUT,string,"Tippe einen Grund für den Kick ein:","OK","Abbrechen");
					}
					case 3:
					{
						format(string,sizeof(string),"[BAN] %s",giveplayer);
						ShowPlayerDialog(playerid,DIALOG_CLICK_BAN,DIALOG_STYLE_INPUT,string,"Tippe einen Grund für den Bann ein:","OK","Abbrechen");
					}
					case 4:
					{
						format(string,sizeof(string),"[HEALTH] %s",giveplayer);
						format(string2,sizeof(string2),"Gib an wieviel Health zu %s geben willst. (0-100)",giveplayer);
						ShowPlayerDialog(playerid,DIALOG_CLICK_HEALTH,DIALOG_STYLE_INPUT,string,string2,"OK","Abbrechen");
					}
					case 5:
					{
					    format(string,sizeof(string),"/slap %d",pClicked[playerid]);
					    OnPlayerCommandText(playerid,string);
					}
					case 6:
					{
					    format(string,sizeof(string),"/tv %d",pClicked[playerid]);
					    OnPlayerCommandText(playerid,string);
					}
					case 7:
					{
						format(string,sizeof(string),"[INTERIOR] %s",giveplayer);
						format(string2,sizeof(string2),"Gib an in welches Interior du %s stecken willst.",giveplayer);
						ShowPlayerDialog(playerid,DIALOG_CLICK_INT,DIALOG_STYLE_INPUT,string,string2,"OK","Abbrechen");
					}
				}
			}
		}
		return 1;
	}//22(50),29(30),23(35)*/

	if(dialogid == DIALOG_Vagos)
	{
	    if(response == 0)
		{
		    return 1;
		}
		if(response == 1)
		{

		}
		if(listitem == 0)
		{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
  			SetPlayerSkin(playerid, 30);
		}
		if(listitem == 1)
		{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
  			SetPlayerSkin(playerid, 108);
		}
		if(listitem == 2)
		{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
  			SetPlayerSkin(playerid, 109);
		}
		if(listitem == 3)
		{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
  			SetPlayerSkin(playerid, 110);
		}
		if(listitem == 4)
		{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
  			SetPlayerSkin(playerid, 292);
		}
	}


	if(dialogid == DIALOG_GS)
	{
		if(response == 0)
		{
			return 1;
     	}
     	if(response == 1)
     	{

     	}
     	if(listitem == 0)
     	{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 105);
     	}
     	if(listitem == 1)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 106);
       	}
     	if(listitem == 2)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 107);
     	}
 		if(listitem == 3)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 269);
     	}
 		if(listitem == 4)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 270);
     	}
 		if(listitem == 5)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 271);
     	}
 		if(listitem == 6)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 195);
     	}

	}
	if(dialogid == DIALOG_LCN)
	{
		if(response == 0)
		{
			return 1;
     	}
     	if(response == 1)
     	{

     	}
     	if(listitem == 0)
     	{
			SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 127);
		}
		if(listitem == 1)
		{
		    SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 126);
		}
		if(listitem == 2)
		{
		    SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 125);
		}
		if(listitem == 3)
		{
		    SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 93);
		}
		if(listitem == 4)
		{
		    SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 113);
		}
		if(listitem == 5)
		{
		    SendClientMessage(playerid,COLOR_YELLOW, "Kleidung angezogen!");
			SetPlayerSkin(playerid, 113);
		}
	}
	if(dialogid == DIALOG_BAL)
	{
		if(response == 0)
		{
			return 1;
     	}
     	if(response == 1)
     	{

     	}
     	if(listitem == 0)
     	{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 66);
     	}
     	if(listitem == 1)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 102);
       	}
     	if(listitem == 2)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 104);
     	}
 		if(listitem == 3)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 176);
     	}
 		if(listitem == 4)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 190);
     	}
 		if(listitem == 5)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 103);
     	}
	}
	if(dialogid == DIALOG_FW)
	{
		if(response == 0)
		{
			return 1;
     	}
     	if(response == 1)
     	{

     	}
     	if(listitem == 0)
     	{
          	SendClientMessage(playerid,0x787878FF,"FW-Member-Uniform angezogen!");
          	SetPlayerSkin(playerid, 279);
          	SetPlayerHealth(playerid,100);
       	}
     	if(listitem == 1)
     	{
     	    if(PlayerInfo[playerid][pRank] >= 10)
     	    {
	          	SendClientMessage(playerid,0x787878FF,"FW-Leader-Uniform angezogen!");
	          	SetPlayerSkin(playerid, 278);
	          	SetPlayerHealth(playerid,100);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED, "  Du musst für den Skin mindestens Rang 10 haben!");
			}
     	}
 		if(listitem == 2)
     	{
          	SendClientMessage(playerid,0x787878FF,"Medic-Uniform angezogen!");
          	SetPlayerSkin(playerid, 274);
          	SetPlayerHealth(playerid,100);
     	}
	}
	if(dialogid == DIALOG_MUCHACHO)
	{
		if(response == 0)
		{
			return 1;
     	}
     	if(response == 1)
     	{

     	}
    	if(listitem == 0)
     	{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 122);
          	SetPlayerHealth(playerid,100);
     	}
     	if(listitem == 1)
     	{
			SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 117);
          	SetPlayerHealth(playerid,100);
     	}
     	if(listitem == 2)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 49);
          	SetPlayerHealth(playerid,100);
       	}
     	if(listitem == 3)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 120);
          	SetPlayerHealth(playerid,100);
     	}
     	if(listitem == 4)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 224);
          	SetPlayerHealth(playerid,100);
     	}
     	if(listitem == 5)
     	{
          	SendClientMessage(playerid,0x787878FF,"Kleidung angezogen!");
          	SetPlayerSkin(playerid, 263);
          	SetPlayerHealth(playerid,100);
     	}

	}
	if(dialogid == DIALOG_KLEIDUNG_PRO)
	{
		if(response == 1)
		{
		    switch (listitem)
			{
				case 0:
				{
					if(GetPlayerMoney(playerid) < 50)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-50);
					SetPlayerSkin(playerid,22);
					PlayerInfo[playerid][pChar] = 22;
					PlayerInfo[playerid][pModel] = 22;
				}
				case 1:
				{
					if(GetPlayerMoney(playerid) < 30)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-30);
					SetPlayerSkin(playerid,29);
					PlayerInfo[playerid][pChar] = 29;
					PlayerInfo[playerid][pModel] = 29;
				}
				case 2:
				{
					if(GetPlayerMoney(playerid) < 35)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-35);
					SetPlayerSkin(playerid,23);
					PlayerInfo[playerid][pChar] = 23;
					PlayerInfo[playerid][pModel] = 23;
				}
			}
		}
		return 1;
	}
	/*if(dialogid == DIALOG_FWSPERREN) //
	{
		if(response)
		{
		if(listitem == 0) // Barriere
		{
			if(Sperrebit[playerid]==0)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					new Float:x,Float:y,Float:z,Float:a;
					GetPlayerPos(playerid,x,y,z);
					GetPlayerFacingAngle(playerid,a);
					GetXYInFrontOfPlayer(playerid,x,y,2.0);
					Sperre[playerid][0] = CreateDynamicObject(1228,x,y,z-0.5,0,0,a+90);
					Sperre[playerid][1] = CreateDynamicObject(1228,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Sperre[playerid][2] = CreateDynamicObject(1228,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Sperre[playerid][3] = CreateDynamicObject(1228,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Sperre[playerid][4] = CreateDynamicObject(1228,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Sperrebit[playerid]=1;
					SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre erstellt!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED,"Du kannst keine Straßensperre erstellen wenn du in einem Auto bist!");
				}
			}
			else
			{
				DestroyObject(Sperre[playerid][0]);
				DestroyObject(Sperre[playerid][1]);
				DestroyObject(Sperre[playerid][2]);
				DestroyObject(Sperre[playerid][3]);
				DestroyObject(Sperre[playerid][4]);
				Sperrebit[playerid]=0;
				SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre abgebaut!");
			}
			return 1;
		}
		if(listitem == 1) // Pylonen
		{
			if(Pylonenbit[playerid]==0)
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					new Float:x,Float:y,Float:z,Float:a;
					GetPlayerPos(playerid,x,y,z);
					GetPlayerFacingAngle(playerid,a);
					GetXYInFrontOfPlayer(playerid,x,y,2.0);
					Pylone[playerid][0] = CreateDynamicObject(1238,x,y,z-0.5,0,0,a+90);
					Pylone[playerid][1] = CreateDynamicObject(1238,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Pylone[playerid][2] = CreateDynamicObject(1238,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Pylone[playerid][3] = CreateDynamicObject(1238,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Pylone[playerid][4] = CreateDynamicObject(1238,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Pylonenbit[playerid]=1;
					SendClientMessage(playerid, COLOR_YELLOW,"Pylonensperre erstellt!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED,"Du kannst keine Pylonensperre erstellen wenn du in einem Auto bist!");
				}
			}
			else
			{
				DestroyObject(Pylone[playerid][0]);
				DestroyObject(Pylone[playerid][1]);
				DestroyObject(Pylone[playerid][2]);
				DestroyObject(Pylone[playerid][3]);
				DestroyObject(Pylone[playerid][4]);
				Pylonenbit[playerid]=0;
				SendClientMessage(playerid, COLOR_YELLOW,"Pylonensperre abgebaut!");
			}
			return 1;
		}
		if(listitem == 2) // Sperre
		{
			if(Barrierenbit[playerid] == 0;
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					new Float:x,Float:y,Float:z,Float:a;
					GetPlayerPos(playerid,x,y,z);
					GetPlayerFacingAngle(playerid,a);
					GetXYInFrontOfPlayer(playerid,x,y,2.0);
					Barriere[playerid][0] = CreateDynamicObject(1422,x,y,z-0.5,0,0,a+90);
					Barriere[playerid][1] = CreateDynamicObject(1422,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Barriere[playerid][2] = CreateDynamicObject(1422,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Barriere[playerid][3] = CreateDynamicObject(1422,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Barriere[playerid][4] = CreateDynamicObject(1422,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
					Barrierenbit[playerid]=1;
					SendClientMessage(playerid, COLOR_YELLOW,"Sperre erstellt!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED,"Du kannst keine Sperre erstellen wenn du in einem Auto bist!");
				}
			}
			else
			{
				DestroyObject(Barriere[playerid][0]);
				DestroyObject(Barriere[playerid][1]);
				DestroyObject(Barriere[playerid][2]);
				DestroyObject(Barriere[playerid][3]);
				DestroyObject(Barriere[playerid][4]);
				Barrierenbit[playerid]=0;
				SendClientMessage(playerid, COLOR_YELLOW,"Sperre abgebaut!");
			}
			return 1;
			}

		}
	}*/
	if(dialogid == DIALOG_KLEIDUNG_ZIP)
	{
		if(response == 1)
		{
		    switch (listitem)
			{
				case 0:
				{
					if(GetPlayerMoney(playerid) < 100)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-100);
					SetPlayerSkin(playerid,17);
					PlayerInfo[playerid][pChar] = 17;
					PlayerInfo[playerid][pModel] = 17;
				}
				case 1:
				{
					if(GetPlayerMoney(playerid) < 300)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-300);
					SetPlayerSkin(playerid,68);
					PlayerInfo[playerid][pChar] = 68;
					PlayerInfo[playerid][pModel] = 68;
				}
				case 2:
				{
					if(GetPlayerMoney(playerid) < 200)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-200);
					SetPlayerSkin(playerid,101);
					PlayerInfo[playerid][pChar] = 101;
					PlayerInfo[playerid][pModel] = 101;
				}
				case 3:
				{
					if(GetPlayerMoney(playerid) < 100)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-100);
					SetPlayerSkin(playerid,111);
					PlayerInfo[playerid][pChar] = 111;
					PlayerInfo[playerid][pModel] = 111;
				}
				case 4:
				{
					if(GetPlayerMoney(playerid) < 120)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-120);
					SetPlayerSkin(playerid,143);
					PlayerInfo[playerid][pChar] = 143;
					PlayerInfo[playerid][pModel] = 143;
				}
				case 5:
				{
					if(GetPlayerMoney(playerid) < 180)
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					GivePlayerMoney(playerid,-180);
					SetPlayerSkin(playerid,187);
					PlayerInfo[playerid][pChar] = 187;
					PlayerInfo[playerid][pModel] = 187;
				}
			}
		}
		return 1;
	}
	/*if(dialogid == DIALOG_STADION)
	{
		if(response == 1)t
		{
		    switch (listitem)
			{
				case 0:
				{
					if(GetPlayerMoney(playerid) < SBizzInfo[16][sbEntranceCost])
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
	        		SetPlayerPos(playerid,-1403.7610,-227.0062,1043.2185);
	        		SetPlayerInterior(playerid,7);
					ResetPlayerWeapons(playerid);
					new value = SBizzInfo[16][sbEntranceCost];
					GivePlayerMoney(playerid,-value);
					SBizzInfo[16][sbTill] += value;
					ExtortionBiz(16, SBizzInfo[16][sbEntranceCost]);
				}
				case 1:
				{
					if(GetPlayerMoney(playerid) < SBizzInfo[17][sbEntranceCost])
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);  //Kickstart arena
					SetPlayerInterior(playerid,14);
					ResetPlayerWeapons(playerid);
					GivePlayerMoney(playerid,-SBizzInfo[17][sbEntranceCost]);
					SBizzInfo[17][sbTill] += SBizzInfo[17][sbEntranceCost];
					ExtortionBiz(17, SBizzInfo[17][sbEntranceCost]);
				}
				case 2:
				{
					if(GetPlayerMoney(playerid) < SBizzInfo[18][sbEntranceCost])
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
					SetPlayerPos(playerid,-1461.0552,942.7714,1036.6768);  //derby arena
					SetPlayerInterior(playerid,15);
					ResetPlayerWeapons(playerid);
					GivePlayerMoney(playerid,-SBizzInfo[18][sbEntranceCost]);
					SBizzInfo[18][sbTill] += SBizzInfo[18][sbEntranceCost];
					ExtortionBiz(18, SBizzInfo[18][sbEntranceCost]);
				}
				case 3:
				{
					if(GetPlayerMoney(playerid) < SBizzInfo[19][sbEntranceCost])
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
			        SetPlayerPos(playerid,-1448.4916,-580.3123,1055.1643); //Motorcross Arena
			        SetPlayerInterior(playerid,4);
					ResetPlayerWeapons(playerid);
					GivePlayerMoney(playerid,-SBizzInfo[19][sbEntranceCost]);
					SBizzInfo[19][sbTill] += SBizzInfo[19][sbEntranceCost];
					ExtortionBiz(19, SBizzInfo[19][sbEntranceCost]);
				}
				case 4:
				{
					if(GetPlayerMoney(playerid) < SBizzInfo[20][sbEntranceCost])
					{
				 		SendClientMessage(playerid,COLOR_RED," Du hast nicht genug geld!");
						return 1;
					}
			        SetPlayerPos(playerid,2729.2751,-1645.5592,1744.9794); //MotoDromeX Arena
			        SetPlayerInterior(playerid,1);
					ResetPlayerWeapons(playerid);
					GivePlayerMoney(playerid,-SBizzInfo[20][sbEntranceCost]);
					SBizzInfo[20][sbTill] += SBizzInfo[20][sbEntranceCost];
					ExtortionBiz(20, SBizzInfo[20][sbEntranceCost]);
				}
			}
		}
		return 1;
	}*/
	if(dialogid == DIALOG_UNDERCOVER_SF)
	{
		if(response == 1)
		{
		    switch (listitem)
			{
				case 0:
				{
					UnderCoverCar_Sultan = CreateVehicle(560,-1589.1011,707.5089,-5.3539,269.8547,-1,-1,-1);
				}
				case 1:
				{
				}
				case 2:
				{
				}
				case 3:
				{
				}
				case 4:
				{
				}
				case 5:
				{
				}
				case 6:
				{
				}
				case 7:
				{
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_UNDERCOVER_LS)
	{
		if(response == 1)
		{
		    switch (listitem)
			{
				case 0:
				{
					UnderCoverCar_Sultan = CreateVehicle(560,-1589.1011,707.5089,-5.3539,269.8547,-1,-1,-1);
				}
				case 1:
				{
				}
				case 2:
				{
				}
				case 3:
				{
				}
				case 4:
				{
				}
				case 5:
				{
				}
				case 6:
				{
				}
				case 7:
				{
				}
			}
		}
		return 1;
	}
/*	if(dialogid == DIALOG_CLICK_KICK)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
		    if(response == 1)
		    {
				format(string,sizeof(string),"/kick %d %s",pClicked[playerid],inputtext);
				OnPlayerCommandText(playerid,string);
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_CLICK_BAN)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
		    if(response == 1)
		    {
				format(string,sizeof(string),"/ban %d %s",pClicked[playerid],inputtext);
				OnPlayerCommandText(playerid,string);
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_CLICK_HEALTH)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
		    if(response == 1)
		    {
				if(!IsNumeric(inputtext))
				{
				    SendClientMessage(playerid,COLOR_RED," ERROR: Kein gültiger Wert!");
				    return 1;
				}
				new hp = strval(inputtext);
				if(hp < 0 || hp > 100)
				{
				    SendClientMessage(playerid,COLOR_RED," ERROR: Health zwischen 0 und 100!");
				    return 1;
				}
				format(string,sizeof(string),"/sethp %d %d",pClicked[playerid],hp);
				OnPlayerCommandText(playerid,string);
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_CLICK_INT)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
		    if(response == 1)
		    {
				if(!IsNumeric(inputtext))
				{
				    SendClientMessage(playerid,COLOR_RED," ERROR: Das Interior muss eine Zahl sein!");
				    return 1;
				}
				new int = strval(inputtext);
				format(string,sizeof(string),"/setplayerint %d %d",pClicked[playerid],int);
				OnPlayerCommandText(playerid,string);
			}
		}
		return 1;
	}*/

	if(dialogid == DIALOG_TICKET_S1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	   			GetPlayerName(playerid,reportname,MAX_PLAYER_NAME);
		 		format(ticketmsg,256,"Allgemeine Fragen\n\nBenutzer:\t%s\n\nBitte schreibe hier deine Frage.",reportname);
				ShowPlayerDialog(playerid,DIALOG_TICKET,DIALOG_STYLE_INPUT,"/Ticket an die Admins",ticketmsg,"Absenden","Beenden");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid,DIALOG_TICKET_S22, DIALOG_STYLE_INPUT, "Cheatermeldung", "Bitte schreibe den Namen des Cheaters hier hin und\nschreib auf, was er begangen hat.", "Absenden", "Beenden");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid,DIALOG_TICKET_S32, DIALOG_STYLE_INPUT, "Frage an High Admins", "Bitte schreibe hier deine Frage auf\nSie wird dann so schnell wie möglich von\neinem Admin 4 oder höher beantwortet!", "Absenden", "Beenden");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Ticket-System verlassen.");
		}
	}
	if(dialogid == DIALOG_TICKET_S22)
	{
		if(response && strlen(inputtext) > 0)
		{
		    format(string, sizeof(string), "[CHEATERMELDUNG] %s[ID:%d]: %s", sendername, playerid, inputtext);
		    ticketsys(string);
		    for(new i=0; i < MAX_PLAYERS; i++)
		    {
		        if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pSupporter] >= 1)
		        {
		            SendClientMessage(i, 0xFF0023FF, string);
				}
			}
			format(string, sizeof(string), "Cheatermeldung abgeschickt [%s]", inputtext);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Ticket-System verlassen");
		}
	}
	if(dialogid == DIALOG_TICKET_S32)
	{
	    if(response && strlen(inputtext) > 0)
	    {
	        format(string, sizeof(string), "[FRAGE AN HIGHADMIN] %s[ID:%d]: %s", sendername, playerid, inputtext);
	        ticketsys(string);
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(PlayerInfo[i][pAdmin] >= 4)
	            {
	                SendClientMessage(i, 0xFF0069FF, string);
				}
			}
			format(string, sizeof(string), "Frage abgeschickt [%s]", inputtext);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Ticket-System verlassen");
		}
	}
	if(dialogid == DIALOG_TICKET)
	{
		if(response && strlen(inputtext) > 0)
		{
			format(string, sizeof(string), " [TICKET] %s[ID:%d]: %s", sendername,playerid,inputtext);
			ticketsys(string);
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
					{
				        SendClientMessage(i,0x00B20AFF,string);
				    }
				}
			}
			format(string, sizeof(string), " Du hat ein neues Ticket eingesendet : [%s] |", inputtext);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			GameTextForPlayer(playerid, "Ticket abgesendet",5000,3);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Ticket-System Verlassen");
		}
		return 1;
	}
    if(dialogid == DIALOG_REGSTEP_1) //wohnoirt
    {
        if(response == 1)
		{// male
			PlayerInfo[playerid][pSex] = 1;
   			SendClientMessage(playerid, COLOR_WHITE, "===========[Account wird erstellt]===========");
   			SendClientMessage(playerid, COLOR_WHITE, "In Ordnung du bist Männlich!");
   			//SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
	    	RegistrationStep[playerid] = 2;
    		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ ","Weiter"," ");
		}
        if(response == 0)
		{// male
  			PlayerInfo[playerid][pSex] = 2;
   			SendClientMessage(playerid, COLOR_WHITE, "===========[Account wird erstellt]===========");
   			SendClientMessage(playerid, COLOR_WHITE, "In Ordnung du bist Weiblich!");
			//SendClientMessage(playerid, COLOR_LIGHTRED, "Wann bist du geboren? (TT.MM.JJJJ)");
			RegistrationStep[playerid] = 2;
    		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
		}
    }
	if(dialogid == DIALOG_REGSTEP_2)
	{
 		new year, month,day;
		getdate(year, month, day);
 		new DateInfo[3][20];
		split(inputtext, DateInfo, '.');
		if(response == 1)
		if (strlen(inputtext) > 10) { // nicht länger als 10 zeichen (xx/xx/xxxx)
   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
		return 0;
		}
		if (!IsValidDate(strval(DateInfo[0]),strval(DateInfo[1]),strval(DateInfo[2]))) {
	   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
			return 0;
		}
		if(year - strval(DateInfo[2]) > 100 || strval(DateInfo[2]) < 1 || strval(DateInfo[2]) >= year)
		{
	   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
		    return 0;
		}
		new check = year - strval(DateInfo[2]);
		if(check == year)
		{
	   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
		    return 0;
		}
		if(strval(DateInfo[1]) > month)
		{
		    check -= 1;
		}
		else if(strval(DateInfo[1]) == month && strval(DateInfo[0]) > day)
		{
		    check -= 1;
		}
		PlayerInfo[playerid][pAge] = check;
		format(string, sizeof(string), "Ok, du bist also %d Jahre alt.",PlayerInfo[playerid][pAge]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		RegistrationStep[playerid] = 3;
   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_3,DIALOG_STYLE_LIST,"Woher kommst du?","Deutschland\nÖsterreich\nSchweiz","Weiter"," ");
		if(response == 0){
		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
		}
	}
	if(dialogid == DIALOG_REGSTEP_3)
	{
		if(response == 1)
		{
		    switch (listitem)
			{
				case 0://Deutschland
				{
				    PlayerInfo[playerid][pOrigin] = 1;
				    SendClientMessage(playerid, COLOR_WHITE, "Du kommst aus Deutschland.");
				    SendClientMessage(playerid, COLOR_WHITE, "====================================");
				    SendClientMessage(playerid, COLOR_GREEN, "Account wurde erfolgreich erstellt!");
				    SendClientMessage(playerid, COLOR_YELLOW, "Vielen Dank für die Informationen, es folgt das Tutorial.");
					RegistrationStep[playerid] = 0;
				    TutTime[playerid] = 1;
				}
				case 1://österreich
				{
				    PlayerInfo[playerid][pOrigin] = 2;
				    SendClientMessage(playerid, COLOR_WHITE, "Du kommst aus Österreich.");
				    SendClientMessage(playerid, COLOR_WHITE, "====================================");
				    SendClientMessage(playerid, COLOR_GREEN, "Account wurde erfolgreich erstellt!");
				    SendClientMessage(playerid, COLOR_YELLOW, "Vielen Dank für die Informationen, es folgt das Tutorial.");
					RegistrationStep[playerid] = 0;
				    TutTime[playerid] = 1;
				}
				case 2://Schweiz
				{
				    PlayerInfo[playerid][pOrigin] = 3;
				    SendClientMessage(playerid, COLOR_WHITE, "Du kommst aus der Schweiz.");
				    SendClientMessage(playerid, COLOR_WHITE, "====================================");
				    SendClientMessage(playerid, COLOR_GREEN, "Account wurde erfolgreich erstellt!");
				    SendClientMessage(playerid, COLOR_YELLOW, "Vielen Dank für die Informationen, es folgt das Tutorial.");
					RegistrationStep[playerid] = 0;
				    TutTime[playerid] = 1;
				}
			}
		}
		if(response == 0)
		{
	   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_3,DIALOG_STYLE_LIST,"Woher kommst du?","Deutschland\nÖsterreich\nSchweiz","Weiter"," ");
		}
	}
	return 1;
}


Function BuyUhr(playerid, uhrid)
{
	if(IsPlayerConnected(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	    if(uhrid == 0)
	    {
		    if(GetPlayerMoney(playerid) < 100000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -100000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun eine Rolex Uhr");
			PlayerInfo[playerid][pUhrID] = 5;
	    }
	    else if(uhrid == 1)
	    {
		    if(GetPlayerMoney(playerid) < 10000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -10000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun eine Breitling Uhr");
			PlayerInfo[playerid][pUhrID] = 4;
	    }
	    else if(uhrid == 2)
	    {
		    if(GetPlayerMoney(playerid) < 55000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -55000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun eine Junghans Uhr");
			PlayerInfo[playerid][pUhrID] = 3;
	    }
	    else if(uhrid == 3)
	    {
		    if(GetPlayerMoney(playerid) < 35000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -35000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun eine Zeiss Uhr");
			PlayerInfo[playerid][pUhrID] = 2;
	    }
	    else if(uhrid == 4)
	    {
		    if(GetPlayerMoney(playerid) < 1000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun eine Swatch Uhr");
			PlayerInfo[playerid][pUhrID] = 1;
	    }
	}
	return 1;
}


Function BuyHandy(playerid, handyid)
{
	if(IsPlayerConnected(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
		if(handyid == 0)
		{
		    if(GetPlayerMoney(playerid) < 200) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -200);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Nokia 3330");
			PlayerInfo[playerid][pHandyID] = 0;
		}
		else if(handyid == 1)
		{
		    if(GetPlayerMoney(playerid) < 500) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -500);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Nokia 6500");
			PlayerInfo[playerid][pHandyID] = 1;
		}
		else if(handyid == 2)
		{
		    if(GetPlayerMoney(playerid) < 1500) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1500);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Nokia N95");
			PlayerInfo[playerid][pHandyID] = 2;
		}
		else if(handyid == 3)
		{
		    if(GetPlayerMoney(playerid) < 1500) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1500);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Sony Ericsson C905");
			PlayerInfo[playerid][pHandyID] = 3;
		}
		else if(handyid == 4)
		{
		    if(GetPlayerMoney(playerid) < 2000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -2000);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Motorola Q9h");
			PlayerInfo[playerid][pHandyID] = 4;
		}
		else if(handyid == 5)
		{
		    if(GetPlayerMoney(playerid) < 2500) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1100);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein BlackBerry BOLD");
			PlayerInfo[playerid][pHandyID] = 5;
		}
		else if(handyid == 6)
		{
		    if(GetPlayerMoney(playerid) < 3000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1500);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein iPhone");
			PlayerInfo[playerid][pHandyID] = 6;
		}
		else if(handyid == 7)
		{
		    if(GetPlayerMoney(playerid) < 3000) { SendClientMessage(playerid, COLOR_GREY, "Zu wenig Geld!"); return 1; }
		    GivePlayerMoney(playerid, -1600);
		    SendClientMessage(playerid, COLOR_GREY, "Glückwunsch, du hast nun ein Google HTC Magic 3.5");
			PlayerInfo[playerid][pHandyID] = 7;
		}
	}
	return 1;
}

forward ReportReset(playerid);
public ReportReset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(JustReported[playerid] == 1)
	    {
			JustReported[playerid] = 0;
	    }
	}
}

Function PersoAntrag(playerid)
{
	SendClientMessage(playerid, COLOR_YELLOW,"===========[Stadt-Halle]===========");
	SendClientMessage(playerid, COLOR_RED,"Die Stadthallen Beamten melden soeben, dass dein Personalausweiß antrag beendet");
	SendClientMessage(playerid, COLOR_RED, "ist und du ihn jetzt in der Stadthalle abholen kannst");
    AllowPerso[playerid] = 1;
    PlayerInfo[playerid][pPersoStop] = 0;
    return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;

	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);

	if(GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

#pragma unused UnderCoverCar_Sultan

stock SetVehicleParamsForPlayerEx(vehicleid, playerid, objective, doorslocked)
{
	SetVehicleParamsForPlayer(vehicleid, playerid, objective, doorslocked);
	iVehicleObjective[vehicleid][0] = objective;
	iVehicleObjective[vehicleid][1] = doorslocked;
}

Function OnVehicleStreamIn(vehicleid, forplayerid)
{
	SetVehicleParamsForPlayer(vehicleid, forplayerid, iVehicleObjective[vehicleid][0], iVehicleObjective[vehicleid][1]);
}


Function SetParkPlatz(playerid,Autohaus)
{
    if(IsPlayerConnected(playerid) && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
	{
		if(Autohaus < AUTOHAUSER)
	    {
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][0];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][1];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][2];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][3];
	        RadZahl[Autohaus] += 1;
	        if(RadZahl[Autohaus] >= MAXPARKPLATZE)
	        {
	            RadZahl[Autohaus] = 0;
	        }
	    }
	}
}

Function OnPlayerBuyCar(playerid,Model,Preis,Autohaus)//CARSYS
{
	if(IsPlayerConnected(playerid) && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
	{
	    CallRemoteFunction("M_GivePlayerMoney","id",playerid,-Preis);
		if(Autohaus == 0)
		{
			AddToBizzTill(0,Preis/2);
		}
		else if(Autohaus == 2)
		{
			AddToBizzTill(0,Preis);
		}
		else if(Autohaus == 3)
		{
			AddToBizzTill(0,Preis/2);
		}
		else if(Autohaus == 4)
		{
			AddToBizzTill(0,Preis/10);
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast dir ein Auto gekauft.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Gehe zu der KFZ Stelle und hole dir ein Kennzeichen.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Fahre vorsichtig..Und denk an die StraßenVerkehrsOrdnung!");
	    SetParkPlatz(playerid,Autohaus);
	    new name[MAX_PLAYER_NAME], str[128];
	    GetPlayerName(playerid, name, sizeof name);
	    format(str, sizeof str, "/Autos/%s%d.dtcar", name,Dtc_PlayerKey[playerid]);
	    new File: hFile = fopen(str, io_write);
		if (hFile)
		{
		    new var[32];
		    format(var, 32, "CarId=0\n");fwrite(hFile, var);
		    format(var, 32, "CarModel=%d\n",Model);fwrite(hFile, var);
		    format(var, 32, "CarPos_x=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x]);fwrite(hFile, var);
			format(var, 32, "CarPos_y=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y]);fwrite(hFile, var);
			format(var, 32, "CarPos_z=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z]);fwrite(hFile, var);
			format(var, 32, "CarRotate=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate]);fwrite(hFile, var);
			format(var, 32, "CarNitro=0\n");fwrite(hFile, var);
			format(var, 32, "CarHyd=0\n");fwrite(hFile, var);
			format(var, 32, "CarWheel=0\n");fwrite(hFile, var);
			format(var, 32, "CarAusp=0\n");fwrite(hFile, var);
			format(var, 32, "CarSideL=0\n");fwrite(hFile, var);
			format(var, 32, "CarSideR=0\n");fwrite(hFile, var);
			format(var, 32, "CarFB=0\n");fwrite(hFile, var);
			format(var, 32, "CarRB=0\n");fwrite(hFile, var);
			format(var, 32, "CarSpoiler=0\n");fwrite(hFile, var);
			format(var, 32, "CarRoof=0\n");fwrite(hFile, var);
			format(var, 32, "CarHood=0\n");fwrite(hFile, var);
			format(var, 32, "CarVents=0\n");fwrite(hFile, var);
			format(var, 32, "CarLamps=0\n");fwrite(hFile, var);
			format(var, 32, "CarPJ=-1\n");fwrite(hFile, var);
			format(var, 32, "CarC1=-1\n");fwrite(hFile, var);
			format(var, 32, "CarC2=-1\n");fwrite(hFile, var);
			format(var, 32, "Preis=%d\n",Preis);fwrite(hFile, var);
			format(var, 32, "Plate=XXX\n");fwrite(hFile, var);
			fclose(hFile);
		}
		OnPlayerCarLogin(playerid);
	}
}

Function OnPlayerCarLogin(playerid)
{
	for(new x = 0; x < MaxVeh; x++)
	{
	    if(!Dtc_PlayerHaveCar[playerid][x])
		{
		    new string2[128];
			new playername2[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, playername2, sizeof(playername2));
			format(string2, sizeof(string2), "/Autos/%s%d.dtcar", playername2,x);
			new File: UserFile = fopen(string2, io_read);
			if (UserFile)
			{
			    Dtc_PlayerHaveCar[playerid][x] = 1;
				new key[ 256 ] , val[ 256 ];
				new Data[ 256 ];
				while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "CarId" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarId] = strval( val ); }
				   	if( strcmp( key , "CarModel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarModel] = strval( val ); }
				   	if( strcmp( key , "CarPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_x] = floatstr( val ); }
					if( strcmp( key , "CarPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_y] = floatstr( val ); }
					if( strcmp( key , "CarPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_z] = floatstr( val ); }
					if( strcmp( key , "CarRotate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRotate] = floatstr( val ); }
					if( strcmp( key , "CarNitro" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarNitro] = strval( val ); }
					if( strcmp( key , "CarHyd" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarHyd] = strval( val ); }
					if( strcmp( key , "CarWheel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarWheel] = strval( val ); }
					if( strcmp( key , "CarAusp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarAusp] = strval( val ); }
					if( strcmp( key , "CarSideL" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSideL] = strval( val ); }
					if( strcmp( key , "CarSideR" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSideR] = strval( val ); }
					if( strcmp( key , "CarFB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarFB] = strval( val ); }
					if( strcmp( key , "CarRB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRB] = strval( val ); }
					if( strcmp( key , "CarSpoiler" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSpoiler] = strval( val ); }
					if( strcmp( key , "CarRoof" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRoof] = strval( val ); }
					if( strcmp( key , "CarHood" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarHood] = strval( val ); }
					if( strcmp( key , "CarVents" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarVents] = strval( val ); }
				 	if( strcmp( key , "CarLamps" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarLamps] = strval( val ); }
					if( strcmp( key , "CarPJ" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPJ] = strval( val ); }
					if( strcmp( key , "CarC1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarC1] = strval( val ); }
					if( strcmp( key , "CarC2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarC2] = strval( val ); }
					if( strcmp( key , "Preis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPreis] = strval( val ); }
					if( strcmp( key , "Plate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Plate] = strval( val ); }
				}
		        fclose(UserFile);
		        PlayerCarSpawn(playerid,x);
			}
		}
	}
}

Function PlayerCarSpawn(playerid,Slot)
{
	if(IsPlayerConnected(playerid))
	{
		if(Dtc_PlayerHaveCar[playerid][Slot])
    	{
    	    PlayerCar[playerid][Slot][CarId] = CreateVehicle(PlayerCar[playerid][Slot][CarModel],PlayerCar[playerid][Slot][CarPos_x],PlayerCar[playerid][Slot][CarPos_y],PlayerCar[playerid][Slot][CarPos_z],PlayerCar[playerid][Slot][CarRotate],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2], 60000);/*vehicle spawn*/
    	    ChangeVehicleColor(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2]);
    	    if(PlayerCar[playerid][Slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarPJ]);}
			if(PlayerCar[playerid][Slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarNitro]);}
			if(PlayerCar[playerid][Slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHyd]);}
			if(PlayerCar[playerid][Slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarWheel]);}
			if(PlayerCar[playerid][Slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarAusp]);}
			if(PlayerCar[playerid][Slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideL]);}
			if(PlayerCar[playerid][Slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideR]);}
			if(PlayerCar[playerid][Slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarFB]);}
			if(PlayerCar[playerid][Slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRB]);}
			if(PlayerCar[playerid][Slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSpoiler]);}
			if(PlayerCar[playerid][Slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRoof]);}
			if(PlayerCar[playerid][Slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHood]);}
			if(PlayerCar[playerid][Slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarVents]);}
			if(PlayerCar[playerid][Slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarLamps]);}
			if(Dtc_LockOnSpawn)
			{
			    Dtc_Carlock[PlayerCar[playerid][Slot][CarId]] = 1;
				Dtc_LockCar(PlayerCar[playerid][Slot][CarId]);
			}
			new strings[15];
  			new name[MAX_PLAYER_NAME], str[128];
	    	GetPlayerName(playerid, name, sizeof name);
	    	format(str, sizeof str, "/Autos/%s%d.dtcar", name,Dtc_PlayerKey[playerid]);
			format(strings, sizeof(strings), "%s", dini_Get(str, "Plate"));
			SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], strings);
			SetVehicleToRespawn(PlayerCar[playerid][Slot][CarId]);
	        for(new x = 0; x < MaxVeh; x++)
	        {
	            PlayerCar[playerid][x][Plate] = strings;
			}
    	}
	}
}
Function OnVehicleMod(playerid,vehicleid,componentid)
{
	FRAC_OnVehicleMod(playerid, vehicleid, componentid);
    for(new x = 0; x < MaxVeh; x++)
	{
		if (vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
			if((componentid >= 1008) && (componentid <= 1010)) {PlayerCar[playerid][x][CarNitro] = componentid;}
			if((componentid >= 1142) && (componentid <= 1145)) {PlayerCar[playerid][x][CarVents] = componentid;}
			if((componentid == 1013) || (componentid == 1024)) {PlayerCar[playerid][x][CarLamps] = componentid;}
			if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) {PlayerCar[playerid][x][CarHood] = componentid;}
			if(componentid == 1087) {PlayerCar[playerid][x][CarHyd] = componentid;}
			if(componentid == 1086) {PlayerCar[playerid][x][CarHyd] = componentid;}
			if(IsAWheel(componentid)) {PlayerCar[playerid][x][CarWheel] = componentid;}
			if(IsAExhaust(componentid)) {PlayerCar[playerid][x][CarAusp] = componentid;}
			if(IsASideL(componentid)) {PlayerCar[playerid][x][CarSideL] = componentid; PlayerCar[playerid][x][CarSideR] = SideR;}
			if(IsASideR(componentid)) {PlayerCar[playerid][x][CarSideR] = componentid; PlayerCar[playerid][x][CarSideL] = SideL;}
			if(IsAFB(componentid)) {PlayerCar[playerid][x][CarFB] = componentid;}
			if(IsARB(componentid)) {PlayerCar[playerid][x][CarRB] = componentid;}
			if(IsASpoiler(componentid)) {PlayerCar[playerid][x][CarSpoiler] = componentid;}
			if(IsARoof(componentid)) {PlayerCar[playerid][x][CarRoof] = componentid;}
		}
	}
	return 1;
}
Function OnPlayerCarUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(Dtc_PlayerHaveCar[playerid][x])
			{
				DestroyVehicle(PlayerCar[playerid][x][CarId]);
				Dtc_Carlock[PlayerCar[playerid][x][CarId]] = 0;
				Dtc_LockCar(PlayerCar[playerid][x][CarId]);
				new string3[128];
				new playername3[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername3, sizeof(playername3));
				format(string3, sizeof(string3), "/Autos/%s%d.dtcar", playername3,x);
				new File: hFile = fopen(string3, io_write);
				if (hFile)
				{
				    new var[32];
				    format(var, 32, "CarId=%d\n",PlayerCar[playerid][x][CarId]);fwrite(hFile, var);
			    	format(var, 32, "CarModel=%d\n",PlayerCar[playerid][x][CarModel]);fwrite(hFile, var);
			    	format(var, 32, "CarPos_x=%.3f\n",PlayerCar[playerid][x][CarPos_x]);fwrite(hFile, var);
					format(var, 32, "CarPos_y=%.3f\n",PlayerCar[playerid][x][CarPos_y]);fwrite(hFile, var);
					format(var, 32, "CarPos_z=%.3f\n",PlayerCar[playerid][x][CarPos_z]);fwrite(hFile, var);
					format(var, 32, "CarRotate=%.3f\n",PlayerCar[playerid][x][CarRotate]);fwrite(hFile, var);
					format(var, 32, "CarNitro=%d\n",PlayerCar[playerid][x][CarNitro]);fwrite(hFile, var);
					format(var, 32, "CarHyd=%d\n",PlayerCar[playerid][x][CarHyd]);fwrite(hFile, var);
					format(var, 32, "CarWheel=%d\n",PlayerCar[playerid][x][CarWheel]);fwrite(hFile, var);
					format(var, 32, "CarAusp=%d\n",PlayerCar[playerid][x][CarAusp]);fwrite(hFile, var);
					format(var, 32, "CarSideL=%d\n",PlayerCar[playerid][x][CarSideL]);fwrite(hFile, var);
					format(var, 32, "CarSideR=%d\n",PlayerCar[playerid][x][CarSideR]);fwrite(hFile, var);
					format(var, 32, "CarFB=%d\n",PlayerCar[playerid][x][CarFB]);fwrite(hFile, var);
					format(var, 32, "CarRB=%d\n",PlayerCar[playerid][x][CarRB]);fwrite(hFile, var);
					format(var, 32, "CarSpoiler=%d\n",PlayerCar[playerid][x][CarSpoiler]);fwrite(hFile, var);
					format(var, 32, "CarRoof=%d\n",PlayerCar[playerid][x][CarRoof]);fwrite(hFile, var);
					format(var, 32, "CarHood=%d\n",PlayerCar[playerid][x][CarHood]);fwrite(hFile, var);
					format(var, 32, "CarVents=%d\n",PlayerCar[playerid][x][CarVents]);fwrite(hFile, var);
					format(var, 32, "CarLamps=%d\n",PlayerCar[playerid][x][CarLamps]);fwrite(hFile, var);
					format(var, 32, "CarPJ=%d\n",PlayerCar[playerid][x][CarPJ]);fwrite(hFile, var);
					format(var, 32, "CarC1=%d\n",PlayerCar[playerid][x][CarC1]);fwrite(hFile, var);
					format(var, 32, "CarC2=%d\n",PlayerCar[playerid][x][CarC2]);fwrite(hFile, var);
     				format(var, 32, "Plate=%s\n",PlayerCar[playerid][x][Plate]);fwrite(hFile, var);
					fclose(hFile);
				}
			}
		}
	}
}

Function Dtc_LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,1);
		}
	}
}

Function Dtc_UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,0);
		}
	}
}

Function IsADtCar(car) //!CallRemoteFunction("IsADtCar","i",c)
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
	    	 	if (car == PlayerCar[playerid][x][CarId])
		     	{
		     	    return 1;
		     	}
			}
		}
	}
	return 0;
}
Function IsASideR(componentid)
{
    if(componentid == 1007)
	{
	    SideL = 1017;
		return 1;
	}
	if(componentid == 1026)
	{
	    SideL = 1027;
		return 1;
	}
	if(componentid == 1030)
	{
	    SideL = 1031;
		return 1;
	}
	if(componentid == 1040)
	{
	    SideL = 1036;
		return 1;
	}
	if(componentid == 1041)
	{
	    SideL = 1039;
		return 1;
	}
	if(componentid == 1042)
	{
	    SideL = 1099;
		return 1;
	}
	if(componentid == 1051)
	{
	    SideL = 1047;
		return 1;
	}
	if(componentid == 1048)
	{
	    SideL = 1052;
		return 1;
	}
	if(componentid == 1056)
	{
	    SideL = 1062;
		return 1;
	}
	if(componentid == 1063)
	{
	    SideL = 1057;
		return 1;
	}
	if(componentid == 1069)
	{
	    SideL = 1071;
		return 1;
	}
	if(componentid == 1072)
	{
	    SideL = 1070;
		return 1;
	}
	if(componentid == 1094)
	{
	    SideL = 1090;
		return 1;
	}
	if(componentid == 1093)
	{
	    SideL = 1095;
		return 1;
	}
	if(componentid == 1122)
	{
	    SideL = 1101;
		return 1;
	}
	if(componentid == 1102)
	{
	    SideL = 1133;
		return 1;
	}
 	if(componentid == 1124)
	{
	    SideL = 1106;
		return 1;
	}
	if(componentid == 1107)
	{
	    SideL = 1108;
		return 1;
	}
	if(componentid == 1118)
	{
	    SideL = 1120;
		return 1;
	}
	if(componentid == 1137)
	{
	    SideL = 1134;
		return 1;
	}
	return 0;
}

Function IsASideL(componentid)
{
    if(componentid == 1134)
	{
	    SideR = 1137;
		return 1;
	}
    if(componentid == 1119)
	{
	    SideR = 1121;
		return 1;
	}
    if(componentid == 1120)
	{
	    SideR = 1118;
		return 1;
	}
    if(componentid == 1108)
	{
	    SideR = 1107;
		return 1;
	}
    if(componentid == 1017)
	{
	    SideR = 1007;
		return 1;
	}
	if(componentid == 1027)
	{
	    SideR = 1026;
		return 1;
	}
	if(componentid == 1031)
	{
	    SideR = 1030;
		return 1;
	}
	if(componentid == 1036)
	{
	    SideR = 1040;
		return 1;
	}
	if(componentid == 1039)
	{
	    SideR = 1041;
		return 1;
	}
	if(componentid == 1099)
	{
	    SideR = 1042;
		return 1;
	}
	if(componentid == 1047)
	{
	    SideR = 1051;
		return 1;
	}
	if(componentid == 1052)
	{
	    SideR = 1048;
		return 1;
	}
	if(componentid == 1062)
	{
	    SideR = 1056;
		return 1;
	}
	if(componentid == 1057)
	{
	    SideR = 1063;
		return 1;
	}
	if(componentid == 1071)
	{
	    SideR = 1069;
		return 1;
	}
	if(componentid == 1070)
	{
	    SideR = 1072;
		return 1;
	}
	if(componentid == 1090)
	{
	    SideR = 1094;
		return 1;
	}
	if(componentid == 1095)
	{
	    SideR = 1093;
		return 1;
	}
	if(componentid == 1095)
	{
	    SideR = 1093;
		return 1;
	}
	if(componentid == 1101)
	{
	    SideR = 1122;
		return 1;
	}
	if(componentid == 1133)
	{
	    SideR = 1102;
		return 1;
	}
	if(componentid == 1106)
	{
	    SideR = 1124;
		return 1;
	}
	return 0;
}

Function IsAFB(componentid)
{
    if(componentid >= 1152 && componentid <= 1153 || componentid >= 1165 && componentid <= 1166)
	{
		return 1;
	}
	if(componentid == 1155 || componentid == 1157 || componentid == 1160 || componentid == 1176 || componentid == 1179 || componentid == 1185)
	{
		return 1;
	}
	if(componentid >= 1169 && componentid <= 1174 || componentid >= 1181 && componentid <= 1182)
	{
		return 1;
	}
	if(componentid >= 1188 && componentid <= 1191)
	{
		return 1;
	}
	return 0;
}

Function IsARB(componentid)
{
    if(componentid >= 1140 && componentid <= 1141 || componentid >= 1148 && componentid <= 1151)
	{
		return 1;
	}
	if(componentid == 1154 || componentid == 1156 || componentid == 1159 || componentid == 1161 || componentid == 1175 || componentid == 1180)
	{
		return 1;
	}
	if(componentid >= 1167 && componentid <= 1168 || componentid >= 1177 && componentid <= 1178)
	{
		return 1;
	}
 	if(componentid >= 1183 && componentid <= 1184 || componentid >= 1186 && componentid <= 1187)
	{
		return 1;
	}
	if(componentid >= 1192 && componentid <= 1193)
	{
		return 1;
	}
	return 0;
}

Function IsASpoiler(componentid)
{
    if(componentid >= 1000 && componentid <= 1003 || componentid >= 1014 && componentid <= 1016)
	{
		return 1;
	}
	if(componentid == 1023 || componentid == 1058 || componentid == 1158)
	{
		return 1;
	}
	if(componentid >= 1049 && componentid <= 1050 || componentid >= 1138 && componentid <= 1139)
	{
		return 1;
	}
 	if(componentid >= 1146 && componentid <= 1147 || componentid >= 1162 && componentid <= 1164)
	{
		return 1;
	}
	return 0;
}

Function IsARoof(componentid)
{
    if(componentid >= 1032 && componentid <= 1033 || componentid >= 1053 && componentid <= 1055)
	{
		return 1;
	}
	if(componentid == 1035 || componentid == 1038 || componentid == 1061 || componentid == 1088 || componentid == 1091)
	{
		return 1;
	}
	if(componentid == 1103 || componentid == 1128)
	{
		return 1;
	}
	if(componentid >= 1067 && componentid <= 1068 || componentid >= 1130 && componentid <= 1131)
	{
		return 1;
	}
	return 0;
}

Function CloseoamtTor()
{
	MoveObject(OamtLS,924.210754, -1216.086304, 16.024687,3.0);
    MoveObject(OamtLS2,924.129578, -1216.344849, 23.140125,3.0);
	for(new i=0; i<GetMaxPlayers(); i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,10.0,1584.747680,-1638.100952,12.492498))
	    {
			PlaySoundForPlayer(i,1035);
			SetTimerEx("PlaySoundForPlayer",2000,0,"id",i,1036);
		}
	}
	return 1;
}

Function IsAExhaust(componentid)
{
    if(componentid >= 1018 && componentid <= 1022)
	{
		return 1;
	}
	if(componentid >= 1028 && componentid <= 1029)
	{
		return 1;
	}
	if(componentid == 1037 || componentid == 1059 || componentid == 1089 || componentid == 1092 || componentid == 1132)
	{
		return 1;
	}
	if(componentid == 1104 || componentid == 1105 || componentid == 1113 || componentid == 1114 || componentid == 1129)
	{
		return 1;
	}
	if(componentid == 1135 || componentid == 1136)
	{
		return 1;
	}
	if(componentid >= 1043 && componentid <= 1046)
	{
		return 1;
	}
	if(componentid >= 1126 && componentid <= 1127)
	{
		return 1;
	}
	if(componentid >= 1064 && componentid <= 1066)
	{
		return 1;
	}
	return 0;
}

Function IsAWheel(componentid)
{
    if(componentid >= 1073 && componentid <= 1085)
	{
		return 1;
	}
	if(componentid >= 1096 && componentid <= 1098)
	{
		return 1;
	}
	if(componentid == 1025)
	{
		return 1;
	}
	return 0;
}

Function IsAFahrschulVeh(carid)
{
	for(new i = 0; i < sizeof(FahrschulVehs); i++)
	{
	    if(carid == FahrschulVehs[i])
	    {
			return 1;
 		}
	}
	return 0;
}



Function NDMZONE(playerid)
{
	if(IsPlayerInArea(playerid, 1436.625, -1764.764, 1611.556, -1618.698) ||
	IsPlayerInArea(playerid, 1691.416, -1677.914, 1759.867, -1583.168) ||
	IsPlayerInArea(playerid, 1159.018, -959.4252, 1292.118, -864.6794) ||
	IsPlayerInArea(playerid, 1181.835, -1417.363, 1269.301, -1283.14)||
	GetPlayerInterior(playerid) == 10)
	{
		TextDrawShowForPlayer(playerid, NDMZONET);
		TextDrawHideForPlayer(playerid, Datum);
	}
	else
	{
 		TextDrawHideForPlayer(playerid, NDMZONET);
 		TextDrawShowForPlayer(playerid, Datum);
	}
}



stock IsPlayerInArea(playerid,Float:minX,Float:minY,Float:maxX,Float:maxY)
{
	//new Float:pX,Float:pY,Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	if(pX >= minX && pX <= maxX && pY >= minY && pY <= maxY) return 1;
	else return 0;
}
Function leozu1()
{
	MoveObject(leo1, 1426.56945801,-1901.34228516,12.76267624,2.5);
	return 1;
}

Function leozu2()
{
	MoveObject(leo2,1426.33483887,-1901.32604980,12.75741196,2.5);
	return 1;
}


Function Timer1()
{
	SyncTime();
	DollahScoreUpdate();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pTot] == 1)
		{
			pIstTot[i] += 1;
		}
		if(PlayerInfo[i][pTot] == 1 && pIstTot[i] == 2)
		{
			if(IsPlayerInFrac(i, 1))
			{
				SetPlayerColor(i,NAMECOLOR_LSCOP);
			}
			else
			{
			    SetPlayerColor(i,TEAM_HIT_COLOR);
			}
			PlayerInfo[i][pTot] = 0;
			pIstTot[i] = 0;
			SetPlayerVirtualWorld(i,0);
			if(PlayerInfo[i][pJailed] == 0)
			{
			    SetCameraBehindPlayer(i);
				SetPlayerPos(i, 1176.2914,-1323.6859,14.0141);
				UnFreezePlayer(i);
				SetPlayerFacingAngle(i, 266.0591);
				SetPlayerSkin(i, PlayerInfo[i][pChar]);
			}
			else if(PlayerInfo[i][pJailed] > 0)
			{
			    SetPlayerSpawn(i);
       			UnFreezePlayer(i);
       			SetPlayerSkin(i, PlayerInfo[i][pChar]);
			}
			SendClientMessage(i, COLOR_LIGHTGREEN, "Du wurde erfolgreich aus dem Krankenhaus entlassen");
			SendClientMessage(i, COLOR_LIGHTGREEN, "Der aufenhalt kostet dich 50$ Schönen Tag noch");
			GivePlayerMoney(i, -50);
			FraktionsKasse[3] += 500;
		}
		if(IsPlayerConnected(i) && gPlayerLogged[i])
		{
			PlayerUpdate(i);
		}
		if(IsPlayerConnected(i))
		{
			PlayerInfo[i][pGesamtMinutes]++;
			PlayerInfo[i][pMinutesSinceLogin]++;
			PlayerInfo[i][pMinutesSinceAn]++;
			if(PlayerInfo[i][pPlayMinutes] <= 60)
			{
			    PlayerInfo[i][pPlayMinutes]++;
			}
			if(PlayerInfo[i][pPlayMinutes] >= 60)
			{
			 	PlayerInfo[i][pPlayMinutes] = 0;
	 			new string[128];
				new account,interest;
				new rent = 0;
				if(IsPlayerConnected(i))
				{
				    if(M_Bot[i][PAFK] == 0)
				    {
					    if(MoneyMessage[i]==1)
						{
						    if(PlayerInfo[i][pJailed] == 0 && WantedLevel[i] >= 0)
						    {
							    SendClientMessage(i, COLOR_LIGHTRED, "Du konntest deine Schulden nicht Bezahlen und hast ein Wanted bekommen!");
								GivePlayerMoney(i, 1000);
								WantedLevel[i]++;
							}
							else if(PlayerInfo[i][pJailed] == 1)
							{
							    SendClientMessage(i, COLOR_LIGHTRED, "Du bist in den Schulden und musst 3 Minuten länger sitzen!");
							    PlayerInfo[i][pJailTime] += 180;
								GivePlayerMoney(i, 1000);
							}
						}
						new playername2[MAX_PLAYER_NAME];
						GetPlayerName(i, playername2, sizeof(playername2));
						account = PlayerInfo[i][pAccount];
						new key = PlayerInfo[i][pPhousekey];
						if(key != 255)
						{
							rent = HouseInfo[key][hRent];
							if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
							{
								rent = 0;
							}
							else if(rent > GetPlayerMoney(i))
							{
								PlayerInfo[i][pPhousekey] = 255;
								SendClientMessage(i, COLOR_WHITE, "Du wurdest aus der Wohnung geschmissen!");
								rent = 0;
							}
							HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
						}
						new tmpintrate;
						if (key != 255 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
							{
								tmpintrate = intrate+4;
							}
							else
							{
								tmpintrate = intrate+2;
							}//HouseInfo[key][hLevel]
						}
						else
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
					 		{
						  		tmpintrate = 3;
						  	}
							else
						 	{
							 	tmpintrate = 1;
						 	}
						}
						if(PlayerInfo[i][pPbiskey] > 0)
						{
						    tmpintrate++;
						}
						new fraktion = 0;
						new checks;
		 				if(PlayerInfo[i][pMember] > 0) fraktion = PlayerInfo[i][pMember] - 1;
		  				if(PlayerInfo[i][pLeader] > 0) fraktion = PlayerInfo[i][pLeader] - 1;
						if(fraktion >= 0)
						{
		    				if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] < 0)
					    	{
						    	checks = 0;
						    	GivePlayerMoney(i, checks);
							}
							else if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] >= 0)
							{
			    				checks = PlayerInfo[i][pGehalt];
						    	GivePlayerMoney(i, checks);
								FraktionsKasse[fraktion] -= checks;
							}
						}
						else if(PlayerInfo[i][pJob] != 0 || PlayerInfo[i][pMember] == 0 || PlayerInfo[i][pLeader] == 0)
						{
							checks = 500;
							GivePlayerMoney(i, checks);
						}//Should work for every player online
				    	PlayerInfo[i][pAccount] -= Tax;
				    	if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				new bonus = PlayerInfo[i][pPayCheck] / 2;
						    PlayerInfo[i][pPayCheck] += bonus;
						}
						new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
		    			//new oil = (PlayerInfo[i][pPhousekey]*100);
					    ConsumingMoney[i] = 1;
					    if(PlayerInfo[i][pAccount] > 0)
					    {
					   		PlayerInfo[i][pAccount] -= ebill;
					    	SBizzInfo[3][sbTill] += ebill/5;
						}
						else
						{
		    				ebill = 0;
						}
						interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
						//PlayerInfo[i][pExp]++;
						PlayerPlayMusic(i);
						PlayerInfo[i][pAccount] = account+interest;
						SendClientMessage(i, COLOR_YELLOW, "|================| Payday |================|");
						format(string, sizeof(string), "  Gehalt: $%d  Miete: -$%d  Steuern: -$%d", checks, rent, Tax);
						SendClientMessage(i, COLOR_GRAD1, string);
						if(PlayerInfo[i][pPhousekey] != 255 || PlayerInfo[i][pPbiskey] != 255)
						{
		    				format(string, sizeof(string), "  Strom Kosten: -$%d", ebill);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
						if(PlayerInfo[i][pHandyVer] == 1)
						{
							SendClientMessage(i,COLOR_GRAD2,"  Handyvertragskosten: -$100");
							GivePlayerMoney(i, -100);
						}
						if(PlayerInfo[i][pDonateRank] >= 1)
						{
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "Du hast 3 Respektpunkte erhalten.");
						}
						else {
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "Du hast 1 Respektpunkt erhalten.");
						}
						if(PlayerInfo[i][pPlayerKreditDauer] > 0)
						{
						    PlayerInfo[i][pAccount] -= PlayerInfo[i][pPlayerKredit];
						    PlayerInfo[i][pPlayerKreditDauer]--;
							format(string, sizeof(string), "  Kreditrate: -%d", PlayerInfo[i][pPlayerKredit]);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
						format(string, sizeof(string), "  Zinsen: $%d [0.%d Prozent]", interest,tmpintrate);
						SendClientMessage(i, COLOR_GRAD2, string);
						SendClientMessage(i, COLOR_YELLOW, "|=================||============||==============|");
						format(string, sizeof(string), "  Neuer Kontostand: $%d", PlayerInfo[i][pAccount]);
						SendClientMessage(i, COLOR_GRAD5, string);
						format(string, sizeof(string), "~g~Zahltag~y~!!!");
						GameTextForPlayer(i, string, 5000, 1);
						if(checks == 0 && FrakMember(i) && PlayerInfo[i][pJob] == 0)
						{
		    				SendClientMessage(i,COLOR_LIGHTRED, "Da die Fraktionskasse leer ist bekommst du kein Gehalt!");
						}
						rent = 0;
						PlayerInfo[i][pPayCheck] = 0;
						PlayerInfo[i][pConnectTime] += 1;
						if(PlayerInfo[i][pZollPassTime] >= 25)
						{
							PlayerInfo[i][pZollPass] = 0;
							PlayerInfo[i][pZollPassTime] = 0;
							format(string, sizeof(string), "* Dein Zollpass ist nun nicht mehr gültig und vom Staat als ungültig anerkannt.");
							SendClientMessage(i, COLOR_LIGHTRED, string);
						}
						if(PlayerInfo[i][pZollPass] == 1)
						{
							PlayerInfo[i][pZollPassTime] += 1;
							format(string, sizeof(string), "* Du nutzt deinen Zollpass nun schon seit %d PayDays.", PlayerInfo[i][pZollPassTime]);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
						if(WantedLevel[i] >= 1)
						{
							WantedLevel[i] --;
							new wlevel;
							wlevel = GetPlayerWantedLevel(i);
							new tmp[64];
							format(tmp,sizeof(tmp), "Aktuelles Wantedlevel: %i", wlevel-1);
							SendClientMessage(i, COLOR_GREEN,tmp);
						}
						if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				PlayerInfo[i][pPayDayHad] += 1;
					    	if(PlayerInfo[i][pPayDayHad] >= 5)
						    {
		        				PlayerInfo[i][pExp]++;
						        PlayerInfo[i][pPayDayHad] = 0;
						    }
						}
					}
					else
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "* Du hast kannst keinen PayDay bekommen, solange du AFK bist!");
					}
				}
			}
			if(KnastTime[i] > 0)
			{
  				KnastTime[i]--;
			}
			if(KnastTime[i] == 0 && Knast[i] > 0)
			{
				Knast[i] = 0;
 				KnastTime[i] = 0;
   				SpawnPlayer(i);
	    		SendClientMessage(i,COLOR_YELLOW," Benimm dich ab jetzt, oder ein Admin wird dich wieder einsperren!");
			}
		}
	}
	return 1;
}

Function KHSP(playerid)
{
	KHSperre[playerid] = 0;
	return 1;
}

Function Timer2()
{
    	new string[255];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(KickPlayer[i]==1) { Kick(i); }
			else if(KickPlayer[i]==2) { Ban(i); }
			//if(GetPlayerPing(i) >= 500 && PlayerInfo[i][pAdmin] < 1) { Kick(i); }
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				FreezePlayer(i);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
				        new Float:health;
					    new name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~Leben:%.1f",name,targetid,health);
					    GameTextForPlayer(i, string, 2500, 3);
				    }
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}//Targetid connected
			}
			if(Spectate[i] == 253)
			{
				UnFreezePlayer(i);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pDonateRank] > 0)
		        {
		            SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				UnFreezePlayer(i);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
	new Float:Speedo_X,Float:Speedo_Y,Float:Speedo_Z;
	new Float:Speedo_HP;
	for(new i=0; i<SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && !IsANoTachoVehicle(GetPlayerVehicleID(i)))
		{
		    GetPlayerPos(i, Speedo_X, Speedo_Y, Speedo_Z);
			GetPlayerVehicleID(i);
			GetVehicleHealth(GetPlayerVehicleID(i), Speedo_HP);

			new str1[256],str2[256],str3[256],str4[256];
			if(SpeedoON[i] == 0)
			{
				TextDrawShowForPlayer(i, box[i]); TextDrawShowForPlayer(i, fahrzeug[i]); TextDrawShowForPlayer(i, kmh[i]);
				TextDrawShowForPlayer(i, hoehe[i]); TextDrawShowForPlayer(i, zustand[i]);
				SpeedoON[i] = 1;
			}
			new Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
			new veh = GetPlayerVehicleID(i);
   			GetVehicleVelocity(veh, speed_x, speed_y, speed_z);
			final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*120.0; // 136.666667 = kmph  // 85.4166672= mph
			final_speed_int = floatround(final_speed,floatround_round);
			new kmh_anzahl = final_speed_int;

			format(str1,sizeof(str1),"Fahrzeug: ~y~%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(i))-400]);
			TextDrawSetString(fahrzeug[i], str1);

			if(kmh_anzahl >= 150)
			{
				format(str2,sizeof(str2),"KM/H: ~r~%d",kmh_anzahl);
				TextDrawSetString(kmh[i], str2);
			}
			else if(kmh_anzahl >= 100)
			{
                format(str2,sizeof(str2),"KM/H: ~y~%d",kmh_anzahl);
				TextDrawSetString(kmh[i], str2);
			}
			else if(kmh_anzahl >= 50)
			{
                format(str2,sizeof(str2),"KM/H: ~g~%d",kmh_anzahl);
				TextDrawSetString(kmh[i], str2);
			}
			else
			{
                format(str2,sizeof(str2),"KM/H: ~b~%d",kmh_anzahl);
				TextDrawSetString(kmh[i], str2);
			}
			new vehicleid = GetPlayerVehicleID(i);
			format(str3,sizeof(str3),"Tank: ~g~%d / %d Liter", Gas[vehicleid],GetGasMax(GetVehicleModel(vehicleid)));
			TextDrawSetString(hoehe[i], str3);

			if(Speedo_HP >= 551)
			{
				format(str4,sizeof(str4),"Zustand: ~g~%.2f", Speedo_HP);
				TextDrawSetString(zustand[i], str4);
			}
			else if(Speedo_HP >= 361)
			{
                format(str4,sizeof(str4),"Zustand: ~y~%.2f", Speedo_HP);
				TextDrawSetString(zustand[i], str4);
			}
			else
			{
                format(str4,sizeof(str4),"Zustand: ~r~%.2f", Speedo_HP);
				TextDrawSetString(zustand[i], str4);
			}
		}
		SavePlayerPos[i][sX] = Speedo_X, SavePlayerPos[i][sY] = Speedo_Y, SavePlayerPos[i][sZ] = Speedo_Z;
	}
	for(new i=0; i<SLOTS; i++)
	{
		if(!IsPlayerInAnyVehicle(i))
		{
            TextDrawHideForPlayer(i, box[i]); TextDrawHideForPlayer(i, fahrzeug[i]); TextDrawHideForPlayer(i, kmh[i]);
            TextDrawHideForPlayer(i, hoehe[i]); TextDrawHideForPlayer(i, zustand[i]);
			TextDrawShowForPlayer(i, Copyright);
			SpeedoON[i] = 0;
		}
	}
    SetPlayerUnjail();
	{
		new Hour,Minute,Sec,String[12];
		gettime(Hour,Minute,Sec);
		format(String,sizeof(String),"%02d:%02d",Hour,Minute);
		TextDrawSetString(Uhrzeit,String);
		if(Hour == 0 && Minute == 0)
		{
			new year,month,day,DString[100],mtext[20], dtext[20];
			getdate(year, month, day);
			if(month == 1) { mtext = "01"; }
			else if(month == 2) { mtext = "02"; }
			else if(month == 3) { mtext = "03"; }
			else if(month == 4) { mtext = "04"; }
			else if(month == 5) { mtext = "05"; }
			else if(month == 6) { mtext = "06"; }
			else if(month == 7) { mtext = "07"; }
			else if(month == 8) { mtext = "08"; }
			else if(month == 9) { mtext = "09"; }
			else if(month == 10) { mtext = "10"; }
			else if(month == 11) { mtext = "11"; }
			else if(month == 12) { mtext = "12"; }
			if(day == 1) { dtext = "01"; }
			else if(day == 2) { dtext = "02"; }
			else if(day == 3) { dtext = "03"; }
			else if(day == 4) { dtext = "04"; }
			else if(day == 5) { dtext = "05"; }
			else if(day == 6) { dtext = "06"; }
			else if(day == 7) { dtext = "07"; }
			else if(day == 8) { dtext = "08"; }
			else if(day == 9) { dtext = "09"; }
			else if(day == 10) { dtext = "10"; }
			else if(day == 11) { dtext = "11"; }
			else if(day == 12) { dtext = "12"; }
			else if(day == 13) { dtext = "13"; }
			else if(day == 14) { dtext = "14"; }
			else if(day == 15) { dtext = "15"; }
			else if(day == 16) { dtext = "16"; }
			else if(day == 17) { dtext = "17"; }
			else if(day == 18) { dtext = "18"; }
			else if(day == 19) { dtext = "19"; }
			else if(day == 20) { dtext = "20"; }
			else if(day == 21) { dtext = "21"; }
			else if(day == 22) { dtext = "22"; }
			else if(day == 23) { dtext = "23"; }
			else if(day == 24) { dtext = "24"; }
			else if(day == 25) { dtext = "25"; }
			else if(day == 26) { dtext = "26"; }
			else if(day == 27) { dtext = "27"; }
			else if(day == 28) { dtext = "28"; }
			else if(day == 29) { dtext = "29"; }
			else if(day == 30) { dtext = "30"; }
			else if(day == 31) { dtext = "31"; }
		    format(DString, sizeof(DString), "%s.%s.%d", dtext, mtext, year);
		    TextDrawSetString(Datum,DString);
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(TextSpams[i] > 0)
			{
				TextSpams[i]--;
			}
			if(CMDSpams[i] > 0)
			{
				CMDSpams[i]--;
			}
			if(IsPlayerConnected(i))
			{
				if(PlayerStoned[i] >= 2)
				{
					return 1;
				}
				new stern = WantedLevel[i];
				SetPlayerWantedLevel(i,stern);
				WantedPoints[i] = stern * 2;
			}
		}
		SetWorldTime(Hour+2);//ZEITOMG
	}
	{
		for(new i; i<GetMaxPlayers(); i++)
		{
	    	if(IsPlayerConnected(i))
	    	{
				if(CheckPointShown[i] == 1)
				{
					DisablePlayerCheckpoint(i);
					CheckPointShown[i] = 0;
				}
				if(DisplayForPlayer(i))
				{
					if(GetDistanceToClosestInside(i) < GetDistanceToClosestOutside(i) && GetDistanceToClosestInside(i) < 15.0)
					{
				    	new cpid = GetClosestInsideID(i);
						SetPlayerCheckpoint(i,CPs[cpid][ExitX],CPs[cpid][ExitY],CPs[cpid][ExitZ],1.5);
						CheckPointShown[i] = 1;
					}
					if(GetDistanceToClosestOutside(i) < GetDistanceToClosestInside(i) && GetDistanceToClosestOutside(i) < 15.0)
					{
				    	new cpid = GetClosestOutsideID(i);
						SetPlayerCheckpoint(i,CPs[cpid][EnterX],CPs[cpid][EnterY],CPs[cpid][EnterZ],1.5);
						CheckPointShown[i] = 1;
					}
				}
			}
		}
	}
	{
	    new Float:maxspeed = 250.0;
	    new plname[MAX_PLAYER_NAME];
		new Float:oldposx, Float:oldposy, Float:oldposz;
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
	            if(SafeTime[i] > 0)
				{
					SafeTime[i]--;
				}
				if(SafeTime[i] == 1)
				{
					if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
					{
						SendClientMessage(i, COLOR_WHITE, "Bitte log dich ein.");
					}
				}
			    if(GetPlayerState(i) == 2)
			    {
					GetPlayerPos(i, TelePos[i][3], TelePos[i][4], TelePos[i][5]);
					if(TelePos[i][5] > 550.0)
					{
						TelePos[i][0] = 0.0;
						TelePos[i][1] = 0.0;
					}
					if(TelePos[i][0] != 0.0)
					{
						new Float:xdist = TelePos[i][3]-TelePos[i][0];
						new Float:ydist = TelePos[i][4]-TelePos[i][1];
						new Float:sqxdist = xdist*xdist;
						new Float:sqydist = ydist*ydist;
						new Float:distance = (sqxdist+sqydist)/31;
						if(gSpeedo[i] == 2)
						{
							if(distance <10)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :   ~w~%.0f",distance);
							}
							if(distance > 10 && distance < 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :  ~w~%.0f",distance);
							}
							if(distance > 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph : ~w~%.0f",distance);
							}
							GameTextForPlayer(i, string, 2000, 5);
						}
						if(distance > maxspeed && PlayerInfo[i][pAdmin] < 1)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if(!IsAPlane(tmpcar))
							{
								GetPlayerName(i, plname, sizeof(plname));
								format(string, 256, "Warnung: [%d]%s %.0f km/h",i,plname,distance);
								ABroadCast(COLOR_YELLOW,string,1);
							}
						}

					}
					if(TelePos[i][5] < 550.0 && TelePos[i][3] != 0.0)
					{
						TelePos[i][0] = TelePos[i][3];
						TelePos[i][1] = TelePos[i][4];
					}
				}
			    if(PlayerInfo[i][pLocal] != 255 && PlayerInfo[i][pInt] != 0)
				{
					new house = PlayerInfo[i][pLocal];
					GetPlayerPos(i, oldposx, oldposy, oldposz);
					if(oldposz != 0.0)
					{
						if(oldposz < 600.0)
						{
							if(house > 10000)
							{
								if (!IsPlayerInRangeOfPoint(i,6.0,1040.6,-1021.0,31.7) && house == 10001 ||!IsPlayerInRangeOfPoint(i,6.0,-2720.5,217.5,4.1) && house == 10002 ||!IsPlayerInRangeOfPoint(i,6.0,2644.6,-2044.9,13.3) && house == 10003)
								{
									new oldcash = gSpentCash[i];
									new Total = GetPlayerMoney(i) - oldcash;
									printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
									new name[MAX_PLAYER_NAME];
									GetPlayerName(i, name, sizeof(name));
									format(string,128,"<< %s hat den HausUpgradeladen mit $%d verlassen >>",name,Total);
									PayLog(string);
									gSpentCash[i] = 0;
									TelePos[i][0] = 0.0;
									TelePos[i][1] = 0.0;
									PlayerInfo[i][pLocal] = 255;
									SetPlayerInterior(i,0);
									PlayerInfo[i][pInt] = 0;
									Spectate[i] = 255;
								}
							}//SOLO
							/*if(house == 241)//City Hall
							{
							    SetPlayerInterior(i,0);
								SetPlayerPos(i,-2162.2554,-2385.9541,30.6250);
								PlayerInfo[i][pInt] = 0;
								PlayerInfo[i][pLocal] = 255;
							}
							if(house == 242)
							{
							    SetPlayerInterior(i,0);
								SetPlayerPos(i,1073.0619,-344.5148,73.9922);
								PlayerInfo[i][pInt] = 0;
								PlayerInfo[i][pLocal] = 255;
							}
							if(house >= 99 && house != 10000)
							{
								SetPlayerPos(i, BizzInfo[house-99][bEntranceX], BizzInfo[house-99][bEntranceY],BizzInfo[house-99][bEntranceZ]); // Warp the player
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
							}
							else if(house < 99 && house != 10000)
							{
								SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
							}*/
						}
					}
				}
			    if(CellTime[i] > 0)
				{
					if (CellTime[i] == cchargetime)
					{
						CellTime[i] = 1;
						if(Mobile[Mobile[i]] == i)
						{
							CallCost[i] = CallCost[i]+callcost;
						}
					}
					CellTime[i] = CellTime[i] +1;
					if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
					{
					    if(IsPlayerConnected(Mobile[i]))
					    {
							new called[MAX_PLAYER_NAME];
							GetPlayerName(Mobile[i], called, sizeof(called));
							//format(string, sizeof(string), "* %s's Handy klingelt.", called);
							//new handyname[20];
							if(PlayerInfo[i][pHandyID] == 7) { format(handyname, sizeof(handyname), "Google HTC Magic"); }
							else if(PlayerInfo[i][pHandyID] == 6) { format(handyname, sizeof(handyname), "iPhone"); }
							else if(PlayerInfo[i][pHandyID] == 5) { format(handyname, sizeof(handyname), "BlackBerry BOLD"); }
							else if(PlayerInfo[i][pHandyID] == 4) { format(handyname, sizeof(handyname), "Motorola Q9h"); }
							else if(PlayerInfo[i][pHandyID] == 3) { format(handyname, sizeof(handyname), "Sony Ericsson C905"); }
							else if(PlayerInfo[i][pHandyID] == 2) { format(handyname, sizeof(handyname), "Nokia N95"); }
							else if(PlayerInfo[i][pHandyID] == 1) { format(handyname, sizeof(handyname), "Nokia 6500"); }
							else { format(handyname, sizeof(handyname), "Nokia 3300"); }
							format(string, sizeof(string), "* %s's %s  klingelt.", called, handyname);
							RingTone[Mobile[i]] = 10;
							ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
				}
				if(CellTime[i] == 0 && CallCost[i] > 0)
				{
					format(string, sizeof(string), "~w~Der Anruf kostet dich~n~ $5 Handyguthaben");
					//GivePlayerMoney(i, -CallCost[i]);
	                if(PlayerInfo[i][pHandyVer] == 0) PlayerInfo[i][pHandyGeld] -= 5;
					SBizzInfo[1][sbTill] += CallCost[i];
					ExtortionSBiz(1, CallCost[i]);
					GameTextForPlayer(i, string, 5000, 1);
					CallCost[i] = 0;
				}
				if(TransportTime[i] > 0)
				{//Taxi driver and passenger only
				    if(TransportTime[i] >= 16)
					{
						TransportTime[i] = 1;
						if(TransportDriver[i] < 999)
						{
							if(IsPlayerConnected(TransportDriver[i]))
							{
		      					TransportCost[i] += TransportValue[TransportDriver[i]];
							    TransportCost[TransportDriver[i]] = TransportCost[i];
							}
						}
					}
				    TransportTime[i] += 1;
				    format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
				    GameTextForPlayer(i, string, 15000, 6);
				}
			}
		}
	}
	return 1;
}


Function Timer3()
{
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				PlayerUpdate(i);
				if(PlayerInfo[i][pJob] > 0)
	    		{
	    	    	if(PlayerInfo[i][pContractTime] < 25)
	    	    	{
						PlayerInfo[i][pContractTime] ++;
					}
	    		}
			}
		}
	}
	new rand = random(sizeof(WetterRandom));
	new stringw[16];
	wetterid = WetterRandom[rand][0];
 	format(stringw, sizeof(stringw), "weather %d", wetterid);
	SendRconCommand(stringw);
 	printf("Wetter ID: %d", wetterid);
	return 1;
}


Function IsAGang(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==12 || member==13 || member==14 || member==16 || member==17 || member==18 || member == 19 || member == 20 || member==21 || member==23)
		{
		    return 1;
		}
		else if(leader==5 || leader==6 || leader==12 || leader==13 || leader==14 || leader==16 || leader==17 || leader==18 || leader == 19 || leader == 20 || leader==21 || leader==23)
		{
		    return 1;
		}
	}
	return 0;
}

Function FrakMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
	        return 1;
		}
	}
	return 0;
}

Function Befreien(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 204.5171,-232.7427,1.7786))
	{
		new sendername[MAX_PLAYER_NAME];
		new string[180];
  		GetPlayerName(playerid, sendername, sizeof(sendername));
    	format(string, sizeof(string), "%s hat alle Gefangenen befreit!",sendername);
		ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		for(new i=0; i<MAX_PLAYERS; i++)
 		{
			if(PlayerInfo[i][pGangJailed] == 1)
			{
				SetPlayerPos(i,204.5171,-232.7427,1.7786);
				format(string, sizeof(string), "Du wurdest von %s befreit.", sendername);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerInfo[i][pGangJailed] = 0;
				PlayerInfo[i][pMauled] = 0;
				PlayerTied[i] = 0;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "Da du nicht am GangJail Tor bist, misslang es dir, das Tor zu öffnen!");
	}
	return 1;
}
Function RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	SafeResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

Function SafeGivePlayerWeapon(plyid, weaponid, ammo)
{
	GivePlayerWeapon(plyid, weaponid, ammo);
	return 1;
}


strtock(const string[], &index)
{
	new length = strlen(string);
 	while ((index < length) && (string[index] <= ' '))
  	{
		index++;
	}
 	new offset = index;
	new result[20];
    while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
 	{
 		result[index - offset] = string[index];
		index++;
  	}
   	result[index - offset] = EOS;
    return result;
}

//======== ZOLL ==========//
Function closegate()
{
	MoveObject(zolltor, 53.61148071, -1525.98864746, 4.87745094, 2.5);
	return 1;
}

Function closegate2()
{
	MoveObject(zolltor1, 55.77261353, -1539.03112793, 4.95321989, 2.5);
	return 1;
}

Function closegate3()
{
	MoveObject(zolltor2, -981.43225098, -381.12454224, 36.21669388, 2.5);
	return 1;
}

Function closegate4()
{
	MoveObject(zolltor3, -969.41735840, -379.66165161, 36.21669388, 2.5);
	return 1;
}

Function closegate5()
{
	MoveObject(zolltor4, 1754.57714844, 523.82324219, 27.69068718, 2.5);
	return 1;
}

Function closegate6()
{
	MoveObject(zolltor5, 1744.70703125, 527.12695312, 27.43260956, 2.5);
	return 1;
}

Function closegate7()
{
	MoveObject(zolltor7, 1727.59667969, 533.24121094, 27.49211121, 2.5);
	return 1;
}

Function closegate8()
{
	MoveObject(zolltor6, 1736.46093750, 530.24609375, 27.49927139, 2.5);
	return 1;
}

Function closegate9()
{
	MoveObject(zolltor8, -162.66503906, 403.01269531, 11.91834545, 2.5);
	return 1;
}

Function closegate10()
{
	MoveObject(zolltor9, -154.94238281, 401.06250000, 11.91834545, 2.5);
	return 1;
}

Function closegate11()
{
	MoveObject(zolltor10, -1230.96582031, 994.12304688, 43.41479111, 2.5);
	return 1;
}

Function closegate12()
{
	MoveObject(zolltor11, -1242.07812500,1000.90136719,43.47349930, 2.5);
	return 1;
}

Function closegate13()
{
	MoveObject(zolltor12, 102.20307159,-1270.01013184,14.58920097, 2.5);
	return 1;
}

Function closegate14()
{
	MoveObject(zolltor13, 112.27465820, -1277.22094727, 14.75586414, 2.5);
	return 1;
}

Function closegate15()
{
	MoveObject(zolltor14, 100.10153198, -1254.57641602, 14.75407791, 2.5);
	return 1;
}

Function closegate16()
{
	MoveObject(zolltor15, 89.60826111,-1248.17480469,14.42384052, 2.5);
	return 1;
}

Function closegate17()
{
	MoveObject(zolltor16, -2694.72802734,1275.12854004,55.26990891, 2.5);
	return 1;
}

Function closegate18()
{
	MoveObject(zolltor17, -2685.87304688,1275.14294434,55.26990891, 2.5);
	return 1;
}

Function closegate19()
{
	MoveObject(zolltor18, -2677.04370117,1275.15173340,55.26990891, 2.5);
	return 1;
}

Function closegate20()
{
	MoveObject(zolltor19, -2667.32788086,1275.27246094,55.26990891, 2.5);
	return 1;
}

Function SafeResetPlayerWeapons(plyid)
{
	ResetPlayerWeapons(plyid);
	return 1;
}
public AnwaltErlaubnis(playerid)
{

    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Dein Antrag, leute aus dem Gefängnis zu holen wurde angenommen!");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast nun die möglichkeit, Gefangene aus dem Gefängniss zu befreien!");
	SendClientMessage(playerid,COLOR_WHITE,"* Achtung: Die Lizenz gilt nur für 5 Minuten!");
    ApprovedLawyer[playerid] = 1;
	UnFreezePlayer(playerid);
	SetTimerEx("AnwaltErlaubnisWeg",10000,0,"d",playerid);

}
//======== BLITZER ========//
Function Blitzer_Timer() {
    new save, strafe, speeds;
 	for (new playerid = 0; playerid < MAX_PLAYERS; playerid++) {
 	    save = GetPVarInt(playerid, "BlitzPause");
		if(save > 0) {
			save--;
			SetPVarInt(playerid, "BlitzPause", save);
			continue;
		}
 		if(!IsPlayerInAnyVehicle(playerid) || IsPlayerNPC(playerid)) continue;
		for(new i = 0; i < sizeof(Blitzer); i++) {
			if(Blitzer[i][Erstellt] == 1) {
			    if(IsPlayerInRangeOfPoint(playerid, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ])) {
	 				new Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
					new veh = GetPlayerVehicleID(playerid);
					GetVehicleVelocity(veh, speed_x, speed_y, speed_z);
					final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*93.0; // 136.666667 = kmph  // 85.4166672= mph
					final_speed_int = floatround(final_speed,floatround_round);
					speeds = final_speed_int;
					if(speeds > Blitzer[i][Geschwindigkeit] && !IsACop(playerid) && GetPlayerState(playerid) == 2) {
						new string[128];
						// Einstellen des Momentes, in dem der Spieler kein weiteres mal geblitzt werden kann
						SetPVarInt(playerid, "BlitzPause", (BLITZER_TIMER_INTERVALL * BLITZER_PAUSE * 60) / 1000);
						// Strafe für Spieler
						strafe = Blitzer[i][Strafe] * (speeds-Blitzer[i][Geschwindigkeit]);
						PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
						FraktionsKasse[23] += strafe;
					   	GivePlayerMoney(playerid, -strafe);
						// Text für Spieler
						format(string,sizeof(string), "[BLITZER]Du bist %d KM/H gefahren, erlaubt waren %d KM/H, du musst $%d Bußgeld bezahlen.", speeds, Blitzer[i][Geschwindigkeit], strafe);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						// Für Oamt
		 				for(new o = 0; o < MAX_PLAYERS; o++)
						{
		        			if(PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24 || PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
		        			{
								if(IsPlayerInRangeOfPoint(o, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ]))
								{
									new giveplayer[MAX_PLAYER_NAME];
									GetPlayerName(o, giveplayer, sizeof(giveplayer));
									format(string, sizeof(string), "%s ist %d KM/H gefahren und hat %d$ Bußgeld gezahlt.", giveplayer, speeds, strafe);
									SendClientMessage(o, COLOR_YELLOW, string);
								}
							}
						}
						// Ende für Cops
					}
				}
			}
		}
	}
	return 1;
}

//====== BLITZER FUNKTIONEN =======//
stock AddBlitzer(playerid,speeds,strafe) {
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	for(new i = 0; i < sizeof(Blitzer); i++) {
  	    if(Blitzer[i][Erstellt] == 0) {
			Blitzer[i][BlitzerX] = x + 1.0;
		    Blitzer[i][BlitzerY] = y + 1.0;
		    Blitzer[i][BlitzerZ] = z;
		    Blitzer[i][Geschwindigkeit] = speeds;
		    Blitzer[i][Radius] = 50;
		    Blitzer[i][Strafe] = strafe;
		    Blitzer[i][Erstellt] = 1;
		    Blitzer[i][ID] += 1;
			GesammtBlitzer++;
		    return 1;
		}
	}
	return 0;
}
stock RemoveBlitzer(playerid) {
   	for(new i = 0; i < sizeof(Blitzer); i++) {
	   if(Blitzer[i][Erstellt] == 1) {
			if(IsPlayerInRangeOfPoint(playerid, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ])) {
				Blitzer[i][Erstellt] = 0;
    			Blitzer[i][BlitzerX] = 0.0;
		        Blitzer[i][BlitzerY] = 0.0;
	         	Blitzer[i][BlitzerZ] = 0.0;
				GesammtBlitzer--;
             	return 1;
  	        }
  	    }
  	}
   	return 0;
}
stock RemoveAllBlitzer() {
   	for(new i = 0; i < sizeof(Blitzer); i++) {
		if(Blitzer[i][Erstellt] == 1) {
			Blitzer[i][Erstellt] = 0;
			Blitzer[i][BlitzerX] = 0.0;
   			Blitzer[i][BlitzerY] = 0.0;
     		Blitzer[i][BlitzerZ] = 0.0;
    		DestroyObject(Blitzer[i][ID]);
    		GesammtBlitzer = 0;
  	    }
  	}
   	return 0;
}
stock CountBlitzer() {
   	new anzahl = 0;
	for(new i = 0; i < sizeof(Blitzer); i++) {
		if(Blitzer[i][Erstellt] == 1) anzahl++;
  	}
   	return anzahl;
}
stock ErmittleGeschwindigkeit(playerid,bool:kmhb) {
    new Float:x,Float:y,Float:z,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z); else GetPlayerVelocity(playerid,x,y,z);
    rtn = floatsqroot(x*x+y*y+z*z);
    return kmhb?floatround(rtn * 55 * 1.61):floatround(rtn * 100);
}

stock GetDistanceToLastPoint(vehicleid)
{
	new Float:x2, Float:y2, Float:z2, Float:output;
	GetVehiclePos(vehicleid, x2, y2, z2);
	output = floatsqroot(floatpower(floatabs(floatsub(x2, sVehicle_X[vehicleid])), 2)+floatpower(floatabs(floatsub(y2, sVehicle_Y[vehicleid])), 2)+floatpower(floatabs(floatsub(z2, sVehicle_Z[vehicleid])), 2));
	return floatround(output);
}

Function Ende()
{
    PaintballWinnerKills = 0;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
    	PlayerPaintballKills[i] = 0;
	}
	return 1;
}



Function Laptopaus(playerid)
{
	ConnectedToPC[playerid] = 255;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Laptop automatisch heruntergefahren.");
	return 1;
}


Function NagelBand_Timer() {
 	for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(!IsPlayerInAnyVehicle(playerid) || IsPlayerNPC(playerid)) continue;
		for(new i = 0; i < sizeof(NagelBand); i++)
		{
			if(NagelBand[i][nErstellt] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 4, NagelBand[i][NagelBandX], NagelBand[i][NagelBandY], NagelBand[i][NagelBandZ]))
				{
				    if(IsPlayerInAnyVehicle(playerid))
					{
				        new panels, doors, lights, tires;
						GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
						tires = encode_tires(1, 1, 1, 1);
						UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
					}
				}
			}
		}
	}
	return 1;
}


RemoveItems(playerid)
{
		if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);
}
PutRiotShieldOnArm(playerid)
{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
}

GiveFlashLight(playerid)
{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);
		SetPlayerAttachedObject(playerid, 2,18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
}



stock TBan(pID,bTime)
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(pID,pName,sizeof(pName));
	format(tbDir,sizeof(tbDir),foxBanFile,pName);
	dini_Create(tbDir);
	dini_IntSet(tbDir,"fbTime",Time());
	dini_IntSet(tbDir,"fbDuration",bTime*60);
	Kick(pID);
}

stock TUnban(playername[])
{
	format(tbDir,sizeof(tbDir),foxBanFile,playername);
	if(dini_Exists(tbDir)) { return dini_Remove(tbDir); }
	return 0;
}

stock GetPlayerBanTime(playername[],&minu=0,&seco=0)
{
	format(tbDir,sizeof(tbDir),foxBanFile,playername);
	if(dini_Exists(tbDir))
	{
		seco=(dini_Int(tbDir,"fbTime")+dini_Int(tbDir,"fbDuration"))-Time();
		seco=seco-minu*60;
		minu=seco/60;
		return 1;
	}
	return 0;
}

stock BanFileExist(playername[])
{
	format(tbDir,sizeof(tbDir),foxBanFile,playername);
	if(dini_Exists(tbDir)) { return 1; } else { return 0; }
}


stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}


stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("Drücke 'F' um den Fahrstuhl zu benutzen", 0xFFFFDD, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "%s\n Drücke 'F' um den Fahrstuhl zu rufen", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xFFFFDD, 1783.9799, -1300.7660, z, 10.5, 0, 1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

Function Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

Function Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock DeleteTicket(playerid)
{
new save1[256], pname[MAX_PLAYERS];
GetPlayerName(playerid,pname,sizeof pname);
format(save1,sizeof save1,"Tickets/%s.ini",pname);
if(fexist(save1))
{
dini_Remove(save1);
}
return true;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Fahrstuhl", string, "Auswählen", "Zurück");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);


OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}
PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

Function GetPlayerAdmin(playerid){
	if(IsPlayerAdmin(playerid))
	    return 2000;

	if(PlayerInfo[playerid][pAdmin])
	    return PlayerInfo[playerid][pAdmin];

	return 0;
}

Function GetPlayerLeader(playerid){
	if(PlayerInfo[playerid][pLeader])
	    return PlayerInfo[playerid][pLeader];
	return 0;
}

Function GetPlayerMember(playerid){
	if(PlayerInfo[playerid][pMember])
	    return PlayerInfo[playerid][pMember];
	return 0;
}
public FightUpdate_1()
{
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
	    if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255)
		{
	        new fsText[128];
	        if(FightSystem[fs][fsCTF][0] != -255)
			{
	            if(IsPlayerConnected(FightSystem[fs][fsCTF][0]))
				{
	                if(IsPlayerInRangeOfPoint(FightSystem[fs][fsCTF][0],5.0,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz]))
					{
	                    FightSystem[fs][fsCTF][2] = 0;
	                    FightSystem[fs][fsCTF][1]++;
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~w~Bonus in:~n~~r~%d ~w~Sekunden",(60-FightSystem[fs][fsCTF][1]));
						GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    if(FightSystem[fs][fsCTF][1] >= 60)
						{
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
							FightSystem[fs][fsCTF][1] = 0;
							format(fsText,sizeof(fsText),">>> Fight <<< | %s hat die Flagge erobert!",fsName);
							for(new i;i<MAX_PLAYERS;i++)
							{
							    if(IsPlayerConnected(i))
								{
       								if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
									{
                                    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
										SendClientMessage(i,FS_COL_YELLOW,fsText);
									}
								}
							}
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsOwnerFaction])
							    FightSystem[fs][fsKillsOfOwner]++;
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsAttackFaction])
								FightSystem[fs][fsKillsOfAttack]++;
                    		if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
							{
                    	    	format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}
                    		else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
							{
                        		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}
							else
							{
                    		    format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}
							FightSystem[fs][fsCTF][0] = -255;
						}
	                }
					else
					{
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~r~Erobere die Flagge!~n~~b~%d Sekunden",(10-FightSystem[fs][fsCTF][2]));
	                    GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    FightSystem[fs][fsCTF][2]++;
	                    if(FightSystem[fs][fsCTF][2] >= 10){
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
	                        format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
	                        for(new i;i<MAX_PLAYERS;i++){
	                            if(IsPlayerConnected(i)){
	                        		if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
								    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
								    	SendClientMessage(i,FS_COL_YELLOW,fsText);
	                            	}
								}
	                        }
	                        FightSystem[fs][fsCTF][0] = -255;
	                		FightSystem[fs][fsCTF][1] = 0;
	                		FightSystem[fs][fsCTF][2] = 0;
	                    }
	                }
	            }
				else
				{
	                FightSystem[fs][fsCTF][0] = -255;
	                FightSystem[fs][fsCTF][1] = 0;
	                FightSystem[fs][fsCTF][2] = 0;
	            }
	        }
	    }
	}
	return 1;
}
public FightUpdate_2()
{
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
	    if(FightSystem[fs][fsFightTimeCool])
	    {
	        FightSystem[fs][fsFightTimeCool]--;
	    }
	    if(FightSystem[fs][fsFightTime])
		{
	        FightSystem[fs][fsFightTime]--;
	        new fsText[64];
	        format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
			if(!FightSystem[fs][fsFightTime])
			{
			    FightSystem[fs][fsLastFight] = 0;
			    new fsTextToOwner[255];
			    new fsTextToAttack[255];
			    new fsType;
				if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
				{
				    fsType = 2;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt gewonnen...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt verloren...");
				}
				else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
				{
	   				fsType = 3;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt verloren...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt gewonnen...");
				}
				else
				{
				    fsType = 1;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Unentschieden, ihr behaltet euer gebiet.");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Unentschieden, ihr müsst euch mehr antrengen.");
				}
				for(new i;i<MAX_PLAYERS;i++)
				{
					if(IsPlayerConnected(i))
					{
						GangZoneStopFlashForPlayer(i,FightSystem[fs][fsZoneID]);
				    	if(fsType == 3)
						{
				    		GangZoneHideForPlayer(i,FightSystem[fs][fsZoneID]);
				        	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        			}
				    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction])
						{
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
			            	if(fsType == 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
						else if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
						{
					    	PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
			            	if(fsType != 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
	    			}
				}
	    		FightSystem[fs][fsKillsOfAttack] = 0;
				FightSystem[fs][fsKillsOfOwner] = 0;
				if(fsType == 3)
					FightSystem[fs][fsOwnerFaction] = FightSystem[fs][fsAttackFaction];
                FightSystem[fs][fsAttackFaction] = -255;
				FightSystem[fs][fsCTF][0] = -255;
			}
		}
		if(FightSystem[fs][fsLastFight])
 			FightSystem[fs][fsLastFight]--;
  	}
	return 1;
}

public Fight_Init()
{
	Fight = TextDrawCreate(88.000000,244.000000,"Fight:~n~_~n~_~n~_~n~_~n~_");
	TextDrawUseBox(Fight,1);
	TextDrawBoxColor(Fight,0x00000066);
	TextDrawTextSize(Fight,102.000000,124.000000);
	TextDrawAlignment(Fight,2);
	TextDrawBackgroundColor(Fight,0xff000033);
	TextDrawFont(Fight,2);
	TextDrawLetterSize(Fight,0.499999,1.000000);
	TextDrawColor(Fight,0xffffffff);
	TextDrawSetOutline(Fight,1);
	TextDrawSetProportional(Fight,1);
	FightUnderline = TextDrawCreate(91.000000,274.000000,".");
	TextDrawAlignment(FightUnderline,2);
	TextDrawBackgroundColor(FightUnderline,0x000000ff);
	TextDrawFont(FightUnderline,3);
	TextDrawLetterSize(FightUnderline,14.799997,1.000000);
	TextDrawColor(FightUnderline,0xffffffff);
	TextDrawSetProportional(FightUnderline,1);
	TextDrawSetShadow(FightUnderline,1);
	if(!fexist("Fightzones.cfg"))
	{
		new File:fFile=fopen("Fightzones.cfg",io_write);
		for(new fs;fs<sizeof(FightSystem);fs++)
		    fwrite(fFile,"-14 -14 0 0 0\r\n");
	    fclose(fFile);
	}
	new File:fFile=fopen("Fightzones.cfg",io_read),Content[64],fs;
	while(fread(fFile,Content) && fs < sizeof(FightSystem)){
	    FightSystem[fs][fsWinFaction] = TextDrawCreate(26.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinFaction],1);
		TextDrawAlignment(FightSystem[fs][fsWinFaction],0);
		TextDrawBackgroundColor(FightSystem[fs][fsWinFaction],0x000000ff);
		TextDrawFont(FightSystem[fs][fsWinFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsWinFaction],0.199999,1.000000);
		TextDrawColor(FightSystem[fs][fsWinFaction],0xffffffff);
		TextDrawSetOutline(FightSystem[fs][fsWinFaction],1);
		FightSystem[fs][fsLoseFaction] = TextDrawCreate(26.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseFaction],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseFaction],1);
		TextDrawColor(FightSystem[fs][fsLoseFaction],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseFaction],0.199999,0.899999);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseFaction],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseFaction],0);
		FightSystem[fs][fsWinKills] = TextDrawCreate(107.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinKills],1);
		TextDrawSetOutline(FightSystem[fs][fsWinKills],1);
		TextDrawColor(FightSystem[fs][fsWinKills],0xffffffff);
		TextDrawSetShadow(FightSystem[fs][fsWinKills],1);
		TextDrawFont(FightSystem[fs][fsWinKills],2);
		TextDrawLetterSize(FightSystem[fs][fsWinKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsWinKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsWinKills],0);
		FightSystem[fs][fsLoseKills] = TextDrawCreate(107.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseKills],1);
		TextDrawSetShadow(FightSystem[fs][fsLoseKills],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseKills],1);
		TextDrawColor(FightSystem[fs][fsLoseKills],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseKills],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseKills],0);
		FightSystem[fs][fsTime] = TextDrawCreate(26.000000,286.000000," ");
		TextDrawColor(FightSystem[fs][fsTime],0xffffffff);
		TextDrawAlignment(FightSystem[fs][fsTime],0);
		TextDrawBackgroundColor(FightSystem[fs][fsTime],0x000000ff);
		TextDrawFont(FightSystem[fs][fsTime],2);
		TextDrawLetterSize(FightSystem[fs][fsTime],0.199999,0.899999);
		TextDrawSetProportional(FightSystem[fs][fsTime],1);
		StripNewLine(Content);
		sscanf(Content,"dddddd",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime],FightSystem[fs][fsFightTimeCool]);
        FightSystem[fs][fsCTF][0] = -255;
	    FightSystem[fs][fsCTF][1] = 0;
	    FightSystem[fs][fsCTF][2] = 0;
	    FightSystem[fs][fsLastFight] = 0;
	    FightSystem[fs][fsZoneID] = GangZoneCreate(FightSystem[fs][fsMinX],FightSystem[fs][fsMinY],FightSystem[fs][fsMaxX],FightSystem[fs][fsMaxY]);
		FightSystem[fs][fsFlag] = CreatePickup(1314,1,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz],-1);
		if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255)
		{
		    new fsText[64];
		    format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
		    if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
			{
 				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
  			}
  			else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
		  	{
  				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}
			else
			{
    			format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
           	}
		}
		for(new i;i<MAX_PLAYERS;i++)
		{
		    if(IsPlayerConnected(i))
			{
		    	SetPVarInt(i,"Spawned",1);
		    	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
		    	if(FightSystem[fs][fsAttackFaction] && FightSystem[fs][fsFightTime])
				{
		        	GangZoneFlashForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
					if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction] || GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction])
					{
				    	TextDrawShowForPlayer(i,Fight);
	        	    	TextDrawShowForPlayer(i,FightUnderline);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsTime]);
					}
				}
			}
		}
		fs++;
	}
	fclose(fFile);
	FightTimer[0] = SetTimer("FightUpdate_1",1003,true);
	FightTimer[1] = SetTimer("FightUpdate_2",60017,true);
	return 1;
}
public Fight_Close()
{
    KillTimer(FightTimer[0]);
	KillTimer(FightTimer[1]);
	if(fexist("Fightzones.cfg")) fremove("Fightzones.cfg");
	new File:fFile=fopen("Fightzones.cfg",io_append),Content[64];
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime])
		{
            GangZoneStopFlashForAll(FightSystem[fs][fsZoneID]);
			for(new i;i<MAX_PLAYERS;i++)
			{
			    if(IsPlayerConnected(i))
				{
					DeletePVar(i,"Spawned");
			    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
					{
			        	TextDrawHideForPlayer(i,Fight);
			        	TextDrawHideForPlayer(i,FightUnderline);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			    	}
				}
			}
		}
		TextDrawDestroy(FightSystem[fs][fsWinFaction]);
		TextDrawDestroy(FightSystem[fs][fsLoseFaction]);
		TextDrawDestroy(FightSystem[fs][fsWinKills]);
		TextDrawDestroy(FightSystem[fs][fsLoseKills]);
		TextDrawDestroy(FightSystem[fs][fsTime]);
		GangZoneHideForAll(FightSystem[fs][fsZoneID]);
        GangZoneDestroy(FightSystem[fs][fsZoneID]);
        DestroyPickup(FightSystem[fs][fsFlag]);
        format(Content,sizeof(Content),"%d %d %d %d %d %d\r\n",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime],FightSystem[fs][fsFightTimeCool]);
		fwrite(fFile,Content);
	}
	fclose(fFile);
	TextDrawDestroy(Fight);
	TextDrawDestroy(FightUnderline);
	return 1;
}
stock GetPlayerFightzone(playerid)
{
	new Float:GangZone[3];
	GetPlayerPos(playerid,GangZone[0],GangZone[1],GangZone[2]);
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
    	if((GangZone[0] >= FightSystem[fs][fsMinX] && GangZone[0] <= FightSystem[fs][fsMaxX]) && (GangZone[1] >= FightSystem[fs][fsMinY] && GangZone[1] <= FightSystem[fs][fsMaxY]) && GangZone[2] <= 500)
			return fs;
	}
	return -14;
}
stock IsAFightFaction(Faction)
{
	if(Faction == 5 || Faction == 6 || Faction == 12 || Faction == 13 || Faction == 14 || Faction == 15 || Faction == 16 || Faction == 17 || Faction == 18 || Faction == 19 || Faction == 23)
	{
	    return 1;
	}
	return 0;
}
stock GetZoneColorOfFaction(Faction)
{
	if(Faction == 5) return 0x0A0A0A87; // L.C.N
	else if(Faction == 6) return 0xBEBEBE98; // Yakuza
	else if(Faction == 12) return 0x0000FF6F; // Triaden
	else if(Faction == 13) return 0x00FF148C; // G.S.F
	else if(Faction == 14) return 0xAA00FF7B; // Ballas
	else if(Faction == 15) return 0xFFAA0089; // LS Bikers
	else if(Faction == 16) return 0xE1FF0084; // Vagos
	else if(Faction == 17) return 0x00FFC889; // Atzecas
	else if(Faction == 18) return 0x00EBFF7A; // Rifa
	else if(Faction == 19) return 0xEB000085; // Red Souldier
	else if(Faction == 23) return 0x87000098; // Brigdan
	else return 0xFFFFFFFF; // NoN-Gang
}
stock GetFactionNameOfFaction(Faction)
{
	new FactionName[64];
	if(Faction == 5) format(FactionName,sizeof(FactionName),"L.C.N");
	else if(Faction == 6) format(FactionName,sizeof(FactionName),"Yakuza");
	else if(Faction == 12) format(FactionName,sizeof(FactionName),"Triaden");
	else if(Faction == 13) format(FactionName,sizeof(FactionName),"G.S.F");
	else if(Faction == 14) format(FactionName,sizeof(FactionName),"Ballas");
	else if(Faction == 15) format(FactionName,sizeof(FactionName),"LS Bikers");
	else if(Faction == 16) format(FactionName,sizeof(FactionName),"Vagos");
	else if(Faction == 17) format(FactionName,sizeof(FactionName),"Aztekas");
	else if(Faction == 18) format(FactionName,sizeof(FactionName),"Rifa");
	else if(Faction == 19) format(FactionName,sizeof(FactionName),"Red Souldier");
	else if(Faction == 23) format(FactionName,sizeof(FactionName),"Brigdan");
	else format(FactionName,sizeof(FactionName),"NoN-Gang");
	return FactionName;
}

//-----------------------------Funktion für GetPlayerMafia für die Blacklist ---------------------------------
Function GetPlayerMafia(playerid)
{
    new mafianumber;
    if(PlayerInfo[playerid][pMember]==5||PlayerInfo[playerid][pLeader]==5)
    {
        mafianumber = 1;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==6||PlayerInfo[playerid][pLeader]==6)
    {
        mafianumber = 2;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==12||PlayerInfo[playerid][pLeader]==12)
    {
        mafianumber = 3;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==13||PlayerInfo[playerid][pLeader]==13)
    {
        mafianumber = 4;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==14||PlayerInfo[playerid][pLeader]==14)
    {
        mafianumber = 5;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==15||PlayerInfo[playerid][pLeader]==15)
    {
        mafianumber = 6;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==16||PlayerInfo[playerid][pLeader]==16)
    {
        mafianumber = 7;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==17||PlayerInfo[playerid][pLeader]==17)
    {
        mafianumber = 8;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==18||PlayerInfo[playerid][pLeader]==18)
    {
        mafianumber = 9;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==19||PlayerInfo[playerid][pLeader]==19)
    {
        mafianumber = 10;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==23||PlayerInfo[playerid][pLeader]==23)
    {
        mafianumber = 11;
        return mafianumber;
	}
    return 0;
}

Function SaveAll()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && gPlayerLogged[i])
		{
			PlayerUpdate(i);
		}
	}
}

Function  LoadBlacklist()
{
    new idx = 1;
    while(idx < sizeof(Blacklist))
    {
        new noone[256] = "Niemand";
        strmid(Blacklist[idx][user1],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user2],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user3],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user4],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user5],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user6],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user7],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user8],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user9],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user10],noone,0,strlen(noone),255);
        idx++;
    }
}

Function  ClearBlack(playerid)
{
    new killstr[256];
    
    
    
    new noone[256] = "Niemand";
    new plName[256];
    GetPlayerName(playerid,plName,sizeof(plName));
    format(killstr,sizeof(killstr),"Blacklist-Opfer %s wurde getötet!",plName);
    SendFamilyMessage(5, COLOR_YELLOW, killstr);
    SendFamilyMessage(6, COLOR_YELLOW, killstr);
    SendFamilyMessage(14, COLOR_YELLOW, killstr);
    new idx = 1;
    while(idx < sizeof(Blacklist))
    {
	    if(strcmp(Blacklist[idx][user1],plName,true)==0)
        {
    	    strmid(Blacklist[idx][user1],noone,0,strlen(noone),255);
            IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user2],plName,true)==0)
        {
             strmid(Blacklist[idx][user2],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user3],plName,true)==0)
        {
             strmid(Blacklist[idx][user3],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user4],plName,true)==0)
        {
             strmid(Blacklist[idx][user4],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user5],plName,true)==0)
        {
             strmid(Blacklist[idx][user5],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user6],plName,true)==0)
        {
             strmid(Blacklist[idx][user6],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user7],plName,true)==0)
        {
             strmid(Blacklist[idx][user7],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user8],plName,true)==0)
        {
             strmid(Blacklist[idx][user8],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user9],plName,true)==0)
        {
                 strmid(Blacklist[idx][user9],noone,0,strlen(noone),255);
                 IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user10],plName,true)==0)
        {
             strmid(Blacklist[idx][user10],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        idx++;
    }
    return 1;
}
public hack(playerid)
{
	new string[256];
   	if(IsPlayerConnected(playerid))
    {
		format(string,sizeof(string), "* Du bist soeben erfolgreich in den Polizeicomputer eingedrungen. Deine Wanteds hast du aus dem System entfernt.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		WantedLevel[playerid] = 0;
		PlayerHacked[playerid] = 0;
		ClearCrime(playerid);
		SetPlayerWantedLevel(playerid,0);
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		TogglePlayerControllable(playerid, 1);
//   	UnFreezePlayer(playerid);
		format(string, sizeof(string), "HQ: %s hat sich soeben erfolgreich in den Polizeicomputer gehackt und seine Wanteds aus dem System entfernt!", sendername);
		SendRadioMessage(1, TEAM_BLUE_COLOR, string);
	}
	return 1;
}

/*public GetPlayerAdmin(playerid){
	if(IsPlayerAdmin(playerid))
	    return 2000;

	if(PlayerInfo[playerid][pAdmin])
	    return PlayerInfo[playerid][pAdmin];

	return 0;
}

public GetPlayerLeader(playerid){
	if(PlayerInfo[playerid][pLeader])
	    return PlayerInfo[playerid][pLeader];
	return 0;
}

public GetPlayerMember(playerid){
	if(PlayerInfo[playerid][pMember])
	    return PlayerInfo[playerid][pMember];
	return 0;
}*/
//===================== DCMDS =======================//
dcmd_kennzeichenerlauben(playerid,params[])
{
	new Player, SpielerName[MAX_PLAYER_NAME], EigenerName[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pAdmin] >= 4 || IsACop(playerid) || PlayerInfo[playerid][pLeader] == 7)
	{
		if(sscanf(params,"u",Player)) { return SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /kennzeichenerlauben [Spieler ID]"); }
		if(!IsPlayerConnected(Player)) { return SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!"); }
		if(KennzeichenErlaubnis1[Player] == 1) { return SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler hat bereits die Erlaubnis ein Kennzeichen zu kaufen!"); }
		if(KennzeichenErlaubnis[Player] == 1) { return SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler hat bereits ein Kennzeichen mit sich."); }
		GetPlayerName(Player, SpielerName, sizeof(SpielerName));
		GetPlayerName(playerid, EigenerName, sizeof(EigenerName));
		format(ALLSTRING, sizeof(ALLSTRING), "*Beamter %s hat dir erlaubt, einen Kennzeichen in der Stadthalle zu kaufen.", EigenerName);
		SendClientMessage(Player, COLOR_LIGHTBLUE, ALLSTRING);
		SendClientMessage(Player, COLOR_LIGHTBLUE, "*Gehe nun in die KFZ Zulassungsstelle und kauf dir eins mit /kennzeichenkaufen (Preis: 5000$)");
		format(ALLSTRING, sizeof(ALLSTRING), "*Du hast %s erlaubt, sich einen Kennzeichen in der Stadthalle zu kaufen.", SpielerName);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
		KennzeichenErlaubnis1[Player] = 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Beamter!");
	}
	return 1;
}

dcmd_kennzeichen(playerid,params[])
{
	new kz[15];
	if(sscanf(params,"s", kz)) { return SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /kennzeichen [Text(Höchstens 9 Buchstaben/Zahlen)]"); }
	if(!IsPlayerInAnyVehicle(playerid)) { return SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Fahrzeug!"); }
	if(KennzeichenErlaubnis[playerid] == 0) { return SendClientMessage(playerid, COLOR_GRAD1, "Du hast kein Kennzeichen in der Stadthalle gekauft!"); }
	if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
    {
        new vehiclefid = GetPlayerVehicleID(playerid);
		SetVehicleNumberPlate(vehiclefid, kz);
		SetVehicleToRespawn(vehiclefid);
		new Float: X,Float: Y,Float: Z;
		GetPlayerPos(playerid,X,Y,Z);
		SetVehiclePos(vehiclefid,X,Y,Z);
		PutPlayerInVehicle(playerid,vehiclefid,0);
  		new name[MAX_PLAYER_NAME], str[128];
	    GetPlayerName(playerid, name, sizeof name);
	    format(str, sizeof str, "/Autos/%s%d.dtcar", name,Dtc_PlayerKey[playerid]);
		dini_Set(str, "Plate", kz);
        for(new x = 0; x < MaxVeh; x++)
        {
            PlayerCar[playerid][x][Plate] = kz;
		}
		KennzeichenErlaubnis[playerid] = 0;
	}
	return 1;
}

/*ocmd:sup(playerid,params[])
{
new text[256];
if(sscanf(params,"s",text))
{
SendClientMessage(playerid, COLOR_GREY,"[Benutzung]: /sup [text]");
}
else
{
if(TicketAngenommen[playerid] == 0)
{
 new pname[MAX_PLAYER_NAME],save[512], string[128];
GetPlayerName(playerid,pname,sizeof pname);
format(save,sizeof save,"Tickets/%s.ini",pname);
if(!dini_Exists(save) && TicketZeile[playerid] == 0) // Wenn noch kein Ticket existiert und auch die TicketZeile auf 0 ist.
{
new adminmeldung[128];
format(adminmeldung, sizeof(adminmeldung), "%s hat ein Support-Ticket geschrieben", pname);
SendAdminMessage(COLOR_YELLOW, adminmeldung);
SupportTicket[playerid] = 1;
TicketZeile[playerid] = 1;
dini_Create(save);
dini_Set(save,"Suptext",text);
SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT] Du hast ein Ticket mit folgendem Text geöffnet:");
format(string, sizeof(string), "%s", text);
SendClientMessage(playerid, COLOR_YELLOW, string);
SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT]Warte bis es ein Supporter annimmt!");
SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT]Du kannst noch mit /sup 2 weitere Zeilen anhängen");
return 1;
   }
else if(TicketZeile[playerid] == 1) // Wenn die erste Zeile schon geschrieben wurde
{
new string2[128];
dini_Set(save, "Suptext2",text);
 SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT] Du hast folgendes an dein Ticket anhängt:");
format(string2, sizeof(string2), "%s", text);
SendClientMessage(playerid, COLOR_YELLOW, string2);
TicketZeile[playerid] = 2;
return 1;
}
else if(TicketZeile[playerid] == 2) // Wenn bereits 2 Zeilen ausgefüllt sind
{
new string3[128];
dini_Set(save, "Suptext3",text);
 SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT] Du hast folgendes an dein Ticket anhängt:");
format(string3, sizeof(string3), "%s", text);
SendClientMessage(playerid, COLOR_YELLOW, string3);
TicketZeile[playerid] = 3;
return 1;
}
else if(TicketZeile[playerid] == 3) // Wenn das Ticket bereits 3 Zeilen hat
{
SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORT] Dein Ticket ist bereits randgefüllt!");
return 1;
}
}
if(TicketAngenommen[playerid] == 1) // Zum direkten Antworten per /sup , wenn das Ticket angenommen wurde.
{
new pID = DeinSupport[playerid];
new antwort[128], antwort2[128], DerFragende[MAX_PLAYER_NAME], DerSup[MAX_PLAYER_NAME];
GetPlayerName(playerid, DerFragende, sizeof (DerFragende));
GetPlayerName(pID, DerSup, sizeof (DerSup));
format(antwort, sizeof (antwort),"--> %s", text);
SendClientMessage(playerid, COLOR_YELLOW, antwort);
format(antwort2, sizeof (antwort2), "%s schrieb: %s", DerFragende, text);
 SendClientMessage(pID, COLOR_YELLOW, antwort2);
}

 }
return 1;
 }

ocmd:taketicket(playerid,params[])
{
new pID;
new string2[256], string[256], string3[256], string4[256],mitteilung[128] , DerPlayer[MAX_PLAYER_NAME], DerAdmin[MAX_PLAYER_NAME];
if(sscanf(params,"u",pID)){
return SendClientMessage(playerid, COLOR_GREY,"[Benutzung]: /taketicket [id]");
}
 new pname[MAX_PLAYERS],save[512];
GetPlayerName(pID,pname,sizeof pname);
format(save,sizeof save,"Tickets/%s.ini",pname);
if(dini_Exists(save)) // Ob ein Ticket existiert! bzw. Datei-Abfrage
{
if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1) // Ob der Spieler ein Supporter ist!
{
if(TicketAngenommen[pID] == 0)
{
string2 = dini_Get(save,"Suptext");
string3 = dini_Get(save,"Suptext2");
string4 = dini_Get(save,"Suptext3");
GetPlayerName(pID, DerPlayer, sizeof(DerPlayer));
GetPlayerName(playerid, DerAdmin, sizeof(DerAdmin));
format(string, sizeof(string), "%s schrieb folgende Supportnachricht:", DerPlayer);
SendClientMessage(playerid, COLOR_YELLOW, string);
SendClientMessage(playerid, COLOR_YELLOW, string2);
SendClientMessage(playerid, COLOR_YELLOW, string3);
SendClientMessage(playerid, COLOR_YELLOW, string4);
SendClientMessage(playerid, COLOR_YELLOW, "Du kannst per /aw [ID] antworten");
format(mitteilung, sizeof(mitteilung), "[SUPPORT] %s hat dein Support Ticket geöffnet. Du kannst nun per /sup direkt mit ihm schreiben!",DerAdmin);
SendClientMessage(pID, COLOR_YELLOW, mitteilung);
DeinSupport[pID] = playerid; // Der persönliche Supporter wird gesetzt , um die Antworten an ihn weiterzuleiten
TicketAngenommen[pID] = 1;
}
}
}
return 1;
}

ocmd:deleteticket(playerid, params[])
{
new pID;
if(sscanf(params,"u",pID)){
return SendClientMessage(playerid, COLOR_GREY,"[Benutzung]: /deleteticket [id]");
}
 new pname[MAX_PLAYER_NAME],save[512];
GetPlayerName(pID,pname,sizeof pname);
format(save,sizeof save,"Tickets/%s.ini",pname);
if(dini_Exists(save)) // Ob ein Ticket offen ist
{
if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1) // Ob der Spieler befugt ist
{
new string[128], DerSup[MAX_PLAYER_NAME];
GetPlayerName(playerid, DerSup, sizeof(DerSup));
dini_Remove(save);
format(string, sizeof(string), "%s hat dein Ticket gelöscht", DerSup);
SendClientMessage(pID, COLOR_YELLOW, string);
SendClientMessage(playerid, COLOR_YELLOW, "Erfolgreich gelöscht");
TicketZeile[pID] = 0;
TicketAngenommen[pID] = 0;
DeinSupport[pID] = 0;
SupportTicket[pID] = 0;
}
}
return 1;
}

ocmd:giveticket(playerid, params[])
{
new pID, adminid;
if(sscanf(params,"uu",pID,adminid)){
return SendClientMessage(playerid, COLOR_GREY,"[Benutzung]: /giveticket [ticketid] [adminid]");
}
if(!IsPlayerConnected(adminid)) // Ob die angegebene ID online ist.
{
return SendClientMessage(playerid, COLOR_GREY,"Admin nicht online");
}
if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1) // Ob die angegebene ID Admin ist
{
return SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist kein Admin");
}
 new pname[MAX_PLAYERS],save[512];
GetPlayerName(pID,pname,sizeof pname);
format(save,sizeof save,"Tickets/%s.ini",pname);
if(!dini_Exists(save)) // Ob ein Ticket besteht
{
return SendClientMessage(playerid, COLOR_GREY,"Die ID hat kein offenes Ticket");
}
new NeuerAdmin[MAX_PLAYER_NAME], AlterAdmin[MAX_PLAYER_NAME], Fragender[MAX_PLAYER_NAME];
GetPlayerName(playerid, AlterAdmin , sizeof(AlterAdmin));
GetPlayerName(adminid, NeuerAdmin, sizeof(NeuerAdmin));
GetPlayerName(pID, Fragender , sizeof(Fragender));
DeinSupport[pID] = adminid;
new string2[128], string3[128], string4[256], string5[256], string6[256];
format(string2, sizeof(string2), "[SUPPORT] %s hat dein Ticket an %s weitergegeben.", AlterAdmin, NeuerAdmin);
SendClientMessage(pID, COLOR_YELLOW, string2);
SendClientMessage(playerid, COLOR_YELLOW, "Erfolgreich weitergeleitet");
format(string3, sizeof(string3), "[SUPPORT] %s hat dir %s´s Ticket gegeben. Er schrieb folgendes:", AlterAdmin, Fragender);
string4 = dini_Get(save, "Suptext");
string5 = dini_Get(save, "Suptext2");
string6 = dini_Get(save, "Suptext3");
SendClientMessage(adminid, COLOR_YELLOW, string3);
SendClientMessage(adminid, COLOR_YELLOW, string4);
SendClientMessage(adminid, COLOR_YELLOW, string5);
SendClientMessage(adminid, COLOR_YELLOW, string6);
return 1;
}

ocmd:tickets(playerid, params[])
{
#pragma unused params
if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
{
SendClientMessage(playerid, COLOR_YELLOW, "Die angezeigten Tickets können mit /taketicket angenommen werden");
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(SupportTicket[i] == 1)
{
if(TicketAngenommen[i] == 0)
{
new string[128], DerSpieler[MAX_PLAYER_NAME];
GetPlayerName(i, DerSpieler, sizeof(DerSpieler));
format(string, sizeof(string), "ID: %d  Name: %s", i, DerSpieler);
SendClientMessage(playerid, COLOR_GREY, string);
}
}
}
}
return 1;
}*/

//===================================================================================== GANGAUTOHAUS / FRAKCARS
//=========================================================================================================================


/*dcmd_sirene(playerid,params[])
{
	new status[1];
	if(sscanf(params,"s",status)) { return SendClientMessage(playerid,0xFF0000,"Benutzung: /sirene [an/aus]"); }
	if(!IsACop(playerid))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(strcmp(status,"an",true) == 0)
		{
			if(sirenean[vid] == true)return SendClientMessage(playerid,0xFF0000,"Dieses Fahrzeug hat bereits eine Sirene!");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			sirene[vid] = CreateDynamicObject(18646,x,y,z,0,0,0,100);
			AttachObjectToVehicle(sirene[vid],vid,-0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
			sirenean[vid] = true;
			SendClientMessage(playerid,0xFF0000,"Du hast die Sirene angeschaltet!");
		}
		else
 		if(strcmp(status,"aus",true) == 0)
	   	{
	   		if(sirenean[vid] == false)return SendClientMessage(playerid,0xFF0000,"Dieses Fahrzeug hat keine Sirene");
	   		DestroyObject(sirene[vid]);
	   		sirenean[vid] =false;
        	SendClientMessage(playerid,0xFF0000,"Du hast die Sirene ausgeschaltet!");
	   	}
	}
	return 1;
}*/
/*dcmd_licht(playerid,params[])
{
	new status[4];
	if(sscanf(params,"s",status))return SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /licht [an/aus]");
	new engine,lights,alarm,doors,bonnet,boot,objective;
    if(IsPlayerInAnyVehicle(playerid))
    {
	    new vid = GetPlayerVehicleID(playerid);
	   	if(strcmp(status,"an",true) == 0)
	   	{
		   	GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		    licht[vid] = true;
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"*Du hast das Licht angeschaltet!");
	   	}
	   	else if(strcmp(status,"aus",true) == 0)
	   	{
		   	GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		    licht[vid] = false;
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"*Du hast das Licht ausgeschaltet!");
		}
	}
	return 1;
}*/

/*dcmd_kofferraum(playerid,params[])
{
	new status[4];
	if(sscanf(params,"s",status))return SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /kofferraum [auf/zu]");
	new engine,lights,alarm,doors,bonnet,boot,objective;
    if(IsPlayerInAnyVehicle(playerid))
    {
	    new vid = GetPlayerVehicleID(playerid);
	   	if(strcmp(status,"auf",true) == 0)
	   	{
		   	GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"*Du hast den Kofferraum geöffnet!");
	   	}
	   	else if(strcmp(status,"zu",true) == 0)
	   	{
		   	GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"*Du hast den Kofferraum geschlossen!");
		}
	}
	return 1;
}*/


dcmd_farbe(playerid, params[])
{
	new farbe1, farbe2;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in deinem Auto!");
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1017.9830,-919.3538,42.3359) && !IsPlayerInRangeOfPoint(playerid,8.0, 1911.2693,-1776.6720,13.3828) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2002.8409,-2382.0603,13.5469))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Pay'N'Spray am BSN!");
		return 1;
	}
	if(sscanf(params, "dd",farbe1, farbe2))
	{
	 	SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /farbe [Farbe 1] [Farbe 2]");
		SendClientMessage(playerid, COLOR_GRAD1, "*Farben stehen unter /autofarben");
		return 1;
	}
	for(new x = 0; x < MaxVeh; x++)
	{
		if(vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
		    PlayerCar[playerid][x][CarC1] = farbe1;
		    PlayerCar[playerid][x][CarC2] = farbe2;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Auto gefärbt, Kosten: 500$");
			ChangeVehicleColor(vehicleid, farbe1, farbe2);
			GivePlayerMoney(playerid, -500);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Das ist nicht dein Privatauto!");
		}
	}
	return 1;
}

dcmd_meldung(playerid, params[])
{
	new meld;
	if(sscanf(params, "d", meld))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /meldung [MELDUNGSART]");
	    SendClientMessage(playerid, COLOR_GRAD2, "*0 = Neu, 1 = Klassisch, 2 = Ausgeschaltet");
		return 1;
	}
	if(meld > 2 || meld < 0)
	{
	    SendClientMessage(playerid, COLOR_GRAD1,"Gib 0,1 oder 2 ein!");
	    return 1;
	}
	if(meld == 0)
	{
	    PlayerInfo[playerid][pMeldung] = 0;
	    SendClientMessage(playerid, COLOR_GRAD1, "Die neue Meldungsart wurde aktiviert.");
	}
	else if(meld == 1)
	{
	    PlayerInfo[playerid][pMeldung] = 1;
	    SendClientMessage(playerid, COLOR_GRAD1, "Die klassische Meldungsart wurde aktiviert.");
	}
	else if(meld == 2)
	{
	    PlayerInfo[playerid][pMeldung] = 2;
	    SendClientMessage(playerid, COLOR_GRAD1, "Die Meldung wurde deaktiviert.");
	}
	return 1;
}

stock GetPlayerFaction(playerid){
	new Member = GetPlayerMember(playerid);
	if(Member)
	    return Member;
	new Leader = GetPlayerLeader(playerid);
	if(Leader)
	    return Leader;
	return 0;
}

dcmd_frakmats(playerid, params[])
{
	new mats, frak, preis;
	if(PlayerInfo[playerid][pMember] > 0)
	{
	    frak = PlayerInfo[playerid][pMember];
	}
	else if(PlayerInfo[playerid][pLeader] > 0)
	{
	    frak = PlayerInfo[playerid][pLeader];
	}
	if(frak != 5 && frak != 6 && frak != 12 && frak != 13 && frak != 14 && frak != 16 && frak != 17 && frak != 19 && frak != 20 && frak != 23)
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keiner Gang / Mafia!");
	    return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2805.0444,-1434.0425,40.0484))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst hier keine Fraktions-Materialien kaufen!");
	    return 1;
	}
	if(sscanf(params, "d", mats))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /frakmats [Anzahl]");
	    SendClientMessage(playerid, COLOR_GRAD1, "*Du kannst maximal 500 Fraktions-Materialien mit dir nehmen.");
	    SendClientMessage(playerid, COLOR_GRAD1, "*1 Fraktions-Material kostet 10$.");
	    return 1;
	}
	if(mats > 500)
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 500 Fraktions-Materialien kaufen!");
	    return 1;
	}
	if(FrakMatsHolding[playerid] + mats > 500)
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien könntest du nicht mit dir tragen!");
		return 1;
	}
	preis = mats * 10;
	GivePlayerMoney(playerid, -preis);
	FrakMatsHolding[playerid] += mats;
	format(ALLSTRING, sizeof(ALLSTRING), "*Du hast %d Fraktions-Materialien für %d$ gekauft. Bringe sie nun zur Fraktionskammer!", mats, preis);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Solltest du reloggen / sterben verlierst du die Materialien wieder!");
	return 1;
}

//=====================================================================================================
forward START_FRAC();
public START_FRAC(){
	LoadFactionCars();
	#if defined FACTION_CARS_LOCKABLE
	FactionCarsTimer = SetTimer("LockFactionCarDoors",1037,true);
	#endif
	SaveFactionCarsTimer = SetTimerEx("SaveFactionCars",((1000*60)*15),true,"d",false);
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
	    FactionBuylist[fbl][fbCarid] = CreateVehicle(FactionBuylist[fbl][fbVehid],FactionBuylist[fbl][fbX],FactionBuylist[fbl][fbY],FactionBuylist[fbl][fbZ],FactionBuylist[fbl][fbA],-1,-1,-255);
		new fblText[128];
		format(fblText,sizeof(fblText),"|--- GangAutoHaus ---|\n\nFahrzeugname: %s\nPreis: $%d",fCarName[FactionBuylist[fbl][fbVehid]-400],FactionBuylist[fbl][fbPrice]);
		FactionBuylist[fbl][fbLabel] = Create3DTextLabel(fblText,0xFFFFFFFF,FactionBuylist[fbl][fbX],FactionBuylist[fbl][fbY],FactionBuylist[fbl][fbZ],40.0,0,true);
		Attach3DTextLabelToVehicle(FactionBuylist[fbl][fbLabel],FactionBuylist[fbl][fbCarid],0.0,0.0,0.75);
	}
	BuylistRespawner = SetTimer("RespawnFactionBuylist",(1000*60)*10,true);
	return 1;
}
forward STOP_FRAC();
public STOP_FRAC()
{
	KillTimer(SaveFactionCarsTimer);
	SaveFactionCars(true);
	#if defined FACTION_CARS_LOCKABLE
	KillTimer(FactionCarsTimer);
	#endif
	KillTimer(BuylistRespawner);
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++)
	{
		DestroyVehicle(FactionBuylist[fbl][fbCarid]);
		Delete3DTextLabel(FactionBuylist[fbl][fbLabel]);
	}
	return 1;
}

forward FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
public FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger){
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
	    if(vehicleid == FactionBuylist[fbl][fbCarid]){
	        if(!IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
	            SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht brechtigt Gangautos zu kaufen!");
	            new Float:pPos[3];
	            GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
	            SetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
	        }break;
	    }
	}return 1;
}
forward FRAC_OnVehicleDeath(vehicleid, killerid);
public FRAC_OnVehicleDeath(vehicleid, killerid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	    	if(FactionCars[fc][fCarid] == vehicleid){
	        	SetTimerEx("DestroyAndCreateFactionCar",3000,0,"d",fc);
	        	break;
	    	}
		}
	}return 1;
}
/*
forward FRAC_OnPlayerCommandText(playerid, cmdtext[]);
public FRAC_OnPlayerCommandText(playerid, cmdtext[])
{
	dcmd(efa,3,cmdtext);
	if(strcmp(cmdtext,"/fpark",true)==0){
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
	        new fc;while(fc<sizeof(FactionCars)){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
					if(GetPlayerVehicleID(playerid) == FactionCars[fc][fCarid]){
					    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL || GetPlayerLeader(playerid) == FactionCars[fc][fFaction][0]){
					        GetVehiclePos(FactionCars[fc][fCarid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2]);
							GetVehicleZAngle(FactionCars[fc][fCarid],FactionCars[fc][fPos][3]);
					        SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast das Fraktionsfahrzeug erfolgreich umgeparkt.");
					    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist dazu nicht berechtigt.");
						return true;
					}
	            }fc++;
	        }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
		}else SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fahrzeug oder bist nicht der Fahrer.");
		return true;
	}
	if(strcmp(cmdtext,"/fcarsell",true)==0){
	    if(GetPlayerLeader(playerid)){
	        if(IsAllowedFactionToBuy(GetPlayerFaction(playerid))){
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
					new Carid1 = GetPlayerVehicleID(playerid);
					for(new fc;fc<sizeof(FactionCars);fc++){
	                    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	                        if(Carid1 == FactionCars[fc][fCarid]){
							    if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid)){
							        FactionCars[fc][fVehid] = -255;
							        if(DestroyVehicle(FactionCars[fc][fCarid]))
							            FactionCars[fc][fCarid] = -255;
									new fText[178];
									format(fText,sizeof(fText),"Du hast das Fraktionsfahrzeug erfolgreich für $%d(50%% vom Kaufpreis) verkauft.",(FactionCars[fc][fPrice]/2));
									SendClientMessage(playerid,FACTION_COL_YELLOW,fText);
									CallRemoteFunction("Script_GivePlayerMoney","id",playerid,(FactionCars[fc][fPrice]/2));
							    }
							    else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht der besitzer dieses Fahrzeuges.");
							    return true;
							}
	                    }
	                }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug.");
				}else SendClientMessage(playerid,FACTION_COL_GREY,"Du musst der Fahrer eines Fahrzeuges sein.");
	        }else SendClientMessage(playerid,FACTION_COL_GREY,"Deine Fraktion ist dazu nicht berechtigt.");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	if(strcmp(cmdtext,"/lfa",true)==0){
	    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
			for(new fc;fc<sizeof(FactionCars);fc++){
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
					new Float:fX,Float:fY,Float:fZ;
					GetVehiclePos(FactionCars[fc][fCarid],fX,fY,fZ);
					if(IsPlayerInRangeOfPoint(playerid,4.0,fX,fY,fZ)){
					    FactionCars[fc][fVehid] = -255;
						if(DestroyVehicle(FactionCars[fc][fCarid])){
						    FactionCars[fc][fCarid] = -255;
						}return SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast das Fraktionsfahrzeug entfernt.");
					}
			    }
			}
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
		return true;
	}
	if(strcmp(cmdtext,"/rafa",true)==0){
	    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
	        new fName[MAX_PLAYER_NAME],string[128];
	        GetPlayerName(playerid,fName,sizeof(fName));
	        format(string,sizeof(string),"Server: %s hat alle Fraktionsfahrzeuge respawnt.",fName);
	        SendClientMessageToAll(FACTION_COL_YELLOW,string);
	        for(new fc;fc<sizeof(FactionCars);fc++){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					DestroyAndCreateFactionCar(fc);
	        }
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	if(strcmp(cmdtext,"/ramfa",true)==0){
	    if(GetPlayerLeader(playerid)){
	        if(gettime() < LastRespawned[GetPlayerFaction(playerid)-1])
	            return SendClientMessage(playerid,FACTION_COL_GREY,"Du kannst deine Fahrzeuge nur alle '15' Minuten respawnen.");
			LastRespawned[GetPlayerFaction(playerid)-1] = gettime()+(60*15);
			for(new fc;fc<sizeof(FactionCars);fc++){
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
			        if(FactionCars[fc][fFaction][0] == GetPlayerFaction(playerid)){
			            DestroyAndCreateFactionCar(fc);
			        }
			    }
			}SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast deine Fraktionsfahrzeuge erfolgreich respawnt.");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
	#if defined FACTION_CARS_LOCKABLE
	if(strcmp(cmdtext,"/flock",true)==0){
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
	        for(new fc;fc<sizeof(FactionCars);fc++){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	                if(GetPlayerVehicleID(playerid) == FactionCars[fc][fCarid]){
	                    for(new f;f<5;f++){
	                        if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL || GetPlayerFaction(playerid) == FactionCars[fc][fFaction][f]){
	                            PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
	                            if(FactionCars[fc][fLock] == true){
	                                FactionCars[fc][fLock] = false;
									fUnlockCar(FactionCars[fc][fCarid]);
									GameTextForPlayer(playerid,"~w~Fahrzeug~n~~g~Aufgeschlossen",5000,3);
	                            }
	                            else if(FactionCars[fc][fLock] == false){
	                                fLockCar(FactionCars[fc][fCarid]);
				    				FactionCars[fc][fLock] = true;
			    					GameTextForPlayer(playerid,"~w~Fahrzeug~n~~r~Abgeschlossen",5000,3);
	                            }break;
	                        }
	                    }return true;
	                }
	            }
	        }SendClientMessage(playerid,FACTION_COL_GREY,"Du sitzt in keinem Fraktionsfahrzeug!");
	    }else{
	    	if(GetPlayerState(playerid)==PLAYER_STATE_PASSENGER)
		        SendClientMessage(playerid,FACTION_COL_GREY,"Du musst der Fahrer dieses Fahrzeuges sein.");
			else
				SendClientMessage(playerid,FACTION_COL_GREY,"Du muss in einem Fahrzeug sitzen.");
		}return true;
	}
	#endif
	return 1;
}
*/
dcmd_efa(playerid,params[]){
	if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
		new vehid,col1,col2,faction[5];
	    if(!sscanf(params,"dddd",vehid,col1,col2,faction[0])){
			sscanf(params,"dddddddd",vehid,col1,col2,faction[0],faction[1],faction[2],faction[3],faction[4]);
			if(vehid < 400 || vehid > 611) return SendClientMessage(playerid,FACTION_COL_GREY,"Vehicle-ID nur von 400 bis 611.");
			if(col1 < 0 || col1 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(1)!");
			if(col2 < 0 || col2 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(2)!");
			if(faction[0] && faction[0] <= MAX_FACTIONS){
			    for(new f;f<5;f++){
			        if(faction[f] <= 0 || faction[f] > MAX_FACTIONS){
			            faction[f] = -255;
					}
				}
				for(new fc;fc<sizeof(FactionCars);fc++){
				    if(FactionCars[fc][fVehid] < 400 || FactionCars[fc][fVehid] > 611){
				        FactionCars[fc][fVehid] = vehid;
	            		new Float:fX,Float:fY,Float:fZ,Float:fA;
	            		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);
	           	 		FactionCars[fc][fPos][0] = fX;
	            		FactionCars[fc][fPos][1] = fY;
	            		FactionCars[fc][fPos][2] = fZ;
	            		FactionCars[fc][fPos][3] = fA;
	            		FactionCars[fc][fCol][0] = col1;
            			FactionCars[fc][fCol][1] = col2;
	            		for(new f;f<5;f++){
	                		FactionCars[fc][fFaction][f] = faction[f];
	            		}
	            		FactionCars[fc][fPrice] = 0;
	            		for(new mood;mood<14;mood++)
							FactionCars[fc][fTuning][mood] = 0;
                		FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-255);
                        #if defined FACTION_CARS_LOCKABLE
                        FactionCars[fc][fLock] = true;
                        #endif
						SendClientMessage(playerid,FACTION_COL_YELLOW,"Du hast das Fraktionsfahrzeug erfolgreich erstellt.");
						SendClientMessage(playerid,FACTION_COL_YELLOW,"Vergesse es nicht mit '/fpark' umzuparken.");
						PutPlayerInVehicle(playerid,FactionCars[fc][fCarid],0);
				        return true;
				    }
				}SendClientMessage(playerid,FACTION_COL_GREY,"Die Maximale Anzahl von Fraktionsfahrzeugen wurde bereits erreicht.");
			}else SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Fraktion!");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Benutze: '/efa [Model] [Farbe(1)] [Farbe(2)] [Hauptfraktion]'.");
	}else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	return true;
}
forward FRAC_OnPlayerStateChange(playerid, newstate, oldstate);
public FRAC_OnPlayerStateChange(playerid, newstate, oldstate){
    if(newstate==PLAYER_STATE_DRIVER){
    	new Carid1 = GetPlayerVehicleID(playerid);
		for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
			if(Carid1 == FactionBuylist[fbl][fbCarid]){
		    	if(IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
		        	TogglePlayerControllable(playerid,false);
		        	new fblText[256];
		        	format(fblText,sizeof(fblText),"{FFFFFF}Möchtest du das Fahrzeug deiner Fraktion kaufen?\n\n{F3FF02}Fahrzeugname: %s\nPreis:		  $%d\n\n{FFFFFF}Um das Fahrzeug zu kaufen benutze den Button 'Ja', um es nicht zu kaufen den Button 'Nein'.",fCarName[FactionBuylist[fbl][fbVehid]-400],FactionBuylist[fbl][fbPrice]);
		        	ShowPlayerDialog(playerid,DIALOG_FACTION_CAR_BUY,DIALOG_STYLE_MSGBOX,"{FFFFFF}Fraktionsautohaus:",fblText,"Nein","Ja");
				}else{
				    SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht brechtigt Fraktionsfahrzeuge zu kaufen!");
				    new Float:pPos[3];
				    GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
				    SetPlayerPos(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
				}break;
		    }
		}
	    for(new fc;fc<sizeof(FactionCars);fc++){
	        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	            if(FactionCars[fc][fCarid] == GetPlayerVehicleID(playerid)){
	                for(new f;f<5;f++){
	                    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL || GetPlayerFaction(playerid) == FactionCars[fc][fFaction][f])
	                        return true;
	                }
	                SendClientMessage(playerid,FACTION_COL_GREY,"Du bestitzt für dieses Fahrzeug keine Schlüssel, du verlässt das Fahrzeug.");
        			RemovePlayerFromVehicle(playerid);
					return true;
	            }
	        }
	    }
	}return 1;
}
forward FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
public FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]){
	if(dialogid == DIALOG_FACTION_CAR_BUY){
	    if(response){
	        new Float:pPos[3];
			GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
			SetPlayerPos(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
			TogglePlayerControllable(playerid,true);
	    }
	    if(!response){
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				if(IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
			    	if(GetFactioncarsOfFaction(GetPlayerLeader(playerid)) < MAX_BUY){
			            new Carid1 = GetPlayerVehicleID(playerid);
			            for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
			                if(Carid1 == FactionBuylist[fbl][fbCarid]){
			                    if(GetPlayerMoney(playerid) >= FactionBuylist[fbl][fbPrice]){
			                    //if(CallRemoteFunction("Script_GetPlayerMoney","i",playerid) >= FactionBuylist[fbl][fbPrice]){
			                        for(new fc;fc<sizeof(FactionCars);fc++){
			                            if(FactionCars[fc][fVehid] < 400 || FactionCars[fc][fVehid] > 611){
			                                FactionCars[fc][fVehid] = FactionBuylist[fbl][fbVehid];
			                                FactionCars[fc][fPos][0] = FactionBuySpawn[0];
			                                FactionCars[fc][fPos][1] = FactionBuySpawn[1];
			                                FactionCars[fc][fPos][2] = FactionBuySpawn[2];
			                                FactionCars[fc][fPos][3] = FactionBuySpawn[3];
			                                new Color[2];
			                                GetDefaultCarColorOfFaction(GetPlayerLeader(playerid),Color[0],Color[1]);
			                                FactionCars[fc][fCol][0] = Color[0];
			                                FactionCars[fc][fCol][1] = Color[1];

											FactionCars[fc][fPrice] = FactionBuylist[fbl][fbPrice];
											for(new slot;slot<14;slot++)
												FactionCars[fc][fTuning][slot] = 0;
											FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-255);
											print(">>> Nach dem Autoerstellen!");
											#if defined FACTION_CARS_LOCKABLE
											fLockCar(FactionCars[fc][fCarid]);
											FactionCars[fc][fLocked] = true;
											#endif
											for(new f;f<5;f++)
											{
											    FactionCars[fc][fFaction][f] = -255;
											}
											FactionCars[fc][fFaction][0] = GetPlayerLeader(playerid);
											PutPlayerInVehicle(playerid,FactionCars[fc][fCarid],0);
											GivePlayerMoney(playerid, -FactionBuylist[fbl][fbPrice]);
											//CallRemoteFunction("Script_SetPlayerMoney","id",playerid,(CallRemoteFunction("Script_GetPlayerMoney","i",playerid)-FactionBuylist[fbl][fbPrice]));
											new Float:pPos[3];
											GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
											SetPlayerPos(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
											TogglePlayerControllable(playerid,true);
			                                SendClientMessage(playerid,FACTION_COL_YELLOW,"Glückwunsch zum neuen Fahrzeug.");
			                                SendClientMessage(playerid,FACTION_COL_YELLOW,"Bitte vergesse nicht das Fahrzeug mit: '/fpark' umzuparken.");
			                                SendClientMessage(playerid,FACTION_COL_YELLOW,"Das Fahrzeug steht am Ausgabepunkt bereit!");
			                                return 1;
			                            }
			                        }SendClientMessage(playerid,FACTION_COL_GREY,"Die maximale Anzahl von Fraktionsfahrzeugen ist bereits erreicht.");
			                    }else SendClientMessage(playerid,FACTION_COL_GREY,"Du hast nicht genügend Geld bei dir!");
			                    break;
			                }
			            }
			    	}else SendClientMessage(playerid,FACTION_COL_GREY,"Deine Fraktion hat das Limit von Fahrzeugen bereits erreicht.");
				}else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht brechtigt Fraktionsfahrzeuge zu kaufen!");
				new Float:pPos[3];
				GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
				SetPlayerPos(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
				TogglePlayerControllable(playerid,true);
	    	}
		}return 1;
	}return 0;
}
forward FRAC_OnVehicleMod(playerid, vehicleid, componentid);
public FRAC_OnVehicleMod(playerid, vehicleid, componentid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	        if(FactionCars[fc][fCarid] == vehicleid){
				#if defined FACTION_CARS_TUNEABLE
				if((FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid) || GetPlayerAdmin(playerid)) && IsAllowedFactionToTune(FactionCars[fc][fFaction][0]))
				    FactionCars[fc][fTuning][GetVehicleComponentType(componentid)] = componentid;
				else
				    SetTimerEx("RemoveComponent",3000,false,"dd",vehicleid,componentid);
				#else
				SetTimerEx("RemoveComponent",3000,false,"dd",vehicleid,componentid);
				#endif
				break;
			}
	    }
	}return 1;
}
forward FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
public FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	        if(FactionCars[fc][fCarid] == vehicleid){
	            SetTimerEx("ChangePaintjob",3000,false,"dd",FactionCars[fc][fCarid],3);
	            break;
	        }
	    }
	}return 1;
}
forward FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
public FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2){
    for(new fc;fc<sizeof(FactionCars);fc++){
		if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
		    if(FactionCars[fc][fCarid] == vehicleid){
		        SetTimerEx("ChangeColor",3000,false,"ddd",FactionCars[fc][fCarid],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1]);
				break;
			}
		}
	}return 1;
}
#if defined FACTION_CARS_LOCKABLE
public LockFactionCarDoors(){
    ForAllPlayers(i){
    	for(new fc;fc<sizeof(FactionCars);fc++){
			if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
		    	if(FactionCars[fc][fLock] == true){
       				if(GetPlayerFaction(i)==FactionCars[fc][fFaction][0]||GetPlayerFaction(i)==FactionCars[fc][fFaction][1]||GetPlayerFaction(i)==FactionCars[fc][fFaction][2]||GetPlayerFaction(i)==FactionCars[fc][fFaction][3]||GetPlayerFaction(i)==FactionCars[fc][fFaction][4]||GetPlayerAdmin(i) >= NEEDED_ADMINLEVEL)
					    SetVehicleParamsForPlayer(FactionCars[fc][fCarid],i,false,false);
					else
					   SetVehicleParamsForPlayer(FactionCars[fc][fCarid],i,false,true);
				}
			}
	    }
	}return true;
}
stock fLockCar(vehicleid){
	ForAllPlayers(i)
	    SetVehicleParamsForPlayer(vehicleid,i,false,true);
	return true;
}
stock fUnlockCar(vehicleid){
	ForAllPlayers(i)
	    SetVehicleParamsForPlayer(vehicleid,i,false,false);
	return true;
}
#endif
public DestroyAndCreateFactionCar(fc){
	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
    	DestroyVehicle(FactionCars[fc][fCarid]);
    	FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-255);
		#if defined FACTION_CARS_TUNEABLE
		if(IsAllowedFactionToTune(FactionCars[fc][fFaction][0])){
		    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
		    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
		    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
		    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
		    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
		    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
		    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
		    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
		    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
		    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
		    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
		    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
		    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
		    if(FactionCars[fc][fTuning][13] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]); }
		}
		#endif
	}return true;
}
public LoadFactionCars(){
	if(!fexist(FACTION_CAR_FILE)){
    	new File:tfFile=fopen(FACTION_CAR_FILE,io_write);
		fclose(tfFile);
	}
	new File:fFile=fopen(FACTION_CAR_FILE,io_read),Content[1024],fc;
 	while(fread(fFile,Content) && fc<sizeof(FactionCars)){
    	StripNewLine(Content);
        sscanf(Content,"dffffdddddddddddddddddddddd",
		FactionCars[fc][fVehid],
		FactionCars[fc][fPos][0],
		FactionCars[fc][fPos][1],
		FactionCars[fc][fPos][2],
		FactionCars[fc][fPos][3],
		FactionCars[fc][fCol][0],
		FactionCars[fc][fCol][1],
		FactionCars[fc][fFaction][0],
		FactionCars[fc][fFaction][1],
		FactionCars[fc][fFaction][2],
		FactionCars[fc][fFaction][3],
		FactionCars[fc][fFaction][4],
		FactionCars[fc][fTuning][0],
		FactionCars[fc][fTuning][1],
		FactionCars[fc][fTuning][2],
		FactionCars[fc][fTuning][3],
		FactionCars[fc][fTuning][4],
		FactionCars[fc][fTuning][5],
		FactionCars[fc][fTuning][6],
		FactionCars[fc][fTuning][7],
		FactionCars[fc][fTuning][8],
		FactionCars[fc][fTuning][9],
		FactionCars[fc][fTuning][10],
		FactionCars[fc][fTuning][11],
		FactionCars[fc][fTuning][12],
		FactionCars[fc][fTuning][13],
		FactionCars[fc][fPrice]);
        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
        	FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-255);
			#if defined FACTION_CARS_LOCKABLE
			fLockCar(FactionCars[fc][fCarid]);
			FactionCars[fc][fLock] = true;
			#endif
			#if defined FACTION_CARS_TUNEABLE
			if(IsAllowedFactionToTune(FactionCars[fc][fFaction][0])){
			    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
			    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
			    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
			    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
			    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
			    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
			    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
			    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
			    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
			    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
			    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
			    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
			    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
			    if(FactionCars[fc][fTuning][13] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]); }
			}
			#endif
			fc++;
		}
   	}fclose(fFile);
 	return printf("  '%d' Fraktionsfahrzeuge wurden geladen & erstellt.",fc);
}
public SaveFactionCars(bool:destroy){
	if(fexist(FACTION_CAR_FILE)) fremove(FACTION_CAR_FILE);
    new File:fFile=fopen(FACTION_CAR_FILE,io_append),Content[1024];
    for(new fc;fc<sizeof(FactionCars);fc++){
    	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
        	format(Content,sizeof(Content),"%d %.3f %.3f %.3f %.3f %03d %03d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
			FactionCars[fc][fVehid],
			FactionCars[fc][fPos][0],
			FactionCars[fc][fPos][1],
			FactionCars[fc][fPos][2],
			FactionCars[fc][fPos][3],
			FactionCars[fc][fCol][0],
			FactionCars[fc][fCol][1],
			FactionCars[fc][fFaction][0],
			FactionCars[fc][fFaction][1],
			FactionCars[fc][fFaction][2],
			FactionCars[fc][fFaction][3],
			FactionCars[fc][fFaction][4],
			FactionCars[fc][fTuning][0],
	        FactionCars[fc][fTuning][1],
	        FactionCars[fc][fTuning][2],
	        FactionCars[fc][fTuning][3],
	        FactionCars[fc][fTuning][4],
	        FactionCars[fc][fTuning][5],
	        FactionCars[fc][fTuning][6],
	        FactionCars[fc][fTuning][7],
	        FactionCars[fc][fTuning][8],
	        FactionCars[fc][fTuning][9],
	        FactionCars[fc][fTuning][10],
            FactionCars[fc][fTuning][11],
            FactionCars[fc][fTuning][12],
            FactionCars[fc][fTuning][13],
			FactionCars[fc][fPrice]);
            fwrite(fFile,Content);
            if(destroy == true){
                if(DestroyVehicle(FactionCars[fc][fCarid]))
					FactionCars[fc][fCarid] = -255;
            }
		}
	}fclose(fFile);
	return true;
}
public RespawnFactionBuylist(){
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++)
	    SetVehicleToRespawn(FactionBuylist[fbl][fbCarid]);
	return 1;
}
public RemoveComponent(vehicleid,componentid)
	return RemoveVehicleComponent(vehicleid,componentid);
public ChangePaintjob(vehicleid,paintjobid)
	return ChangeVehiclePaintjob(vehicleid,paintjobid);
public ChangeColor(vehicleid,color1,color2)
	return ChangeVehicleColor(vehicleid,color1,color2);


#if defined FACTION_CARS_TUNEABLE
stock IsAllowedFactionToTune(Faction){
	if(Faction){
		if((Faction >= 1 && Faction <= 24)/* || Faction >= 22 && Faction <= 25*/) return true;
	}return false;
}
#endif
stock IsAllowedFactionToBuy(Faction){
	if(Faction){
		if((Faction >= 1 && Faction <= 24)/* || Faction >= 22 && Faction <= 25*/) return true;
	}return false;
}
stock GetDefaultCarColorOfFaction(Faction,&col1,&col2){
   	if(Faction==1)
	{
		col1 = 0;
	    col2 = 0;
	}
	if(Faction==2)
	{
		col1 = 0;
	    col2 = 0;
	}
	if(Faction==3)
	{
		col1 = 16;
	    col2 = 16;
	}
	if(Faction==4)
	{
		col1 = 3;
	    col2 = 3;
	}
	if(Faction==5)
	{
		col1 = 0;
	    col2 = 0;
	}
	else if(Faction==6)
	{
		col1 = 15;
	    col2 = 15;
	}
	else if(Faction==7)
	{
		col1 = 61;
	    col2 = 61;
	}
	else if(Faction==8)
	{
		col1 = 0;
	    col2 = 0;
	}
	else if(Faction==9)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==10)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==11)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==12)
	{
		col1 = 13;
	    col2 = 13;
	}
	else if(Faction==13)
	{
		col1 = 86;
	    col2 = 86;
	}
	else if(Faction==14)
	{
		col1 = 22;
	    col2 = 22;
	}
	else if(Faction==15)
	{
		col1 = 3;
	    col2 = 3;
	}
	else if(Faction==16)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==17)
	{
		col1 = 93;
	    col2 = 93;
	}
   	else if(Faction==18)
	{
		col1 = 12;
	    col2 = 12;
	}
	else if(Faction==19)
	{
		col1 = 0;
	    col2 = 0;
	}
   	else if(Faction==20)
	{
		col1 = 1;
	    col2 = 1;
	}
   	else if(Faction==21)
	{
		col1 = 0;
	    col2 = 0;
	}
   	else if(Faction==22)
	{
		col1 = 0;
	    col2 = 0;
	}
 	else if(Faction==23)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==24)
	{
		col1 = 1;
	    col2 = 1;
	}
	else
	{
	    col1 = 0;
	    col2 = 0;
	}
	return 1;
}
stock GetFactioncarsOfFaction(Faction){
	new Cars;
	for(new fc;fc<sizeof(FactionCars);fc++){
	   	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	       	if(FactionCars[fc][fFaction][0] == Faction)
	           	Cars++;
	   	}
	}return Cars;
}
//===================================================================================== GANGAUTOHAUS / FRAKCARS
//=========================================================================================================================

//============================================================ GANGWAR SCHEIße

forward GW_OnPlayerDisconnect(playerid);
public GW_OnPlayerDisconnect(playerid){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
			new TempZone = GetPlayerFightzone(playerid);
			new Float:hp;
			GetPlayerHealth(playerid, hp);
			if(hp <= 20) {
				if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid)){
					FightSystem[TempZone][fsKillsOfAttack]++;
				    format(stringx, sizeof(stringx), ">>> Fight <<< | %s hat sich mit Low HP im Gangfight ausgeloggt.", MeinName(playerid));
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], FS_COL_YELLOW, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], FS_COL_YELLOW, stringx);
				    format(stringx, sizeof(stringx), ">>> Fight <<< | Die %s bekommen einen Gangfightpunkt.", GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], FS_COL_YELLOW, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], FS_COL_YELLOW, stringx);
				}
				else if(FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)) {
					FightSystem[TempZone][fsKillsOfOwner]++;
				    format(stringx, sizeof(stringx), ">>> Fight <<< | %s hat sich mit Low HP im Gangfight ausgeloggt.", MeinName(playerid));
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], FS_COL_YELLOW, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], FS_COL_YELLOW, stringx);
				    format(stringx, sizeof(stringx), ">>> Fight <<< | Die %s bekommen einen Gangfightpunkt.", GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], FS_COL_YELLOW, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], FS_COL_YELLOW, stringx);
				}
			}
	        if(FightSystem[fs][fsCTF][0] != -255 && FightSystem[fs][fsCTF][0] == playerid){
                new fsName[MAX_PLAYER_NAME];
    			GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
    			new fsText[128];
	            format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
	            for(new i;i<MAX_PLAYERS;i++){
	            	if(IsPlayerConnected(i)){
	                	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
							PlayerPlaySound(i,1058,0.0,0.0,0.0);
							SendClientMessage(i,FS_COL_YELLOW,fsText);
						}
					}
				}
	            FightSystem[fs][fsCTF][0] = -255;
	            FightSystem[fs][fsCTF][1] = 0;
	            FightSystem[fs][fsCTF][2] = 0;
	        }
	    	if(GetPVarInt(playerid,"Spawned")==1){
	        	GangZoneStopFlashForPlayer(playerid,FightSystem[fs][fsZoneID]);
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
					TextDrawHideForPlayer(playerid,Fight);
	        	    TextDrawHideForPlayer(playerid,FightUnderline);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}GangZoneHideForPlayer(playerid,FightSystem[fs][fsZoneID]);
	}DeletePVar(playerid,"Spawned");
	return 1;
}
forward GW_OnPlayerSpawn(playerid);
public GW_OnPlayerSpawn(playerid){
	if(GetPVarInt(playerid,"Spawned")==0){
	    SetPVarInt(playerid,"Spawned",1);
		for(new fs;fs<sizeof(FightSystem);fs++){
		    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
	        	GangZoneFlashForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
	        	    TextDrawShowForPlayer(playerid,Fight);
	        	    TextDrawShowForPlayer(playerid,FightUnderline);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}
	}return 1;
}
forward GW_OnPlayerDeath(playerid, killerid, reason);
public GW_OnPlayerDeath(playerid, killerid, reason){
	if(IsPlayerConnected(killerid)){
		if(IsAFightFaction(GetPlayerFaction(killerid))){
	    	new TempZone = GetPlayerFightzone(killerid);
	    	if(TempZone != -255){
	        	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	            	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid)){
     	        		if(IsAFightFaction(GetPlayerFaction(playerid))){
     	        		    new fsText[64];
   	            			if(FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid)){
						  		PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
                    			FightSystem[TempZone][fsKillsOfAttack]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
           					}
	            	        else if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
								PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
                    			FightSystem[TempZone][fsKillsOfOwner]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
	            	        }
	            	    }
	            	}
	        	}
	    	}
		}
	}
	if(IsAFightFaction(GetPlayerFaction(playerid))){
       	new TempZone = GetPlayerFightzone(playerid);
		if(TempZone != -255){
	    	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	        	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
			    	if(FightSystem[TempZone][fsCTF][0] == playerid){
					    new fsName[MAX_PLAYER_NAME];
					    GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
					    new fsText[128];
			        	format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern.",fsName);
   						for(new i;i<MAX_PLAYERS;i++){
   						    if(IsPlayerConnected(i)){
	                    		if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction]){
									PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,FS_COL_YELLOW,fsText);
								}
							}
						}
			        	FightSystem[TempZone][fsCTF][0] = -255;
  						FightSystem[TempZone][fsCTF][1] = 0;
       					FightSystem[TempZone][fsCTF][2] = 0;
			  	  	}
				}
	    	}
		}
	}return 1;
}
/*
public FightUpdate_1(){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255){
	        new fsText[128];
	        if(FightSystem[fs][fsCTF][0] != -255){
	            if(IsPlayerConnected(FightSystem[fs][fsCTF][0])){
	                if(IsPlayerInRangeOfPoint(FightSystem[fs][fsCTF][0],5.0,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz])){
	                    FightSystem[fs][fsCTF][2] = 0;
	                    FightSystem[fs][fsCTF][1]++;
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~w~Bonus in:~n~~r~%d ~w~Sekunden",(60-FightSystem[fs][fsCTF][1]));
						GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    if(FightSystem[fs][fsCTF][1] >= 60){
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
							FightSystem[fs][fsCTF][1] = 0;
							format(fsText,sizeof(fsText),">>> Fight <<< | %s hat die Flagge erobert!",fsName);
							for(new i;i<MAX_PLAYERS;i++){
							    if(IsPlayerConnected(i)){
       								if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
                                    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
										SendClientMessage(i,FS_COL_YELLOW,fsText);
									}
								}
							}
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsOwnerFaction])
							    FightSystem[fs][fsKillsOfOwner]++;
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsAttackFaction])
								FightSystem[fs][fsKillsOfAttack]++;
                    		if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
                    	    	format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}
                    		else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
                        		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}else{
                    		    format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}FightSystem[fs][fsCTF][0] = -255;
						}
	                }else{
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~r~Erobere die Flagge!~n~~b~%d Sekunden",(10-FightSystem[fs][fsCTF][2]));
	                    GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    FightSystem[fs][fsCTF][2]++;
	                    if(FightSystem[fs][fsCTF][2] >= 10){
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
	                        format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
	                        for(new i;i<MAX_PLAYERS;i++){
	                            if(IsPlayerConnected(i)){
	                        		if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
								    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
								    	SendClientMessage(i,FS_COL_YELLOW,fsText);
	                            	}
								}
	                        }
	                        FightSystem[fs][fsCTF][0] = -255;
	                		FightSystem[fs][fsCTF][1] = 0;
	                		FightSystem[fs][fsCTF][2] = 0;
	                    }
	                }
	            }else{
	                FightSystem[fs][fsCTF][0] = -255;
	                FightSystem[fs][fsCTF][1] = 0;
	                FightSystem[fs][fsCTF][2] = 0;
	            }
	        }
	    }
	}return 1;
}
public FightUpdate_2(){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime]){
	        FightSystem[fs][fsFightTime]--;
	        new fsText[64];
	        format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
			if(!FightSystem[fs][fsFightTime]){
			    FightSystem[fs][fsLastFight] = 0;
			    new fsTextToOwner[255];
			    new fsTextToAttack[255];
			    new fsType;
				if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
				    fsType = 2;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt gewonnen...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt verloren...");
				}
				else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
	   				fsType = 3;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt verloren...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt gewonnen...");
				}else{
				    fsType = 1;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Unentschieden, ihr behaltet euer gebiet.");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Unentschieden, ihr müsst euch mehr antrengen.");
				}
				for(new i;i<MAX_PLAYERS;i++){
					if(IsPlayerConnected(i)){
						GangZoneStopFlashForPlayer(i,FightSystem[fs][fsZoneID]);
				    	if(fsType == 3){
				    		GangZoneHideForPlayer(i,FightSystem[fs][fsZoneID]);
				        	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        			}
				    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction]){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
			            	if(fsType == 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
						else if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
					    	PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
			            	if(fsType != 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
	    			}
				}
	    		FightSystem[fs][fsKillsOfAttack] = 0;
				FightSystem[fs][fsKillsOfOwner] = 0;
				if(fsType == 3)
					FightSystem[fs][fsOwnerFaction] = FightSystem[fs][fsAttackFaction];
                FightSystem[fs][fsAttackFaction] = -255;
				FightSystem[fs][fsCTF][0] = -255;
			}
		}
		if(FightSystem[fs][fsLastFight])
 			FightSystem[fs][fsLastFight]--;
  	}return 1;
}
public Fight_Init(){
	Fight = TextDrawCreate(88.000000,244.000000,"Fight:~n~_~n~_~n~_~n~_~n~_");
	TextDrawUseBox(Fight,1);
	TextDrawBoxColor(Fight,0x00000066);
	TextDrawTextSize(Fight,102.000000,124.000000);
	TextDrawAlignment(Fight,2);
	TextDrawBackgroundColor(Fight,0xff000033);
	TextDrawFont(Fight,2);
	TextDrawLetterSize(Fight,0.499999,1.000000);
	TextDrawColor(Fight,0xffffffff);
	TextDrawSetOutline(Fight,1);
	TextDrawSetProportional(Fight,1);
	FightUnderline = TextDrawCreate(91.000000,274.000000,".");
	TextDrawAlignment(FightUnderline,2);
	TextDrawBackgroundColor(FightUnderline,0x000000ff);
	TextDrawFont(FightUnderline,3);
	TextDrawLetterSize(FightUnderline,14.799997,1.000000);
	TextDrawColor(FightUnderline,0xffffffff);
	TextDrawSetProportional(FightUnderline,1);
	TextDrawSetShadow(FightUnderline,1);
	if(!fexist("Fightzones.cfg")){
		new File:fFile=fopen("Fightzones.cfg",io_write);
		for(new fs;fs<sizeof(FightSystem);fs++)
		    fwrite(fFile,"-255 -255 0 0 0\r\n");
	    fclose(fFile);
	}
	new File:fFile=fopen("Fightzones.cfg",io_read),Content[64],fs;
	while(fread(fFile,Content) && fs < sizeof(FightSystem)){
	    FightSystem[fs][fsWinFaction] = TextDrawCreate(26.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinFaction],1);
		TextDrawAlignment(FightSystem[fs][fsWinFaction],0);
		TextDrawBackgroundColor(FightSystem[fs][fsWinFaction],0x000000ff);
		TextDrawFont(FightSystem[fs][fsWinFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsWinFaction],0.199999,1.000000);
		TextDrawColor(FightSystem[fs][fsWinFaction],0xffffffff);
		TextDrawSetOutline(FightSystem[fs][fsWinFaction],1);
		FightSystem[fs][fsLoseFaction] = TextDrawCreate(26.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseFaction],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseFaction],1);
		TextDrawColor(FightSystem[fs][fsLoseFaction],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseFaction],0.199999,0.899999);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseFaction],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseFaction],0);
		FightSystem[fs][fsWinKills] = TextDrawCreate(107.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinKills],1);
		TextDrawSetOutline(FightSystem[fs][fsWinKills],1);
		TextDrawColor(FightSystem[fs][fsWinKills],0xffffffff);
		TextDrawSetShadow(FightSystem[fs][fsWinKills],1);
		TextDrawFont(FightSystem[fs][fsWinKills],2);
		TextDrawLetterSize(FightSystem[fs][fsWinKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsWinKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsWinKills],0);
		FightSystem[fs][fsLoseKills] = TextDrawCreate(107.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseKills],1);
		TextDrawSetShadow(FightSystem[fs][fsLoseKills],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseKills],1);
		TextDrawColor(FightSystem[fs][fsLoseKills],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseKills],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseKills],0);
		FightSystem[fs][fsTime] = TextDrawCreate(26.000000,286.000000," ");
		TextDrawColor(FightSystem[fs][fsTime],0xffffffff);
		TextDrawAlignment(FightSystem[fs][fsTime],0);
		TextDrawBackgroundColor(FightSystem[fs][fsTime],0x000000ff);
		TextDrawFont(FightSystem[fs][fsTime],2);
		TextDrawLetterSize(FightSystem[fs][fsTime],0.199999,0.899999);
		TextDrawSetProportional(FightSystem[fs][fsTime],1);
		StripNewLine(Content);
		sscanf(Content,"ddddd",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime]);
        FightSystem[fs][fsCTF][0] = -255;
	    FightSystem[fs][fsCTF][1] = 0;
	    FightSystem[fs][fsCTF][2] = 0;
	    FightSystem[fs][fsLastFight] = 0;
	    FightSystem[fs][fsZoneID] = GangZoneCreate(FightSystem[fs][fsMinX],FightSystem[fs][fsMinY],FightSystem[fs][fsMaxX],FightSystem[fs][fsMaxY]);
		FightSystem[fs][fsFlag] = CreatePickup(1314,1,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz],-1);
		if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255){
		    new fsText[64];
		    format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
		    if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
 				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
  			}
  			else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
  				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}else{
    			format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
           	}
		}
		for(new i;i<MAX_PLAYERS;i++){
		    if(IsPlayerConnected(i)){
		    	SetPVarInt(i,"Spawned",1);
		    	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
		    	if(FightSystem[fs][fsAttackFaction] && FightSystem[fs][fsFightTime]){
		        	GangZoneFlashForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
					if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction] || GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction]){
				    	TextDrawShowForPlayer(i,Fight);
	        	    	TextDrawShowForPlayer(i,FightUnderline);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsTime]);
					}
				}
			}
		}
		fs++;
	}
	fclose(fFile);
	FightTimer[0] = SetTimer("FightUpdate_1",1003,true);
	FightTimer[1] = SetTimer("FightUpdate_2",60017,true);
	return 1;
}
public Fight_Close(){
    KillTimer(FightTimer[0]);
	KillTimer(FightTimer[1]);
	if(fexist("Fightzones.cfg")) fremove("Fightzones.cfg");
	new File:fFile=fopen("Fightzones.cfg",io_append),Content[64];
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
            GangZoneStopFlashForAll(FightSystem[fs][fsZoneID]);
			for(new i;i<MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
					DeletePVar(i,"Spawned");
			    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
			        	TextDrawHideForPlayer(i,Fight);
			        	TextDrawHideForPlayer(i,FightUnderline);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			    	}
				}
			}
		}
		TextDrawDestroy(FightSystem[fs][fsWinFaction]);
		TextDrawDestroy(FightSystem[fs][fsLoseFaction]);
		TextDrawDestroy(FightSystem[fs][fsWinKills]);
		TextDrawDestroy(FightSystem[fs][fsLoseKills]);
		TextDrawDestroy(FightSystem[fs][fsTime]);
		GangZoneHideForAll(FightSystem[fs][fsZoneID]);
        GangZoneDestroy(FightSystem[fs][fsZoneID]);
        DestroyPickup(FightSystem[fs][fsFlag]);
        format(Content,sizeof(Content),"%d %d %d %d %d\r\n",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime]);
		fwrite(fFile,Content);
	}
	fclose(fFile);
	TextDrawDestroy(Fight);
	TextDrawDestroy(FightUnderline);
	return 1;
}
stock GetPlayerFightzone(playerid){
	new Float:GangZone[3];
	GetPlayerPos(playerid,GangZone[0],GangZone[1],GangZone[2]);
	for(new fs;fs<sizeof(FightSystem);fs++){
    	if((GangZone[0] >= FightSystem[fs][fsMinX] && GangZone[0] <= FightSystem[fs][fsMaxX]) && (GangZone[1] >= FightSystem[fs][fsMinY] && GangZone[1] <= FightSystem[fs][fsMaxY]) && GangZone[2] <= 500)
			return fs;
	}return -255;
}
stock IsAFightFaction(Faction){
	if((Faction == 5 || Faction == 6) || (Faction >= 13 && Faction <= 17) || Faction == 22)
	    return 1;
	return 0;
}
stock GetZoneColorOfFaction(Faction){
	if(Faction == 5) return 0x00000095; // L.C.N
	else if(Faction == 6) return 0x9D9D9D95; // Yakuza
	else if(Faction == 13) return 0x00800095; // G.S.F
	else if(Faction == 14) return 0x80008095; // Ballas
	else if(Faction == 15) return 0xFF000095; // Red Soldiers
	else if(Faction == 16) return 0xFFFF0095; // Vagos
	else if(Faction == 17) return 0x0080FF95; // Atzecas
	else if(Faction == 22) return 0x0000E196; // Triaden
	else return 0xFFFFFF77; // NoN-Gang
}
stock GetFactionNameOfFaction(Faction){
	new FactionName[64];
	if(Faction == 5) format(FactionName,sizeof(FactionName),"L.C.N");
	else if(Faction == 6) format(FactionName,sizeof(FactionName),"Yakuza");
	else if(Faction == 13) format(FactionName,sizeof(FactionName),"G.S.F");
	else if(Faction == 14) format(FactionName,sizeof(FactionName),"Ballas");
	else if(Faction == 15) format(FactionName,sizeof(FactionName),"Red Soldiers");
	else if(Faction == 16) format(FactionName,sizeof(FactionName),"Vagos");
	else if(Faction == 17) format(FactionName,sizeof(FactionName),"Aztekas");
	else if(Faction == 22) format(FactionName,sizeof(FactionName),"Triaden");
	else format(FactionName,sizeof(FactionName),"NoN-Gang");
	return FactionName;
}
stock GetPlayerFaction(playerid){
	new Member = GetPlayerMember(playerid);
	if(Member)
	    return Member;
	new Leader = GetPlayerLeader(playerid);
	if(Leader)
	    return Leader;
	return 0;
}
*/

//=====================================================================================================

Function ShowConInfo()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pMeldung] == 0)
		{
			TextDrawShowForPlayer(i,TdHeadline);
			TextDrawShowForPlayer(i,TdHGinfo);
			TextDrawShowForPlayer(i,TdSpielerName);
			TextDrawShowForPlayer(i,TdNachricht);
			TextDrawShowForPlayer(i,TdTrennung);
			if(PlayerInfo[i][pAdmin] > 0)
			{
				TextDrawShowForPlayer(i,TdSpielerIP);
				TextDrawShowForPlayer(i,TdSpielerPing);
			}
		}
	}
}

Function HideConInfo()
{
	TextDrawHideForAll(TdHeadline);
	TextDrawHideForAll(TdHGinfo);
	TextDrawHideForAll(TdSpielerName);
	TextDrawHideForAll(TdNachricht);
	TextDrawHideForAll(TdTrennung);
	TextDrawHideForAll(TdSpielerIP);
	TextDrawHideForAll(TdSpielerPing);
}

Function ShowDiscInfo()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pMeldung] == 0)
		{
			//TextDrawShowForPlayer(i,DiscHeadline);
			TextDrawShowForPlayer(i,DiscHGinfo);
			TextDrawShowForPlayer(i,TdSpielerName);
			TextDrawShowForPlayer(i,TdNachricht);
		}
	}
}

Function HideDiscInfo()
{
	TextDrawHideForAll(DiscHeadline);
	TextDrawHideForAll(DiscHGinfo);
	TextDrawHideForAll(DiscSpielerName);
	TextDrawHideForAll(DiscNachricht);
}

Function Update3d()
{
	new a[500];
	for(new t=0;t<sizeof(TankeInfo); t++)
	{
	    if(TankeInfo[t][tOwned] == 0)
     	{
	        format(a, sizeof(a), "%s\nDiese Tankstelle steht zum verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um dir die Tankstelle zu kaufen",TankeInfo[t][tMessage],TankeInfo[t][tBuyPrice],TankeInfo[t][tLevelNeeded]);
			Update3DTextLabelText(text_tanke[t],0xFFFFFFAA,a);
      	}
       	else
       	{
            format(a, sizeof(a), "%s\nInhaber: %s\nTeilhaber: %s\nPreis pro Liter: $%d \nLevel: %d",TankeInfo[t][tMessage],TankeInfo[t][tOwner],TankeInfo[t][tExtortion],TankeInfo[t][tEntranceCost],TankeInfo[t][tLevelNeeded]);
            Update3DTextLabelText(text_tanke[t],0xFFFFFFAA,a);
       	}
   	}
   	return 1;
}

Function LoadTanke()
{
	new arrCoords[16][64];
	new strFromFile2[256];
	new File: file = fopen("fuelstations.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(TankeInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			TankeInfo[idx][tOwned] = strval(arrCoords[0]);
			strmid(TankeInfo[idx][tOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(TankeInfo[idx][tMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(TankeInfo[idx][tExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			TankeInfo[idx][tEntranceX] = floatstr(arrCoords[4]);
			TankeInfo[idx][tEntranceY] = floatstr(arrCoords[5]);
			TankeInfo[idx][tEntranceZ] = floatstr(arrCoords[6]);
			TankeInfo[idx][tLevelNeeded] = strval(arrCoords[7]);
			TankeInfo[idx][tBuyPrice] = strval(arrCoords[8]);
			TankeInfo[idx][tEntranceCost] = strval(arrCoords[9]);
			TankeInfo[idx][tTill] = strval(arrCoords[10]);
			TankeInfo[idx][tLocked] = strval(arrCoords[11]);
			TankeInfo[idx][tInterior] = strval(arrCoords[12]);
			TankeInfo[idx][tProducts] = strval(arrCoords[13]);
			TankeInfo[idx][tMaxProducts] = strval(arrCoords[14]);
			TankeInfo[idx][tPriceProd] = strval(arrCoords[15]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

Function IstInGangFight(playerid)
{
   	new TempZone = GetPlayerFightzone(playerid);
   	if(TempZone != -255){ // In Zone
       	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){ // Wenn Gegner nicht gleich -255 ist
       	    return 1;
       	}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsACop(forplayerid) && WantedLevel[playerid] >= 1)
	{
       	format(stringx, sizeof(stringx), "-= %s =- \n -= Wantedlevel: %d =-", MeinName(playerid), WantedLevel[playerid]);
		WantedLabel[playerid] = CreatePlayer3DTextLabel(forplayerid, stringx, 0xC50000FF,0.0,0.0,0.5, 30.0, playerid,INVALID_VEHICLE_ID, 0);
	}
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	DeletePlayer3DTextLabel(forplayerid, WantedLabel[playerid]);
    return 1;
}


public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        printf("FAILED RCON LOGIN BY IP %s USING PASSWORD %s",ip, password);
        new pip[16];
        for(new i=0; i<MAX_PLAYERS; i++) //Loop through all players
        {
			if(PlayerInfo[i][pAdmin] >= 2000) { }
			else {
		        GetPlayerIp(i, pip, sizeof(pip));
	            if(!strcmp(ip, pip, true)) //If a player's IP is the IP that failed the login
	            {
	                SendClientMessage(i, 0xFFFFFFFF, "Das ist nur für Admins! Pech gehabt du Fischbaguette!"); //Send a message
	                PlayerInfo[i][pGesperrt] = 1;
	                Kick(i);
	            }
            }
        }
    }
    return 1;
}

public OnPlayerUpdate(playerid)
{
        if(Desktop_Timer_Started[playerid] == 0)
        {
            Desktop_Timer[playerid] = SetTimerEx("Desktop_Function",1000,1,"d",playerid);
            Desktop_Timer_Started[playerid] = 1;
        }
        Desktop_Check[playerid] += 1;
        return 1;
}

/*Function Desktop_Function(playerid)
{
        if(Desktop_Check[playerid] > 0) { Desktop_Status[playerid] = 0; }
        if(Desktop_Check[playerid] <= 0) { Desktop_Status[playerid] +=1; }
        Desktop_Check[playerid] = 0;
        if(Desktop_Status[playerid] >= MAX_DESKTOP_TIME)
        {
            new string[128],playername[MAX_PLAYER_NAME];
            GetPlayerName(playerid,playername,sizeof(playername));
            format(string,sizeof(string),"[ANTI-DESKTOP] %s wurde gekickt vom Anti-Desktop-System.(>%d Sek.)",playername,MAX_DESKTOP_TIME);
			ProxDetector(20.0, playerid, string, COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
            //SendClientMessageToAll(0xFF6347AA,string);
            Kick(playerid);
        }
        return 1;
}*/

